{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Luna SDK Docs Welcome to Luna SDK Documentation Site.","title":"Home"},{"location":"#luna-sdk-docs","text":"Welcome to Luna SDK Documentation Site.","title":"Luna SDK Docs"},{"location":"license/","text":"License Luna SDK is licensed under the zlib/libpng license. Here is a copy of the full text of the license: Copyright (c) 2018-2023 Jixiang Zhou (JXMaster) The software is supplied \"as is\", without warranty of any kind, express or implied, including, without limitation, the warranties of merchantability, fitness for a particular purpose, title, and non-infringement. In no event shall the Copyright owners, or anyone distributing the software, be liable for any damages or other liability, whether in contract, tort or otherwise, arising from, out of, or in connection with the software, or the use or other dealings in the software, even if advised of the possibility of such damage. Permission is hereby granted to use, copy, modify, and distribute this software, or portions hereof, for any purpose, without fee, subject to the following restrictions: The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated, but is not required. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software. This Copyright notice may not be removed or altered from any source or altered source distribution.","title":"License"},{"location":"license/#license","text":"Luna SDK is licensed under the zlib/libpng license. Here is a copy of the full text of the license: Copyright (c) 2018-2023 Jixiang Zhou (JXMaster) The software is supplied \"as is\", without warranty of any kind, express or implied, including, without limitation, the warranties of merchantability, fitness for a particular purpose, title, and non-infringement. In no event shall the Copyright owners, or anyone distributing the software, be liable for any damages or other liability, whether in contract, tort or otherwise, arising from, out of, or in connection with the software, or the use or other dealings in the software, even if advised of the possibility of such damage. Permission is hereby granted to use, copy, modify, and distribute this software, or portions hereof, for any purpose, without fee, subject to the following restrictions: The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated, but is not required. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software. This Copyright notice may not be removed or altered from any source or altered source distribution.","title":"License"},{"location":"api/class_luna_1_1_allocator/","text":"Luna::Allocator The default allocator implementation that can be used for allocating memory for containers defined in Runtime module. class Luna::Allocator Overview The default allocator allocates memory by calling memalloc, and deallocates memory by calling memfree. Functions _Ty * allocate(usize n=1) Allocates memory for the specified number of elements. void deallocate(_Ty *ptr, usize n=1) Deallocates memory allocated from allocate.","title":"Luna::Allocator"},{"location":"api/class_luna_1_1_allocator/#lunaallocator","text":"The default allocator implementation that can be used for allocating memory for containers defined in Runtime module. class Luna::Allocator","title":"Luna::Allocator"},{"location":"api/class_luna_1_1_allocator/#overview","text":"The default allocator allocates memory by calling memalloc, and deallocates memory by calling memfree.","title":"Overview"},{"location":"api/class_luna_1_1_allocator/#functions","text":"_Ty * allocate(usize n=1) Allocates memory for the specified number of elements. void deallocate(_Ty *ptr, usize n=1) Deallocates memory allocated from allocate.","title":"Functions"},{"location":"api/class_luna_1_1_allocator_1a36cada72231a020cb53784c2fadba635/","text":"Luna::Allocator::deallocate template <typename _Ty> void deallocate(_Ty *ptr, usize n=1) Deallocates memory allocated from allocate. Overview Parameters ptr The memory pointer returned by allocate. n The number of elements earler passed to allocate.","title":"Luna::Allocator::deallocate"},{"location":"api/class_luna_1_1_allocator_1a36cada72231a020cb53784c2fadba635/#lunaallocatordeallocate","text":"template <typename _Ty> void deallocate(_Ty *ptr, usize n=1) Deallocates memory allocated from allocate.","title":"Luna::Allocator::deallocate"},{"location":"api/class_luna_1_1_allocator_1a36cada72231a020cb53784c2fadba635/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_allocator_1a36cada72231a020cb53784c2fadba635/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_allocator_1a36cada72231a020cb53784c2fadba635/#ptr","text":"The memory pointer returned by allocate.","title":"ptr"},{"location":"api/class_luna_1_1_allocator_1a36cada72231a020cb53784c2fadba635/#n","text":"The number of elements earler passed to allocate.","title":"n"},{"location":"api/class_luna_1_1_allocator_1a8ed50dd7b8971bd8e18ed3a2d7dea9d1/","text":"Luna::Allocator::allocate template <typename _Ty> _Ty * allocate(usize n=1) Allocates memory for the specified number of elements. Overview Parameters n The number of elements to allocate memory for. Return value Returns the allocated memory. The size of the allocated memory is at least sizeof(_Ty) * n bytes, and the alignment of the allocated memory is at least alignof(_Ty) bytes. The returned memory is uninitialized. If the allocation fails, returns nullptr .","title":"Luna::Allocator::allocate"},{"location":"api/class_luna_1_1_allocator_1a8ed50dd7b8971bd8e18ed3a2d7dea9d1/#lunaallocatorallocate","text":"template <typename _Ty> _Ty * allocate(usize n=1) Allocates memory for the specified number of elements.","title":"Luna::Allocator::allocate"},{"location":"api/class_luna_1_1_allocator_1a8ed50dd7b8971bd8e18ed3a2d7dea9d1/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_allocator_1a8ed50dd7b8971bd8e18ed3a2d7dea9d1/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_allocator_1a8ed50dd7b8971bd8e18ed3a2d7dea9d1/#n","text":"The number of elements to allocate memory for.","title":"n"},{"location":"api/class_luna_1_1_allocator_1a8ed50dd7b8971bd8e18ed3a2d7dea9d1/#return-value","text":"Returns the allocated memory. The size of the allocated memory is at least sizeof(_Ty) * n bytes, and the alignment of the allocated memory is at least alignof(_Ty) bytes. The returned memory is uninitialized. If the allocation fails, returns nullptr .","title":"Return value"},{"location":"api/class_luna_1_1_array/","text":"Luna::Array Represents one array of fixed or dynamic size. class Luna::Array Overview Array is one container that contains fixed number of elements. The size of one array can be set in compile time by specifying _Size of the array, or can be set when creating the array by setting _Size to DYNAMIC_ARRAY_SIZE. Unlike Vector , the size of one array cannot be changed after the array is created. If the size of the array is determined in compile time, the memory for elements will be allocated directly in the array object; if the size of the array is determined in run time, the memory for elements will be allocated dynamically on heap. Functions constexpr reference at(usize pos) Gets a refernece of the element at the specified index. constexpr const_reference at(usize pos) const Gets a const refernece of the element at the specified index. constexpr reference operator[](usize pos) Gets a refernece of the element at the specified index. constexpr const_reference operator[](usize pos) const Gets a constant refernece of the element at the specified index. constexpr reference front() Gets a reference to the first (#0) element in the array. constexpr const_reference front() const Gets a constant reference to the first (#0) element in the array. constexpr reference back() Gets a reference to the last (size - 1) element in the array. constexpr const_reference back() const Gets a reference to the last (size - 1) element in the array. constexpr _Ty * data() Gets one pointer to the array data memory. constexpr const _Ty * data() const Gets one constant pointer to the array data memory. constexpr iterator begin() Gets one iterator pointing to the first element of the array. constexpr const_iterator begin() const Gets one constant iterator pointing to the first element of the array. constexpr const_iterator cbegin() const Gets one constant iterator pointing to the first element of the array. constexpr iterator end() Gets one iterator pointing to the one past last element of the array. constexpr const_iterator end() const Gets one constant iterator pointing to the one past last element of the array. constexpr const_iterator cend() const Gets one constant iterator pointing to the one past last element of the array. constexpr reverse_iterator rbegin() Gets one reverse iterator pointing to the last element of the array. constexpr const_reverse_iterator rbegin() const Gets one constant reverse iterator pointing to the last element of the array. constexpr const_reverse_iterator crbegin() const Gets one constant reverse iterator pointing to the last element of the array. constexpr reverse_iterator rend() Gets one reverse iterator pointing to the one-before-first element of the array. constexpr const_reverse_iterator rend() const Gets one constant reverse iterator pointing to the one-before-first element of the array. constexpr const_reverse_iterator crend() const Gets one constant reverse iterator pointing to the one-before-first element of the array. constexpr bool empty() const Checks whether this array is empty, that is, the size of this array is 0 . constexpr usize size() const Gets the size of the array. constexpr void fill(const _Ty &value) Assigns every element in the array with the specified value. constexpr void swap(Array &rhs) Swaps content of this array with another array of the same element type and size.","title":"Luna::Array"},{"location":"api/class_luna_1_1_array/#lunaarray","text":"Represents one array of fixed or dynamic size. class Luna::Array","title":"Luna::Array"},{"location":"api/class_luna_1_1_array/#overview","text":"Array is one container that contains fixed number of elements. The size of one array can be set in compile time by specifying _Size of the array, or can be set when creating the array by setting _Size to DYNAMIC_ARRAY_SIZE. Unlike Vector , the size of one array cannot be changed after the array is created. If the size of the array is determined in compile time, the memory for elements will be allocated directly in the array object; if the size of the array is determined in run time, the memory for elements will be allocated dynamically on heap.","title":"Overview"},{"location":"api/class_luna_1_1_array/#functions","text":"constexpr reference at(usize pos) Gets a refernece of the element at the specified index. constexpr const_reference at(usize pos) const Gets a const refernece of the element at the specified index. constexpr reference operator[](usize pos) Gets a refernece of the element at the specified index. constexpr const_reference operator[](usize pos) const Gets a constant refernece of the element at the specified index. constexpr reference front() Gets a reference to the first (#0) element in the array. constexpr const_reference front() const Gets a constant reference to the first (#0) element in the array. constexpr reference back() Gets a reference to the last (size - 1) element in the array. constexpr const_reference back() const Gets a reference to the last (size - 1) element in the array. constexpr _Ty * data() Gets one pointer to the array data memory. constexpr const _Ty * data() const Gets one constant pointer to the array data memory. constexpr iterator begin() Gets one iterator pointing to the first element of the array. constexpr const_iterator begin() const Gets one constant iterator pointing to the first element of the array. constexpr const_iterator cbegin() const Gets one constant iterator pointing to the first element of the array. constexpr iterator end() Gets one iterator pointing to the one past last element of the array. constexpr const_iterator end() const Gets one constant iterator pointing to the one past last element of the array. constexpr const_iterator cend() const Gets one constant iterator pointing to the one past last element of the array. constexpr reverse_iterator rbegin() Gets one reverse iterator pointing to the last element of the array. constexpr const_reverse_iterator rbegin() const Gets one constant reverse iterator pointing to the last element of the array. constexpr const_reverse_iterator crbegin() const Gets one constant reverse iterator pointing to the last element of the array. constexpr reverse_iterator rend() Gets one reverse iterator pointing to the one-before-first element of the array. constexpr const_reverse_iterator rend() const Gets one constant reverse iterator pointing to the one-before-first element of the array. constexpr const_reverse_iterator crend() const Gets one constant reverse iterator pointing to the one-before-first element of the array. constexpr bool empty() const Checks whether this array is empty, that is, the size of this array is 0 . constexpr usize size() const Gets the size of the array. constexpr void fill(const _Ty &value) Assigns every element in the array with the specified value. constexpr void swap(Array &rhs) Swaps content of this array with another array of the same element type and size.","title":"Functions"},{"location":"api/class_luna_1_1_array_1a098840b38d4f639ee9f69cf026be323c/","text":"Luna::Array::cbegin constexpr const_iterator cbegin() const Gets one constant iterator pointing to the first element of the array. Overview Return value Returns one constant iterator pointing to the first element of the array.","title":"Luna::Array::cbegin"},{"location":"api/class_luna_1_1_array_1a098840b38d4f639ee9f69cf026be323c/#lunaarraycbegin","text":"constexpr const_iterator cbegin() const Gets one constant iterator pointing to the first element of the array.","title":"Luna::Array::cbegin"},{"location":"api/class_luna_1_1_array_1a098840b38d4f639ee9f69cf026be323c/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1a098840b38d4f639ee9f69cf026be323c/#return-value","text":"Returns one constant iterator pointing to the first element of the array.","title":"Return value"},{"location":"api/class_luna_1_1_array_1a0c080710404cf54608566718e135ed4e/","text":"Luna::Array::crbegin constexpr const_reverse_iterator crbegin() const Gets one constant reverse iterator pointing to the last element of the array. Overview Return value Returns one constant reverse iterator pointing to the last element of the array.","title":"Luna::Array::crbegin"},{"location":"api/class_luna_1_1_array_1a0c080710404cf54608566718e135ed4e/#lunaarraycrbegin","text":"constexpr const_reverse_iterator crbegin() const Gets one constant reverse iterator pointing to the last element of the array.","title":"Luna::Array::crbegin"},{"location":"api/class_luna_1_1_array_1a0c080710404cf54608566718e135ed4e/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1a0c080710404cf54608566718e135ed4e/#return-value","text":"Returns one constant reverse iterator pointing to the last element of the array.","title":"Return value"},{"location":"api/class_luna_1_1_array_1a0d2f4af381faa34ace382c87aeed32e3/","text":"Luna::Array::front constexpr const_reference front() const Gets a constant reference to the first (#0) element in the array. Overview Return value Returns a constant reference to the first element in the array.","title":"Luna::Array::front"},{"location":"api/class_luna_1_1_array_1a0d2f4af381faa34ace382c87aeed32e3/#lunaarrayfront","text":"constexpr const_reference front() const Gets a constant reference to the first (#0) element in the array.","title":"Luna::Array::front"},{"location":"api/class_luna_1_1_array_1a0d2f4af381faa34ace382c87aeed32e3/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1a0d2f4af381faa34ace382c87aeed32e3/#return-value","text":"Returns a constant reference to the first element in the array.","title":"Return value"},{"location":"api/class_luna_1_1_array_1a20a48cfbeb064093c00708b233c17883/","text":"Luna::Array::back constexpr const_reference back() const Gets a reference to the last (size - 1) element in the array. Overview Return value Returns a reference to the first element in the array.","title":"Luna::Array::back"},{"location":"api/class_luna_1_1_array_1a20a48cfbeb064093c00708b233c17883/#lunaarrayback","text":"constexpr const_reference back() const Gets a reference to the last (size - 1) element in the array.","title":"Luna::Array::back"},{"location":"api/class_luna_1_1_array_1a20a48cfbeb064093c00708b233c17883/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1a20a48cfbeb064093c00708b233c17883/#return-value","text":"Returns a reference to the first element in the array.","title":"Return value"},{"location":"api/class_luna_1_1_array_1a2f476cf713d1e863951ed725acf89284/","text":"Luna::Array::swap constexpr void swap(Array &rhs) Swaps content of this array with another array of the same element type and size. Overview Parameters rhs The array to swap content with.","title":"Luna::Array::swap"},{"location":"api/class_luna_1_1_array_1a2f476cf713d1e863951ed725acf89284/#lunaarrayswap","text":"constexpr void swap(Array &rhs) Swaps content of this array with another array of the same element type and size.","title":"Luna::Array::swap"},{"location":"api/class_luna_1_1_array_1a2f476cf713d1e863951ed725acf89284/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1a2f476cf713d1e863951ed725acf89284/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_array_1a2f476cf713d1e863951ed725acf89284/#rhs","text":"The array to swap content with.","title":"rhs"},{"location":"api/class_luna_1_1_array_1a2fe69b85aade6c6032f22eb79b1b746d/","text":"Luna::Array::front constexpr reference front() Gets a reference to the first (#0) element in the array. Overview Return value Returns a reference to the first element in the array.","title":"Luna::Array::front"},{"location":"api/class_luna_1_1_array_1a2fe69b85aade6c6032f22eb79b1b746d/#lunaarrayfront","text":"constexpr reference front() Gets a reference to the first (#0) element in the array.","title":"Luna::Array::front"},{"location":"api/class_luna_1_1_array_1a2fe69b85aade6c6032f22eb79b1b746d/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1a2fe69b85aade6c6032f22eb79b1b746d/#return-value","text":"Returns a reference to the first element in the array.","title":"Return value"},{"location":"api/class_luna_1_1_array_1a35220c6806307b7311a170920af27d26/","text":"Luna::Array::rend constexpr reverse_iterator rend() Gets one reverse iterator pointing to the one-before-first element of the array. Overview Return value Returns one reverse iterator pointing to the one-before-first element of the array.","title":"Luna::Array::rend"},{"location":"api/class_luna_1_1_array_1a35220c6806307b7311a170920af27d26/#lunaarrayrend","text":"constexpr reverse_iterator rend() Gets one reverse iterator pointing to the one-before-first element of the array.","title":"Luna::Array::rend"},{"location":"api/class_luna_1_1_array_1a35220c6806307b7311a170920af27d26/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1a35220c6806307b7311a170920af27d26/#return-value","text":"Returns one reverse iterator pointing to the one-before-first element of the array.","title":"Return value"},{"location":"api/class_luna_1_1_array_1a39c2d1119b91eb075fc6d9a5910dbebd/","text":"Luna::Array::fill constexpr void fill(const _Ty &value) Assigns every element in the array with the specified value. Overview Parameters value The value to fill.","title":"Luna::Array::fill"},{"location":"api/class_luna_1_1_array_1a39c2d1119b91eb075fc6d9a5910dbebd/#lunaarrayfill","text":"constexpr void fill(const _Ty &value) Assigns every element in the array with the specified value.","title":"Luna::Array::fill"},{"location":"api/class_luna_1_1_array_1a39c2d1119b91eb075fc6d9a5910dbebd/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1a39c2d1119b91eb075fc6d9a5910dbebd/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_array_1a39c2d1119b91eb075fc6d9a5910dbebd/#value","text":"The value to fill.","title":"value"},{"location":"api/class_luna_1_1_array_1a3c6e58d7002c8e81a78dcd3b59a4e396/","text":"Luna::Array::rbegin constexpr reverse_iterator rbegin() Gets one reverse iterator pointing to the last element of the array. Overview Return value Returns one reverse iterator pointing to the last element of the array.","title":"Luna::Array::rbegin"},{"location":"api/class_luna_1_1_array_1a3c6e58d7002c8e81a78dcd3b59a4e396/#lunaarrayrbegin","text":"constexpr reverse_iterator rbegin() Gets one reverse iterator pointing to the last element of the array.","title":"Luna::Array::rbegin"},{"location":"api/class_luna_1_1_array_1a3c6e58d7002c8e81a78dcd3b59a4e396/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1a3c6e58d7002c8e81a78dcd3b59a4e396/#return-value","text":"Returns one reverse iterator pointing to the last element of the array.","title":"Return value"},{"location":"api/class_luna_1_1_array_1a4246559492a9ac95f5fd5e33e5077cc0/","text":"Luna::Array::at constexpr reference at(usize pos) Gets a refernece of the element at the specified index. Overview Parameters pos The index of the element. Return value Returns a reference of the specified element.","title":"Luna::Array::at"},{"location":"api/class_luna_1_1_array_1a4246559492a9ac95f5fd5e33e5077cc0/#lunaarrayat","text":"constexpr reference at(usize pos) Gets a refernece of the element at the specified index.","title":"Luna::Array::at"},{"location":"api/class_luna_1_1_array_1a4246559492a9ac95f5fd5e33e5077cc0/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1a4246559492a9ac95f5fd5e33e5077cc0/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_array_1a4246559492a9ac95f5fd5e33e5077cc0/#pos","text":"The index of the element.","title":"pos"},{"location":"api/class_luna_1_1_array_1a4246559492a9ac95f5fd5e33e5077cc0/#return-value","text":"Returns a reference of the specified element.","title":"Return value"},{"location":"api/class_luna_1_1_array_1a428cfcc26f33036be7c76ab287ea06c5/","text":"Luna::Array::end constexpr const_iterator end() const Gets one constant iterator pointing to the one past last element of the array. Overview Return value Returns one constant iterator pointing to the one past last element of the array.","title":"Luna::Array::end"},{"location":"api/class_luna_1_1_array_1a428cfcc26f33036be7c76ab287ea06c5/#lunaarrayend","text":"constexpr const_iterator end() const Gets one constant iterator pointing to the one past last element of the array.","title":"Luna::Array::end"},{"location":"api/class_luna_1_1_array_1a428cfcc26f33036be7c76ab287ea06c5/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1a428cfcc26f33036be7c76ab287ea06c5/#return-value","text":"Returns one constant iterator pointing to the one past last element of the array.","title":"Return value"},{"location":"api/class_luna_1_1_array_1a43564d19bdbc133e4a81cc1a2c002254/","text":"Luna::Array::begin constexpr const_iterator begin() const Gets one constant iterator pointing to the first element of the array. Overview Return value Returns one constant iterator pointing to the first element of the array.","title":"Luna::Array::begin"},{"location":"api/class_luna_1_1_array_1a43564d19bdbc133e4a81cc1a2c002254/#lunaarraybegin","text":"constexpr const_iterator begin() const Gets one constant iterator pointing to the first element of the array.","title":"Luna::Array::begin"},{"location":"api/class_luna_1_1_array_1a43564d19bdbc133e4a81cc1a2c002254/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1a43564d19bdbc133e4a81cc1a2c002254/#return-value","text":"Returns one constant iterator pointing to the first element of the array.","title":"Return value"},{"location":"api/class_luna_1_1_array_1a48ec46b8d8158353cf7a248921ea86ab/","text":"Luna::Array::at constexpr const_reference at(usize pos) const Gets a const refernece of the element at the specified index. Overview Parameters pos The index of the element. Return value Returns a const reference of the specified element.","title":"Luna::Array::at"},{"location":"api/class_luna_1_1_array_1a48ec46b8d8158353cf7a248921ea86ab/#lunaarrayat","text":"constexpr const_reference at(usize pos) const Gets a const refernece of the element at the specified index.","title":"Luna::Array::at"},{"location":"api/class_luna_1_1_array_1a48ec46b8d8158353cf7a248921ea86ab/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1a48ec46b8d8158353cf7a248921ea86ab/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_array_1a48ec46b8d8158353cf7a248921ea86ab/#pos","text":"The index of the element.","title":"pos"},{"location":"api/class_luna_1_1_array_1a48ec46b8d8158353cf7a248921ea86ab/#return-value","text":"Returns a const reference of the specified element.","title":"Return value"},{"location":"api/class_luna_1_1_array_1a534b7f2bfb1e389b9e6b6fcb8370f1db/","text":"Luna::Array::operator[] constexpr reference operator[](usize pos) Gets a refernece of the element at the specified index. Overview Parameters pos The index of the element. Return value Returns a reference of the specified element.","title":"Luna::Array::operator[]"},{"location":"api/class_luna_1_1_array_1a534b7f2bfb1e389b9e6b6fcb8370f1db/#lunaarrayoperator","text":"constexpr reference operator[](usize pos) Gets a refernece of the element at the specified index.","title":"Luna::Array::operator[]"},{"location":"api/class_luna_1_1_array_1a534b7f2bfb1e389b9e6b6fcb8370f1db/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1a534b7f2bfb1e389b9e6b6fcb8370f1db/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_array_1a534b7f2bfb1e389b9e6b6fcb8370f1db/#pos","text":"The index of the element.","title":"pos"},{"location":"api/class_luna_1_1_array_1a534b7f2bfb1e389b9e6b6fcb8370f1db/#return-value","text":"Returns a reference of the specified element.","title":"Return value"},{"location":"api/class_luna_1_1_array_1a56951c300ecc03279ad99858d6213449/","text":"Luna::Array::data constexpr const _Ty * data() const Gets one constant pointer to the array data memory. Overview Return value Returns one constant pointer to the array data memory.","title":"Luna::Array::data"},{"location":"api/class_luna_1_1_array_1a56951c300ecc03279ad99858d6213449/#lunaarraydata","text":"constexpr const _Ty * data() const Gets one constant pointer to the array data memory.","title":"Luna::Array::data"},{"location":"api/class_luna_1_1_array_1a56951c300ecc03279ad99858d6213449/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1a56951c300ecc03279ad99858d6213449/#return-value","text":"Returns one constant pointer to the array data memory.","title":"Return value"},{"location":"api/class_luna_1_1_array_1a56d3a1867f42d8f5551c9771bf6ec06f/","text":"Luna::Array::crend constexpr const_reverse_iterator crend() const Gets one constant reverse iterator pointing to the one-before-first element of the array. Overview Return value Returns one constant reverse iterator pointing to the one-before-first element of the array.","title":"Luna::Array::crend"},{"location":"api/class_luna_1_1_array_1a56d3a1867f42d8f5551c9771bf6ec06f/#lunaarraycrend","text":"constexpr const_reverse_iterator crend() const Gets one constant reverse iterator pointing to the one-before-first element of the array.","title":"Luna::Array::crend"},{"location":"api/class_luna_1_1_array_1a56d3a1867f42d8f5551c9771bf6ec06f/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1a56d3a1867f42d8f5551c9771bf6ec06f/#return-value","text":"Returns one constant reverse iterator pointing to the one-before-first element of the array.","title":"Return value"},{"location":"api/class_luna_1_1_array_1a68e95b44627370eea593b039c42e1244/","text":"Luna::Array::rbegin constexpr const_reverse_iterator rbegin() const Gets one constant reverse iterator pointing to the last element of the array. Overview Return value Returns one constant reverse iterator pointing to the last element of the array.","title":"Luna::Array::rbegin"},{"location":"api/class_luna_1_1_array_1a68e95b44627370eea593b039c42e1244/#lunaarrayrbegin","text":"constexpr const_reverse_iterator rbegin() const Gets one constant reverse iterator pointing to the last element of the array.","title":"Luna::Array::rbegin"},{"location":"api/class_luna_1_1_array_1a68e95b44627370eea593b039c42e1244/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1a68e95b44627370eea593b039c42e1244/#return-value","text":"Returns one constant reverse iterator pointing to the last element of the array.","title":"Return value"},{"location":"api/class_luna_1_1_array_1a6e277fde54bd8a8e10e5967deaa68eb1/","text":"Luna::Array::rend constexpr const_reverse_iterator rend() const Gets one constant reverse iterator pointing to the one-before-first element of the array. Overview Return value Returns one constant reverse iterator pointing to the one-before-first element of the array.","title":"Luna::Array::rend"},{"location":"api/class_luna_1_1_array_1a6e277fde54bd8a8e10e5967deaa68eb1/#lunaarrayrend","text":"constexpr const_reverse_iterator rend() const Gets one constant reverse iterator pointing to the one-before-first element of the array.","title":"Luna::Array::rend"},{"location":"api/class_luna_1_1_array_1a6e277fde54bd8a8e10e5967deaa68eb1/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1a6e277fde54bd8a8e10e5967deaa68eb1/#return-value","text":"Returns one constant reverse iterator pointing to the one-before-first element of the array.","title":"Return value"},{"location":"api/class_luna_1_1_array_1a79bf825ddf829c374672530695abc932/","text":"Luna::Array::operator[] constexpr const_reference operator[](usize pos) const Gets a constant refernece of the element at the specified index. Overview Parameters pos The index of the element. Return value Returns a constant reference of the specified element.","title":"Luna::Array::operator[]"},{"location":"api/class_luna_1_1_array_1a79bf825ddf829c374672530695abc932/#lunaarrayoperator","text":"constexpr const_reference operator[](usize pos) const Gets a constant refernece of the element at the specified index.","title":"Luna::Array::operator[]"},{"location":"api/class_luna_1_1_array_1a79bf825ddf829c374672530695abc932/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1a79bf825ddf829c374672530695abc932/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_array_1a79bf825ddf829c374672530695abc932/#pos","text":"The index of the element.","title":"pos"},{"location":"api/class_luna_1_1_array_1a79bf825ddf829c374672530695abc932/#return-value","text":"Returns a constant reference of the specified element.","title":"Return value"},{"location":"api/class_luna_1_1_array_1a82061640a279283f5d16614b196fcd1d/","text":"Luna::Array::begin constexpr iterator begin() Gets one iterator pointing to the first element of the array. Overview Return value Returns one iterator pointing to the first element of the array.","title":"Luna::Array::begin"},{"location":"api/class_luna_1_1_array_1a82061640a279283f5d16614b196fcd1d/#lunaarraybegin","text":"constexpr iterator begin() Gets one iterator pointing to the first element of the array.","title":"Luna::Array::begin"},{"location":"api/class_luna_1_1_array_1a82061640a279283f5d16614b196fcd1d/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1a82061640a279283f5d16614b196fcd1d/#return-value","text":"Returns one iterator pointing to the first element of the array.","title":"Return value"},{"location":"api/class_luna_1_1_array_1aaf0bf16ebc5c8c11cb351557b61e4b9c/","text":"Luna::Array::data constexpr _Ty * data() Gets one pointer to the array data memory. Overview Return value Returns one pointer to the array data memory.","title":"Luna::Array::data"},{"location":"api/class_luna_1_1_array_1aaf0bf16ebc5c8c11cb351557b61e4b9c/#lunaarraydata","text":"constexpr _Ty * data() Gets one pointer to the array data memory.","title":"Luna::Array::data"},{"location":"api/class_luna_1_1_array_1aaf0bf16ebc5c8c11cb351557b61e4b9c/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1aaf0bf16ebc5c8c11cb351557b61e4b9c/#return-value","text":"Returns one pointer to the array data memory.","title":"Return value"},{"location":"api/class_luna_1_1_array_1abee57f5c6cacf03f590795737d18e7e8/","text":"Luna::Array::cend constexpr const_iterator cend() const Gets one constant iterator pointing to the one past last element of the array. Overview Return value Returns one constant iterator pointing to the one past last element of the array.","title":"Luna::Array::cend"},{"location":"api/class_luna_1_1_array_1abee57f5c6cacf03f590795737d18e7e8/#lunaarraycend","text":"constexpr const_iterator cend() const Gets one constant iterator pointing to the one past last element of the array.","title":"Luna::Array::cend"},{"location":"api/class_luna_1_1_array_1abee57f5c6cacf03f590795737d18e7e8/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1abee57f5c6cacf03f590795737d18e7e8/#return-value","text":"Returns one constant iterator pointing to the one past last element of the array.","title":"Return value"},{"location":"api/class_luna_1_1_array_1adb59c183f075f048ae90778d15189686/","text":"Luna::Array::size constexpr usize size() const Gets the size of the array. Overview Return value Returns the size of the array.","title":"Luna::Array::size"},{"location":"api/class_luna_1_1_array_1adb59c183f075f048ae90778d15189686/#lunaarraysize","text":"constexpr usize size() const Gets the size of the array.","title":"Luna::Array::size"},{"location":"api/class_luna_1_1_array_1adb59c183f075f048ae90778d15189686/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1adb59c183f075f048ae90778d15189686/#return-value","text":"Returns the size of the array.","title":"Return value"},{"location":"api/class_luna_1_1_array_1ae869682a778dc77a8dd62bbfa22f9d9a/","text":"Luna::Array::back constexpr reference back() Gets a reference to the last (size - 1) element in the array. Overview Return value Returns a reference to the first element in the array.","title":"Luna::Array::back"},{"location":"api/class_luna_1_1_array_1ae869682a778dc77a8dd62bbfa22f9d9a/#lunaarrayback","text":"constexpr reference back() Gets a reference to the last (size - 1) element in the array.","title":"Luna::Array::back"},{"location":"api/class_luna_1_1_array_1ae869682a778dc77a8dd62bbfa22f9d9a/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1ae869682a778dc77a8dd62bbfa22f9d9a/#return-value","text":"Returns a reference to the first element in the array.","title":"Return value"},{"location":"api/class_luna_1_1_array_1afaafdfc441c2433c70959e3dfe46fd97/","text":"Luna::Array::empty constexpr bool empty() const Checks whether this array is empty, that is, the size of this array is 0 . Overview Return value Returns true if this array is empty, returns false otherwise.","title":"Luna::Array::empty"},{"location":"api/class_luna_1_1_array_1afaafdfc441c2433c70959e3dfe46fd97/#lunaarrayempty","text":"constexpr bool empty() const Checks whether this array is empty, that is, the size of this array is 0 .","title":"Luna::Array::empty"},{"location":"api/class_luna_1_1_array_1afaafdfc441c2433c70959e3dfe46fd97/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1afaafdfc441c2433c70959e3dfe46fd97/#return-value","text":"Returns true if this array is empty, returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_array_1afe07af266a2f066a51af64000d746cb9/","text":"Luna::Array::end constexpr iterator end() Gets one iterator pointing to the one past last element of the array. Overview Return value Returns one iterator pointing to the one past last element of the array.","title":"Luna::Array::end"},{"location":"api/class_luna_1_1_array_1afe07af266a2f066a51af64000d746cb9/#lunaarrayend","text":"constexpr iterator end() Gets one iterator pointing to the one past last element of the array.","title":"Luna::Array::end"},{"location":"api/class_luna_1_1_array_1afe07af266a2f066a51af64000d746cb9/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_array_1afe07af266a2f066a51af64000d746cb9/#return-value","text":"Returns one iterator pointing to the one past last element of the array.","title":"Return value"},{"location":"api/class_luna_1_1_basic_string/","text":"Luna::BasicString The string template used by String, String16 and String32. class Luna::BasicString Functions BasicString< _Char, _Alloc >::pointer data() May returns nullptr if the string is empty. BasicString< _Char, _Alloc >::const_pointer c_str() const Unlike data , this call always returns a valid string, not nullptr , even if the string is empty.","title":"Luna::BasicString"},{"location":"api/class_luna_1_1_basic_string/#lunabasicstring","text":"The string template used by String, String16 and String32. class Luna::BasicString","title":"Luna::BasicString"},{"location":"api/class_luna_1_1_basic_string/#functions","text":"BasicString< _Char, _Alloc >::pointer data() May returns nullptr if the string is empty. BasicString< _Char, _Alloc >::const_pointer c_str() const Unlike data , this call always returns a valid string, not nullptr , even if the string is empty.","title":"Functions"},{"location":"api/class_luna_1_1_basic_string_1ab63a641601252a6a8ddd2b28ee6d19b7/","text":"Luna::BasicString::c_str BasicString< _Char, _Alloc >::const_pointer c_str() const Unlike data , this call always returns a valid string, not nullptr , even if the string is empty.","title":"Luna::BasicString::c_str"},{"location":"api/class_luna_1_1_basic_string_1ab63a641601252a6a8ddd2b28ee6d19b7/#lunabasicstringc_str","text":"BasicString< _Char, _Alloc >::const_pointer c_str() const Unlike data , this call always returns a valid string, not nullptr , even if the string is empty.","title":"Luna::BasicString::c_str"},{"location":"api/class_luna_1_1_basic_string_1abbe2708e47e4589174382b703afa3f15/","text":"Luna::BasicString::data BasicString< _Char, _Alloc >::pointer data() May returns nullptr if the string is empty.","title":"Luna::BasicString::data"},{"location":"api/class_luna_1_1_basic_string_1abbe2708e47e4589174382b703afa3f15/#lunabasicstringdata","text":"BasicString< _Char, _Alloc >::pointer data() May returns nullptr if the string is empty.","title":"Luna::BasicString::data"},{"location":"api/class_luna_1_1_blob/","text":"Luna::Blob Represents one binary large object (BLOB). class Luna::Blob Overview Blob can be used as a RAII wrapper for arbitrary memory allocation. One blob object allocates and manages one memory block that stores the blob data, which we call the \"managed memory\" of the blob object. The managed memory is always allocated from memalloc or memrealloc. The user can also allocate the memory manually then attach it to one blob object by calling Blob::attach, or call Blob::detach to take ownership of the managed memory from one blob object.","title":"Luna::Blob"},{"location":"api/class_luna_1_1_blob/#lunablob","text":"Represents one binary large object (BLOB). class Luna::Blob","title":"Luna::Blob"},{"location":"api/class_luna_1_1_blob/#overview","text":"Blob can be used as a RAII wrapper for arbitrary memory allocation. One blob object allocates and manages one memory block that stores the blob data, which we call the \"managed memory\" of the blob object. The managed memory is always allocated from memalloc or memrealloc. The user can also allocate the memory manually then attach it to one blob object by calling Blob::attach, or call Blob::detach to take ownership of the managed memory from one blob object.","title":"Overview"},{"location":"api/class_luna_1_1_event/","text":"Luna::Event Represents one event that once triggered, invokes all handlers registered to it. class Luna::Event Functions void clear() Removes all handlers registered to this event. void operator()(_Args &&... args) Triggers this event and invokes all handlers. usize add_handler(const Function< _Func > &func) Adds one new handler to the event. usize add_handler(Function< _Func > &&func) Adds one new handler to the event. void remove_handler(usize handle) Removes one registered handler.","title":"Luna::Event"},{"location":"api/class_luna_1_1_event/#lunaevent","text":"Represents one event that once triggered, invokes all handlers registered to it. class Luna::Event","title":"Luna::Event"},{"location":"api/class_luna_1_1_event/#functions","text":"void clear() Removes all handlers registered to this event. void operator()(_Args &&... args) Triggers this event and invokes all handlers. usize add_handler(const Function< _Func > &func) Adds one new handler to the event. usize add_handler(Function< _Func > &&func) Adds one new handler to the event. void remove_handler(usize handle) Removes one registered handler.","title":"Functions"},{"location":"api/class_luna_1_1_event_1a161bc3ee47a2cafb32e491f5e5173095/","text":"Luna::Event::add_handler usize add_handler(const Function< _Func > &func) Adds one new handler to the event. Overview Parameters func The handler to add to this event. Return value Returns one integer that can be used to remove this handler manually.","title":"Luna::Event::add_handler"},{"location":"api/class_luna_1_1_event_1a161bc3ee47a2cafb32e491f5e5173095/#lunaeventadd_handler","text":"usize add_handler(const Function< _Func > &func) Adds one new handler to the event.","title":"Luna::Event::add_handler"},{"location":"api/class_luna_1_1_event_1a161bc3ee47a2cafb32e491f5e5173095/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_event_1a161bc3ee47a2cafb32e491f5e5173095/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_event_1a161bc3ee47a2cafb32e491f5e5173095/#func","text":"The handler to add to this event.","title":"func"},{"location":"api/class_luna_1_1_event_1a161bc3ee47a2cafb32e491f5e5173095/#return-value","text":"Returns one integer that can be used to remove this handler manually.","title":"Return value"},{"location":"api/class_luna_1_1_event_1a1dd8c836acc6e725ac36bbc658531913/","text":"Luna::Event::add_handler usize add_handler(Function< _Func > &&func) Adds one new handler to the event. Overview Parameters func The handler to add to this event. Return value Returns one integer that can be used to remove this handler manually.","title":"Luna::Event::add_handler"},{"location":"api/class_luna_1_1_event_1a1dd8c836acc6e725ac36bbc658531913/#lunaeventadd_handler","text":"usize add_handler(Function< _Func > &&func) Adds one new handler to the event.","title":"Luna::Event::add_handler"},{"location":"api/class_luna_1_1_event_1a1dd8c836acc6e725ac36bbc658531913/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_event_1a1dd8c836acc6e725ac36bbc658531913/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_event_1a1dd8c836acc6e725ac36bbc658531913/#func","text":"The handler to add to this event.","title":"func"},{"location":"api/class_luna_1_1_event_1a1dd8c836acc6e725ac36bbc658531913/#return-value","text":"Returns one integer that can be used to remove this handler manually.","title":"Return value"},{"location":"api/class_luna_1_1_event_1a574c6b9a7157bcd241142910d6476f9e/","text":"Luna::Event::remove_handler void remove_handler(usize handle) Removes one registered handler. Overview Parameters handle The integer returned by add_handler for the handler to remove.","title":"Luna::Event::remove_handler"},{"location":"api/class_luna_1_1_event_1a574c6b9a7157bcd241142910d6476f9e/#lunaeventremove_handler","text":"void remove_handler(usize handle) Removes one registered handler.","title":"Luna::Event::remove_handler"},{"location":"api/class_luna_1_1_event_1a574c6b9a7157bcd241142910d6476f9e/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_event_1a574c6b9a7157bcd241142910d6476f9e/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_event_1a574c6b9a7157bcd241142910d6476f9e/#handle","text":"The integer returned by add_handler for the handler to remove.","title":"handle"},{"location":"api/class_luna_1_1_event_1ac8bb3912a3ce86b15842e79d0b421204/","text":"Luna::Event::clear void clear() Removes all handlers registered to this event.","title":"Luna::Event::clear"},{"location":"api/class_luna_1_1_event_1ac8bb3912a3ce86b15842e79d0b421204/#lunaeventclear","text":"void clear() Removes all handlers registered to this event.","title":"Luna::Event::clear"},{"location":"api/class_luna_1_1_event_1ade9efb83ab8d8b52bd615583ffa59154/","text":"Luna::Event::operator() template <typename...> void operator()(_Args &&... args) Triggers this event and invokes all handlers. Overview Parameters args Event arguments that will be broadcasted to every handler of this event.","title":"Luna::Event::operator()"},{"location":"api/class_luna_1_1_event_1ade9efb83ab8d8b52bd615583ffa59154/#lunaeventoperator","text":"template <typename...> void operator()(_Args &&... args) Triggers this event and invokes all handlers.","title":"Luna::Event::operator()"},{"location":"api/class_luna_1_1_event_1ade9efb83ab8d8b52bd615583ffa59154/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_event_1ade9efb83ab8d8b52bd615583ffa59154/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_event_1ade9efb83ab8d8b52bd615583ffa59154/#args","text":"Event arguments that will be broadcasted to every handler of this event.","title":"args"},{"location":"api/class_luna_1_1_hash_map/","text":"Luna::HashMap An container that contains key-value pairs with unique keys using open-addressing hashing algorithm. class Luna::HashMap Overview Prefer HashMap and HashSet instead of UnorderedMap and UnorderedSet, since it performs better in memory fragmentation, memory locality and cache performance. Use UnorderedMap and UnorderedSet if you have the following requirements: Functions HashMap() Constructs an empty map. HashMap(const allocator_type &alloc) Constructs an empty map with an custom allocator. HashMap(const HashMap &rhs) Constructs a map by coping elements from another map. HashMap(const HashMap &rhs, const allocator_type &alloc) Constructs a map with an custom allocator and with elements copied from another map. HashMap(HashMap &&rhs) Constructs a map by moving elements from another map. HashMap(HashMap &&rhs, const allocator_type &alloc) Constructs a map with an custom allocator and with elements moved from another map. iterator begin() Gets one iterator pointing to the first element of the map. const_iterator begin() const Gets one constant iterator pointing to the first element of the map. const_iterator cbegin() const Gets one constant iterator pointing to the first element of the map. iterator end() Gets one iterator pointing to the one past last element of the map. const_iterator end() const Gets one constant iterator pointing to the one past last element of the map. const_iterator cend() const Gets one constant iterator pointing to the one past last element of the map. bool empty() const Checks whether this map is empty, that is, the size of this map is 0 . usize size() const Gets the size of the map, that is, the number of elements in the map. usize capacity() const Gets the capacity of the map, that is, the number of elements the hash table can hold before expanding the hash table. usize hash_table_size() const Gets the hash table size of the map, that is, the number of slots of the hash table array. f32 load_factor() const Gets the load factor of the map, which can be computed by (f32)size() / (f32)hash_table_size() . f32 max_load_factor() const Gets the maximum load factor allowed for the map. void max_load_factor(f32 ml) Sets the maximum load factor allowed for the map. void clear() Removes all elements in the map. void shrink_to_fit() Reduces the hash table size to a minimum value that satisfy the maximum load factor limitation. hasher hash_function() const Gets the hash function used by this map. key_equal key_eq() const Gets the equality comparison function used by this map. void rehash(usize new_data_table_size) Changes the data table size and rehashes all elements to insert them to the new data table. void reserve(usize new_cap) Expands the data table size to the specified value. iterator find(const key_type &key) Finds the specified element in the map. const_iterator find(const key_type &key) const Finds the specified element in the map. usize count(const key_type &key) const Gets the number of elements whose key is equal to the specified key. bool contains(const key_type &key) const Checks whether at least one element with the specified key exists. Pair< iterator, bool > insert(const value_type &value) Inserts the specified key-value pair to the map. Pair< iterator, bool > insert(value_type &&value) Inserts the specified key-value pair to the map. Pair< iterator, bool > insert_or_assign(const key_type &key, _M &&value) Assigns the value to the element with the specified key, or inserts the key-value pair to the map if such element is not found. Pair< iterator, bool > insert_or_assign(key_type &&key, _M &&value) Assigns the value to the element with the specified key, or inserts the key-value pair to the map if such element is not found. Pair< iterator, bool > emplace(_Args &&... args) Constructs one element directly in the map using the provided arguments. iterator erase(const_iterator pos) Removes one element from the map. usize erase(const key_type &key) Removes elements with the specified key from the map. void swap(HashMap &rhs) Swaps elements of this map with the specified map. allocator_type get_allocator() const Gets the allocator used by this map.","title":"Luna::HashMap"},{"location":"api/class_luna_1_1_hash_map/#lunahashmap","text":"An container that contains key-value pairs with unique keys using open-addressing hashing algorithm. class Luna::HashMap","title":"Luna::HashMap"},{"location":"api/class_luna_1_1_hash_map/#overview","text":"Prefer HashMap and HashSet instead of UnorderedMap and UnorderedSet, since it performs better in memory fragmentation, memory locality and cache performance. Use UnorderedMap and UnorderedSet if you have the following requirements:","title":"Overview"},{"location":"api/class_luna_1_1_hash_map/#functions","text":"HashMap() Constructs an empty map. HashMap(const allocator_type &alloc) Constructs an empty map with an custom allocator. HashMap(const HashMap &rhs) Constructs a map by coping elements from another map. HashMap(const HashMap &rhs, const allocator_type &alloc) Constructs a map with an custom allocator and with elements copied from another map. HashMap(HashMap &&rhs) Constructs a map by moving elements from another map. HashMap(HashMap &&rhs, const allocator_type &alloc) Constructs a map with an custom allocator and with elements moved from another map. iterator begin() Gets one iterator pointing to the first element of the map. const_iterator begin() const Gets one constant iterator pointing to the first element of the map. const_iterator cbegin() const Gets one constant iterator pointing to the first element of the map. iterator end() Gets one iterator pointing to the one past last element of the map. const_iterator end() const Gets one constant iterator pointing to the one past last element of the map. const_iterator cend() const Gets one constant iterator pointing to the one past last element of the map. bool empty() const Checks whether this map is empty, that is, the size of this map is 0 . usize size() const Gets the size of the map, that is, the number of elements in the map. usize capacity() const Gets the capacity of the map, that is, the number of elements the hash table can hold before expanding the hash table. usize hash_table_size() const Gets the hash table size of the map, that is, the number of slots of the hash table array. f32 load_factor() const Gets the load factor of the map, which can be computed by (f32)size() / (f32)hash_table_size() . f32 max_load_factor() const Gets the maximum load factor allowed for the map. void max_load_factor(f32 ml) Sets the maximum load factor allowed for the map. void clear() Removes all elements in the map. void shrink_to_fit() Reduces the hash table size to a minimum value that satisfy the maximum load factor limitation. hasher hash_function() const Gets the hash function used by this map. key_equal key_eq() const Gets the equality comparison function used by this map. void rehash(usize new_data_table_size) Changes the data table size and rehashes all elements to insert them to the new data table. void reserve(usize new_cap) Expands the data table size to the specified value. iterator find(const key_type &key) Finds the specified element in the map. const_iterator find(const key_type &key) const Finds the specified element in the map. usize count(const key_type &key) const Gets the number of elements whose key is equal to the specified key. bool contains(const key_type &key) const Checks whether at least one element with the specified key exists. Pair< iterator, bool > insert(const value_type &value) Inserts the specified key-value pair to the map. Pair< iterator, bool > insert(value_type &&value) Inserts the specified key-value pair to the map. Pair< iterator, bool > insert_or_assign(const key_type &key, _M &&value) Assigns the value to the element with the specified key, or inserts the key-value pair to the map if such element is not found. Pair< iterator, bool > insert_or_assign(key_type &&key, _M &&value) Assigns the value to the element with the specified key, or inserts the key-value pair to the map if such element is not found. Pair< iterator, bool > emplace(_Args &&... args) Constructs one element directly in the map using the provided arguments. iterator erase(const_iterator pos) Removes one element from the map. usize erase(const key_type &key) Removes elements with the specified key from the map. void swap(HashMap &rhs) Swaps elements of this map with the specified map. allocator_type get_allocator() const Gets the allocator used by this map.","title":"Functions"},{"location":"api/class_luna_1_1_hash_map_1a01ee6fafc0882937510946f626f6bc9e/","text":"Luna::HashMap::HashMap HashMap(const HashMap &rhs, const allocator_type &alloc) Constructs a map with an custom allocator and with elements copied from another map. Overview Parameters rhs The map to copy elements from. alloc The allocator to use. The allocator object will be copy-constructed into the map.","title":"Luna::HashMap::HashMap"},{"location":"api/class_luna_1_1_hash_map_1a01ee6fafc0882937510946f626f6bc9e/#lunahashmaphashmap","text":"HashMap(const HashMap &rhs, const allocator_type &alloc) Constructs a map with an custom allocator and with elements copied from another map.","title":"Luna::HashMap::HashMap"},{"location":"api/class_luna_1_1_hash_map_1a01ee6fafc0882937510946f626f6bc9e/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1a01ee6fafc0882937510946f626f6bc9e/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_map_1a01ee6fafc0882937510946f626f6bc9e/#rhs","text":"The map to copy elements from.","title":"rhs"},{"location":"api/class_luna_1_1_hash_map_1a01ee6fafc0882937510946f626f6bc9e/#alloc","text":"The allocator to use. The allocator object will be copy-constructed into the map.","title":"alloc"},{"location":"api/class_luna_1_1_hash_map_1a044dbf1291b7cfaae7c7f433d582f937/","text":"Luna::HashMap::emplace template <typename...> Pair< iterator, bool > emplace(_Args &&... args) Constructs one element directly in the map using the provided arguments. Overview Parameters args The arguments to construct the element. [Pair](struct_luna_1_1_pair.md)<const _Kty, _Ty>(args...) will be used to construct the element. Return value Returns one iterator-bool pair indicating the result:* If the returned Boolean value is true , then the element is successfully constructed and inserted to the map, and the returned iterator points to the inserted element. If the returned Boolean value is false , then the operation is failed because another element with the same key already exists, and the returned iterator points to the existing element in the map.","title":"Luna::HashMap::emplace"},{"location":"api/class_luna_1_1_hash_map_1a044dbf1291b7cfaae7c7f433d582f937/#lunahashmapemplace","text":"template <typename...> Pair< iterator, bool > emplace(_Args &&... args) Constructs one element directly in the map using the provided arguments.","title":"Luna::HashMap::emplace"},{"location":"api/class_luna_1_1_hash_map_1a044dbf1291b7cfaae7c7f433d582f937/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1a044dbf1291b7cfaae7c7f433d582f937/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_map_1a044dbf1291b7cfaae7c7f433d582f937/#args","text":"The arguments to construct the element. [Pair](struct_luna_1_1_pair.md)<const _Kty, _Ty>(args...) will be used to construct the element.","title":"args"},{"location":"api/class_luna_1_1_hash_map_1a044dbf1291b7cfaae7c7f433d582f937/#return-value","text":"Returns one iterator-bool pair indicating the result:* If the returned Boolean value is true , then the element is successfully constructed and inserted to the map, and the returned iterator points to the inserted element. If the returned Boolean value is false , then the operation is failed because another element with the same key already exists, and the returned iterator points to the existing element in the map.","title":"Return value"},{"location":"api/class_luna_1_1_hash_map_1a10b2be386447b0ab61e83d0f5527b688/","text":"Luna::HashMap::key_eq key_equal key_eq() const Gets the equality comparison function used by this map. Overview Return value Returns the equality comparison function used by this map.","title":"Luna::HashMap::key_eq"},{"location":"api/class_luna_1_1_hash_map_1a10b2be386447b0ab61e83d0f5527b688/#lunahashmapkey_eq","text":"key_equal key_eq() const Gets the equality comparison function used by this map.","title":"Luna::HashMap::key_eq"},{"location":"api/class_luna_1_1_hash_map_1a10b2be386447b0ab61e83d0f5527b688/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1a10b2be386447b0ab61e83d0f5527b688/#return-value","text":"Returns the equality comparison function used by this map.","title":"Return value"},{"location":"api/class_luna_1_1_hash_map_1a29305669b60ca1680752e2fc3592ba99/","text":"Luna::HashMap::begin const_iterator begin() const Gets one constant iterator pointing to the first element of the map. Overview Return value Returns one constant iterator pointing to the first element of the map.","title":"Luna::HashMap::begin"},{"location":"api/class_luna_1_1_hash_map_1a29305669b60ca1680752e2fc3592ba99/#lunahashmapbegin","text":"const_iterator begin() const Gets one constant iterator pointing to the first element of the map.","title":"Luna::HashMap::begin"},{"location":"api/class_luna_1_1_hash_map_1a29305669b60ca1680752e2fc3592ba99/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1a29305669b60ca1680752e2fc3592ba99/#return-value","text":"Returns one constant iterator pointing to the first element of the map.","title":"Return value"},{"location":"api/class_luna_1_1_hash_map_1a29790c28710ec0e64b48c2f4edd0b08c/","text":"Luna::HashMap::erase iterator erase(const_iterator pos) Removes one element from the map. Overview Parameters pos The iterator pointing to the element to be removed. Return value Returns one iterator pointing to the next element of the removed element when iterating elements. Valid Usage pos must points to a valid element in the map.","title":"Luna::HashMap::erase"},{"location":"api/class_luna_1_1_hash_map_1a29790c28710ec0e64b48c2f4edd0b08c/#lunahashmaperase","text":"iterator erase(const_iterator pos) Removes one element from the map.","title":"Luna::HashMap::erase"},{"location":"api/class_luna_1_1_hash_map_1a29790c28710ec0e64b48c2f4edd0b08c/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1a29790c28710ec0e64b48c2f4edd0b08c/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_map_1a29790c28710ec0e64b48c2f4edd0b08c/#pos","text":"The iterator pointing to the element to be removed.","title":"pos"},{"location":"api/class_luna_1_1_hash_map_1a29790c28710ec0e64b48c2f4edd0b08c/#return-value","text":"Returns one iterator pointing to the next element of the removed element when iterating elements.","title":"Return value"},{"location":"api/class_luna_1_1_hash_map_1a29790c28710ec0e64b48c2f4edd0b08c/#valid-usage","text":"pos must points to a valid element in the map.","title":"Valid Usage"},{"location":"api/class_luna_1_1_hash_map_1a2d5dc5e3872df3149f3c3ac730ff5607/","text":"Luna::HashMap::count usize count(const key_type &key) const Gets the number of elements whose key is equal to the specified key. Overview Parameters key The key of the element to count. Return value Returns the number of elements whose key is equal to the specified key.","title":"Luna::HashMap::count"},{"location":"api/class_luna_1_1_hash_map_1a2d5dc5e3872df3149f3c3ac730ff5607/#lunahashmapcount","text":"usize count(const key_type &key) const Gets the number of elements whose key is equal to the specified key.","title":"Luna::HashMap::count"},{"location":"api/class_luna_1_1_hash_map_1a2d5dc5e3872df3149f3c3ac730ff5607/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1a2d5dc5e3872df3149f3c3ac730ff5607/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_map_1a2d5dc5e3872df3149f3c3ac730ff5607/#key","text":"The key of the element to count.","title":"key"},{"location":"api/class_luna_1_1_hash_map_1a2d5dc5e3872df3149f3c3ac730ff5607/#return-value","text":"Returns the number of elements whose key is equal to the specified key.","title":"Return value"},{"location":"api/class_luna_1_1_hash_map_1a34dd266404ddfcb1683866f0c203904e/","text":"Luna::HashMap::erase usize erase(const key_type &key) Removes elements with the specified key from the map. Overview Parameters key The key of the elements to remove. Return value Returns the number of elements removed by this operation.","title":"Luna::HashMap::erase"},{"location":"api/class_luna_1_1_hash_map_1a34dd266404ddfcb1683866f0c203904e/#lunahashmaperase","text":"usize erase(const key_type &key) Removes elements with the specified key from the map.","title":"Luna::HashMap::erase"},{"location":"api/class_luna_1_1_hash_map_1a34dd266404ddfcb1683866f0c203904e/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1a34dd266404ddfcb1683866f0c203904e/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_map_1a34dd266404ddfcb1683866f0c203904e/#key","text":"The key of the elements to remove.","title":"key"},{"location":"api/class_luna_1_1_hash_map_1a34dd266404ddfcb1683866f0c203904e/#return-value","text":"Returns the number of elements removed by this operation.","title":"Return value"},{"location":"api/class_luna_1_1_hash_map_1a39112ae08f6ffc7ee58c6aa79772e094/","text":"Luna::HashMap::cbegin const_iterator cbegin() const Gets one constant iterator pointing to the first element of the map. Overview Return value Returns one constant iterator pointing to the first element of the map.","title":"Luna::HashMap::cbegin"},{"location":"api/class_luna_1_1_hash_map_1a39112ae08f6ffc7ee58c6aa79772e094/#lunahashmapcbegin","text":"const_iterator cbegin() const Gets one constant iterator pointing to the first element of the map.","title":"Luna::HashMap::cbegin"},{"location":"api/class_luna_1_1_hash_map_1a39112ae08f6ffc7ee58c6aa79772e094/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1a39112ae08f6ffc7ee58c6aa79772e094/#return-value","text":"Returns one constant iterator pointing to the first element of the map.","title":"Return value"},{"location":"api/class_luna_1_1_hash_map_1a45549ac2883165244dbc0005a33dac64/","text":"Luna::HashMap::insert Pair< iterator, bool > insert(const value_type &value) Inserts the specified key-value pair to the map. Overview Parameters value The key-value pair to insert. The element is copy-constructed into the map. Return value Returns one iterator-bool pair indicating the insertion result:* If the returned Boolean value is true , then the element is successfully inserted to the map, and the returned iterator points to the inserted element. If the returned Boolean value is false , then the insertion is failed because another element with the same key already exists, and the returned iterator points to the existing element in the map.","title":"Luna::HashMap::insert"},{"location":"api/class_luna_1_1_hash_map_1a45549ac2883165244dbc0005a33dac64/#lunahashmapinsert","text":"Pair< iterator, bool > insert(const value_type &value) Inserts the specified key-value pair to the map.","title":"Luna::HashMap::insert"},{"location":"api/class_luna_1_1_hash_map_1a45549ac2883165244dbc0005a33dac64/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1a45549ac2883165244dbc0005a33dac64/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_map_1a45549ac2883165244dbc0005a33dac64/#value","text":"The key-value pair to insert. The element is copy-constructed into the map.","title":"value"},{"location":"api/class_luna_1_1_hash_map_1a45549ac2883165244dbc0005a33dac64/#return-value","text":"Returns one iterator-bool pair indicating the insertion result:* If the returned Boolean value is true , then the element is successfully inserted to the map, and the returned iterator points to the inserted element. If the returned Boolean value is false , then the insertion is failed because another element with the same key already exists, and the returned iterator points to the existing element in the map.","title":"Return value"},{"location":"api/class_luna_1_1_hash_map_1a5f16304f80b6fb253c7b0ead3e16dd18/","text":"Luna::HashMap::shrink_to_fit void shrink_to_fit() Reduces the hash table size to a minimum value that satisfy the maximum load factor limitation. Overview The hash table size can be computed as: ceilf((f32)size() / max_load_factor()) .","title":"Luna::HashMap::shrink_to_fit"},{"location":"api/class_luna_1_1_hash_map_1a5f16304f80b6fb253c7b0ead3e16dd18/#lunahashmapshrink_to_fit","text":"void shrink_to_fit() Reduces the hash table size to a minimum value that satisfy the maximum load factor limitation.","title":"Luna::HashMap::shrink_to_fit"},{"location":"api/class_luna_1_1_hash_map_1a5f16304f80b6fb253c7b0ead3e16dd18/#overview","text":"The hash table size can be computed as: ceilf((f32)size() / max_load_factor()) .","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1a644718bb2fb240de962dc3c9a1fdf0dc/","text":"Luna::HashMap::empty bool empty() const Checks whether this map is empty, that is, the size of this map is 0 . Overview Return value Returns true if this map is empty, returns false otherwise.","title":"Luna::HashMap::empty"},{"location":"api/class_luna_1_1_hash_map_1a644718bb2fb240de962dc3c9a1fdf0dc/#lunahashmapempty","text":"bool empty() const Checks whether this map is empty, that is, the size of this map is 0 .","title":"Luna::HashMap::empty"},{"location":"api/class_luna_1_1_hash_map_1a644718bb2fb240de962dc3c9a1fdf0dc/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1a644718bb2fb240de962dc3c9a1fdf0dc/#return-value","text":"Returns true if this map is empty, returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_hash_map_1a6e99c6263568d88f95ca01dc694f1051/","text":"Luna::HashMap::get_allocator allocator_type get_allocator() const Gets the allocator used by this map. Overview Return value Returns one copy of the allocator used by this map.","title":"Luna::HashMap::get_allocator"},{"location":"api/class_luna_1_1_hash_map_1a6e99c6263568d88f95ca01dc694f1051/#lunahashmapget_allocator","text":"allocator_type get_allocator() const Gets the allocator used by this map.","title":"Luna::HashMap::get_allocator"},{"location":"api/class_luna_1_1_hash_map_1a6e99c6263568d88f95ca01dc694f1051/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1a6e99c6263568d88f95ca01dc694f1051/#return-value","text":"Returns one copy of the allocator used by this map.","title":"Return value"},{"location":"api/class_luna_1_1_hash_map_1a72ffe2880da1c06d22d90000f9720967/","text":"Luna::HashMap::hash_function hasher hash_function() const Gets the hash function used by this map. Overview Return value Returns the hash function used by this map.","title":"Luna::HashMap::hash_function"},{"location":"api/class_luna_1_1_hash_map_1a72ffe2880da1c06d22d90000f9720967/#lunahashmaphash_function","text":"hasher hash_function() const Gets the hash function used by this map.","title":"Luna::HashMap::hash_function"},{"location":"api/class_luna_1_1_hash_map_1a72ffe2880da1c06d22d90000f9720967/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1a72ffe2880da1c06d22d90000f9720967/#return-value","text":"Returns the hash function used by this map.","title":"Return value"},{"location":"api/class_luna_1_1_hash_map_1a78b0dadb3f961dd5f665d295f90f9391/","text":"Luna::HashMap::HashMap HashMap(const HashMap &rhs) Constructs a map by coping elements from another map. Overview Parameters rhs The map to copy elements from.","title":"Luna::HashMap::HashMap"},{"location":"api/class_luna_1_1_hash_map_1a78b0dadb3f961dd5f665d295f90f9391/#lunahashmaphashmap","text":"HashMap(const HashMap &rhs) Constructs a map by coping elements from another map.","title":"Luna::HashMap::HashMap"},{"location":"api/class_luna_1_1_hash_map_1a78b0dadb3f961dd5f665d295f90f9391/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1a78b0dadb3f961dd5f665d295f90f9391/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_map_1a78b0dadb3f961dd5f665d295f90f9391/#rhs","text":"The map to copy elements from.","title":"rhs"},{"location":"api/class_luna_1_1_hash_map_1a79348f1b7c06b34052b42656a0279429/","text":"Luna::HashMap::size usize size() const Gets the size of the map, that is, the number of elements in the map. Overview Return value Returns the size of the map.","title":"Luna::HashMap::size"},{"location":"api/class_luna_1_1_hash_map_1a79348f1b7c06b34052b42656a0279429/#lunahashmapsize","text":"usize size() const Gets the size of the map, that is, the number of elements in the map.","title":"Luna::HashMap::size"},{"location":"api/class_luna_1_1_hash_map_1a79348f1b7c06b34052b42656a0279429/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1a79348f1b7c06b34052b42656a0279429/#return-value","text":"Returns the size of the map.","title":"Return value"},{"location":"api/class_luna_1_1_hash_map_1a8e7da885280257b837a2de2b94e02fcd/","text":"Luna::HashMap::HashMap HashMap() Constructs an empty map.","title":"Luna::HashMap::HashMap"},{"location":"api/class_luna_1_1_hash_map_1a8e7da885280257b837a2de2b94e02fcd/#lunahashmaphashmap","text":"HashMap() Constructs an empty map.","title":"Luna::HashMap::HashMap"},{"location":"api/class_luna_1_1_hash_map_1a9102a0c114eea9587ad22afc2a1ccc3c/","text":"Luna::HashMap::max_load_factor void max_load_factor(f32 ml) Sets the maximum load factor allowed for the map. Overview If the new load factor is smaller than load_factor() , the map will expand the hash table to bring more hash table slots. Parameters ml The new load factor to set. Valid Usage ml must between [ 0.0 , 1.0 ].","title":"Luna::HashMap::max_load_factor"},{"location":"api/class_luna_1_1_hash_map_1a9102a0c114eea9587ad22afc2a1ccc3c/#lunahashmapmax_load_factor","text":"void max_load_factor(f32 ml) Sets the maximum load factor allowed for the map.","title":"Luna::HashMap::max_load_factor"},{"location":"api/class_luna_1_1_hash_map_1a9102a0c114eea9587ad22afc2a1ccc3c/#overview","text":"If the new load factor is smaller than load_factor() , the map will expand the hash table to bring more hash table slots.","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1a9102a0c114eea9587ad22afc2a1ccc3c/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_map_1a9102a0c114eea9587ad22afc2a1ccc3c/#ml","text":"The new load factor to set.","title":"ml"},{"location":"api/class_luna_1_1_hash_map_1a9102a0c114eea9587ad22afc2a1ccc3c/#valid-usage","text":"ml must between [ 0.0 , 1.0 ].","title":"Valid Usage"},{"location":"api/class_luna_1_1_hash_map_1a93791e61ab486b4022c389d634b4facc/","text":"Luna::HashMap::cend const_iterator cend() const Gets one constant iterator pointing to the one past last element of the map. Overview Return value Returns one constant iterator pointing to the one past last element of the map.","title":"Luna::HashMap::cend"},{"location":"api/class_luna_1_1_hash_map_1a93791e61ab486b4022c389d634b4facc/#lunahashmapcend","text":"const_iterator cend() const Gets one constant iterator pointing to the one past last element of the map.","title":"Luna::HashMap::cend"},{"location":"api/class_luna_1_1_hash_map_1a93791e61ab486b4022c389d634b4facc/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1a93791e61ab486b4022c389d634b4facc/#return-value","text":"Returns one constant iterator pointing to the one past last element of the map.","title":"Return value"},{"location":"api/class_luna_1_1_hash_map_1a94faee862d13b8063b31b884435eed05/","text":"Luna::HashMap::HashMap HashMap(const allocator_type &alloc) Constructs an empty map with an custom allocator. Overview Parameters alloc The allocator to use. The allocator object will be copy-constructed into the map.","title":"Luna::HashMap::HashMap"},{"location":"api/class_luna_1_1_hash_map_1a94faee862d13b8063b31b884435eed05/#lunahashmaphashmap","text":"HashMap(const allocator_type &alloc) Constructs an empty map with an custom allocator.","title":"Luna::HashMap::HashMap"},{"location":"api/class_luna_1_1_hash_map_1a94faee862d13b8063b31b884435eed05/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1a94faee862d13b8063b31b884435eed05/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_map_1a94faee862d13b8063b31b884435eed05/#alloc","text":"The allocator to use. The allocator object will be copy-constructed into the map.","title":"alloc"},{"location":"api/class_luna_1_1_hash_map_1a98c20997abc3070d80e9c2e70afa0493/","text":"Luna::HashMap::load_factor f32 load_factor() const Gets the load factor of the map, which can be computed by (f32)size() / (f32)hash_table_size() . Overview Return value Returns the load factor of the map.","title":"Luna::HashMap::load_factor"},{"location":"api/class_luna_1_1_hash_map_1a98c20997abc3070d80e9c2e70afa0493/#lunahashmapload_factor","text":"f32 load_factor() const Gets the load factor of the map, which can be computed by (f32)size() / (f32)hash_table_size() .","title":"Luna::HashMap::load_factor"},{"location":"api/class_luna_1_1_hash_map_1a98c20997abc3070d80e9c2e70afa0493/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1a98c20997abc3070d80e9c2e70afa0493/#return-value","text":"Returns the load factor of the map.","title":"Return value"},{"location":"api/class_luna_1_1_hash_map_1a9c9766a96c492f3e9e5861d6b4f87387/","text":"Luna::HashMap::find iterator find(const key_type &key) Finds the specified element in the map. Overview Parameters key The key of the element to find. Return value Returns one iterator pointing to the element if the elemene is found. Returns end() otherwise.","title":"Luna::HashMap::find"},{"location":"api/class_luna_1_1_hash_map_1a9c9766a96c492f3e9e5861d6b4f87387/#lunahashmapfind","text":"iterator find(const key_type &key) Finds the specified element in the map.","title":"Luna::HashMap::find"},{"location":"api/class_luna_1_1_hash_map_1a9c9766a96c492f3e9e5861d6b4f87387/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1a9c9766a96c492f3e9e5861d6b4f87387/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_map_1a9c9766a96c492f3e9e5861d6b4f87387/#key","text":"The key of the element to find.","title":"key"},{"location":"api/class_luna_1_1_hash_map_1a9c9766a96c492f3e9e5861d6b4f87387/#return-value","text":"Returns one iterator pointing to the element if the elemene is found. Returns end() otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_hash_map_1aa0b05f4f6c691fbe71159c631dded53b/","text":"Luna::HashMap::contains bool contains(const key_type &key) const Checks whether at least one element with the specified key exists. Overview Parameters key The key of the element to check. Return value Returns ture if at least one element with the specified key exists. Returns false otherwise.","title":"Luna::HashMap::contains"},{"location":"api/class_luna_1_1_hash_map_1aa0b05f4f6c691fbe71159c631dded53b/#lunahashmapcontains","text":"bool contains(const key_type &key) const Checks whether at least one element with the specified key exists.","title":"Luna::HashMap::contains"},{"location":"api/class_luna_1_1_hash_map_1aa0b05f4f6c691fbe71159c631dded53b/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1aa0b05f4f6c691fbe71159c631dded53b/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_map_1aa0b05f4f6c691fbe71159c631dded53b/#key","text":"The key of the element to check.","title":"key"},{"location":"api/class_luna_1_1_hash_map_1aa0b05f4f6c691fbe71159c631dded53b/#return-value","text":"Returns ture if at least one element with the specified key exists. Returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_hash_map_1aa1c32ac6498d3f6d21cab98d1cbf3455/","text":"Luna::HashMap::reserve void reserve(usize new_cap) Expands the data table size to the specified value. Overview Parameters new_cap The new data table size to expand to.","title":"Luna::HashMap::reserve"},{"location":"api/class_luna_1_1_hash_map_1aa1c32ac6498d3f6d21cab98d1cbf3455/#lunahashmapreserve","text":"void reserve(usize new_cap) Expands the data table size to the specified value.","title":"Luna::HashMap::reserve"},{"location":"api/class_luna_1_1_hash_map_1aa1c32ac6498d3f6d21cab98d1cbf3455/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1aa1c32ac6498d3f6d21cab98d1cbf3455/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_map_1aa1c32ac6498d3f6d21cab98d1cbf3455/#new_cap","text":"The new data table size to expand to.","title":"new_cap"},{"location":"api/class_luna_1_1_hash_map_1aad213718c308bedbbf92cb81e182cf54/","text":"Luna::HashMap::insert_or_assign template <typename _M> Pair< iterator, bool > insert_or_assign(const key_type &key, _M &&value) Assigns the value to the element with the specified key, or inserts the key-value pair to the map if such element is not found. Overview Parameters key The key of the element to assign or insert. value The element value to assign or insert. Return value Returns one iterator-bool pair indicating the result:* If the returned Boolean value is true , then the element is inserted to the map, and the returned iterator points to the inserted element. If the returned Boolean value is false , then one existing element is found and is assigned to the specified value, and the returned iterator points to the existing element in the map.","title":"Luna::HashMap::insert_or_assign"},{"location":"api/class_luna_1_1_hash_map_1aad213718c308bedbbf92cb81e182cf54/#lunahashmapinsert_or_assign","text":"template <typename _M> Pair< iterator, bool > insert_or_assign(const key_type &key, _M &&value) Assigns the value to the element with the specified key, or inserts the key-value pair to the map if such element is not found.","title":"Luna::HashMap::insert_or_assign"},{"location":"api/class_luna_1_1_hash_map_1aad213718c308bedbbf92cb81e182cf54/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1aad213718c308bedbbf92cb81e182cf54/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_map_1aad213718c308bedbbf92cb81e182cf54/#key","text":"The key of the element to assign or insert.","title":"key"},{"location":"api/class_luna_1_1_hash_map_1aad213718c308bedbbf92cb81e182cf54/#value","text":"The element value to assign or insert.","title":"value"},{"location":"api/class_luna_1_1_hash_map_1aad213718c308bedbbf92cb81e182cf54/#return-value","text":"Returns one iterator-bool pair indicating the result:* If the returned Boolean value is true , then the element is inserted to the map, and the returned iterator points to the inserted element. If the returned Boolean value is false , then one existing element is found and is assigned to the specified value, and the returned iterator points to the existing element in the map.","title":"Return value"},{"location":"api/class_luna_1_1_hash_map_1ab26678fec10dd0e3974550c754cf0124/","text":"Luna::HashMap::swap void swap(HashMap &rhs) Swaps elements of this map with the specified map. Overview Parameters rhs The map to swap elements with.","title":"Luna::HashMap::swap"},{"location":"api/class_luna_1_1_hash_map_1ab26678fec10dd0e3974550c754cf0124/#lunahashmapswap","text":"void swap(HashMap &rhs) Swaps elements of this map with the specified map.","title":"Luna::HashMap::swap"},{"location":"api/class_luna_1_1_hash_map_1ab26678fec10dd0e3974550c754cf0124/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1ab26678fec10dd0e3974550c754cf0124/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_map_1ab26678fec10dd0e3974550c754cf0124/#rhs","text":"The map to swap elements with.","title":"rhs"},{"location":"api/class_luna_1_1_hash_map_1ac8bb3912a3ce86b15842e79d0b421204/","text":"Luna::HashMap::clear void clear() Removes all elements in the map.","title":"Luna::HashMap::clear"},{"location":"api/class_luna_1_1_hash_map_1ac8bb3912a3ce86b15842e79d0b421204/#lunahashmapclear","text":"void clear() Removes all elements in the map.","title":"Luna::HashMap::clear"},{"location":"api/class_luna_1_1_hash_map_1acad38d52497a975bfb6f2f6acd76631f/","text":"Luna::HashMap::end iterator end() Gets one iterator pointing to the one past last element of the map. Overview Return value Returns one iterator pointing to the one past last element of the map.","title":"Luna::HashMap::end"},{"location":"api/class_luna_1_1_hash_map_1acad38d52497a975bfb6f2f6acd76631f/#lunahashmapend","text":"iterator end() Gets one iterator pointing to the one past last element of the map.","title":"Luna::HashMap::end"},{"location":"api/class_luna_1_1_hash_map_1acad38d52497a975bfb6f2f6acd76631f/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1acad38d52497a975bfb6f2f6acd76631f/#return-value","text":"Returns one iterator pointing to the one past last element of the map.","title":"Return value"},{"location":"api/class_luna_1_1_hash_map_1accf9a4bd0c34d4a5f6a7dab66ea10cdc/","text":"Luna::HashMap::end const_iterator end() const Gets one constant iterator pointing to the one past last element of the map. Overview Return value Returns one constant iterator pointing to the one past last element of the map.","title":"Luna::HashMap::end"},{"location":"api/class_luna_1_1_hash_map_1accf9a4bd0c34d4a5f6a7dab66ea10cdc/#lunahashmapend","text":"const_iterator end() const Gets one constant iterator pointing to the one past last element of the map.","title":"Luna::HashMap::end"},{"location":"api/class_luna_1_1_hash_map_1accf9a4bd0c34d4a5f6a7dab66ea10cdc/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1accf9a4bd0c34d4a5f6a7dab66ea10cdc/#return-value","text":"Returns one constant iterator pointing to the one past last element of the map.","title":"Return value"},{"location":"api/class_luna_1_1_hash_map_1ace4cb83fbe1efc093ab5cd0180cc6868/","text":"Luna::HashMap::hash_table_size usize hash_table_size() const Gets the hash table size of the map, that is, the number of slots of the hash table array. Overview Return value Returns the hash table size of the map.","title":"Luna::HashMap::hash_table_size"},{"location":"api/class_luna_1_1_hash_map_1ace4cb83fbe1efc093ab5cd0180cc6868/#lunahashmaphash_table_size","text":"usize hash_table_size() const Gets the hash table size of the map, that is, the number of slots of the hash table array.","title":"Luna::HashMap::hash_table_size"},{"location":"api/class_luna_1_1_hash_map_1ace4cb83fbe1efc093ab5cd0180cc6868/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1ace4cb83fbe1efc093ab5cd0180cc6868/#return-value","text":"Returns the hash table size of the map.","title":"Return value"},{"location":"api/class_luna_1_1_hash_map_1ad69bd11391be1a1dba5c8202259664f8/","text":"Luna::HashMap::begin iterator begin() Gets one iterator pointing to the first element of the map. Overview Return value Returns one iterator pointing to the first element of the map.","title":"Luna::HashMap::begin"},{"location":"api/class_luna_1_1_hash_map_1ad69bd11391be1a1dba5c8202259664f8/#lunahashmapbegin","text":"iterator begin() Gets one iterator pointing to the first element of the map.","title":"Luna::HashMap::begin"},{"location":"api/class_luna_1_1_hash_map_1ad69bd11391be1a1dba5c8202259664f8/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1ad69bd11391be1a1dba5c8202259664f8/#return-value","text":"Returns one iterator pointing to the first element of the map.","title":"Return value"},{"location":"api/class_luna_1_1_hash_map_1ad96bf59cb22e917cbd210ba068e8acb3/","text":"Luna::HashMap::capacity usize capacity() const Gets the capacity of the map, that is, the number of elements the hash table can hold before expanding the hash table. Overview Return value Returns the capacity of the map.","title":"Luna::HashMap::capacity"},{"location":"api/class_luna_1_1_hash_map_1ad96bf59cb22e917cbd210ba068e8acb3/#lunahashmapcapacity","text":"usize capacity() const Gets the capacity of the map, that is, the number of elements the hash table can hold before expanding the hash table.","title":"Luna::HashMap::capacity"},{"location":"api/class_luna_1_1_hash_map_1ad96bf59cb22e917cbd210ba068e8acb3/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1ad96bf59cb22e917cbd210ba068e8acb3/#return-value","text":"Returns the capacity of the map.","title":"Return value"},{"location":"api/class_luna_1_1_hash_map_1adf0955ccf1cdbb66fd3e51036166efbb/","text":"Luna::HashMap::rehash void rehash(usize new_data_table_size) Changes the data table size and rehashes all elements to insert them to the new data table. Overview Parameters new_data_table_size The new data table size to set.","title":"Luna::HashMap::rehash"},{"location":"api/class_luna_1_1_hash_map_1adf0955ccf1cdbb66fd3e51036166efbb/#lunahashmaprehash","text":"void rehash(usize new_data_table_size) Changes the data table size and rehashes all elements to insert them to the new data table.","title":"Luna::HashMap::rehash"},{"location":"api/class_luna_1_1_hash_map_1adf0955ccf1cdbb66fd3e51036166efbb/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1adf0955ccf1cdbb66fd3e51036166efbb/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_map_1adf0955ccf1cdbb66fd3e51036166efbb/#new_data_table_size","text":"The new data table size to set.","title":"new_data_table_size"},{"location":"api/class_luna_1_1_hash_map_1adfc3632f295d0c500bafbe68b91757f8/","text":"Luna::HashMap::insert Pair< iterator, bool > insert(value_type &&value) Inserts the specified key-value pair to the map. Overview Parameters value The key-value pair to insert. The element is move-constructed into the map. Return value Returns one iterator-bool pair indicating the insertion result:* If the returned Boolean value is true , then the element is successfully inserted to the map, and the returned iterator points to the inserted element. If the returned Boolean value is false , then the insertion is failed because another element with the same key already exists, and the returned iterator points to the existing element in the map.","title":"Luna::HashMap::insert"},{"location":"api/class_luna_1_1_hash_map_1adfc3632f295d0c500bafbe68b91757f8/#lunahashmapinsert","text":"Pair< iterator, bool > insert(value_type &&value) Inserts the specified key-value pair to the map.","title":"Luna::HashMap::insert"},{"location":"api/class_luna_1_1_hash_map_1adfc3632f295d0c500bafbe68b91757f8/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1adfc3632f295d0c500bafbe68b91757f8/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_map_1adfc3632f295d0c500bafbe68b91757f8/#value","text":"The key-value pair to insert. The element is move-constructed into the map.","title":"value"},{"location":"api/class_luna_1_1_hash_map_1adfc3632f295d0c500bafbe68b91757f8/#return-value","text":"Returns one iterator-bool pair indicating the insertion result:* If the returned Boolean value is true , then the element is successfully inserted to the map, and the returned iterator points to the inserted element. If the returned Boolean value is false , then the insertion is failed because another element with the same key already exists, and the returned iterator points to the existing element in the map.","title":"Return value"},{"location":"api/class_luna_1_1_hash_map_1ae8fa1ee213412e9dd0bce31f3837a3eb/","text":"Luna::HashMap::HashMap HashMap(HashMap &&rhs) Constructs a map by moving elements from another map. Overview Parameters rhs The map to move elements from.","title":"Luna::HashMap::HashMap"},{"location":"api/class_luna_1_1_hash_map_1ae8fa1ee213412e9dd0bce31f3837a3eb/#lunahashmaphashmap","text":"HashMap(HashMap &&rhs) Constructs a map by moving elements from another map.","title":"Luna::HashMap::HashMap"},{"location":"api/class_luna_1_1_hash_map_1ae8fa1ee213412e9dd0bce31f3837a3eb/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1ae8fa1ee213412e9dd0bce31f3837a3eb/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_map_1ae8fa1ee213412e9dd0bce31f3837a3eb/#rhs","text":"The map to move elements from.","title":"rhs"},{"location":"api/class_luna_1_1_hash_map_1aebb6ef2d39e739cc28a67244e423a3a8/","text":"Luna::HashMap::max_load_factor f32 max_load_factor() const Gets the maximum load factor allowed for the map. Overview If load_factor() > max_load_factor() is true after one element is inserted, the map will expand the hash table to bring more hash table slots. Return value Returns the maximum load factor allowed for the map.","title":"Luna::HashMap::max_load_factor"},{"location":"api/class_luna_1_1_hash_map_1aebb6ef2d39e739cc28a67244e423a3a8/#lunahashmapmax_load_factor","text":"f32 max_load_factor() const Gets the maximum load factor allowed for the map.","title":"Luna::HashMap::max_load_factor"},{"location":"api/class_luna_1_1_hash_map_1aebb6ef2d39e739cc28a67244e423a3a8/#overview","text":"If load_factor() > max_load_factor() is true after one element is inserted, the map will expand the hash table to bring more hash table slots.","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1aebb6ef2d39e739cc28a67244e423a3a8/#return-value","text":"Returns the maximum load factor allowed for the map.","title":"Return value"},{"location":"api/class_luna_1_1_hash_map_1aec69432164a51529a980ba873fbc0c64/","text":"Luna::HashMap::insert_or_assign template <typename _M> Pair< iterator, bool > insert_or_assign(key_type &&key, _M &&value) Assigns the value to the element with the specified key, or inserts the key-value pair to the map if such element is not found. Overview Parameters key The key of the element to assign or insert. value The element value to assign or insert. Return value Returns one iterator-bool pair indicating the result:* If the returned Boolean value is true , then the element is inserted to the map, and the returned iterator points to the inserted element. If the returned Boolean value is false , then one existing element is found and is assigned to the specified value, and the returned iterator points to the existing element in the map.","title":"Luna::HashMap::insert_or_assign"},{"location":"api/class_luna_1_1_hash_map_1aec69432164a51529a980ba873fbc0c64/#lunahashmapinsert_or_assign","text":"template <typename _M> Pair< iterator, bool > insert_or_assign(key_type &&key, _M &&value) Assigns the value to the element with the specified key, or inserts the key-value pair to the map if such element is not found.","title":"Luna::HashMap::insert_or_assign"},{"location":"api/class_luna_1_1_hash_map_1aec69432164a51529a980ba873fbc0c64/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1aec69432164a51529a980ba873fbc0c64/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_map_1aec69432164a51529a980ba873fbc0c64/#key","text":"The key of the element to assign or insert.","title":"key"},{"location":"api/class_luna_1_1_hash_map_1aec69432164a51529a980ba873fbc0c64/#value","text":"The element value to assign or insert.","title":"value"},{"location":"api/class_luna_1_1_hash_map_1aec69432164a51529a980ba873fbc0c64/#return-value","text":"Returns one iterator-bool pair indicating the result:* If the returned Boolean value is true , then the element is inserted to the map, and the returned iterator points to the inserted element. If the returned Boolean value is false , then one existing element is found and is assigned to the specified value, and the returned iterator points to the existing element in the map.","title":"Return value"},{"location":"api/class_luna_1_1_hash_map_1aecfd83a95d996d423d5e746946c27fff/","text":"Luna::HashMap::HashMap HashMap(HashMap &&rhs, const allocator_type &alloc) Constructs a map with an custom allocator and with elements moved from another map. Overview Parameters rhs The map to move elements from. alloc The allocator to use. The allocator object will be copy-constructed into the map.","title":"Luna::HashMap::HashMap"},{"location":"api/class_luna_1_1_hash_map_1aecfd83a95d996d423d5e746946c27fff/#lunahashmaphashmap","text":"HashMap(HashMap &&rhs, const allocator_type &alloc) Constructs a map with an custom allocator and with elements moved from another map.","title":"Luna::HashMap::HashMap"},{"location":"api/class_luna_1_1_hash_map_1aecfd83a95d996d423d5e746946c27fff/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1aecfd83a95d996d423d5e746946c27fff/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_map_1aecfd83a95d996d423d5e746946c27fff/#rhs","text":"The map to move elements from.","title":"rhs"},{"location":"api/class_luna_1_1_hash_map_1aecfd83a95d996d423d5e746946c27fff/#alloc","text":"The allocator to use. The allocator object will be copy-constructed into the map.","title":"alloc"},{"location":"api/class_luna_1_1_hash_map_1af2a080484f0b756af6f218c0e6bae306/","text":"Luna::HashMap::find const_iterator find(const key_type &key) const Finds the specified element in the map. Overview Parameters key The key of the element to find. Return value Returns one const iterator pointing to the element if the elemene is found. Returns end() otherwise.","title":"Luna::HashMap::find"},{"location":"api/class_luna_1_1_hash_map_1af2a080484f0b756af6f218c0e6bae306/#lunahashmapfind","text":"const_iterator find(const key_type &key) const Finds the specified element in the map.","title":"Luna::HashMap::find"},{"location":"api/class_luna_1_1_hash_map_1af2a080484f0b756af6f218c0e6bae306/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_map_1af2a080484f0b756af6f218c0e6bae306/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_map_1af2a080484f0b756af6f218c0e6bae306/#key","text":"The key of the element to find.","title":"key"},{"location":"api/class_luna_1_1_hash_map_1af2a080484f0b756af6f218c0e6bae306/#return-value","text":"Returns one const iterator pointing to the element if the elemene is found. Returns end() otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_hash_set/","text":"Luna::HashSet An container that contains a set of unique objects using open-addressing hashing algorithm. class Luna::HashSet Functions HashSet() Constructs an empty set. HashSet(const allocator_type &alloc) Constructs an empty set with an custom allocator. HashSet(const HashSet &rhs) Constructs a set by coping elements from another set. HashSet(const HashSet &rhs, const allocator_type &alloc) Constructs a set with an custom allocator and with elements copied from another set. HashSet(HashSet &&rhs) Constructs a set by moving elements from another set. HashSet(HashSet &&rhs, const allocator_type &alloc) Constructs a set with an custom allocator and with elements moved from another set. iterator begin() Gets one iterator pointing to the first element of the set. const_iterator begin() const Gets one constant iterator pointing to the first element of the set. const_iterator cbegin() const Gets one constant iterator pointing to the first element of the set. iterator end() Gets one iterator pointing to the one past last element of the set. const_iterator end() const Gets one constant iterator pointing to the one past last element of the set. const_iterator cend() const Gets one constant iterator pointing to the one past last element of the set. bool empty() const Checks whether this set is empty, that is, the size of this set is 0 . usize size() const Gets the size of the set, that is, the number of elements in the set. usize capacity() const Gets the capacity of the set, that is, the number of elements the hash table can hold before expanding the hash table. usize hash_table_size() const Gets the hash table size of the set, that is, the number of slots of the hash table array. f32 load_factor() const Gets the load factor of the set, which can be computed by (f32)size() / (f32)hash_table_size() . f32 max_load_factor() const Gets the maximum load factor allowed for the set. void max_load_factor(f32 ml) Sets the maximum load factor allowed for the set. void clear() Removes all elements in the set. void shrink_to_fit() Reduces the hash table size to a minimum value that satisfy the maximum load factor limitation. hasher hash_function() const Gets the hash function used by this set. key_equal key_eq() const Gets the equality comparison function used by this set. void rehash(usize new_buckets_count) Changes the data table size and rehashes all elements to insert them to the new data table. void reserve(usize new_cap) Expands the data table size to the specified value. iterator find(const key_type &key) Finds the specified element in the set. const_iterator find(const key_type &key) const Finds the specified element in the set. usize count(const key_type &key) const Gets the number of elements whose key is equal to the specified key. bool contains(const key_type &key) const Checks whether at least one element with the specified key exists. Pair< iterator, bool > insert(const value_type &value) Inserts the specified value to the set. Pair< iterator, bool > insert(value_type &&value) Inserts the specified value to the set. Pair< iterator, bool > emplace(_Args &&... args) Constructs one element directly in the set using the provided arguments. iterator erase(const_iterator pos) Removes one element from the set. usize erase(const key_type &key) Removes elements with the specified key from the set. void swap(HashSet &rhs) Swaps elements of this set with the specified set. allocator_type get_allocator() const Gets the allocator used by this set.","title":"Luna::HashSet"},{"location":"api/class_luna_1_1_hash_set/#lunahashset","text":"An container that contains a set of unique objects using open-addressing hashing algorithm. class Luna::HashSet","title":"Luna::HashSet"},{"location":"api/class_luna_1_1_hash_set/#functions","text":"HashSet() Constructs an empty set. HashSet(const allocator_type &alloc) Constructs an empty set with an custom allocator. HashSet(const HashSet &rhs) Constructs a set by coping elements from another set. HashSet(const HashSet &rhs, const allocator_type &alloc) Constructs a set with an custom allocator and with elements copied from another set. HashSet(HashSet &&rhs) Constructs a set by moving elements from another set. HashSet(HashSet &&rhs, const allocator_type &alloc) Constructs a set with an custom allocator and with elements moved from another set. iterator begin() Gets one iterator pointing to the first element of the set. const_iterator begin() const Gets one constant iterator pointing to the first element of the set. const_iterator cbegin() const Gets one constant iterator pointing to the first element of the set. iterator end() Gets one iterator pointing to the one past last element of the set. const_iterator end() const Gets one constant iterator pointing to the one past last element of the set. const_iterator cend() const Gets one constant iterator pointing to the one past last element of the set. bool empty() const Checks whether this set is empty, that is, the size of this set is 0 . usize size() const Gets the size of the set, that is, the number of elements in the set. usize capacity() const Gets the capacity of the set, that is, the number of elements the hash table can hold before expanding the hash table. usize hash_table_size() const Gets the hash table size of the set, that is, the number of slots of the hash table array. f32 load_factor() const Gets the load factor of the set, which can be computed by (f32)size() / (f32)hash_table_size() . f32 max_load_factor() const Gets the maximum load factor allowed for the set. void max_load_factor(f32 ml) Sets the maximum load factor allowed for the set. void clear() Removes all elements in the set. void shrink_to_fit() Reduces the hash table size to a minimum value that satisfy the maximum load factor limitation. hasher hash_function() const Gets the hash function used by this set. key_equal key_eq() const Gets the equality comparison function used by this set. void rehash(usize new_buckets_count) Changes the data table size and rehashes all elements to insert them to the new data table. void reserve(usize new_cap) Expands the data table size to the specified value. iterator find(const key_type &key) Finds the specified element in the set. const_iterator find(const key_type &key) const Finds the specified element in the set. usize count(const key_type &key) const Gets the number of elements whose key is equal to the specified key. bool contains(const key_type &key) const Checks whether at least one element with the specified key exists. Pair< iterator, bool > insert(const value_type &value) Inserts the specified value to the set. Pair< iterator, bool > insert(value_type &&value) Inserts the specified value to the set. Pair< iterator, bool > emplace(_Args &&... args) Constructs one element directly in the set using the provided arguments. iterator erase(const_iterator pos) Removes one element from the set. usize erase(const key_type &key) Removes elements with the specified key from the set. void swap(HashSet &rhs) Swaps elements of this set with the specified set. allocator_type get_allocator() const Gets the allocator used by this set.","title":"Functions"},{"location":"api/class_luna_1_1_hash_set_1a044dbf1291b7cfaae7c7f433d582f937/","text":"Luna::HashSet::emplace template <typename...> Pair< iterator, bool > emplace(_Args &&... args) Constructs one element directly in the set using the provided arguments. Overview Parameters args The arguments to construct the element. _Kty(args...) will be used to construct the element. Return value Returns one iterator-bool pair indicating the result:* If the returned Boolean value is true , then the element is successfully constructed and inserted to the set, and the returned iterator points to the inserted element. If the returned Boolean value is false , then the operation is failed because another element with the same key already exists, and the returned iterator points to the existing element in the set.","title":"Luna::HashSet::emplace"},{"location":"api/class_luna_1_1_hash_set_1a044dbf1291b7cfaae7c7f433d582f937/#lunahashsetemplace","text":"template <typename...> Pair< iterator, bool > emplace(_Args &&... args) Constructs one element directly in the set using the provided arguments.","title":"Luna::HashSet::emplace"},{"location":"api/class_luna_1_1_hash_set_1a044dbf1291b7cfaae7c7f433d582f937/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1a044dbf1291b7cfaae7c7f433d582f937/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_set_1a044dbf1291b7cfaae7c7f433d582f937/#args","text":"The arguments to construct the element. _Kty(args...) will be used to construct the element.","title":"args"},{"location":"api/class_luna_1_1_hash_set_1a044dbf1291b7cfaae7c7f433d582f937/#return-value","text":"Returns one iterator-bool pair indicating the result:* If the returned Boolean value is true , then the element is successfully constructed and inserted to the set, and the returned iterator points to the inserted element. If the returned Boolean value is false , then the operation is failed because another element with the same key already exists, and the returned iterator points to the existing element in the set.","title":"Return value"},{"location":"api/class_luna_1_1_hash_set_1a06d6505d23924bb7039e61c55c3ded85/","text":"Luna::HashSet::HashSet HashSet(HashSet &&rhs) Constructs a set by moving elements from another set. Overview Parameters rhs The set to move elements from.","title":"Luna::HashSet::HashSet"},{"location":"api/class_luna_1_1_hash_set_1a06d6505d23924bb7039e61c55c3ded85/#lunahashsethashset","text":"HashSet(HashSet &&rhs) Constructs a set by moving elements from another set.","title":"Luna::HashSet::HashSet"},{"location":"api/class_luna_1_1_hash_set_1a06d6505d23924bb7039e61c55c3ded85/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1a06d6505d23924bb7039e61c55c3ded85/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_set_1a06d6505d23924bb7039e61c55c3ded85/#rhs","text":"The set to move elements from.","title":"rhs"},{"location":"api/class_luna_1_1_hash_set_1a10b2be386447b0ab61e83d0f5527b688/","text":"Luna::HashSet::key_eq key_equal key_eq() const Gets the equality comparison function used by this set. Overview Return value Returns the equality comparison function used by this set.","title":"Luna::HashSet::key_eq"},{"location":"api/class_luna_1_1_hash_set_1a10b2be386447b0ab61e83d0f5527b688/#lunahashsetkey_eq","text":"key_equal key_eq() const Gets the equality comparison function used by this set.","title":"Luna::HashSet::key_eq"},{"location":"api/class_luna_1_1_hash_set_1a10b2be386447b0ab61e83d0f5527b688/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1a10b2be386447b0ab61e83d0f5527b688/#return-value","text":"Returns the equality comparison function used by this set.","title":"Return value"},{"location":"api/class_luna_1_1_hash_set_1a29305669b60ca1680752e2fc3592ba99/","text":"Luna::HashSet::begin const_iterator begin() const Gets one constant iterator pointing to the first element of the set. Overview Return value Returns one constant iterator pointing to the first element of the set.","title":"Luna::HashSet::begin"},{"location":"api/class_luna_1_1_hash_set_1a29305669b60ca1680752e2fc3592ba99/#lunahashsetbegin","text":"const_iterator begin() const Gets one constant iterator pointing to the first element of the set.","title":"Luna::HashSet::begin"},{"location":"api/class_luna_1_1_hash_set_1a29305669b60ca1680752e2fc3592ba99/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1a29305669b60ca1680752e2fc3592ba99/#return-value","text":"Returns one constant iterator pointing to the first element of the set.","title":"Return value"},{"location":"api/class_luna_1_1_hash_set_1a29790c28710ec0e64b48c2f4edd0b08c/","text":"Luna::HashSet::erase iterator erase(const_iterator pos) Removes one element from the set. Overview Parameters pos The iterator pointing to the element to be removed. Return value Returns one iterator pointing to the next element of the removed element when iterating elements. Valid Usage pos must points to a valid element in the set.","title":"Luna::HashSet::erase"},{"location":"api/class_luna_1_1_hash_set_1a29790c28710ec0e64b48c2f4edd0b08c/#lunahashseterase","text":"iterator erase(const_iterator pos) Removes one element from the set.","title":"Luna::HashSet::erase"},{"location":"api/class_luna_1_1_hash_set_1a29790c28710ec0e64b48c2f4edd0b08c/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1a29790c28710ec0e64b48c2f4edd0b08c/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_set_1a29790c28710ec0e64b48c2f4edd0b08c/#pos","text":"The iterator pointing to the element to be removed.","title":"pos"},{"location":"api/class_luna_1_1_hash_set_1a29790c28710ec0e64b48c2f4edd0b08c/#return-value","text":"Returns one iterator pointing to the next element of the removed element when iterating elements.","title":"Return value"},{"location":"api/class_luna_1_1_hash_set_1a29790c28710ec0e64b48c2f4edd0b08c/#valid-usage","text":"pos must points to a valid element in the set.","title":"Valid Usage"},{"location":"api/class_luna_1_1_hash_set_1a2d5dc5e3872df3149f3c3ac730ff5607/","text":"Luna::HashSet::count usize count(const key_type &key) const Gets the number of elements whose key is equal to the specified key. Overview Parameters key The key of the element to count. Return value Returns the number of elements whose key is equal to the specified key.","title":"Luna::HashSet::count"},{"location":"api/class_luna_1_1_hash_set_1a2d5dc5e3872df3149f3c3ac730ff5607/#lunahashsetcount","text":"usize count(const key_type &key) const Gets the number of elements whose key is equal to the specified key.","title":"Luna::HashSet::count"},{"location":"api/class_luna_1_1_hash_set_1a2d5dc5e3872df3149f3c3ac730ff5607/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1a2d5dc5e3872df3149f3c3ac730ff5607/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_set_1a2d5dc5e3872df3149f3c3ac730ff5607/#key","text":"The key of the element to count.","title":"key"},{"location":"api/class_luna_1_1_hash_set_1a2d5dc5e3872df3149f3c3ac730ff5607/#return-value","text":"Returns the number of elements whose key is equal to the specified key.","title":"Return value"},{"location":"api/class_luna_1_1_hash_set_1a34dd266404ddfcb1683866f0c203904e/","text":"Luna::HashSet::erase usize erase(const key_type &key) Removes elements with the specified key from the set. Overview Parameters key The key of the elements to remove. Return value Returns the number of elements removed by this operation.","title":"Luna::HashSet::erase"},{"location":"api/class_luna_1_1_hash_set_1a34dd266404ddfcb1683866f0c203904e/#lunahashseterase","text":"usize erase(const key_type &key) Removes elements with the specified key from the set.","title":"Luna::HashSet::erase"},{"location":"api/class_luna_1_1_hash_set_1a34dd266404ddfcb1683866f0c203904e/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1a34dd266404ddfcb1683866f0c203904e/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_set_1a34dd266404ddfcb1683866f0c203904e/#key","text":"The key of the elements to remove.","title":"key"},{"location":"api/class_luna_1_1_hash_set_1a34dd266404ddfcb1683866f0c203904e/#return-value","text":"Returns the number of elements removed by this operation.","title":"Return value"},{"location":"api/class_luna_1_1_hash_set_1a39112ae08f6ffc7ee58c6aa79772e094/","text":"Luna::HashSet::cbegin const_iterator cbegin() const Gets one constant iterator pointing to the first element of the set. Overview Return value Returns one constant iterator pointing to the first element of the set.","title":"Luna::HashSet::cbegin"},{"location":"api/class_luna_1_1_hash_set_1a39112ae08f6ffc7ee58c6aa79772e094/#lunahashsetcbegin","text":"const_iterator cbegin() const Gets one constant iterator pointing to the first element of the set.","title":"Luna::HashSet::cbegin"},{"location":"api/class_luna_1_1_hash_set_1a39112ae08f6ffc7ee58c6aa79772e094/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1a39112ae08f6ffc7ee58c6aa79772e094/#return-value","text":"Returns one constant iterator pointing to the first element of the set.","title":"Return value"},{"location":"api/class_luna_1_1_hash_set_1a45549ac2883165244dbc0005a33dac64/","text":"Luna::HashSet::insert Pair< iterator, bool > insert(const value_type &value) Inserts the specified value to the set. Overview Parameters value The value to insert. The element is copy-constructed into the set. Return value Returns one iterator-bool pair indicating the insertion result:* If the returned Boolean value is true , then the element is successfully inserted to the set, and the returned iterator points to the inserted element. If the returned Boolean value is false , then the insertion is failed because another element with the same key already exists, and the returned iterator points to the existing element in the set.","title":"Luna::HashSet::insert"},{"location":"api/class_luna_1_1_hash_set_1a45549ac2883165244dbc0005a33dac64/#lunahashsetinsert","text":"Pair< iterator, bool > insert(const value_type &value) Inserts the specified value to the set.","title":"Luna::HashSet::insert"},{"location":"api/class_luna_1_1_hash_set_1a45549ac2883165244dbc0005a33dac64/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1a45549ac2883165244dbc0005a33dac64/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_set_1a45549ac2883165244dbc0005a33dac64/#value","text":"The value to insert. The element is copy-constructed into the set.","title":"value"},{"location":"api/class_luna_1_1_hash_set_1a45549ac2883165244dbc0005a33dac64/#return-value","text":"Returns one iterator-bool pair indicating the insertion result:* If the returned Boolean value is true , then the element is successfully inserted to the set, and the returned iterator points to the inserted element. If the returned Boolean value is false , then the insertion is failed because another element with the same key already exists, and the returned iterator points to the existing element in the set.","title":"Return value"},{"location":"api/class_luna_1_1_hash_set_1a5a3ff715058dbdd18342edc590656127/","text":"Luna::HashSet::swap void swap(HashSet &rhs) Swaps elements of this set with the specified set. Overview Parameters rhs The set to swap elements with.","title":"Luna::HashSet::swap"},{"location":"api/class_luna_1_1_hash_set_1a5a3ff715058dbdd18342edc590656127/#lunahashsetswap","text":"void swap(HashSet &rhs) Swaps elements of this set with the specified set.","title":"Luna::HashSet::swap"},{"location":"api/class_luna_1_1_hash_set_1a5a3ff715058dbdd18342edc590656127/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1a5a3ff715058dbdd18342edc590656127/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_set_1a5a3ff715058dbdd18342edc590656127/#rhs","text":"The set to swap elements with.","title":"rhs"},{"location":"api/class_luna_1_1_hash_set_1a5f16304f80b6fb253c7b0ead3e16dd18/","text":"Luna::HashSet::shrink_to_fit void shrink_to_fit() Reduces the hash table size to a minimum value that satisfy the maximum load factor limitation. Overview The hash table size can be computed as: ceilf((f32)size() / max_load_factor()) .","title":"Luna::HashSet::shrink_to_fit"},{"location":"api/class_luna_1_1_hash_set_1a5f16304f80b6fb253c7b0ead3e16dd18/#lunahashsetshrink_to_fit","text":"void shrink_to_fit() Reduces the hash table size to a minimum value that satisfy the maximum load factor limitation.","title":"Luna::HashSet::shrink_to_fit"},{"location":"api/class_luna_1_1_hash_set_1a5f16304f80b6fb253c7b0ead3e16dd18/#overview","text":"The hash table size can be computed as: ceilf((f32)size() / max_load_factor()) .","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1a644718bb2fb240de962dc3c9a1fdf0dc/","text":"Luna::HashSet::empty bool empty() const Checks whether this set is empty, that is, the size of this set is 0 . Overview Return value Returns true if this set is empty, returns false otherwise.","title":"Luna::HashSet::empty"},{"location":"api/class_luna_1_1_hash_set_1a644718bb2fb240de962dc3c9a1fdf0dc/#lunahashsetempty","text":"bool empty() const Checks whether this set is empty, that is, the size of this set is 0 .","title":"Luna::HashSet::empty"},{"location":"api/class_luna_1_1_hash_set_1a644718bb2fb240de962dc3c9a1fdf0dc/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1a644718bb2fb240de962dc3c9a1fdf0dc/#return-value","text":"Returns true if this set is empty, returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_hash_set_1a6ce922272e9b48e02c09b0968723b578/","text":"Luna::HashSet::HashSet HashSet(const HashSet &rhs) Constructs a set by coping elements from another set. Overview Parameters rhs The set to copy elements from.","title":"Luna::HashSet::HashSet"},{"location":"api/class_luna_1_1_hash_set_1a6ce922272e9b48e02c09b0968723b578/#lunahashsethashset","text":"HashSet(const HashSet &rhs) Constructs a set by coping elements from another set.","title":"Luna::HashSet::HashSet"},{"location":"api/class_luna_1_1_hash_set_1a6ce922272e9b48e02c09b0968723b578/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1a6ce922272e9b48e02c09b0968723b578/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_set_1a6ce922272e9b48e02c09b0968723b578/#rhs","text":"The set to copy elements from.","title":"rhs"},{"location":"api/class_luna_1_1_hash_set_1a6e99c6263568d88f95ca01dc694f1051/","text":"Luna::HashSet::get_allocator allocator_type get_allocator() const Gets the allocator used by this set. Overview Return value Returns one copy of the allocator used by this set.","title":"Luna::HashSet::get_allocator"},{"location":"api/class_luna_1_1_hash_set_1a6e99c6263568d88f95ca01dc694f1051/#lunahashsetget_allocator","text":"allocator_type get_allocator() const Gets the allocator used by this set.","title":"Luna::HashSet::get_allocator"},{"location":"api/class_luna_1_1_hash_set_1a6e99c6263568d88f95ca01dc694f1051/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1a6e99c6263568d88f95ca01dc694f1051/#return-value","text":"Returns one copy of the allocator used by this set.","title":"Return value"},{"location":"api/class_luna_1_1_hash_set_1a72ffe2880da1c06d22d90000f9720967/","text":"Luna::HashSet::hash_function hasher hash_function() const Gets the hash function used by this set. Overview Return value Returns the hash function used by this set.","title":"Luna::HashSet::hash_function"},{"location":"api/class_luna_1_1_hash_set_1a72ffe2880da1c06d22d90000f9720967/#lunahashsethash_function","text":"hasher hash_function() const Gets the hash function used by this set.","title":"Luna::HashSet::hash_function"},{"location":"api/class_luna_1_1_hash_set_1a72ffe2880da1c06d22d90000f9720967/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1a72ffe2880da1c06d22d90000f9720967/#return-value","text":"Returns the hash function used by this set.","title":"Return value"},{"location":"api/class_luna_1_1_hash_set_1a79348f1b7c06b34052b42656a0279429/","text":"Luna::HashSet::size usize size() const Gets the size of the set, that is, the number of elements in the set. Overview Return value Returns the size of the set.","title":"Luna::HashSet::size"},{"location":"api/class_luna_1_1_hash_set_1a79348f1b7c06b34052b42656a0279429/#lunahashsetsize","text":"usize size() const Gets the size of the set, that is, the number of elements in the set.","title":"Luna::HashSet::size"},{"location":"api/class_luna_1_1_hash_set_1a79348f1b7c06b34052b42656a0279429/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1a79348f1b7c06b34052b42656a0279429/#return-value","text":"Returns the size of the set.","title":"Return value"},{"location":"api/class_luna_1_1_hash_set_1a8310d342fe4cb01c756c739667b09466/","text":"Luna::HashSet::HashSet HashSet(const HashSet &rhs, const allocator_type &alloc) Constructs a set with an custom allocator and with elements copied from another set. Overview Parameters rhs The set to copy elements from. alloc The allocator to use. The allocator object will be copy-constructed into the set.","title":"Luna::HashSet::HashSet"},{"location":"api/class_luna_1_1_hash_set_1a8310d342fe4cb01c756c739667b09466/#lunahashsethashset","text":"HashSet(const HashSet &rhs, const allocator_type &alloc) Constructs a set with an custom allocator and with elements copied from another set.","title":"Luna::HashSet::HashSet"},{"location":"api/class_luna_1_1_hash_set_1a8310d342fe4cb01c756c739667b09466/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1a8310d342fe4cb01c756c739667b09466/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_set_1a8310d342fe4cb01c756c739667b09466/#rhs","text":"The set to copy elements from.","title":"rhs"},{"location":"api/class_luna_1_1_hash_set_1a8310d342fe4cb01c756c739667b09466/#alloc","text":"The allocator to use. The allocator object will be copy-constructed into the set.","title":"alloc"},{"location":"api/class_luna_1_1_hash_set_1a9102a0c114eea9587ad22afc2a1ccc3c/","text":"Luna::HashSet::max_load_factor void max_load_factor(f32 ml) Sets the maximum load factor allowed for the set. Overview If the new load factor is smaller than load_factor() , the set will expand the hash table to bring more hash table slots. Parameters ml The new load factor to set. Valid Usage ml must between [ 0.0 , 1.0 ].","title":"Luna::HashSet::max_load_factor"},{"location":"api/class_luna_1_1_hash_set_1a9102a0c114eea9587ad22afc2a1ccc3c/#lunahashsetmax_load_factor","text":"void max_load_factor(f32 ml) Sets the maximum load factor allowed for the set.","title":"Luna::HashSet::max_load_factor"},{"location":"api/class_luna_1_1_hash_set_1a9102a0c114eea9587ad22afc2a1ccc3c/#overview","text":"If the new load factor is smaller than load_factor() , the set will expand the hash table to bring more hash table slots.","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1a9102a0c114eea9587ad22afc2a1ccc3c/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_set_1a9102a0c114eea9587ad22afc2a1ccc3c/#ml","text":"The new load factor to set.","title":"ml"},{"location":"api/class_luna_1_1_hash_set_1a9102a0c114eea9587ad22afc2a1ccc3c/#valid-usage","text":"ml must between [ 0.0 , 1.0 ].","title":"Valid Usage"},{"location":"api/class_luna_1_1_hash_set_1a93791e61ab486b4022c389d634b4facc/","text":"Luna::HashSet::cend const_iterator cend() const Gets one constant iterator pointing to the one past last element of the set. Overview Return value Returns one constant iterator pointing to the one past last element of the set.","title":"Luna::HashSet::cend"},{"location":"api/class_luna_1_1_hash_set_1a93791e61ab486b4022c389d634b4facc/#lunahashsetcend","text":"const_iterator cend() const Gets one constant iterator pointing to the one past last element of the set.","title":"Luna::HashSet::cend"},{"location":"api/class_luna_1_1_hash_set_1a93791e61ab486b4022c389d634b4facc/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1a93791e61ab486b4022c389d634b4facc/#return-value","text":"Returns one constant iterator pointing to the one past last element of the set.","title":"Return value"},{"location":"api/class_luna_1_1_hash_set_1a98c20997abc3070d80e9c2e70afa0493/","text":"Luna::HashSet::load_factor f32 load_factor() const Gets the load factor of the set, which can be computed by (f32)size() / (f32)hash_table_size() . Overview Return value Returns the load factor of the set.","title":"Luna::HashSet::load_factor"},{"location":"api/class_luna_1_1_hash_set_1a98c20997abc3070d80e9c2e70afa0493/#lunahashsetload_factor","text":"f32 load_factor() const Gets the load factor of the set, which can be computed by (f32)size() / (f32)hash_table_size() .","title":"Luna::HashSet::load_factor"},{"location":"api/class_luna_1_1_hash_set_1a98c20997abc3070d80e9c2e70afa0493/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1a98c20997abc3070d80e9c2e70afa0493/#return-value","text":"Returns the load factor of the set.","title":"Return value"},{"location":"api/class_luna_1_1_hash_set_1a9c9766a96c492f3e9e5861d6b4f87387/","text":"Luna::HashSet::find iterator find(const key_type &key) Finds the specified element in the set. Overview Parameters key The key of the element to find. Return value Returns one iterator pointing to the element if the elemene is found. Returns end() otherwise.","title":"Luna::HashSet::find"},{"location":"api/class_luna_1_1_hash_set_1a9c9766a96c492f3e9e5861d6b4f87387/#lunahashsetfind","text":"iterator find(const key_type &key) Finds the specified element in the set.","title":"Luna::HashSet::find"},{"location":"api/class_luna_1_1_hash_set_1a9c9766a96c492f3e9e5861d6b4f87387/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1a9c9766a96c492f3e9e5861d6b4f87387/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_set_1a9c9766a96c492f3e9e5861d6b4f87387/#key","text":"The key of the element to find.","title":"key"},{"location":"api/class_luna_1_1_hash_set_1a9c9766a96c492f3e9e5861d6b4f87387/#return-value","text":"Returns one iterator pointing to the element if the elemene is found. Returns end() otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_hash_set_1aa0b05f4f6c691fbe71159c631dded53b/","text":"Luna::HashSet::contains bool contains(const key_type &key) const Checks whether at least one element with the specified key exists. Overview Parameters key The key of the element to check. Return value Returns ture if at least one element with the specified key exists. Returns false otherwise.","title":"Luna::HashSet::contains"},{"location":"api/class_luna_1_1_hash_set_1aa0b05f4f6c691fbe71159c631dded53b/#lunahashsetcontains","text":"bool contains(const key_type &key) const Checks whether at least one element with the specified key exists.","title":"Luna::HashSet::contains"},{"location":"api/class_luna_1_1_hash_set_1aa0b05f4f6c691fbe71159c631dded53b/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1aa0b05f4f6c691fbe71159c631dded53b/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_set_1aa0b05f4f6c691fbe71159c631dded53b/#key","text":"The key of the element to check.","title":"key"},{"location":"api/class_luna_1_1_hash_set_1aa0b05f4f6c691fbe71159c631dded53b/#return-value","text":"Returns ture if at least one element with the specified key exists. Returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_hash_set_1aa1c32ac6498d3f6d21cab98d1cbf3455/","text":"Luna::HashSet::reserve void reserve(usize new_cap) Expands the data table size to the specified value. Overview Parameters new_cap The new data table size to expand to.","title":"Luna::HashSet::reserve"},{"location":"api/class_luna_1_1_hash_set_1aa1c32ac6498d3f6d21cab98d1cbf3455/#lunahashsetreserve","text":"void reserve(usize new_cap) Expands the data table size to the specified value.","title":"Luna::HashSet::reserve"},{"location":"api/class_luna_1_1_hash_set_1aa1c32ac6498d3f6d21cab98d1cbf3455/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1aa1c32ac6498d3f6d21cab98d1cbf3455/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_set_1aa1c32ac6498d3f6d21cab98d1cbf3455/#new_cap","text":"The new data table size to expand to.","title":"new_cap"},{"location":"api/class_luna_1_1_hash_set_1aa4f0e7330b8f252895e4efe56ff777e9/","text":"Luna::HashSet::HashSet HashSet() Constructs an empty set.","title":"Luna::HashSet::HashSet"},{"location":"api/class_luna_1_1_hash_set_1aa4f0e7330b8f252895e4efe56ff777e9/#lunahashsethashset","text":"HashSet() Constructs an empty set.","title":"Luna::HashSet::HashSet"},{"location":"api/class_luna_1_1_hash_set_1aa9af2af24db0f9dd476c29bc7ec7105b/","text":"Luna::HashSet::rehash void rehash(usize new_buckets_count) Changes the data table size and rehashes all elements to insert them to the new data table. Overview Parameters new_data_table_size The new data table size to set.","title":"Luna::HashSet::rehash"},{"location":"api/class_luna_1_1_hash_set_1aa9af2af24db0f9dd476c29bc7ec7105b/#lunahashsetrehash","text":"void rehash(usize new_buckets_count) Changes the data table size and rehashes all elements to insert them to the new data table.","title":"Luna::HashSet::rehash"},{"location":"api/class_luna_1_1_hash_set_1aa9af2af24db0f9dd476c29bc7ec7105b/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1aa9af2af24db0f9dd476c29bc7ec7105b/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_set_1aa9af2af24db0f9dd476c29bc7ec7105b/#new_data_table_size","text":"The new data table size to set.","title":"new_data_table_size"},{"location":"api/class_luna_1_1_hash_set_1ac3e1671dc4e34c755a583cc4a7593aa9/","text":"Luna::HashSet::HashSet HashSet(const allocator_type &alloc) Constructs an empty set with an custom allocator. Overview Parameters alloc The allocator to use. The allocator object will be copy-constructed into the set.","title":"Luna::HashSet::HashSet"},{"location":"api/class_luna_1_1_hash_set_1ac3e1671dc4e34c755a583cc4a7593aa9/#lunahashsethashset","text":"HashSet(const allocator_type &alloc) Constructs an empty set with an custom allocator.","title":"Luna::HashSet::HashSet"},{"location":"api/class_luna_1_1_hash_set_1ac3e1671dc4e34c755a583cc4a7593aa9/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1ac3e1671dc4e34c755a583cc4a7593aa9/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_set_1ac3e1671dc4e34c755a583cc4a7593aa9/#alloc","text":"The allocator to use. The allocator object will be copy-constructed into the set.","title":"alloc"},{"location":"api/class_luna_1_1_hash_set_1ac8bb3912a3ce86b15842e79d0b421204/","text":"Luna::HashSet::clear void clear() Removes all elements in the set.","title":"Luna::HashSet::clear"},{"location":"api/class_luna_1_1_hash_set_1ac8bb3912a3ce86b15842e79d0b421204/#lunahashsetclear","text":"void clear() Removes all elements in the set.","title":"Luna::HashSet::clear"},{"location":"api/class_luna_1_1_hash_set_1acad38d52497a975bfb6f2f6acd76631f/","text":"Luna::HashSet::end iterator end() Gets one iterator pointing to the one past last element of the set. Overview Return value Returns one iterator pointing to the one past last element of the set.","title":"Luna::HashSet::end"},{"location":"api/class_luna_1_1_hash_set_1acad38d52497a975bfb6f2f6acd76631f/#lunahashsetend","text":"iterator end() Gets one iterator pointing to the one past last element of the set.","title":"Luna::HashSet::end"},{"location":"api/class_luna_1_1_hash_set_1acad38d52497a975bfb6f2f6acd76631f/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1acad38d52497a975bfb6f2f6acd76631f/#return-value","text":"Returns one iterator pointing to the one past last element of the set.","title":"Return value"},{"location":"api/class_luna_1_1_hash_set_1accf9a4bd0c34d4a5f6a7dab66ea10cdc/","text":"Luna::HashSet::end const_iterator end() const Gets one constant iterator pointing to the one past last element of the set. Overview Return value Returns one constant iterator pointing to the one past last element of the set.","title":"Luna::HashSet::end"},{"location":"api/class_luna_1_1_hash_set_1accf9a4bd0c34d4a5f6a7dab66ea10cdc/#lunahashsetend","text":"const_iterator end() const Gets one constant iterator pointing to the one past last element of the set.","title":"Luna::HashSet::end"},{"location":"api/class_luna_1_1_hash_set_1accf9a4bd0c34d4a5f6a7dab66ea10cdc/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1accf9a4bd0c34d4a5f6a7dab66ea10cdc/#return-value","text":"Returns one constant iterator pointing to the one past last element of the set.","title":"Return value"},{"location":"api/class_luna_1_1_hash_set_1ace4cb83fbe1efc093ab5cd0180cc6868/","text":"Luna::HashSet::hash_table_size usize hash_table_size() const Gets the hash table size of the set, that is, the number of slots of the hash table array. Overview Return value Returns the hash table size of the set.","title":"Luna::HashSet::hash_table_size"},{"location":"api/class_luna_1_1_hash_set_1ace4cb83fbe1efc093ab5cd0180cc6868/#lunahashsethash_table_size","text":"usize hash_table_size() const Gets the hash table size of the set, that is, the number of slots of the hash table array.","title":"Luna::HashSet::hash_table_size"},{"location":"api/class_luna_1_1_hash_set_1ace4cb83fbe1efc093ab5cd0180cc6868/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1ace4cb83fbe1efc093ab5cd0180cc6868/#return-value","text":"Returns the hash table size of the set.","title":"Return value"},{"location":"api/class_luna_1_1_hash_set_1ad69bd11391be1a1dba5c8202259664f8/","text":"Luna::HashSet::begin iterator begin() Gets one iterator pointing to the first element of the set. Overview Return value Returns one iterator pointing to the first element of the set.","title":"Luna::HashSet::begin"},{"location":"api/class_luna_1_1_hash_set_1ad69bd11391be1a1dba5c8202259664f8/#lunahashsetbegin","text":"iterator begin() Gets one iterator pointing to the first element of the set.","title":"Luna::HashSet::begin"},{"location":"api/class_luna_1_1_hash_set_1ad69bd11391be1a1dba5c8202259664f8/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1ad69bd11391be1a1dba5c8202259664f8/#return-value","text":"Returns one iterator pointing to the first element of the set.","title":"Return value"},{"location":"api/class_luna_1_1_hash_set_1ad96bf59cb22e917cbd210ba068e8acb3/","text":"Luna::HashSet::capacity usize capacity() const Gets the capacity of the set, that is, the number of elements the hash table can hold before expanding the hash table. Overview Return value Returns the capacity of the set.","title":"Luna::HashSet::capacity"},{"location":"api/class_luna_1_1_hash_set_1ad96bf59cb22e917cbd210ba068e8acb3/#lunahashsetcapacity","text":"usize capacity() const Gets the capacity of the set, that is, the number of elements the hash table can hold before expanding the hash table.","title":"Luna::HashSet::capacity"},{"location":"api/class_luna_1_1_hash_set_1ad96bf59cb22e917cbd210ba068e8acb3/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1ad96bf59cb22e917cbd210ba068e8acb3/#return-value","text":"Returns the capacity of the set.","title":"Return value"},{"location":"api/class_luna_1_1_hash_set_1adfc3632f295d0c500bafbe68b91757f8/","text":"Luna::HashSet::insert Pair< iterator, bool > insert(value_type &&value) Inserts the specified value to the set. Overview Parameters value The value to insert. The element is move-constructed into the set. Return value Returns one iterator-bool pair indicating the insertion result:* If the returned Boolean value is true , then the element is successfully inserted to the set, and the returned iterator points to the inserted element. If the returned Boolean value is false , then the insertion is failed because another element with the same key already exists, and the returned iterator points to the existing element in the set.","title":"Luna::HashSet::insert"},{"location":"api/class_luna_1_1_hash_set_1adfc3632f295d0c500bafbe68b91757f8/#lunahashsetinsert","text":"Pair< iterator, bool > insert(value_type &&value) Inserts the specified value to the set.","title":"Luna::HashSet::insert"},{"location":"api/class_luna_1_1_hash_set_1adfc3632f295d0c500bafbe68b91757f8/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1adfc3632f295d0c500bafbe68b91757f8/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_set_1adfc3632f295d0c500bafbe68b91757f8/#value","text":"The value to insert. The element is move-constructed into the set.","title":"value"},{"location":"api/class_luna_1_1_hash_set_1adfc3632f295d0c500bafbe68b91757f8/#return-value","text":"Returns one iterator-bool pair indicating the insertion result:* If the returned Boolean value is true , then the element is successfully inserted to the set, and the returned iterator points to the inserted element. If the returned Boolean value is false , then the insertion is failed because another element with the same key already exists, and the returned iterator points to the existing element in the set.","title":"Return value"},{"location":"api/class_luna_1_1_hash_set_1aeaf4c216b4d13706a981282ecdb6f56c/","text":"Luna::HashSet::HashSet HashSet(HashSet &&rhs, const allocator_type &alloc) Constructs a set with an custom allocator and with elements moved from another set. Overview Parameters rhs The set to move elements from. alloc The allocator to use. The allocator object will be copy-constructed into the set.","title":"Luna::HashSet::HashSet"},{"location":"api/class_luna_1_1_hash_set_1aeaf4c216b4d13706a981282ecdb6f56c/#lunahashsethashset","text":"HashSet(HashSet &&rhs, const allocator_type &alloc) Constructs a set with an custom allocator and with elements moved from another set.","title":"Luna::HashSet::HashSet"},{"location":"api/class_luna_1_1_hash_set_1aeaf4c216b4d13706a981282ecdb6f56c/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1aeaf4c216b4d13706a981282ecdb6f56c/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_set_1aeaf4c216b4d13706a981282ecdb6f56c/#rhs","text":"The set to move elements from.","title":"rhs"},{"location":"api/class_luna_1_1_hash_set_1aeaf4c216b4d13706a981282ecdb6f56c/#alloc","text":"The allocator to use. The allocator object will be copy-constructed into the set.","title":"alloc"},{"location":"api/class_luna_1_1_hash_set_1aebb6ef2d39e739cc28a67244e423a3a8/","text":"Luna::HashSet::max_load_factor f32 max_load_factor() const Gets the maximum load factor allowed for the set. Overview If load_factor() > max_load_factor() is true after one element is inserted, the set will expand the hash table to bring more hash table slots. Return value Returns the maximum load factor allowed for the set.","title":"Luna::HashSet::max_load_factor"},{"location":"api/class_luna_1_1_hash_set_1aebb6ef2d39e739cc28a67244e423a3a8/#lunahashsetmax_load_factor","text":"f32 max_load_factor() const Gets the maximum load factor allowed for the set.","title":"Luna::HashSet::max_load_factor"},{"location":"api/class_luna_1_1_hash_set_1aebb6ef2d39e739cc28a67244e423a3a8/#overview","text":"If load_factor() > max_load_factor() is true after one element is inserted, the set will expand the hash table to bring more hash table slots.","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1aebb6ef2d39e739cc28a67244e423a3a8/#return-value","text":"Returns the maximum load factor allowed for the set.","title":"Return value"},{"location":"api/class_luna_1_1_hash_set_1af2a080484f0b756af6f218c0e6bae306/","text":"Luna::HashSet::find const_iterator find(const key_type &key) const Finds the specified element in the set. Overview Parameters key The key of the element to find. Return value Returns one const iterator pointing to the element if the elemene is found. Returns end() otherwise.","title":"Luna::HashSet::find"},{"location":"api/class_luna_1_1_hash_set_1af2a080484f0b756af6f218c0e6bae306/#lunahashsetfind","text":"const_iterator find(const key_type &key) const Finds the specified element in the set.","title":"Luna::HashSet::find"},{"location":"api/class_luna_1_1_hash_set_1af2a080484f0b756af6f218c0e6bae306/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_hash_set_1af2a080484f0b756af6f218c0e6bae306/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_hash_set_1af2a080484f0b756af6f218c0e6bae306/#key","text":"The key of the element to find.","title":"key"},{"location":"api/class_luna_1_1_hash_set_1af2a080484f0b756af6f218c0e6bae306/#return-value","text":"Returns one const iterator pointing to the element if the elemene is found. Returns end() otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_list/","text":"Luna::List A container that stores elements as double-linked lists (nodes connected by pointers). class Luna::List Functions List() Constructs an empty list. List(const allocator_type &alloc) Constructs an empty list with an custom allocator. List(usize count, const_reference value, const allocator_type &alloc=allocator_type()) Constructs a list with the specified number of elements. List(usize count, const allocator_type &alloc=allocator_type()) Constructs a list with the specified number of elements. Elements will be default-initialized. List(enable_if_t<!is_integral_v< _InputIt >, _InputIt > first, _InputIt last, const allocator_type &alloc=allocator_type()) Constructs a list with elements specified by one range. Elements in the range will be copy-inserted into the list. List(const List &rhs) Constructs a list by copying elements from another list. List(const List &rhs, const allocator_type &alloc) Constructs a list with an custom allocator and with elements copied from another list. List(List &&rhs) Constructs a list by moving elements from another list. List(List &&rhs, const allocator_type &alloc) Constructs a list with an custom allocator and with elements moved from another list. List(InitializerList< value_type > ilist, const allocator_type &alloc=allocator_type()) Constructs a list with elements specified by one initializer list. List< _Ty, _Alloc > & operator=(const List &rhs) Replaces elements of the list by coping elements from another list. List< _Ty, _Alloc > & operator=(List &&rhs) Replaces elements of the list by moving elements from another list. List< _Ty, _Alloc > & operator=(InitializerList< value_type > ilist) Replaces elements of the list by elements from one initializer list. void assign(usize count, const value_type &value) Replaces elements of the list by several copies of the specified value. auto assign(_InputIt first, _InputIt last) -> enable_if_t<!is_integral_v< _InputIt >, void > Replaces elements of the list by elements specified by one range. Elements in the range will be copy-inserted into the list. void assign(InitializerList< value_type > ilist) Replaces elements of the list by elements from one initializer list. List< _Ty, _Alloc >::reference front() Gets the first element in the list. List< _Ty, _Alloc >::const_reference front() const Gets the first element in the list. List< _Ty, _Alloc >::reference back() Gets the last element in the list. List< _Ty, _Alloc >::const_reference back() const Gets the last element in the list. List< _Ty, _Alloc >::iterator begin() Gets one iterator pointing to the first element of the list. List< _Ty, _Alloc >::const_iterator begin() const Gets one constant iterator pointing to the first element of the list. List< _Ty, _Alloc >::const_iterator cbegin() const Gets one constant iterator pointing to the first element of the list. List< _Ty, _Alloc >::iterator end() Gets one iterator pointing to the one past last element of the list. List< _Ty, _Alloc >::const_iterator end() const Gets one constant iterator pointing to the one past last element of the list. List< _Ty, _Alloc >::const_iterator cend() const Gets one constant iterator pointing to the one past last element of the list. List< _Ty, _Alloc >::reverse_iterator rbegin() Gets one reverse iterator pointing to the last element of the list. List< _Ty, _Alloc >::const_reverse_iterator rbegin() const Gets one constant reverse iterator pointing to the last element of the list. List< _Ty, _Alloc >::const_reverse_iterator crbegin() const Gets one constant reverse iterator pointing to the last element of the list. List< _Ty, _Alloc >::reverse_iterator rend() Gets one reverse iterator pointing to the one-before-first element of the list. List< _Ty, _Alloc >::const_reverse_iterator rend() const Gets one constant reverse iterator pointing to the one-before-first element of the list. List< _Ty, _Alloc >::const_reverse_iterator crend() const Gets one constant reverse iterator pointing to the one-before-first element of the list. bool empty() const Checks whether this list is empty, that is, the size of this list is 0 . usize size() const Gets the size of the list, that is, the number of elements in the list. void clear() Removes all elements in the list. List< _Ty, _Alloc >::iterator insert(const_iterator pos, const value_type &value) Inserts the specified element to the list. List< _Ty, _Alloc >::iterator insert(const_iterator pos, value_type &&value) Inserts the specified element to the list. List< _Ty, _Alloc >::iterator insert(const_iterator pos, usize count, const value_type &value) Inserts several copies of the element to the list. auto insert(const_iterator pos, _InputIt first, _InputIt last) -> enable_if_t<!is_integral_v< _InputIt >, List< _Ty, _Alloc >::iterator > Inserts one range of elements to the list. List< _Ty, _Alloc >::iterator insert(const_iterator pos, InitializerList< value_type > ilist) Inserts one range of elements specified by the initializer list to the list. List< _Ty, _Alloc >::iterator emplace(const_iterator pos, _Args &&... args) Constructs one element directly on the specified position of the list using the provided arguments. List< _Ty, _Alloc >::iterator erase(const_iterator pos) Removes one element from the list. List< _Ty, _Alloc >::iterator erase(const_iterator first, const_iterator last) Removes one range of elements from the list. void push_back(const value_type &value) Inserts one element at the back of the list. void push_back(value_type &&value) Inserts one element at the back of the list. List< _Ty, _Alloc >::reference emplace_back(_Args &&... args) Constructs one element directly on the back of the list using the provided arguments. void pop_back() Removes the last element of the list. void push_front(const value_type &value) Inserts one element at the front of the list. void push_front(value_type &&value) Inserts one element at the front of the list. List< _Ty, _Alloc >::reference emplace_front(_Args &&... args) Constructs one element directly on the front of the list using the provided arguments. void pop_front() Removes the first element of the list. void resize(usize count) Changes the number of elements in the list. void resize(usize count, const value_type &value) Changes the number of elements in the list. void swap(List &rhs) Swaps elements of this list with the specified list. void merge(List &other) Merges another list into this list. void merge(List &&other) Merges another list into this list. void merge(List &other, _Compare comp) Merges another list into this list. void merge(List &&other, _Compare comp) Merges another list into this list. void splice(const_iterator pos, List &other) Transfers all elements from another list to this list. void splice(const_iterator pos, List &&other) Transfers all elements from another list to this list. void splice(const_iterator pos, List &other, const_iterator it) Transfers one element from another list to this list. void splice(const_iterator pos, List &&other, const_iterator it) Transfers one element from another list to this list. void splice(const_iterator pos, List &other, const_iterator first, const_iterator last) Transfers elements from another list to this list. void splice(const_iterator pos, List &&other, const_iterator first, const_iterator last) Transfers elements from another list to this list. usize remove(const value_type &value) Removes all elements that are equal to value. usize remove_if(_UnaryPredicate p) Removes all elements for which the specified predicate returns true . void reverse() Reverses the order of the elements in the list. usize unique() Removes all consecutive duplicate elements from the container. usize unique(_BinaryPredicate p) Removes all consecutive duplicate elements from the container. void sort() Sorts elements in ascending order. void sort(_Compare comp) Sorts elements in using the user-specified comparison function object. List< _Ty, _Alloc >::allocator_type get_allocator() const Gets the allocator of the list.","title":"Luna::List"},{"location":"api/class_luna_1_1_list/#lunalist","text":"A container that stores elements as double-linked lists (nodes connected by pointers). class Luna::List","title":"Luna::List"},{"location":"api/class_luna_1_1_list/#functions","text":"List() Constructs an empty list. List(const allocator_type &alloc) Constructs an empty list with an custom allocator. List(usize count, const_reference value, const allocator_type &alloc=allocator_type()) Constructs a list with the specified number of elements. List(usize count, const allocator_type &alloc=allocator_type()) Constructs a list with the specified number of elements. Elements will be default-initialized. List(enable_if_t<!is_integral_v< _InputIt >, _InputIt > first, _InputIt last, const allocator_type &alloc=allocator_type()) Constructs a list with elements specified by one range. Elements in the range will be copy-inserted into the list. List(const List &rhs) Constructs a list by copying elements from another list. List(const List &rhs, const allocator_type &alloc) Constructs a list with an custom allocator and with elements copied from another list. List(List &&rhs) Constructs a list by moving elements from another list. List(List &&rhs, const allocator_type &alloc) Constructs a list with an custom allocator and with elements moved from another list. List(InitializerList< value_type > ilist, const allocator_type &alloc=allocator_type()) Constructs a list with elements specified by one initializer list. List< _Ty, _Alloc > & operator=(const List &rhs) Replaces elements of the list by coping elements from another list. List< _Ty, _Alloc > & operator=(List &&rhs) Replaces elements of the list by moving elements from another list. List< _Ty, _Alloc > & operator=(InitializerList< value_type > ilist) Replaces elements of the list by elements from one initializer list. void assign(usize count, const value_type &value) Replaces elements of the list by several copies of the specified value. auto assign(_InputIt first, _InputIt last) -> enable_if_t<!is_integral_v< _InputIt >, void > Replaces elements of the list by elements specified by one range. Elements in the range will be copy-inserted into the list. void assign(InitializerList< value_type > ilist) Replaces elements of the list by elements from one initializer list. List< _Ty, _Alloc >::reference front() Gets the first element in the list. List< _Ty, _Alloc >::const_reference front() const Gets the first element in the list. List< _Ty, _Alloc >::reference back() Gets the last element in the list. List< _Ty, _Alloc >::const_reference back() const Gets the last element in the list. List< _Ty, _Alloc >::iterator begin() Gets one iterator pointing to the first element of the list. List< _Ty, _Alloc >::const_iterator begin() const Gets one constant iterator pointing to the first element of the list. List< _Ty, _Alloc >::const_iterator cbegin() const Gets one constant iterator pointing to the first element of the list. List< _Ty, _Alloc >::iterator end() Gets one iterator pointing to the one past last element of the list. List< _Ty, _Alloc >::const_iterator end() const Gets one constant iterator pointing to the one past last element of the list. List< _Ty, _Alloc >::const_iterator cend() const Gets one constant iterator pointing to the one past last element of the list. List< _Ty, _Alloc >::reverse_iterator rbegin() Gets one reverse iterator pointing to the last element of the list. List< _Ty, _Alloc >::const_reverse_iterator rbegin() const Gets one constant reverse iterator pointing to the last element of the list. List< _Ty, _Alloc >::const_reverse_iterator crbegin() const Gets one constant reverse iterator pointing to the last element of the list. List< _Ty, _Alloc >::reverse_iterator rend() Gets one reverse iterator pointing to the one-before-first element of the list. List< _Ty, _Alloc >::const_reverse_iterator rend() const Gets one constant reverse iterator pointing to the one-before-first element of the list. List< _Ty, _Alloc >::const_reverse_iterator crend() const Gets one constant reverse iterator pointing to the one-before-first element of the list. bool empty() const Checks whether this list is empty, that is, the size of this list is 0 . usize size() const Gets the size of the list, that is, the number of elements in the list. void clear() Removes all elements in the list. List< _Ty, _Alloc >::iterator insert(const_iterator pos, const value_type &value) Inserts the specified element to the list. List< _Ty, _Alloc >::iterator insert(const_iterator pos, value_type &&value) Inserts the specified element to the list. List< _Ty, _Alloc >::iterator insert(const_iterator pos, usize count, const value_type &value) Inserts several copies of the element to the list. auto insert(const_iterator pos, _InputIt first, _InputIt last) -> enable_if_t<!is_integral_v< _InputIt >, List< _Ty, _Alloc >::iterator > Inserts one range of elements to the list. List< _Ty, _Alloc >::iterator insert(const_iterator pos, InitializerList< value_type > ilist) Inserts one range of elements specified by the initializer list to the list. List< _Ty, _Alloc >::iterator emplace(const_iterator pos, _Args &&... args) Constructs one element directly on the specified position of the list using the provided arguments. List< _Ty, _Alloc >::iterator erase(const_iterator pos) Removes one element from the list. List< _Ty, _Alloc >::iterator erase(const_iterator first, const_iterator last) Removes one range of elements from the list. void push_back(const value_type &value) Inserts one element at the back of the list. void push_back(value_type &&value) Inserts one element at the back of the list. List< _Ty, _Alloc >::reference emplace_back(_Args &&... args) Constructs one element directly on the back of the list using the provided arguments. void pop_back() Removes the last element of the list. void push_front(const value_type &value) Inserts one element at the front of the list. void push_front(value_type &&value) Inserts one element at the front of the list. List< _Ty, _Alloc >::reference emplace_front(_Args &&... args) Constructs one element directly on the front of the list using the provided arguments. void pop_front() Removes the first element of the list. void resize(usize count) Changes the number of elements in the list. void resize(usize count, const value_type &value) Changes the number of elements in the list. void swap(List &rhs) Swaps elements of this list with the specified list. void merge(List &other) Merges another list into this list. void merge(List &&other) Merges another list into this list. void merge(List &other, _Compare comp) Merges another list into this list. void merge(List &&other, _Compare comp) Merges another list into this list. void splice(const_iterator pos, List &other) Transfers all elements from another list to this list. void splice(const_iterator pos, List &&other) Transfers all elements from another list to this list. void splice(const_iterator pos, List &other, const_iterator it) Transfers one element from another list to this list. void splice(const_iterator pos, List &&other, const_iterator it) Transfers one element from another list to this list. void splice(const_iterator pos, List &other, const_iterator first, const_iterator last) Transfers elements from another list to this list. void splice(const_iterator pos, List &&other, const_iterator first, const_iterator last) Transfers elements from another list to this list. usize remove(const value_type &value) Removes all elements that are equal to value. usize remove_if(_UnaryPredicate p) Removes all elements for which the specified predicate returns true . void reverse() Reverses the order of the elements in the list. usize unique() Removes all consecutive duplicate elements from the container. usize unique(_BinaryPredicate p) Removes all consecutive duplicate elements from the container. void sort() Sorts elements in ascending order. void sort(_Compare comp) Sorts elements in using the user-specified comparison function object. List< _Ty, _Alloc >::allocator_type get_allocator() const Gets the allocator of the list.","title":"Functions"},{"location":"api/class_luna_1_1_list_1a03d8c556a366c8122ccddfc9c24e6ddc/","text":"Luna::List::remove_if template <typename _UnaryPredicate> usize remove_if(_UnaryPredicate p) Removes all elements for which the specified predicate returns true . Overview Parameters p The unary predicate which returns \u200btrue if the element should be removed. Return value Returns the number of elements removed.","title":"Luna::List::remove_if"},{"location":"api/class_luna_1_1_list_1a03d8c556a366c8122ccddfc9c24e6ddc/#lunalistremove_if","text":"template <typename _UnaryPredicate> usize remove_if(_UnaryPredicate p) Removes all elements for which the specified predicate returns true .","title":"Luna::List::remove_if"},{"location":"api/class_luna_1_1_list_1a03d8c556a366c8122ccddfc9c24e6ddc/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a03d8c556a366c8122ccddfc9c24e6ddc/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a03d8c556a366c8122ccddfc9c24e6ddc/#p","text":"The unary predicate which returns \u200btrue if the element should be removed.","title":"p"},{"location":"api/class_luna_1_1_list_1a03d8c556a366c8122ccddfc9c24e6ddc/#return-value","text":"Returns the number of elements removed.","title":"Return value"},{"location":"api/class_luna_1_1_list_1a058bda4957df6a97b1ea6c9fd783f672/","text":"Luna::List::pop_back void pop_back() Removes the last element of the list. Overview Valid Usage empty() must be false when calling this function.","title":"Luna::List::pop_back"},{"location":"api/class_luna_1_1_list_1a058bda4957df6a97b1ea6c9fd783f672/#lunalistpop_back","text":"void pop_back() Removes the last element of the list.","title":"Luna::List::pop_back"},{"location":"api/class_luna_1_1_list_1a058bda4957df6a97b1ea6c9fd783f672/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a058bda4957df6a97b1ea6c9fd783f672/#valid-usage","text":"empty() must be false when calling this function.","title":"Valid Usage"},{"location":"api/class_luna_1_1_list_1a05ef093245a3749df69b46f59230454b/","text":"Luna::List::resize void resize(usize count, const value_type &value) Changes the number of elements in the list. Overview Parameters count The new size of the list. If this is larger than size() , new elements will be copy-inserted at the back of the list using the provided value. If this is smaller than size() , elements in range [ count , size() ) will be removed from the list. If this is equal to size() , this function does nothing. value The value to initialize the new elements with.","title":"Luna::List::resize"},{"location":"api/class_luna_1_1_list_1a05ef093245a3749df69b46f59230454b/#lunalistresize","text":"void resize(usize count, const value_type &value) Changes the number of elements in the list.","title":"Luna::List::resize"},{"location":"api/class_luna_1_1_list_1a05ef093245a3749df69b46f59230454b/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a05ef093245a3749df69b46f59230454b/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a05ef093245a3749df69b46f59230454b/#count","text":"The new size of the list. If this is larger than size() , new elements will be copy-inserted at the back of the list using the provided value. If this is smaller than size() , elements in range [ count , size() ) will be removed from the list. If this is equal to size() , this function does nothing.","title":"count"},{"location":"api/class_luna_1_1_list_1a05ef093245a3749df69b46f59230454b/#value","text":"The value to initialize the new elements with.","title":"value"},{"location":"api/class_luna_1_1_list_1a09400e81df2e73cf04d8233bb49d7241/","text":"Luna::List::List List(List &&rhs) Constructs a list by moving elements from another list. Overview Parameters rhs The list to move elements from.","title":"Luna::List::List"},{"location":"api/class_luna_1_1_list_1a09400e81df2e73cf04d8233bb49d7241/#lunalistlist","text":"List(List &&rhs) Constructs a list by moving elements from another list.","title":"Luna::List::List"},{"location":"api/class_luna_1_1_list_1a09400e81df2e73cf04d8233bb49d7241/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a09400e81df2e73cf04d8233bb49d7241/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a09400e81df2e73cf04d8233bb49d7241/#rhs","text":"The list to move elements from.","title":"rhs"},{"location":"api/class_luna_1_1_list_1a17e6c90f14225bdac5c65ed915b0a2f6/","text":"Luna::List::List List() Constructs an empty list.","title":"Luna::List::List"},{"location":"api/class_luna_1_1_list_1a17e6c90f14225bdac5c65ed915b0a2f6/#lunalistlist","text":"List() Constructs an empty list.","title":"Luna::List::List"},{"location":"api/class_luna_1_1_list_1a251d138a94e827712a83f49b4cef65a9/","text":"Luna::List::List List(usize count, const_reference value, const allocator_type &alloc=allocator_type()) Constructs a list with the specified number of elements. Overview Parameters count The number of elements to insert. value The value used to construct elements. Every element will be copy-constructed from this value. alloc The allocator to use. The allocator object will be copy-constructed into the list.","title":"Luna::List::List"},{"location":"api/class_luna_1_1_list_1a251d138a94e827712a83f49b4cef65a9/#lunalistlist","text":"List(usize count, const_reference value, const allocator_type &alloc=allocator_type()) Constructs a list with the specified number of elements.","title":"Luna::List::List"},{"location":"api/class_luna_1_1_list_1a251d138a94e827712a83f49b4cef65a9/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a251d138a94e827712a83f49b4cef65a9/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a251d138a94e827712a83f49b4cef65a9/#count","text":"The number of elements to insert.","title":"count"},{"location":"api/class_luna_1_1_list_1a251d138a94e827712a83f49b4cef65a9/#value","text":"The value used to construct elements. Every element will be copy-constructed from this value.","title":"value"},{"location":"api/class_luna_1_1_list_1a251d138a94e827712a83f49b4cef65a9/#alloc","text":"The allocator to use. The allocator object will be copy-constructed into the list.","title":"alloc"},{"location":"api/class_luna_1_1_list_1a2532c4989fc583a2a513b8bd5a3ad87e/","text":"Luna::List::insert List< _Ty, _Alloc >::iterator insert(const_iterator pos, usize count, const value_type &value) Inserts several copies of the element to the list. Overview Parameters pos The iterator pointing to the position to insert elements. The elements will be inserted before the element pointed by this iterator. This can be end() , indicating that the element will be inserted at the end of the list. count The number of elements to insert. value The value to initialize the new elements with. Return value Returns one iterator pointing to the first inserted element. Valid Usage If pos != end() , pos must points to a valid element in the list.","title":"Luna::List::insert"},{"location":"api/class_luna_1_1_list_1a2532c4989fc583a2a513b8bd5a3ad87e/#lunalistinsert","text":"List< _Ty, _Alloc >::iterator insert(const_iterator pos, usize count, const value_type &value) Inserts several copies of the element to the list.","title":"Luna::List::insert"},{"location":"api/class_luna_1_1_list_1a2532c4989fc583a2a513b8bd5a3ad87e/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a2532c4989fc583a2a513b8bd5a3ad87e/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a2532c4989fc583a2a513b8bd5a3ad87e/#pos","text":"The iterator pointing to the position to insert elements. The elements will be inserted before the element pointed by this iterator. This can be end() , indicating that the element will be inserted at the end of the list.","title":"pos"},{"location":"api/class_luna_1_1_list_1a2532c4989fc583a2a513b8bd5a3ad87e/#count","text":"The number of elements to insert.","title":"count"},{"location":"api/class_luna_1_1_list_1a2532c4989fc583a2a513b8bd5a3ad87e/#value","text":"The value to initialize the new elements with.","title":"value"},{"location":"api/class_luna_1_1_list_1a2532c4989fc583a2a513b8bd5a3ad87e/#return-value","text":"Returns one iterator pointing to the first inserted element.","title":"Return value"},{"location":"api/class_luna_1_1_list_1a2532c4989fc583a2a513b8bd5a3ad87e/#valid-usage","text":"If pos != end() , pos must points to a valid element in the list.","title":"Valid Usage"},{"location":"api/class_luna_1_1_list_1a273a8d653cc24bdb145322a79408b192/","text":"Luna::List::operator= List< _Ty, _Alloc > & operator=(List &&rhs) Replaces elements of the list by moving elements from another list. Overview Parameters rhs The list to move elements from. Return value Returns *this .","title":"Luna::List::operator="},{"location":"api/class_luna_1_1_list_1a273a8d653cc24bdb145322a79408b192/#lunalistoperator","text":"List< _Ty, _Alloc > & operator=(List &&rhs) Replaces elements of the list by moving elements from another list.","title":"Luna::List::operator="},{"location":"api/class_luna_1_1_list_1a273a8d653cc24bdb145322a79408b192/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a273a8d653cc24bdb145322a79408b192/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a273a8d653cc24bdb145322a79408b192/#rhs","text":"The list to move elements from.","title":"rhs"},{"location":"api/class_luna_1_1_list_1a273a8d653cc24bdb145322a79408b192/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/class_luna_1_1_list_1a28caa17eb291da14069202da4ff70299/","text":"Luna::List::back List< _Ty, _Alloc >::const_reference back() const Gets the last element in the list. Overview Return value Returns one constant reference to the last element in the list. Valid Usage empty() must be false when calling this function.","title":"Luna::List::back"},{"location":"api/class_luna_1_1_list_1a28caa17eb291da14069202da4ff70299/#lunalistback","text":"List< _Ty, _Alloc >::const_reference back() const Gets the last element in the list.","title":"Luna::List::back"},{"location":"api/class_luna_1_1_list_1a28caa17eb291da14069202da4ff70299/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a28caa17eb291da14069202da4ff70299/#return-value","text":"Returns one constant reference to the last element in the list.","title":"Return value"},{"location":"api/class_luna_1_1_list_1a28caa17eb291da14069202da4ff70299/#valid-usage","text":"empty() must be false when calling this function.","title":"Valid Usage"},{"location":"api/class_luna_1_1_list_1a2f8f6e82f209f35a4a02e978b03ffea9/","text":"Luna::List::merge template <typename _Compare> void merge(List &&other, _Compare comp) Merges another list into this list. Overview No memory allocation or element copy/move will be performed, this function transfers elements by changing their pointers directly so that they link to the new list. Elements are compared using the user-specified comparison function object. Parameters other The list to merge. This list will be empty after this operation. If this is equal to *this , this function does nothing. comp The comparison function object to use. Valid Usage comp must provide the following function: bool operator()(const _Ty& a, const _Ty& b) , that returns true if a should appear in the list before b . Elements in *this and other must be sorted in an order defined by the user-specified comparison function, that is, for any two elements a and b in the same list, comp(b, a) must return false if a appears before b .","title":"Luna::List::merge"},{"location":"api/class_luna_1_1_list_1a2f8f6e82f209f35a4a02e978b03ffea9/#lunalistmerge","text":"template <typename _Compare> void merge(List &&other, _Compare comp) Merges another list into this list.","title":"Luna::List::merge"},{"location":"api/class_luna_1_1_list_1a2f8f6e82f209f35a4a02e978b03ffea9/#overview","text":"No memory allocation or element copy/move will be performed, this function transfers elements by changing their pointers directly so that they link to the new list. Elements are compared using the user-specified comparison function object.","title":"Overview"},{"location":"api/class_luna_1_1_list_1a2f8f6e82f209f35a4a02e978b03ffea9/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a2f8f6e82f209f35a4a02e978b03ffea9/#other","text":"The list to merge. This list will be empty after this operation. If this is equal to *this , this function does nothing.","title":"other"},{"location":"api/class_luna_1_1_list_1a2f8f6e82f209f35a4a02e978b03ffea9/#comp","text":"The comparison function object to use.","title":"comp"},{"location":"api/class_luna_1_1_list_1a2f8f6e82f209f35a4a02e978b03ffea9/#valid-usage","text":"comp must provide the following function: bool operator()(const _Ty& a, const _Ty& b) , that returns true if a should appear in the list before b . Elements in *this and other must be sorted in an order defined by the user-specified comparison function, that is, for any two elements a and b in the same list, comp(b, a) must return false if a appears before b .","title":"Valid Usage"},{"location":"api/class_luna_1_1_list_1a310c0bebc002158f5646a91d60e4dc89/","text":"Luna::List::reverse void reverse() Reverses the order of the elements in the list.","title":"Luna::List::reverse"},{"location":"api/class_luna_1_1_list_1a310c0bebc002158f5646a91d60e4dc89/#lunalistreverse","text":"void reverse() Reverses the order of the elements in the list.","title":"Luna::List::reverse"},{"location":"api/class_luna_1_1_list_1a318102205e1258cfeff6c5ba6d1ceaf6/","text":"Luna::List::push_front void push_front(const value_type &value) Inserts one element at the front of the list. Overview Parameters value The element to insert. The element will be copy-inserted to the list.","title":"Luna::List::push_front"},{"location":"api/class_luna_1_1_list_1a318102205e1258cfeff6c5ba6d1ceaf6/#lunalistpush_front","text":"void push_front(const value_type &value) Inserts one element at the front of the list.","title":"Luna::List::push_front"},{"location":"api/class_luna_1_1_list_1a318102205e1258cfeff6c5ba6d1ceaf6/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a318102205e1258cfeff6c5ba6d1ceaf6/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a318102205e1258cfeff6c5ba6d1ceaf6/#value","text":"The element to insert. The element will be copy-inserted to the list.","title":"value"},{"location":"api/class_luna_1_1_list_1a32274c2c8ee987aadfacdf1fd9c6d31a/","text":"Luna::List::splice void splice(const_iterator pos, List &other, const_iterator first, const_iterator last) Transfers elements from another list to this list. Overview No memory allocation or element copy/move will be performed, this function transfers elements by changing their pointers directly so that they link to the new list. Parameters pos The iterator pointing to the position to insert the transferred elements. other The list to transfer elements from. first The iterator pointing to the first element to be transferred. last The iterator pointing to the one-past-last element to be transferred.","title":"Luna::List::splice"},{"location":"api/class_luna_1_1_list_1a32274c2c8ee987aadfacdf1fd9c6d31a/#lunalistsplice","text":"void splice(const_iterator pos, List &other, const_iterator first, const_iterator last) Transfers elements from another list to this list.","title":"Luna::List::splice"},{"location":"api/class_luna_1_1_list_1a32274c2c8ee987aadfacdf1fd9c6d31a/#overview","text":"No memory allocation or element copy/move will be performed, this function transfers elements by changing their pointers directly so that they link to the new list.","title":"Overview"},{"location":"api/class_luna_1_1_list_1a32274c2c8ee987aadfacdf1fd9c6d31a/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a32274c2c8ee987aadfacdf1fd9c6d31a/#pos","text":"The iterator pointing to the position to insert the transferred elements.","title":"pos"},{"location":"api/class_luna_1_1_list_1a32274c2c8ee987aadfacdf1fd9c6d31a/#other","text":"The list to transfer elements from.","title":"other"},{"location":"api/class_luna_1_1_list_1a32274c2c8ee987aadfacdf1fd9c6d31a/#first","text":"The iterator pointing to the first element to be transferred.","title":"first"},{"location":"api/class_luna_1_1_list_1a32274c2c8ee987aadfacdf1fd9c6d31a/#last","text":"The iterator pointing to the one-past-last element to be transferred.","title":"last"},{"location":"api/class_luna_1_1_list_1a33e164de8d71f0ce8ddc3d7b8fc567e0/","text":"Luna::List::end List< _Ty, _Alloc >::const_iterator end() const Gets one constant iterator pointing to the one past last element of the list. Overview Return value Returns one constant iterator pointing to the one past last element of the list.","title":"Luna::List::end"},{"location":"api/class_luna_1_1_list_1a33e164de8d71f0ce8ddc3d7b8fc567e0/#lunalistend","text":"List< _Ty, _Alloc >::const_iterator end() const Gets one constant iterator pointing to the one past last element of the list.","title":"Luna::List::end"},{"location":"api/class_luna_1_1_list_1a33e164de8d71f0ce8ddc3d7b8fc567e0/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a33e164de8d71f0ce8ddc3d7b8fc567e0/#return-value","text":"Returns one constant iterator pointing to the one past last element of the list.","title":"Return value"},{"location":"api/class_luna_1_1_list_1a351c85f0e22a5f6ef21aee32a62cfbb5/","text":"Luna::List::erase List< _Ty, _Alloc >::iterator erase(const_iterator first, const_iterator last) Removes one range of elements from the list. Overview Parameters first The iterator pointing to the first element to be removed. last The iterator pointing to the one-past-last element to be removed. Return value Returns one iterator pointing to the next element of the removed elements when iterating elements. Valid Usage first must be either end() or one valid element in the list. If first != end() , [ first , last ) must specifies either one empty range ( first == last ) or one valid element range of the list. If first == end() , [ first , last ) must specifies one empty range ( first == last ).","title":"Luna::List::erase"},{"location":"api/class_luna_1_1_list_1a351c85f0e22a5f6ef21aee32a62cfbb5/#lunalisterase","text":"List< _Ty, _Alloc >::iterator erase(const_iterator first, const_iterator last) Removes one range of elements from the list.","title":"Luna::List::erase"},{"location":"api/class_luna_1_1_list_1a351c85f0e22a5f6ef21aee32a62cfbb5/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a351c85f0e22a5f6ef21aee32a62cfbb5/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a351c85f0e22a5f6ef21aee32a62cfbb5/#first","text":"The iterator pointing to the first element to be removed.","title":"first"},{"location":"api/class_luna_1_1_list_1a351c85f0e22a5f6ef21aee32a62cfbb5/#last","text":"The iterator pointing to the one-past-last element to be removed.","title":"last"},{"location":"api/class_luna_1_1_list_1a351c85f0e22a5f6ef21aee32a62cfbb5/#return-value","text":"Returns one iterator pointing to the next element of the removed elements when iterating elements.","title":"Return value"},{"location":"api/class_luna_1_1_list_1a351c85f0e22a5f6ef21aee32a62cfbb5/#valid-usage","text":"first must be either end() or one valid element in the list. If first != end() , [ first , last ) must specifies either one empty range ( first == last ) or one valid element range of the list. If first == end() , [ first , last ) must specifies one empty range ( first == last ).","title":"Valid Usage"},{"location":"api/class_luna_1_1_list_1a42ee9dddf42e7f12f53d596ad4451dcb/","text":"Luna::List::remove usize remove(const value_type &value) Removes all elements that are equal to value. Overview Elements are compared using [equal_to](struct_luna_1_1equal__to.md)<_Ty> . Parameters value The value to test. Return value Returns the number of elements removed.","title":"Luna::List::remove"},{"location":"api/class_luna_1_1_list_1a42ee9dddf42e7f12f53d596ad4451dcb/#lunalistremove","text":"usize remove(const value_type &value) Removes all elements that are equal to value.","title":"Luna::List::remove"},{"location":"api/class_luna_1_1_list_1a42ee9dddf42e7f12f53d596ad4451dcb/#overview","text":"Elements are compared using [equal_to](struct_luna_1_1equal__to.md)<_Ty> .","title":"Overview"},{"location":"api/class_luna_1_1_list_1a42ee9dddf42e7f12f53d596ad4451dcb/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a42ee9dddf42e7f12f53d596ad4451dcb/#value","text":"The value to test.","title":"value"},{"location":"api/class_luna_1_1_list_1a42ee9dddf42e7f12f53d596ad4451dcb/#return-value","text":"Returns the number of elements removed.","title":"Return value"},{"location":"api/class_luna_1_1_list_1a47fdc9eea42b6975cdc835bb2e08810e/","text":"Luna::List::sort void sort() Sorts elements in ascending order.","title":"Luna::List::sort"},{"location":"api/class_luna_1_1_list_1a47fdc9eea42b6975cdc835bb2e08810e/#lunalistsort","text":"void sort() Sorts elements in ascending order.","title":"Luna::List::sort"},{"location":"api/class_luna_1_1_list_1a4aa5c144e127e2247b2fcdb6eb769b2b/","text":"Luna::List::emplace template <typename...> List< _Ty, _Alloc >::iterator emplace(const_iterator pos, _Args &&... args) Constructs one element directly on the specified position of the list using the provided arguments. Overview Parameters pos The iterator pointing to the position to construct the element. The elements will be inserted before the element pointed by this iterator. This can be end() , indicating that the element will be inserted at the end of the list. args The arguments to construct the element. _Ty(args...) will be used to construct the element. Return value Returns one iterator pointing to the constructed element.","title":"Luna::List::emplace"},{"location":"api/class_luna_1_1_list_1a4aa5c144e127e2247b2fcdb6eb769b2b/#lunalistemplace","text":"template <typename...> List< _Ty, _Alloc >::iterator emplace(const_iterator pos, _Args &&... args) Constructs one element directly on the specified position of the list using the provided arguments.","title":"Luna::List::emplace"},{"location":"api/class_luna_1_1_list_1a4aa5c144e127e2247b2fcdb6eb769b2b/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a4aa5c144e127e2247b2fcdb6eb769b2b/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a4aa5c144e127e2247b2fcdb6eb769b2b/#pos","text":"The iterator pointing to the position to construct the element. The elements will be inserted before the element pointed by this iterator. This can be end() , indicating that the element will be inserted at the end of the list.","title":"pos"},{"location":"api/class_luna_1_1_list_1a4aa5c144e127e2247b2fcdb6eb769b2b/#args","text":"The arguments to construct the element. _Ty(args...) will be used to construct the element.","title":"args"},{"location":"api/class_luna_1_1_list_1a4aa5c144e127e2247b2fcdb6eb769b2b/#return-value","text":"Returns one iterator pointing to the constructed element.","title":"Return value"},{"location":"api/class_luna_1_1_list_1a520e28135a0b37738c459a2f0c182dff/","text":"Luna::List::begin List< _Ty, _Alloc >::const_iterator begin() const Gets one constant iterator pointing to the first element of the list. Overview Return value Returns one constant iterator pointing to the first element of the list.","title":"Luna::List::begin"},{"location":"api/class_luna_1_1_list_1a520e28135a0b37738c459a2f0c182dff/#lunalistbegin","text":"List< _Ty, _Alloc >::const_iterator begin() const Gets one constant iterator pointing to the first element of the list.","title":"Luna::List::begin"},{"location":"api/class_luna_1_1_list_1a520e28135a0b37738c459a2f0c182dff/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a520e28135a0b37738c459a2f0c182dff/#return-value","text":"Returns one constant iterator pointing to the first element of the list.","title":"Return value"},{"location":"api/class_luna_1_1_list_1a5553842996c4ac239a5311aad4c29252/","text":"Luna::List::splice void splice(const_iterator pos, List &&other) Transfers all elements from another list to this list. Overview No memory allocation or element copy/move will be performed, this function transfers elements by changing their pointers directly so that they link to the new list. Parameters pos The iterator pointing to the position to insert the transferred elements. other The list to transfer elements from. This list will be empty after this operation.","title":"Luna::List::splice"},{"location":"api/class_luna_1_1_list_1a5553842996c4ac239a5311aad4c29252/#lunalistsplice","text":"void splice(const_iterator pos, List &&other) Transfers all elements from another list to this list.","title":"Luna::List::splice"},{"location":"api/class_luna_1_1_list_1a5553842996c4ac239a5311aad4c29252/#overview","text":"No memory allocation or element copy/move will be performed, this function transfers elements by changing their pointers directly so that they link to the new list.","title":"Overview"},{"location":"api/class_luna_1_1_list_1a5553842996c4ac239a5311aad4c29252/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a5553842996c4ac239a5311aad4c29252/#pos","text":"The iterator pointing to the position to insert the transferred elements.","title":"pos"},{"location":"api/class_luna_1_1_list_1a5553842996c4ac239a5311aad4c29252/#other","text":"The list to transfer elements from. This list will be empty after this operation.","title":"other"},{"location":"api/class_luna_1_1_list_1a55c434a81cad9990fb3429a3e549657f/","text":"Luna::List::cend List< _Ty, _Alloc >::const_iterator cend() const Gets one constant iterator pointing to the one past last element of the list. Overview Return value Returns one constant iterator pointing to the one past last element of the list.","title":"Luna::List::cend"},{"location":"api/class_luna_1_1_list_1a55c434a81cad9990fb3429a3e549657f/#lunalistcend","text":"List< _Ty, _Alloc >::const_iterator cend() const Gets one constant iterator pointing to the one past last element of the list.","title":"Luna::List::cend"},{"location":"api/class_luna_1_1_list_1a55c434a81cad9990fb3429a3e549657f/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a55c434a81cad9990fb3429a3e549657f/#return-value","text":"Returns one constant iterator pointing to the one past last element of the list.","title":"Return value"},{"location":"api/class_luna_1_1_list_1a56f4ffbc6fd414b3c02a6c368e99594f/","text":"Luna::List::pop_front void pop_front() Removes the first element of the list. Overview Valid Usage empty() must be false when calling this function.","title":"Luna::List::pop_front"},{"location":"api/class_luna_1_1_list_1a56f4ffbc6fd414b3c02a6c368e99594f/#lunalistpop_front","text":"void pop_front() Removes the first element of the list.","title":"Luna::List::pop_front"},{"location":"api/class_luna_1_1_list_1a56f4ffbc6fd414b3c02a6c368e99594f/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a56f4ffbc6fd414b3c02a6c368e99594f/#valid-usage","text":"empty() must be false when calling this function.","title":"Valid Usage"},{"location":"api/class_luna_1_1_list_1a5b16bb5e06bf3ed7733795fab95d9492/","text":"Luna::List::rend List< _Ty, _Alloc >::reverse_iterator rend() Gets one reverse iterator pointing to the one-before-first element of the list. Overview Return value Returns one reverse iterator pointing to the one-before-first element of the list.","title":"Luna::List::rend"},{"location":"api/class_luna_1_1_list_1a5b16bb5e06bf3ed7733795fab95d9492/#lunalistrend","text":"List< _Ty, _Alloc >::reverse_iterator rend() Gets one reverse iterator pointing to the one-before-first element of the list.","title":"Luna::List::rend"},{"location":"api/class_luna_1_1_list_1a5b16bb5e06bf3ed7733795fab95d9492/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a5b16bb5e06bf3ed7733795fab95d9492/#return-value","text":"Returns one reverse iterator pointing to the one-before-first element of the list.","title":"Return value"},{"location":"api/class_luna_1_1_list_1a5bfd383cd0ac9b1ffb3a506614af208c/","text":"Luna::List::List List(InitializerList< value_type > ilist, const allocator_type &alloc=allocator_type()) Constructs a list with elements specified by one initializer list. Overview Parameters ilist The initializer list. alloc The allocator to use. The allocator object will be copy-constructed into the list.","title":"Luna::List::List"},{"location":"api/class_luna_1_1_list_1a5bfd383cd0ac9b1ffb3a506614af208c/#lunalistlist","text":"List(InitializerList< value_type > ilist, const allocator_type &alloc=allocator_type()) Constructs a list with elements specified by one initializer list.","title":"Luna::List::List"},{"location":"api/class_luna_1_1_list_1a5bfd383cd0ac9b1ffb3a506614af208c/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a5bfd383cd0ac9b1ffb3a506614af208c/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a5bfd383cd0ac9b1ffb3a506614af208c/#ilist","text":"The initializer list.","title":"ilist"},{"location":"api/class_luna_1_1_list_1a5bfd383cd0ac9b1ffb3a506614af208c/#alloc","text":"The allocator to use. The allocator object will be copy-constructed into the list.","title":"alloc"},{"location":"api/class_luna_1_1_list_1a5d1a6ef108d9c2004e07e8183c716d1b/","text":"Luna::List::get_allocator List< _Ty, _Alloc >::allocator_type get_allocator() const Gets the allocator of the list. Overview Return value Returns one copy of the allocator of the list.","title":"Luna::List::get_allocator"},{"location":"api/class_luna_1_1_list_1a5d1a6ef108d9c2004e07e8183c716d1b/#lunalistget_allocator","text":"List< _Ty, _Alloc >::allocator_type get_allocator() const Gets the allocator of the list.","title":"Luna::List::get_allocator"},{"location":"api/class_luna_1_1_list_1a5d1a6ef108d9c2004e07e8183c716d1b/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a5d1a6ef108d9c2004e07e8183c716d1b/#return-value","text":"Returns one copy of the allocator of the list.","title":"Return value"},{"location":"api/class_luna_1_1_list_1a644718bb2fb240de962dc3c9a1fdf0dc/","text":"Luna::List::empty bool empty() const Checks whether this list is empty, that is, the size of this list is 0 . Overview Return value Returns true if this list is empty, returns false otherwise.","title":"Luna::List::empty"},{"location":"api/class_luna_1_1_list_1a644718bb2fb240de962dc3c9a1fdf0dc/#lunalistempty","text":"bool empty() const Checks whether this list is empty, that is, the size of this list is 0 .","title":"Luna::List::empty"},{"location":"api/class_luna_1_1_list_1a644718bb2fb240de962dc3c9a1fdf0dc/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a644718bb2fb240de962dc3c9a1fdf0dc/#return-value","text":"Returns true if this list is empty, returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_list_1a650e92001370cfdc5bd04a651a2c2ef9/","text":"Luna::List::insert template <typename _InputIt> auto insert(const_iterator pos, _InputIt first, _InputIt last) -> enable_if_t<!is_integral_v< _InputIt >, List< _Ty, _Alloc >::iterator > Inserts one range of elements to the list. Overview Parameters pos The iterator pointing to the position to insert elements. The elements will be inserted before the element pointed by this iterator. This can be end() , indicating that the element will be inserted at the end of the list. first The iterator pointing to the first element to be inserted. last The iterator pointing to the one-past-last element to be inserted. Return value Returns one iterator pointing to the first inserted element. Valid Usage If pos != end() , pos must points to a valid element in the list.","title":"Luna::List::insert"},{"location":"api/class_luna_1_1_list_1a650e92001370cfdc5bd04a651a2c2ef9/#lunalistinsert","text":"template <typename _InputIt> auto insert(const_iterator pos, _InputIt first, _InputIt last) -> enable_if_t<!is_integral_v< _InputIt >, List< _Ty, _Alloc >::iterator > Inserts one range of elements to the list.","title":"Luna::List::insert"},{"location":"api/class_luna_1_1_list_1a650e92001370cfdc5bd04a651a2c2ef9/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a650e92001370cfdc5bd04a651a2c2ef9/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a650e92001370cfdc5bd04a651a2c2ef9/#pos","text":"The iterator pointing to the position to insert elements. The elements will be inserted before the element pointed by this iterator. This can be end() , indicating that the element will be inserted at the end of the list.","title":"pos"},{"location":"api/class_luna_1_1_list_1a650e92001370cfdc5bd04a651a2c2ef9/#first","text":"The iterator pointing to the first element to be inserted.","title":"first"},{"location":"api/class_luna_1_1_list_1a650e92001370cfdc5bd04a651a2c2ef9/#last","text":"The iterator pointing to the one-past-last element to be inserted.","title":"last"},{"location":"api/class_luna_1_1_list_1a650e92001370cfdc5bd04a651a2c2ef9/#return-value","text":"Returns one iterator pointing to the first inserted element.","title":"Return value"},{"location":"api/class_luna_1_1_list_1a650e92001370cfdc5bd04a651a2c2ef9/#valid-usage","text":"If pos != end() , pos must points to a valid element in the list.","title":"Valid Usage"},{"location":"api/class_luna_1_1_list_1a67991a77c21b55d8a770cd3a8e36cd34/","text":"Luna::List::swap void swap(List &rhs) Swaps elements of this list with the specified list. Overview Parameters rhs The list to swap elements with.","title":"Luna::List::swap"},{"location":"api/class_luna_1_1_list_1a67991a77c21b55d8a770cd3a8e36cd34/#lunalistswap","text":"void swap(List &rhs) Swaps elements of this list with the specified list.","title":"Luna::List::swap"},{"location":"api/class_luna_1_1_list_1a67991a77c21b55d8a770cd3a8e36cd34/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a67991a77c21b55d8a770cd3a8e36cd34/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a67991a77c21b55d8a770cd3a8e36cd34/#rhs","text":"The list to swap elements with.","title":"rhs"},{"location":"api/class_luna_1_1_list_1a6e7b23b089aa694e8076d13dae6bac3d/","text":"Luna::List::insert List< _Ty, _Alloc >::iterator insert(const_iterator pos, InitializerList< value_type > ilist) Inserts one range of elements specified by the initializer list to the list. Overview Parameters pos The iterator pointing to the position to insert elements. The elements will be inserted before the element pointed by this iterator. This can be end() , indicating that the element will be inserted at the end of the list. ilist The initializer list. Return value Returns one iterator pointing to the first inserted element. Valid Usage If pos != end() , pos must points to a valid element in the list.","title":"Luna::List::insert"},{"location":"api/class_luna_1_1_list_1a6e7b23b089aa694e8076d13dae6bac3d/#lunalistinsert","text":"List< _Ty, _Alloc >::iterator insert(const_iterator pos, InitializerList< value_type > ilist) Inserts one range of elements specified by the initializer list to the list.","title":"Luna::List::insert"},{"location":"api/class_luna_1_1_list_1a6e7b23b089aa694e8076d13dae6bac3d/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a6e7b23b089aa694e8076d13dae6bac3d/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a6e7b23b089aa694e8076d13dae6bac3d/#pos","text":"The iterator pointing to the position to insert elements. The elements will be inserted before the element pointed by this iterator. This can be end() , indicating that the element will be inserted at the end of the list.","title":"pos"},{"location":"api/class_luna_1_1_list_1a6e7b23b089aa694e8076d13dae6bac3d/#ilist","text":"The initializer list.","title":"ilist"},{"location":"api/class_luna_1_1_list_1a6e7b23b089aa694e8076d13dae6bac3d/#return-value","text":"Returns one iterator pointing to the first inserted element.","title":"Return value"},{"location":"api/class_luna_1_1_list_1a6e7b23b089aa694e8076d13dae6bac3d/#valid-usage","text":"If pos != end() , pos must points to a valid element in the list.","title":"Valid Usage"},{"location":"api/class_luna_1_1_list_1a74f6d3924c2755549821dd1e4e1875f9/","text":"Luna::List::unique template <typename _BinaryPredicate> usize unique(_BinaryPredicate p) Removes all consecutive duplicate elements from the container. Overview Only the first element in each group of equal elements is left. Elements are compared using the user-provided binary predicate. Parameters p The binary predicate which returns \u200btrue if two elements are equal. Return value Returns the number of elements removed. Valid Usage p must provide the following function: bool operator()(const _Ty& a, const _Ty& b) , that returns true if a and b is equal.","title":"Luna::List::unique"},{"location":"api/class_luna_1_1_list_1a74f6d3924c2755549821dd1e4e1875f9/#lunalistunique","text":"template <typename _BinaryPredicate> usize unique(_BinaryPredicate p) Removes all consecutive duplicate elements from the container.","title":"Luna::List::unique"},{"location":"api/class_luna_1_1_list_1a74f6d3924c2755549821dd1e4e1875f9/#overview","text":"Only the first element in each group of equal elements is left. Elements are compared using the user-provided binary predicate.","title":"Overview"},{"location":"api/class_luna_1_1_list_1a74f6d3924c2755549821dd1e4e1875f9/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a74f6d3924c2755549821dd1e4e1875f9/#p","text":"The binary predicate which returns \u200btrue if two elements are equal.","title":"p"},{"location":"api/class_luna_1_1_list_1a74f6d3924c2755549821dd1e4e1875f9/#return-value","text":"Returns the number of elements removed.","title":"Return value"},{"location":"api/class_luna_1_1_list_1a74f6d3924c2755549821dd1e4e1875f9/#valid-usage","text":"p must provide the following function: bool operator()(const _Ty& a, const _Ty& b) , that returns true if a and b is equal.","title":"Valid Usage"},{"location":"api/class_luna_1_1_list_1a75f81254aa74d19c9e72bbe3bdd92c8a/","text":"Luna::List::cbegin List< _Ty, _Alloc >::const_iterator cbegin() const Gets one constant iterator pointing to the first element of the list. Overview Return value Returns one constant iterator pointing to the first element of the list.","title":"Luna::List::cbegin"},{"location":"api/class_luna_1_1_list_1a75f81254aa74d19c9e72bbe3bdd92c8a/#lunalistcbegin","text":"List< _Ty, _Alloc >::const_iterator cbegin() const Gets one constant iterator pointing to the first element of the list.","title":"Luna::List::cbegin"},{"location":"api/class_luna_1_1_list_1a75f81254aa74d19c9e72bbe3bdd92c8a/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a75f81254aa74d19c9e72bbe3bdd92c8a/#return-value","text":"Returns one constant iterator pointing to the first element of the list.","title":"Return value"},{"location":"api/class_luna_1_1_list_1a79348f1b7c06b34052b42656a0279429/","text":"Luna::List::size usize size() const Gets the size of the list, that is, the number of elements in the list. Overview Return value Returns the size of the list.","title":"Luna::List::size"},{"location":"api/class_luna_1_1_list_1a79348f1b7c06b34052b42656a0279429/#lunalistsize","text":"usize size() const Gets the size of the list, that is, the number of elements in the list.","title":"Luna::List::size"},{"location":"api/class_luna_1_1_list_1a79348f1b7c06b34052b42656a0279429/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a79348f1b7c06b34052b42656a0279429/#return-value","text":"Returns the size of the list.","title":"Return value"},{"location":"api/class_luna_1_1_list_1a7d9a3513b0c4ce2d4a9d380e5046597f/","text":"Luna::List::List List(const List &rhs) Constructs a list by copying elements from another list. Overview Parameters rhs The list to copy elements from.","title":"Luna::List::List"},{"location":"api/class_luna_1_1_list_1a7d9a3513b0c4ce2d4a9d380e5046597f/#lunalistlist","text":"List(const List &rhs) Constructs a list by copying elements from another list.","title":"Luna::List::List"},{"location":"api/class_luna_1_1_list_1a7d9a3513b0c4ce2d4a9d380e5046597f/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a7d9a3513b0c4ce2d4a9d380e5046597f/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a7d9a3513b0c4ce2d4a9d380e5046597f/#rhs","text":"The list to copy elements from.","title":"rhs"},{"location":"api/class_luna_1_1_list_1a7ec56631bf0f334d845e6a198618360a/","text":"Luna::List::end List< _Ty, _Alloc >::iterator end() Gets one iterator pointing to the one past last element of the list. Overview Return value Returns one iterator pointing to the one past last element of the list.","title":"Luna::List::end"},{"location":"api/class_luna_1_1_list_1a7ec56631bf0f334d845e6a198618360a/#lunalistend","text":"List< _Ty, _Alloc >::iterator end() Gets one iterator pointing to the one past last element of the list.","title":"Luna::List::end"},{"location":"api/class_luna_1_1_list_1a7ec56631bf0f334d845e6a198618360a/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a7ec56631bf0f334d845e6a198618360a/#return-value","text":"Returns one iterator pointing to the one past last element of the list.","title":"Return value"},{"location":"api/class_luna_1_1_list_1a80b6f2d2e03ae9edc8117ade0716e70d/","text":"Luna::List::insert List< _Ty, _Alloc >::iterator insert(const_iterator pos, value_type &&value) Inserts the specified element to the list. Overview Parameters pos The iterator pointing to the position to insert the element. The element will be inserted before the element pointed by this iterator. This can be end() , indicating that the element will be inserted at the end of the list. value The element to insert. The element will be move-inserted into the list. Return value Returns one iterator pointing to the inserted element. Valid Usage If pos != end() , pos must points to a valid element in the list.","title":"Luna::List::insert"},{"location":"api/class_luna_1_1_list_1a80b6f2d2e03ae9edc8117ade0716e70d/#lunalistinsert","text":"List< _Ty, _Alloc >::iterator insert(const_iterator pos, value_type &&value) Inserts the specified element to the list.","title":"Luna::List::insert"},{"location":"api/class_luna_1_1_list_1a80b6f2d2e03ae9edc8117ade0716e70d/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a80b6f2d2e03ae9edc8117ade0716e70d/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a80b6f2d2e03ae9edc8117ade0716e70d/#pos","text":"The iterator pointing to the position to insert the element. The element will be inserted before the element pointed by this iterator. This can be end() , indicating that the element will be inserted at the end of the list.","title":"pos"},{"location":"api/class_luna_1_1_list_1a80b6f2d2e03ae9edc8117ade0716e70d/#value","text":"The element to insert. The element will be move-inserted into the list.","title":"value"},{"location":"api/class_luna_1_1_list_1a80b6f2d2e03ae9edc8117ade0716e70d/#return-value","text":"Returns one iterator pointing to the inserted element.","title":"Return value"},{"location":"api/class_luna_1_1_list_1a80b6f2d2e03ae9edc8117ade0716e70d/#valid-usage","text":"If pos != end() , pos must points to a valid element in the list.","title":"Valid Usage"},{"location":"api/class_luna_1_1_list_1a8c7c76ca5168dd917dfbe2cba9a57e60/","text":"Luna::List::erase List< _Ty, _Alloc >::iterator erase(const_iterator pos) Removes one element from the list. Overview Parameters pos The iterator pointing to the element to be removed. Return value Returns one iterator pointing to the next element of the removed element when iterating elements. Valid Usage pos must points to a valid element in the list.","title":"Luna::List::erase"},{"location":"api/class_luna_1_1_list_1a8c7c76ca5168dd917dfbe2cba9a57e60/#lunalisterase","text":"List< _Ty, _Alloc >::iterator erase(const_iterator pos) Removes one element from the list.","title":"Luna::List::erase"},{"location":"api/class_luna_1_1_list_1a8c7c76ca5168dd917dfbe2cba9a57e60/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a8c7c76ca5168dd917dfbe2cba9a57e60/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a8c7c76ca5168dd917dfbe2cba9a57e60/#pos","text":"The iterator pointing to the element to be removed.","title":"pos"},{"location":"api/class_luna_1_1_list_1a8c7c76ca5168dd917dfbe2cba9a57e60/#return-value","text":"Returns one iterator pointing to the next element of the removed element when iterating elements.","title":"Return value"},{"location":"api/class_luna_1_1_list_1a8c7c76ca5168dd917dfbe2cba9a57e60/#valid-usage","text":"pos must points to a valid element in the list.","title":"Valid Usage"},{"location":"api/class_luna_1_1_list_1a8f3b26193f01b56297c3c18713ba9ef7/","text":"Luna::List::operator= List< _Ty, _Alloc > & operator=(const List &rhs) Replaces elements of the list by coping elements from another list. Overview Parameters rhs The list to copy elements from. Return value Returns *this .","title":"Luna::List::operator="},{"location":"api/class_luna_1_1_list_1a8f3b26193f01b56297c3c18713ba9ef7/#lunalistoperator","text":"List< _Ty, _Alloc > & operator=(const List &rhs) Replaces elements of the list by coping elements from another list.","title":"Luna::List::operator="},{"location":"api/class_luna_1_1_list_1a8f3b26193f01b56297c3c18713ba9ef7/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a8f3b26193f01b56297c3c18713ba9ef7/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a8f3b26193f01b56297c3c18713ba9ef7/#rhs","text":"The list to copy elements from.","title":"rhs"},{"location":"api/class_luna_1_1_list_1a8f3b26193f01b56297c3c18713ba9ef7/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/class_luna_1_1_list_1a9013680ffde3a32db98bcee53a4e1499/","text":"Luna::List::List template <typename _InputIt> List(enable_if_t<!is_integral_v< _InputIt >, _InputIt > first, _InputIt last, const allocator_type &alloc=allocator_type()) Constructs a list with elements specified by one range. Elements in the range will be copy-inserted into the list. Overview Parameters first The iterator pointing to the first element of the range. last The iterator pointing to the one-past-last element of the range. alloc The allocator to use. The allocator object will be copy-constructed into the list.","title":"Luna::List::List"},{"location":"api/class_luna_1_1_list_1a9013680ffde3a32db98bcee53a4e1499/#lunalistlist","text":"template <typename _InputIt> List(enable_if_t<!is_integral_v< _InputIt >, _InputIt > first, _InputIt last, const allocator_type &alloc=allocator_type()) Constructs a list with elements specified by one range. Elements in the range will be copy-inserted into the list.","title":"Luna::List::List"},{"location":"api/class_luna_1_1_list_1a9013680ffde3a32db98bcee53a4e1499/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a9013680ffde3a32db98bcee53a4e1499/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a9013680ffde3a32db98bcee53a4e1499/#first","text":"The iterator pointing to the first element of the range.","title":"first"},{"location":"api/class_luna_1_1_list_1a9013680ffde3a32db98bcee53a4e1499/#last","text":"The iterator pointing to the one-past-last element of the range.","title":"last"},{"location":"api/class_luna_1_1_list_1a9013680ffde3a32db98bcee53a4e1499/#alloc","text":"The allocator to use. The allocator object will be copy-constructed into the list.","title":"alloc"},{"location":"api/class_luna_1_1_list_1a92d577d3e25fe2d9e2ab698c461f5189/","text":"Luna::List::merge void merge(List &&other) Merges another list into this list. Overview No memory allocation or element copy/move will be performed, this function transfers elements by changing their pointers directly so that they link to the new list. Elements are compared using less<_Ty> . Parameters other The list to merge. This list will be empty after this operation. If this is equal to *this , this function does nothing. Valid Usage Elements in *this and other must be sorted in ascending order.","title":"Luna::List::merge"},{"location":"api/class_luna_1_1_list_1a92d577d3e25fe2d9e2ab698c461f5189/#lunalistmerge","text":"void merge(List &&other) Merges another list into this list.","title":"Luna::List::merge"},{"location":"api/class_luna_1_1_list_1a92d577d3e25fe2d9e2ab698c461f5189/#overview","text":"No memory allocation or element copy/move will be performed, this function transfers elements by changing their pointers directly so that they link to the new list. Elements are compared using less<_Ty> .","title":"Overview"},{"location":"api/class_luna_1_1_list_1a92d577d3e25fe2d9e2ab698c461f5189/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a92d577d3e25fe2d9e2ab698c461f5189/#other","text":"The list to merge. This list will be empty after this operation. If this is equal to *this , this function does nothing.","title":"other"},{"location":"api/class_luna_1_1_list_1a92d577d3e25fe2d9e2ab698c461f5189/#valid-usage","text":"Elements in *this and other must be sorted in ascending order.","title":"Valid Usage"},{"location":"api/class_luna_1_1_list_1a94af6ef06d505162a657a8c2b0496ec0/","text":"Luna::List::operator= List< _Ty, _Alloc > & operator=(InitializerList< value_type > ilist) Replaces elements of the list by elements from one initializer list. Overview Parameters ilist The initializer list. Return value Returns *this .","title":"Luna::List::operator="},{"location":"api/class_luna_1_1_list_1a94af6ef06d505162a657a8c2b0496ec0/#lunalistoperator","text":"List< _Ty, _Alloc > & operator=(InitializerList< value_type > ilist) Replaces elements of the list by elements from one initializer list.","title":"Luna::List::operator="},{"location":"api/class_luna_1_1_list_1a94af6ef06d505162a657a8c2b0496ec0/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a94af6ef06d505162a657a8c2b0496ec0/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a94af6ef06d505162a657a8c2b0496ec0/#ilist","text":"The initializer list.","title":"ilist"},{"location":"api/class_luna_1_1_list_1a94af6ef06d505162a657a8c2b0496ec0/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/class_luna_1_1_list_1a99f2047c0b82c7ea135983a5925ad28b/","text":"Luna::List::insert List< _Ty, _Alloc >::iterator insert(const_iterator pos, const value_type &value) Inserts the specified element to the list. Overview Parameters pos The iterator pointing to the position to insert the element. The element will be inserted before the element pointed by this iterator. This can be end() , indicating that the element will be inserted at the end of the list. value The element to insert. The element will be copy-inserted into the list. Return value Returns one iterator pointing to the inserted element. Valid Usage If pos != end() , pos must points to a valid element in the list.","title":"Luna::List::insert"},{"location":"api/class_luna_1_1_list_1a99f2047c0b82c7ea135983a5925ad28b/#lunalistinsert","text":"List< _Ty, _Alloc >::iterator insert(const_iterator pos, const value_type &value) Inserts the specified element to the list.","title":"Luna::List::insert"},{"location":"api/class_luna_1_1_list_1a99f2047c0b82c7ea135983a5925ad28b/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1a99f2047c0b82c7ea135983a5925ad28b/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a99f2047c0b82c7ea135983a5925ad28b/#pos","text":"The iterator pointing to the position to insert the element. The element will be inserted before the element pointed by this iterator. This can be end() , indicating that the element will be inserted at the end of the list.","title":"pos"},{"location":"api/class_luna_1_1_list_1a99f2047c0b82c7ea135983a5925ad28b/#value","text":"The element to insert. The element will be copy-inserted into the list.","title":"value"},{"location":"api/class_luna_1_1_list_1a99f2047c0b82c7ea135983a5925ad28b/#return-value","text":"Returns one iterator pointing to the inserted element.","title":"Return value"},{"location":"api/class_luna_1_1_list_1a99f2047c0b82c7ea135983a5925ad28b/#valid-usage","text":"If pos != end() , pos must points to a valid element in the list.","title":"Valid Usage"},{"location":"api/class_luna_1_1_list_1a9e4924c2cff390d0bfe276fd83eb0aa9/","text":"Luna::List::splice void splice(const_iterator pos, List &other) Transfers all elements from another list to this list. Overview No memory allocation or element copy/move will be performed, this function transfers elements by changing their pointers directly so that they link to the new list. Parameters pos The iterator pointing to the position to insert the transferred elements. other The list to transfer elements from. This list will be empty after this operation.","title":"Luna::List::splice"},{"location":"api/class_luna_1_1_list_1a9e4924c2cff390d0bfe276fd83eb0aa9/#lunalistsplice","text":"void splice(const_iterator pos, List &other) Transfers all elements from another list to this list.","title":"Luna::List::splice"},{"location":"api/class_luna_1_1_list_1a9e4924c2cff390d0bfe276fd83eb0aa9/#overview","text":"No memory allocation or element copy/move will be performed, this function transfers elements by changing their pointers directly so that they link to the new list.","title":"Overview"},{"location":"api/class_luna_1_1_list_1a9e4924c2cff390d0bfe276fd83eb0aa9/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1a9e4924c2cff390d0bfe276fd83eb0aa9/#pos","text":"The iterator pointing to the position to insert the transferred elements.","title":"pos"},{"location":"api/class_luna_1_1_list_1a9e4924c2cff390d0bfe276fd83eb0aa9/#other","text":"The list to transfer elements from. This list will be empty after this operation.","title":"other"},{"location":"api/class_luna_1_1_list_1aa2997a1f0d7569dce584f12f24a0ee7c/","text":"Luna::List::List List(usize count, const allocator_type &alloc=allocator_type()) Constructs a list with the specified number of elements. Elements will be default-initialized. Overview Parameters count The number of elements to insert. alloc The allocator to use. The allocator object will be copy-constructed into the list.","title":"Luna::List::List"},{"location":"api/class_luna_1_1_list_1aa2997a1f0d7569dce584f12f24a0ee7c/#lunalistlist","text":"List(usize count, const allocator_type &alloc=allocator_type()) Constructs a list with the specified number of elements. Elements will be default-initialized.","title":"Luna::List::List"},{"location":"api/class_luna_1_1_list_1aa2997a1f0d7569dce584f12f24a0ee7c/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1aa2997a1f0d7569dce584f12f24a0ee7c/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1aa2997a1f0d7569dce584f12f24a0ee7c/#count","text":"The number of elements to insert.","title":"count"},{"location":"api/class_luna_1_1_list_1aa2997a1f0d7569dce584f12f24a0ee7c/#alloc","text":"The allocator to use. The allocator object will be copy-constructed into the list.","title":"alloc"},{"location":"api/class_luna_1_1_list_1aa378c7002668de375ecb9b69f0173520/","text":"Luna::List::crbegin List< _Ty, _Alloc >::const_reverse_iterator crbegin() const Gets one constant reverse iterator pointing to the last element of the list. Overview Return value Returns one constant reverse iterator pointing to the last element of the list.","title":"Luna::List::crbegin"},{"location":"api/class_luna_1_1_list_1aa378c7002668de375ecb9b69f0173520/#lunalistcrbegin","text":"List< _Ty, _Alloc >::const_reverse_iterator crbegin() const Gets one constant reverse iterator pointing to the last element of the list.","title":"Luna::List::crbegin"},{"location":"api/class_luna_1_1_list_1aa378c7002668de375ecb9b69f0173520/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1aa378c7002668de375ecb9b69f0173520/#return-value","text":"Returns one constant reverse iterator pointing to the last element of the list.","title":"Return value"},{"location":"api/class_luna_1_1_list_1aa410e59eb5490c3896b76be4d5d418f9/","text":"Luna::List::sort template <typename _Compare> void sort(_Compare comp) Sorts elements in using the user-specified comparison function object. Overview Parameters comp The comparison function object to use. Valid Usage comp must provide the following function: bool operator()(const _Ty& a, const _Ty& b) , that returns true if a should appear in the list before b .","title":"Luna::List::sort"},{"location":"api/class_luna_1_1_list_1aa410e59eb5490c3896b76be4d5d418f9/#lunalistsort","text":"template <typename _Compare> void sort(_Compare comp) Sorts elements in using the user-specified comparison function object.","title":"Luna::List::sort"},{"location":"api/class_luna_1_1_list_1aa410e59eb5490c3896b76be4d5d418f9/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1aa410e59eb5490c3896b76be4d5d418f9/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1aa410e59eb5490c3896b76be4d5d418f9/#comp","text":"The comparison function object to use.","title":"comp"},{"location":"api/class_luna_1_1_list_1aa410e59eb5490c3896b76be4d5d418f9/#valid-usage","text":"comp must provide the following function: bool operator()(const _Ty& a, const _Ty& b) , that returns true if a should appear in the list before b .","title":"Valid Usage"},{"location":"api/class_luna_1_1_list_1aadabb3f9c00e459c78581e00207a9f2f/","text":"Luna::List::merge void merge(List &other) Merges another list into this list. Overview No memory allocation or element copy/move will be performed, this function transfers elements by changing their pointers directly so that they link to the new list. Elements are compared using less<_Ty> . Parameters other The list to merge. This list will be empty after this operation. If this is equal to *this , this function does nothing. Valid Usage Elements in *this and other must be sorted in ascending order.","title":"Luna::List::merge"},{"location":"api/class_luna_1_1_list_1aadabb3f9c00e459c78581e00207a9f2f/#lunalistmerge","text":"void merge(List &other) Merges another list into this list.","title":"Luna::List::merge"},{"location":"api/class_luna_1_1_list_1aadabb3f9c00e459c78581e00207a9f2f/#overview","text":"No memory allocation or element copy/move will be performed, this function transfers elements by changing their pointers directly so that they link to the new list. Elements are compared using less<_Ty> .","title":"Overview"},{"location":"api/class_luna_1_1_list_1aadabb3f9c00e459c78581e00207a9f2f/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1aadabb3f9c00e459c78581e00207a9f2f/#other","text":"The list to merge. This list will be empty after this operation. If this is equal to *this , this function does nothing.","title":"other"},{"location":"api/class_luna_1_1_list_1aadabb3f9c00e459c78581e00207a9f2f/#valid-usage","text":"Elements in *this and other must be sorted in ascending order.","title":"Valid Usage"},{"location":"api/class_luna_1_1_list_1aafc1352043c99963fa09825f1a384a10/","text":"Luna::List::assign void assign(usize count, const value_type &value) Replaces elements of the list by several copies of the specified value. Overview Parameters count The number of copies to insert to the list. value The value to copy.","title":"Luna::List::assign"},{"location":"api/class_luna_1_1_list_1aafc1352043c99963fa09825f1a384a10/#lunalistassign","text":"void assign(usize count, const value_type &value) Replaces elements of the list by several copies of the specified value.","title":"Luna::List::assign"},{"location":"api/class_luna_1_1_list_1aafc1352043c99963fa09825f1a384a10/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1aafc1352043c99963fa09825f1a384a10/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1aafc1352043c99963fa09825f1a384a10/#count","text":"The number of copies to insert to the list.","title":"count"},{"location":"api/class_luna_1_1_list_1aafc1352043c99963fa09825f1a384a10/#value","text":"The value to copy.","title":"value"},{"location":"api/class_luna_1_1_list_1ab224d00c52b43f870e827b15993bc2fe/","text":"Luna::List::front List< _Ty, _Alloc >::reference front() Gets the first element in the list. Overview Return value Returns one reference to the first element in the list. Valid Usage empty() must be false when calling this function.","title":"Luna::List::front"},{"location":"api/class_luna_1_1_list_1ab224d00c52b43f870e827b15993bc2fe/#lunalistfront","text":"List< _Ty, _Alloc >::reference front() Gets the first element in the list.","title":"Luna::List::front"},{"location":"api/class_luna_1_1_list_1ab224d00c52b43f870e827b15993bc2fe/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1ab224d00c52b43f870e827b15993bc2fe/#return-value","text":"Returns one reference to the first element in the list.","title":"Return value"},{"location":"api/class_luna_1_1_list_1ab224d00c52b43f870e827b15993bc2fe/#valid-usage","text":"empty() must be false when calling this function.","title":"Valid Usage"},{"location":"api/class_luna_1_1_list_1ab249999c1e6caf5fc15da072edfb7cf2/","text":"Luna::List::push_back void push_back(const value_type &value) Inserts one element at the back of the list. Overview Parameters value The element to insert. The element will be copy-inserted to the list.","title":"Luna::List::push_back"},{"location":"api/class_luna_1_1_list_1ab249999c1e6caf5fc15da072edfb7cf2/#lunalistpush_back","text":"void push_back(const value_type &value) Inserts one element at the back of the list.","title":"Luna::List::push_back"},{"location":"api/class_luna_1_1_list_1ab249999c1e6caf5fc15da072edfb7cf2/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1ab249999c1e6caf5fc15da072edfb7cf2/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1ab249999c1e6caf5fc15da072edfb7cf2/#value","text":"The element to insert. The element will be copy-inserted to the list.","title":"value"},{"location":"api/class_luna_1_1_list_1ab467c6181c9578af00b91c1caa15b7ae/","text":"Luna::List::splice void splice(const_iterator pos, List &&other, const_iterator first, const_iterator last) Transfers elements from another list to this list. Overview No memory allocation or element copy/move will be performed, this function transfers elements by changing their pointers directly so that they link to the new list. Parameters pos The iterator pointing to the position to insert the transferred elements. other The list to transfer elements from. first The iterator pointing to the first element to be transferred. last The iterator pointing to the one-past-last element to be transferred.","title":"Luna::List::splice"},{"location":"api/class_luna_1_1_list_1ab467c6181c9578af00b91c1caa15b7ae/#lunalistsplice","text":"void splice(const_iterator pos, List &&other, const_iterator first, const_iterator last) Transfers elements from another list to this list.","title":"Luna::List::splice"},{"location":"api/class_luna_1_1_list_1ab467c6181c9578af00b91c1caa15b7ae/#overview","text":"No memory allocation or element copy/move will be performed, this function transfers elements by changing their pointers directly so that they link to the new list.","title":"Overview"},{"location":"api/class_luna_1_1_list_1ab467c6181c9578af00b91c1caa15b7ae/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1ab467c6181c9578af00b91c1caa15b7ae/#pos","text":"The iterator pointing to the position to insert the transferred elements.","title":"pos"},{"location":"api/class_luna_1_1_list_1ab467c6181c9578af00b91c1caa15b7ae/#other","text":"The list to transfer elements from.","title":"other"},{"location":"api/class_luna_1_1_list_1ab467c6181c9578af00b91c1caa15b7ae/#first","text":"The iterator pointing to the first element to be transferred.","title":"first"},{"location":"api/class_luna_1_1_list_1ab467c6181c9578af00b91c1caa15b7ae/#last","text":"The iterator pointing to the one-past-last element to be transferred.","title":"last"},{"location":"api/class_luna_1_1_list_1ab877c1d244ce584e04e71592cc5fb28b/","text":"Luna::List::emplace_back template <typename...> List< _Ty, _Alloc >::reference emplace_back(_Args &&... args) Constructs one element directly on the back of the list using the provided arguments. Overview Parameters args The arguments to construct the element. _Ty(args...) will be used to construct the element. Return value Returns one reference to the constructed element.","title":"Luna::List::emplace_back"},{"location":"api/class_luna_1_1_list_1ab877c1d244ce584e04e71592cc5fb28b/#lunalistemplace_back","text":"template <typename...> List< _Ty, _Alloc >::reference emplace_back(_Args &&... args) Constructs one element directly on the back of the list using the provided arguments.","title":"Luna::List::emplace_back"},{"location":"api/class_luna_1_1_list_1ab877c1d244ce584e04e71592cc5fb28b/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1ab877c1d244ce584e04e71592cc5fb28b/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1ab877c1d244ce584e04e71592cc5fb28b/#args","text":"The arguments to construct the element. _Ty(args...) will be used to construct the element.","title":"args"},{"location":"api/class_luna_1_1_list_1ab877c1d244ce584e04e71592cc5fb28b/#return-value","text":"Returns one reference to the constructed element.","title":"Return value"},{"location":"api/class_luna_1_1_list_1abd1f6d5eae1fda09c94e99d624a31efd/","text":"Luna::List::List List(List &&rhs, const allocator_type &alloc) Constructs a list with an custom allocator and with elements moved from another list. Overview Parameters rhs The list to move elements from. alloc The allocator to use. The allocator object will be copy-constructed into the list.","title":"Luna::List::List"},{"location":"api/class_luna_1_1_list_1abd1f6d5eae1fda09c94e99d624a31efd/#lunalistlist","text":"List(List &&rhs, const allocator_type &alloc) Constructs a list with an custom allocator and with elements moved from another list.","title":"Luna::List::List"},{"location":"api/class_luna_1_1_list_1abd1f6d5eae1fda09c94e99d624a31efd/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1abd1f6d5eae1fda09c94e99d624a31efd/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1abd1f6d5eae1fda09c94e99d624a31efd/#rhs","text":"The list to move elements from.","title":"rhs"},{"location":"api/class_luna_1_1_list_1abd1f6d5eae1fda09c94e99d624a31efd/#alloc","text":"The allocator to use. The allocator object will be copy-constructed into the list.","title":"alloc"},{"location":"api/class_luna_1_1_list_1abe03ab15dca2df019aa3b28ae52081d7/","text":"Luna::List::rbegin List< _Ty, _Alloc >::reverse_iterator rbegin() Gets one reverse iterator pointing to the last element of the list. Overview Return value Returns one reverse iterator pointing to the last element of the list.","title":"Luna::List::rbegin"},{"location":"api/class_luna_1_1_list_1abe03ab15dca2df019aa3b28ae52081d7/#lunalistrbegin","text":"List< _Ty, _Alloc >::reverse_iterator rbegin() Gets one reverse iterator pointing to the last element of the list.","title":"Luna::List::rbegin"},{"location":"api/class_luna_1_1_list_1abe03ab15dca2df019aa3b28ae52081d7/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1abe03ab15dca2df019aa3b28ae52081d7/#return-value","text":"Returns one reverse iterator pointing to the last element of the list.","title":"Return value"},{"location":"api/class_luna_1_1_list_1ac5507a062255b274ef3b0557b5925087/","text":"Luna::List::push_front void push_front(value_type &&value) Inserts one element at the front of the list. Overview Parameters value The element to insert. The element will be move-inserted to the list.","title":"Luna::List::push_front"},{"location":"api/class_luna_1_1_list_1ac5507a062255b274ef3b0557b5925087/#lunalistpush_front","text":"void push_front(value_type &&value) Inserts one element at the front of the list.","title":"Luna::List::push_front"},{"location":"api/class_luna_1_1_list_1ac5507a062255b274ef3b0557b5925087/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1ac5507a062255b274ef3b0557b5925087/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1ac5507a062255b274ef3b0557b5925087/#value","text":"The element to insert. The element will be move-inserted to the list.","title":"value"},{"location":"api/class_luna_1_1_list_1ac80bf569e193eb38de839b1fc2d2b508/","text":"Luna::List::emplace_front template <typename...> List< _Ty, _Alloc >::reference emplace_front(_Args &&... args) Constructs one element directly on the front of the list using the provided arguments. Overview Parameters args The arguments to construct the element. _Ty(args...) will be used to construct the element. Return value Returns one reference to the constructed element.","title":"Luna::List::emplace_front"},{"location":"api/class_luna_1_1_list_1ac80bf569e193eb38de839b1fc2d2b508/#lunalistemplace_front","text":"template <typename...> List< _Ty, _Alloc >::reference emplace_front(_Args &&... args) Constructs one element directly on the front of the list using the provided arguments.","title":"Luna::List::emplace_front"},{"location":"api/class_luna_1_1_list_1ac80bf569e193eb38de839b1fc2d2b508/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1ac80bf569e193eb38de839b1fc2d2b508/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1ac80bf569e193eb38de839b1fc2d2b508/#args","text":"The arguments to construct the element. _Ty(args...) will be used to construct the element.","title":"args"},{"location":"api/class_luna_1_1_list_1ac80bf569e193eb38de839b1fc2d2b508/#return-value","text":"Returns one reference to the constructed element.","title":"Return value"},{"location":"api/class_luna_1_1_list_1ac8bb3912a3ce86b15842e79d0b421204/","text":"Luna::List::clear void clear() Removes all elements in the list.","title":"Luna::List::clear"},{"location":"api/class_luna_1_1_list_1ac8bb3912a3ce86b15842e79d0b421204/#lunalistclear","text":"void clear() Removes all elements in the list.","title":"Luna::List::clear"},{"location":"api/class_luna_1_1_list_1acef94bdef07ba09516830c5d427f7c87/","text":"Luna::List::rend List< _Ty, _Alloc >::const_reverse_iterator rend() const Gets one constant reverse iterator pointing to the one-before-first element of the list. Overview Return value Returns one constant reverse iterator pointing to the one-before-first element of the list.","title":"Luna::List::rend"},{"location":"api/class_luna_1_1_list_1acef94bdef07ba09516830c5d427f7c87/#lunalistrend","text":"List< _Ty, _Alloc >::const_reverse_iterator rend() const Gets one constant reverse iterator pointing to the one-before-first element of the list.","title":"Luna::List::rend"},{"location":"api/class_luna_1_1_list_1acef94bdef07ba09516830c5d427f7c87/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1acef94bdef07ba09516830c5d427f7c87/#return-value","text":"Returns one constant reverse iterator pointing to the one-before-first element of the list.","title":"Return value"},{"location":"api/class_luna_1_1_list_1ad7f3db2f149b0faf686e81595f2c333a/","text":"Luna::List::splice void splice(const_iterator pos, List &other, const_iterator it) Transfers one element from another list to this list. Overview No memory allocation or element copy/move will be performed, this function transfers elements by changing their pointers directly so that they link to the new list. Parameters pos The iterator pointing to the position to insert the transferred element. other The list to transfer the element from. it The iterator pointing to the element to be transferred.","title":"Luna::List::splice"},{"location":"api/class_luna_1_1_list_1ad7f3db2f149b0faf686e81595f2c333a/#lunalistsplice","text":"void splice(const_iterator pos, List &other, const_iterator it) Transfers one element from another list to this list.","title":"Luna::List::splice"},{"location":"api/class_luna_1_1_list_1ad7f3db2f149b0faf686e81595f2c333a/#overview","text":"No memory allocation or element copy/move will be performed, this function transfers elements by changing their pointers directly so that they link to the new list.","title":"Overview"},{"location":"api/class_luna_1_1_list_1ad7f3db2f149b0faf686e81595f2c333a/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1ad7f3db2f149b0faf686e81595f2c333a/#pos","text":"The iterator pointing to the position to insert the transferred element.","title":"pos"},{"location":"api/class_luna_1_1_list_1ad7f3db2f149b0faf686e81595f2c333a/#other","text":"The list to transfer the element from.","title":"other"},{"location":"api/class_luna_1_1_list_1ad7f3db2f149b0faf686e81595f2c333a/#it","text":"The iterator pointing to the element to be transferred.","title":"it"},{"location":"api/class_luna_1_1_list_1ad95db96bc0c2ccfb45416ad2590561ef/","text":"Luna::List::unique usize unique() Removes all consecutive duplicate elements from the container. Overview Only the first element in each group of equal elements is left. Elements are compared using [equal_to](struct_luna_1_1equal__to.md)<_Ty> . Return value Returns the number of elements removed.","title":"Luna::List::unique"},{"location":"api/class_luna_1_1_list_1ad95db96bc0c2ccfb45416ad2590561ef/#lunalistunique","text":"usize unique() Removes all consecutive duplicate elements from the container.","title":"Luna::List::unique"},{"location":"api/class_luna_1_1_list_1ad95db96bc0c2ccfb45416ad2590561ef/#overview","text":"Only the first element in each group of equal elements is left. Elements are compared using [equal_to](struct_luna_1_1equal__to.md)<_Ty> .","title":"Overview"},{"location":"api/class_luna_1_1_list_1ad95db96bc0c2ccfb45416ad2590561ef/#return-value","text":"Returns the number of elements removed.","title":"Return value"},{"location":"api/class_luna_1_1_list_1adaeab1488f29b931a806d420cf0857e4/","text":"Luna::List::assign template <typename _InputIt> auto assign(_InputIt first, _InputIt last) -> enable_if_t<!is_integral_v< _InputIt >, void > Replaces elements of the list by elements specified by one range. Elements in the range will be copy-inserted into the list. Overview Parameters first The iterator pointing to the first element of the range. last The iterator pointing to the one-past-last element of the range.","title":"Luna::List::assign"},{"location":"api/class_luna_1_1_list_1adaeab1488f29b931a806d420cf0857e4/#lunalistassign","text":"template <typename _InputIt> auto assign(_InputIt first, _InputIt last) -> enable_if_t<!is_integral_v< _InputIt >, void > Replaces elements of the list by elements specified by one range. Elements in the range will be copy-inserted into the list.","title":"Luna::List::assign"},{"location":"api/class_luna_1_1_list_1adaeab1488f29b931a806d420cf0857e4/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1adaeab1488f29b931a806d420cf0857e4/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1adaeab1488f29b931a806d420cf0857e4/#first","text":"The iterator pointing to the first element of the range.","title":"first"},{"location":"api/class_luna_1_1_list_1adaeab1488f29b931a806d420cf0857e4/#last","text":"The iterator pointing to the one-past-last element of the range.","title":"last"},{"location":"api/class_luna_1_1_list_1adc7b837f89f7e8dddcf2dc276dc115b2/","text":"Luna::List::push_back void push_back(value_type &&value) Inserts one element at the back of the list. Overview Parameters value The element to insert. The element will be move-inserted to the list.","title":"Luna::List::push_back"},{"location":"api/class_luna_1_1_list_1adc7b837f89f7e8dddcf2dc276dc115b2/#lunalistpush_back","text":"void push_back(value_type &&value) Inserts one element at the back of the list.","title":"Luna::List::push_back"},{"location":"api/class_luna_1_1_list_1adc7b837f89f7e8dddcf2dc276dc115b2/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1adc7b837f89f7e8dddcf2dc276dc115b2/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1adc7b837f89f7e8dddcf2dc276dc115b2/#value","text":"The element to insert. The element will be move-inserted to the list.","title":"value"},{"location":"api/class_luna_1_1_list_1adf956d3c1d0d18dbab020d516adb868a/","text":"Luna::List::List List(const List &rhs, const allocator_type &alloc) Constructs a list with an custom allocator and with elements copied from another list. Overview Parameters rhs The list to copy elements from. alloc The allocator to use. The allocator object will be copy-constructed into the list.","title":"Luna::List::List"},{"location":"api/class_luna_1_1_list_1adf956d3c1d0d18dbab020d516adb868a/#lunalistlist","text":"List(const List &rhs, const allocator_type &alloc) Constructs a list with an custom allocator and with elements copied from another list.","title":"Luna::List::List"},{"location":"api/class_luna_1_1_list_1adf956d3c1d0d18dbab020d516adb868a/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1adf956d3c1d0d18dbab020d516adb868a/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1adf956d3c1d0d18dbab020d516adb868a/#rhs","text":"The list to copy elements from.","title":"rhs"},{"location":"api/class_luna_1_1_list_1adf956d3c1d0d18dbab020d516adb868a/#alloc","text":"The allocator to use. The allocator object will be copy-constructed into the list.","title":"alloc"},{"location":"api/class_luna_1_1_list_1ae49b602ba0b25adb8379bf8727507324/","text":"Luna::List::begin List< _Ty, _Alloc >::iterator begin() Gets one iterator pointing to the first element of the list. Overview Return value Returns one iterator pointing to the first element of the list.","title":"Luna::List::begin"},{"location":"api/class_luna_1_1_list_1ae49b602ba0b25adb8379bf8727507324/#lunalistbegin","text":"List< _Ty, _Alloc >::iterator begin() Gets one iterator pointing to the first element of the list.","title":"Luna::List::begin"},{"location":"api/class_luna_1_1_list_1ae49b602ba0b25adb8379bf8727507324/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1ae49b602ba0b25adb8379bf8727507324/#return-value","text":"Returns one iterator pointing to the first element of the list.","title":"Return value"},{"location":"api/class_luna_1_1_list_1ae611567eda6d2e25cf0b551cfe932f1d/","text":"Luna::List::List List(const allocator_type &alloc) Constructs an empty list with an custom allocator. Overview Parameters alloc The allocator to use. The allocator object will be copy-constructed into the list.","title":"Luna::List::List"},{"location":"api/class_luna_1_1_list_1ae611567eda6d2e25cf0b551cfe932f1d/#lunalistlist","text":"List(const allocator_type &alloc) Constructs an empty list with an custom allocator.","title":"Luna::List::List"},{"location":"api/class_luna_1_1_list_1ae611567eda6d2e25cf0b551cfe932f1d/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1ae611567eda6d2e25cf0b551cfe932f1d/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1ae611567eda6d2e25cf0b551cfe932f1d/#alloc","text":"The allocator to use. The allocator object will be copy-constructed into the list.","title":"alloc"},{"location":"api/class_luna_1_1_list_1ae9756b0302b9bea3fc6094fcc773acef/","text":"Luna::List::rbegin List< _Ty, _Alloc >::const_reverse_iterator rbegin() const Gets one constant reverse iterator pointing to the last element of the list. Overview Return value Returns one constant reverse iterator pointing to the last element of the list.","title":"Luna::List::rbegin"},{"location":"api/class_luna_1_1_list_1ae9756b0302b9bea3fc6094fcc773acef/#lunalistrbegin","text":"List< _Ty, _Alloc >::const_reverse_iterator rbegin() const Gets one constant reverse iterator pointing to the last element of the list.","title":"Luna::List::rbegin"},{"location":"api/class_luna_1_1_list_1ae9756b0302b9bea3fc6094fcc773acef/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1ae9756b0302b9bea3fc6094fcc773acef/#return-value","text":"Returns one constant reverse iterator pointing to the last element of the list.","title":"Return value"},{"location":"api/class_luna_1_1_list_1aeeb4338da0a6043328f277d27c783d34/","text":"Luna::List::crend List< _Ty, _Alloc >::const_reverse_iterator crend() const Gets one constant reverse iterator pointing to the one-before-first element of the list. Overview Return value Returns one constant reverse iterator pointing to the one-before-first element of the list.","title":"Luna::List::crend"},{"location":"api/class_luna_1_1_list_1aeeb4338da0a6043328f277d27c783d34/#lunalistcrend","text":"List< _Ty, _Alloc >::const_reverse_iterator crend() const Gets one constant reverse iterator pointing to the one-before-first element of the list.","title":"Luna::List::crend"},{"location":"api/class_luna_1_1_list_1aeeb4338da0a6043328f277d27c783d34/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1aeeb4338da0a6043328f277d27c783d34/#return-value","text":"Returns one constant reverse iterator pointing to the one-before-first element of the list.","title":"Return value"},{"location":"api/class_luna_1_1_list_1aeef1ee04f94a3045a91a3de58b3833b6/","text":"Luna::List::front List< _Ty, _Alloc >::const_reference front() const Gets the first element in the list. Overview Return value Returns one constant reference to the first element in the list. Valid Usage empty() must be false when calling this function.","title":"Luna::List::front"},{"location":"api/class_luna_1_1_list_1aeef1ee04f94a3045a91a3de58b3833b6/#lunalistfront","text":"List< _Ty, _Alloc >::const_reference front() const Gets the first element in the list.","title":"Luna::List::front"},{"location":"api/class_luna_1_1_list_1aeef1ee04f94a3045a91a3de58b3833b6/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1aeef1ee04f94a3045a91a3de58b3833b6/#return-value","text":"Returns one constant reference to the first element in the list.","title":"Return value"},{"location":"api/class_luna_1_1_list_1aeef1ee04f94a3045a91a3de58b3833b6/#valid-usage","text":"empty() must be false when calling this function.","title":"Valid Usage"},{"location":"api/class_luna_1_1_list_1af2b6dc300d3ff9b1ac3ad178bd4d0b4d/","text":"Luna::List::merge template <typename _Compare> void merge(List &other, _Compare comp) Merges another list into this list. Overview No memory allocation or element copy/move will be performed, this function transfers elements by changing their pointers directly so that they link to the new list. Elements are compared using the user-specified comparison function object. Parameters other The list to merge. This list will be empty after this operation. If this is equal to *this , this function does nothing. comp The comparison function object to use. Valid Usage comp must provide the following function: bool operator()(const _Ty& a, const _Ty& b) , that returns true if a should appear in the list before b . Elements in *this and other must be sorted in an order defined by the user-specified comparison function, that is, for any two elements a and b in the same list, comp(b, a) must return false if a appears before b .","title":"Luna::List::merge"},{"location":"api/class_luna_1_1_list_1af2b6dc300d3ff9b1ac3ad178bd4d0b4d/#lunalistmerge","text":"template <typename _Compare> void merge(List &other, _Compare comp) Merges another list into this list.","title":"Luna::List::merge"},{"location":"api/class_luna_1_1_list_1af2b6dc300d3ff9b1ac3ad178bd4d0b4d/#overview","text":"No memory allocation or element copy/move will be performed, this function transfers elements by changing their pointers directly so that they link to the new list. Elements are compared using the user-specified comparison function object.","title":"Overview"},{"location":"api/class_luna_1_1_list_1af2b6dc300d3ff9b1ac3ad178bd4d0b4d/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1af2b6dc300d3ff9b1ac3ad178bd4d0b4d/#other","text":"The list to merge. This list will be empty after this operation. If this is equal to *this , this function does nothing.","title":"other"},{"location":"api/class_luna_1_1_list_1af2b6dc300d3ff9b1ac3ad178bd4d0b4d/#comp","text":"The comparison function object to use.","title":"comp"},{"location":"api/class_luna_1_1_list_1af2b6dc300d3ff9b1ac3ad178bd4d0b4d/#valid-usage","text":"comp must provide the following function: bool operator()(const _Ty& a, const _Ty& b) , that returns true if a should appear in the list before b . Elements in *this and other must be sorted in an order defined by the user-specified comparison function, that is, for any two elements a and b in the same list, comp(b, a) must return false if a appears before b .","title":"Valid Usage"},{"location":"api/class_luna_1_1_list_1af80ee60b2d616a86fe008cf226795f26/","text":"Luna::List::assign void assign(InitializerList< value_type > ilist) Replaces elements of the list by elements from one initializer list. Overview Parameters ilist The initializer list.","title":"Luna::List::assign"},{"location":"api/class_luna_1_1_list_1af80ee60b2d616a86fe008cf226795f26/#lunalistassign","text":"void assign(InitializerList< value_type > ilist) Replaces elements of the list by elements from one initializer list.","title":"Luna::List::assign"},{"location":"api/class_luna_1_1_list_1af80ee60b2d616a86fe008cf226795f26/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1af80ee60b2d616a86fe008cf226795f26/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1af80ee60b2d616a86fe008cf226795f26/#ilist","text":"The initializer list.","title":"ilist"},{"location":"api/class_luna_1_1_list_1afd0e7fad7eae2aa017ac604c1ed6af5f/","text":"Luna::List::splice void splice(const_iterator pos, List &&other, const_iterator it) Transfers one element from another list to this list. Overview No memory allocation or element copy/move will be performed, this function transfers elements by changing their pointers directly so that they link to the new list. Parameters pos The iterator pointing to the position to insert the transferred element. other The list to transfer the element from. it The iterator pointing to the element to be transferred.","title":"Luna::List::splice"},{"location":"api/class_luna_1_1_list_1afd0e7fad7eae2aa017ac604c1ed6af5f/#lunalistsplice","text":"void splice(const_iterator pos, List &&other, const_iterator it) Transfers one element from another list to this list.","title":"Luna::List::splice"},{"location":"api/class_luna_1_1_list_1afd0e7fad7eae2aa017ac604c1ed6af5f/#overview","text":"No memory allocation or element copy/move will be performed, this function transfers elements by changing their pointers directly so that they link to the new list.","title":"Overview"},{"location":"api/class_luna_1_1_list_1afd0e7fad7eae2aa017ac604c1ed6af5f/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1afd0e7fad7eae2aa017ac604c1ed6af5f/#pos","text":"The iterator pointing to the position to insert the transferred element.","title":"pos"},{"location":"api/class_luna_1_1_list_1afd0e7fad7eae2aa017ac604c1ed6af5f/#other","text":"The list to transfer the element from.","title":"other"},{"location":"api/class_luna_1_1_list_1afd0e7fad7eae2aa017ac604c1ed6af5f/#it","text":"The iterator pointing to the element to be transferred.","title":"it"},{"location":"api/class_luna_1_1_list_1afe76b6d22e154f4d315d4def8ecf31a4/","text":"Luna::List::back List< _Ty, _Alloc >::reference back() Gets the last element in the list. Overview Return value Returns one reference to the last element in the list. Valid Usage empty() must be false when calling this function.","title":"Luna::List::back"},{"location":"api/class_luna_1_1_list_1afe76b6d22e154f4d315d4def8ecf31a4/#lunalistback","text":"List< _Ty, _Alloc >::reference back() Gets the last element in the list.","title":"Luna::List::back"},{"location":"api/class_luna_1_1_list_1afe76b6d22e154f4d315d4def8ecf31a4/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1afe76b6d22e154f4d315d4def8ecf31a4/#return-value","text":"Returns one reference to the last element in the list.","title":"Return value"},{"location":"api/class_luna_1_1_list_1afe76b6d22e154f4d315d4def8ecf31a4/#valid-usage","text":"empty() must be false when calling this function.","title":"Valid Usage"},{"location":"api/class_luna_1_1_list_1afe7d58790aad6d1244777711aef39ad0/","text":"Luna::List::resize void resize(usize count) Changes the number of elements in the list. Overview Parameters count The new size of the list. If this is larger than size() , new elements will be default-inserted at the back of the list. If this is smaller than size() , elements in range [ count , size() ) will be removed from the list. If this is equal to size() , this function does nothing.","title":"Luna::List::resize"},{"location":"api/class_luna_1_1_list_1afe7d58790aad6d1244777711aef39ad0/#lunalistresize","text":"void resize(usize count) Changes the number of elements in the list.","title":"Luna::List::resize"},{"location":"api/class_luna_1_1_list_1afe7d58790aad6d1244777711aef39ad0/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_list_1afe7d58790aad6d1244777711aef39ad0/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_list_1afe7d58790aad6d1244777711aef39ad0/#count","text":"The new size of the list. If this is larger than size() , new elements will be default-inserted at the back of the list. If this is smaller than size() , elements in range [ count , size() ) will be removed from the list. If this is equal to size() , this function does nothing.","title":"count"},{"location":"api/class_luna_1_1_lock_guard/","text":"Luna::LockGuard The RAII wrapper for fetching one spin lock. class Luna::LockGuard","title":"Luna::LockGuard"},{"location":"api/class_luna_1_1_lock_guard/#lunalockguard","text":"The RAII wrapper for fetching one spin lock. class Luna::LockGuard","title":"Luna::LockGuard"},{"location":"api/class_luna_1_1_mutex_guard/","text":"Luna::MutexGuard A RAII wrapper for one mutex object that releases the mutex automatically when the wrapper is destructed. class Luna::MutexGuard Functions MutexGuard() Constructs an empty mutex lock. MutexGuard(IMutex *mtx) Constructs a mutex lock that locks the specified mutex. bool locked() const Checks whether this mutex lock is locking one mutex. void lock(IMutex *mtx) Locks the specified mutex. If there is already one locked mutex, the former mutex will be unlocked firstly. void unlock() Unlocks the currently locking mutex. If no mutex is currently locked, this function does nothing.","title":"Luna::MutexGuard"},{"location":"api/class_luna_1_1_mutex_guard/#lunamutexguard","text":"A RAII wrapper for one mutex object that releases the mutex automatically when the wrapper is destructed. class Luna::MutexGuard","title":"Luna::MutexGuard"},{"location":"api/class_luna_1_1_mutex_guard/#functions","text":"MutexGuard() Constructs an empty mutex lock. MutexGuard(IMutex *mtx) Constructs a mutex lock that locks the specified mutex. bool locked() const Checks whether this mutex lock is locking one mutex. void lock(IMutex *mtx) Locks the specified mutex. If there is already one locked mutex, the former mutex will be unlocked firstly. void unlock() Unlocks the currently locking mutex. If no mutex is currently locked, this function does nothing.","title":"Functions"},{"location":"api/class_luna_1_1_mutex_guard_1a4fe5a0cd117832d4078647d078196222/","text":"Luna::MutexGuard::lock void lock(IMutex *mtx) Locks the specified mutex. If there is already one locked mutex, the former mutex will be unlocked firstly. Overview Parameters mtx The mutex to lock.","title":"Luna::MutexGuard::lock"},{"location":"api/class_luna_1_1_mutex_guard_1a4fe5a0cd117832d4078647d078196222/#lunamutexguardlock","text":"void lock(IMutex *mtx) Locks the specified mutex. If there is already one locked mutex, the former mutex will be unlocked firstly.","title":"Luna::MutexGuard::lock"},{"location":"api/class_luna_1_1_mutex_guard_1a4fe5a0cd117832d4078647d078196222/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_mutex_guard_1a4fe5a0cd117832d4078647d078196222/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_mutex_guard_1a4fe5a0cd117832d4078647d078196222/#mtx","text":"The mutex to lock.","title":"mtx"},{"location":"api/class_luna_1_1_mutex_guard_1a7d8cdf5a9287b37a4456378eeeaa98a1/","text":"Luna::MutexGuard::MutexGuard MutexGuard() Constructs an empty mutex lock.","title":"Luna::MutexGuard::MutexGuard"},{"location":"api/class_luna_1_1_mutex_guard_1a7d8cdf5a9287b37a4456378eeeaa98a1/#lunamutexguardmutexguard","text":"MutexGuard() Constructs an empty mutex lock.","title":"Luna::MutexGuard::MutexGuard"},{"location":"api/class_luna_1_1_mutex_guard_1a8b660d2fb225d2dc900e1f7d0b60dadf/","text":"Luna::MutexGuard::locked bool locked() const Checks whether this mutex lock is locking one mutex.","title":"Luna::MutexGuard::locked"},{"location":"api/class_luna_1_1_mutex_guard_1a8b660d2fb225d2dc900e1f7d0b60dadf/#lunamutexguardlocked","text":"bool locked() const Checks whether this mutex lock is locking one mutex.","title":"Luna::MutexGuard::locked"},{"location":"api/class_luna_1_1_mutex_guard_1a9278be8203e1c42e2619179882ae4403/","text":"Luna::MutexGuard::unlock void unlock() Unlocks the currently locking mutex. If no mutex is currently locked, this function does nothing.","title":"Luna::MutexGuard::unlock"},{"location":"api/class_luna_1_1_mutex_guard_1a9278be8203e1c42e2619179882ae4403/#lunamutexguardunlock","text":"void unlock() Unlocks the currently locking mutex. If no mutex is currently locked, this function does nothing.","title":"Luna::MutexGuard::unlock"},{"location":"api/class_luna_1_1_mutex_guard_1aabd102c9bc9b3aba227f1ecad69ad461/","text":"Luna::MutexGuard::MutexGuard MutexGuard(IMutex *mtx) Constructs a mutex lock that locks the specified mutex. Overview Parameters mtx The mutex to lock.","title":"Luna::MutexGuard::MutexGuard"},{"location":"api/class_luna_1_1_mutex_guard_1aabd102c9bc9b3aba227f1ecad69ad461/#lunamutexguardmutexguard","text":"MutexGuard(IMutex *mtx) Constructs a mutex lock that locks the specified mutex.","title":"Luna::MutexGuard::MutexGuard"},{"location":"api/class_luna_1_1_mutex_guard_1aabd102c9bc9b3aba227f1ecad69ad461/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_mutex_guard_1aabd102c9bc9b3aba227f1ecad69ad461/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_mutex_guard_1aabd102c9bc9b3aba227f1ecad69ad461/#mtx","text":"The mutex to lock.","title":"mtx"},{"location":"api/class_luna_1_1_name/","text":"Luna::Name Represents one name string. class Luna::Name Overview The name string is one constant string that is mainly used to identify entities in LunaSDK. Name strings are reference counted and managed by system, all Name objects containing the same name string will refer the same name internal string data, enabling fast comparison: instead of comparing the whole string, we only need to compare one pointer to determine whether two name strings are the same. Functions Name() Constructs one empty name. Name(const c8 *name) Constructs one name with the provided name string. Name(const c8 *name, usize count) Constructs one name with the provided name string and size. Name(const String &str) Constructs one name from one string. Name(const String &str, usize pos, usize count) Constructs one name from one substring of the provided string. const c8 * c_str() const Gets the internal string pointer of this name. usize size() const Gets the size of the name string. name_id_t id() const Gets the ID of the name string. bool empty() const Checks whether this name string is empty. operator bool() const Checks whether this name string is empty. void reset() Clears the name string and resets it to one empty name. bool operator==(const Name &rhs) const Compares two names for equality. bool operator!=(const Name &rhs) const Compares two names for non-equality. operator String() const Converts one name to one string.","title":"Luna::Name"},{"location":"api/class_luna_1_1_name/#lunaname","text":"Represents one name string. class Luna::Name","title":"Luna::Name"},{"location":"api/class_luna_1_1_name/#overview","text":"The name string is one constant string that is mainly used to identify entities in LunaSDK. Name strings are reference counted and managed by system, all Name objects containing the same name string will refer the same name internal string data, enabling fast comparison: instead of comparing the whole string, we only need to compare one pointer to determine whether two name strings are the same.","title":"Overview"},{"location":"api/class_luna_1_1_name/#functions","text":"Name() Constructs one empty name. Name(const c8 *name) Constructs one name with the provided name string. Name(const c8 *name, usize count) Constructs one name with the provided name string and size. Name(const String &str) Constructs one name from one string. Name(const String &str, usize pos, usize count) Constructs one name from one substring of the provided string. const c8 * c_str() const Gets the internal string pointer of this name. usize size() const Gets the size of the name string. name_id_t id() const Gets the ID of the name string. bool empty() const Checks whether this name string is empty. operator bool() const Checks whether this name string is empty. void reset() Clears the name string and resets it to one empty name. bool operator==(const Name &rhs) const Compares two names for equality. bool operator!=(const Name &rhs) const Compares two names for non-equality. operator String() const Converts one name to one string.","title":"Functions"},{"location":"api/class_luna_1_1_name_1a1a1d629fd8da2800e7153328215c852f/","text":"Luna::Name::Name Name(const c8 *name) Constructs one name with the provided name string. Overview Parameters name The name string. Valid Usage If name is not nullptr , it must be null-terminated.","title":"Luna::Name::Name"},{"location":"api/class_luna_1_1_name_1a1a1d629fd8da2800e7153328215c852f/#lunanamename","text":"Name(const c8 *name) Constructs one name with the provided name string.","title":"Luna::Name::Name"},{"location":"api/class_luna_1_1_name_1a1a1d629fd8da2800e7153328215c852f/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_name_1a1a1d629fd8da2800e7153328215c852f/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_name_1a1a1d629fd8da2800e7153328215c852f/#name","text":"The name string.","title":"name"},{"location":"api/class_luna_1_1_name_1a1a1d629fd8da2800e7153328215c852f/#valid-usage","text":"If name is not nullptr , it must be null-terminated.","title":"Valid Usage"},{"location":"api/class_luna_1_1_name_1a5ad81a0d755899f04deb6fd793bb27f6/","text":"Luna::Name::c_str const c8 * c_str() const Gets the internal string pointer of this name. Overview Return value Returns the internal string pointer of this name, returns one empty string if this is a null name.","title":"Luna::Name::c_str"},{"location":"api/class_luna_1_1_name_1a5ad81a0d755899f04deb6fd793bb27f6/#lunanamec_str","text":"const c8 * c_str() const Gets the internal string pointer of this name.","title":"Luna::Name::c_str"},{"location":"api/class_luna_1_1_name_1a5ad81a0d755899f04deb6fd793bb27f6/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_name_1a5ad81a0d755899f04deb6fd793bb27f6/#return-value","text":"Returns the internal string pointer of this name, returns one empty string if this is a null name.","title":"Return value"},{"location":"api/class_luna_1_1_name_1a610a3ab098fb008aad0478beea601a76/","text":"Luna::Name::id name_id_t id() const Gets the ID of the name string. Overview Return value Returns the ID of the name string.","title":"Luna::Name::id"},{"location":"api/class_luna_1_1_name_1a610a3ab098fb008aad0478beea601a76/#lunanameid","text":"name_id_t id() const Gets the ID of the name string.","title":"Luna::Name::id"},{"location":"api/class_luna_1_1_name_1a610a3ab098fb008aad0478beea601a76/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_name_1a610a3ab098fb008aad0478beea601a76/#return-value","text":"Returns the ID of the name string.","title":"Return value"},{"location":"api/class_luna_1_1_name_1a644718bb2fb240de962dc3c9a1fdf0dc/","text":"Luna::Name::empty bool empty() const Checks whether this name string is empty. Overview Return value Returns true if this name string is empty, returns false otherwise.","title":"Luna::Name::empty"},{"location":"api/class_luna_1_1_name_1a644718bb2fb240de962dc3c9a1fdf0dc/#lunanameempty","text":"bool empty() const Checks whether this name string is empty.","title":"Luna::Name::empty"},{"location":"api/class_luna_1_1_name_1a644718bb2fb240de962dc3c9a1fdf0dc/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_name_1a644718bb2fb240de962dc3c9a1fdf0dc/#return-value","text":"Returns true if this name string is empty, returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_name_1a67b76affb3b5d35fa419ac234144038b/","text":"Luna::Name::operator bool operator bool() const Checks whether this name string is empty. Overview Return value Returns true if this name string is empty, returns false otherwise.","title":"Luna::Name::operator bool"},{"location":"api/class_luna_1_1_name_1a67b76affb3b5d35fa419ac234144038b/#lunanameoperator-bool","text":"operator bool() const Checks whether this name string is empty.","title":"Luna::Name::operator bool"},{"location":"api/class_luna_1_1_name_1a67b76affb3b5d35fa419ac234144038b/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_name_1a67b76affb3b5d35fa419ac234144038b/#return-value","text":"Returns true if this name string is empty, returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_name_1a711553d241082264643b3a61e70b8cb6/","text":"Luna::Name::Name Name(const String &str) Constructs one name from one string. Overview Parameters str The name string.","title":"Luna::Name::Name"},{"location":"api/class_luna_1_1_name_1a711553d241082264643b3a61e70b8cb6/#lunanamename","text":"Name(const String &str) Constructs one name from one string.","title":"Luna::Name::Name"},{"location":"api/class_luna_1_1_name_1a711553d241082264643b3a61e70b8cb6/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_name_1a711553d241082264643b3a61e70b8cb6/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_name_1a711553d241082264643b3a61e70b8cb6/#str","text":"The name string.","title":"str"},{"location":"api/class_luna_1_1_name_1a79348f1b7c06b34052b42656a0279429/","text":"Luna::Name::size usize size() const Gets the size of the name string. Overview Return value Returns the size of the name string.","title":"Luna::Name::size"},{"location":"api/class_luna_1_1_name_1a79348f1b7c06b34052b42656a0279429/#lunanamesize","text":"usize size() const Gets the size of the name string.","title":"Luna::Name::size"},{"location":"api/class_luna_1_1_name_1a79348f1b7c06b34052b42656a0279429/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_name_1a79348f1b7c06b34052b42656a0279429/#return-value","text":"Returns the size of the name string.","title":"Return value"},{"location":"api/class_luna_1_1_name_1a7c6e6c238815764353cb0cf8f20d9de0/","text":"Luna::Name::Name Name(const c8 *name, usize count) Constructs one name with the provided name string and size. Overview Parameters name The name string. count The number of characters in the string used to create the name.","title":"Luna::Name::Name"},{"location":"api/class_luna_1_1_name_1a7c6e6c238815764353cb0cf8f20d9de0/#lunanamename","text":"Name(const c8 *name, usize count) Constructs one name with the provided name string and size.","title":"Luna::Name::Name"},{"location":"api/class_luna_1_1_name_1a7c6e6c238815764353cb0cf8f20d9de0/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_name_1a7c6e6c238815764353cb0cf8f20d9de0/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_name_1a7c6e6c238815764353cb0cf8f20d9de0/#name","text":"The name string.","title":"name"},{"location":"api/class_luna_1_1_name_1a7c6e6c238815764353cb0cf8f20d9de0/#count","text":"The number of characters in the string used to create the name.","title":"count"},{"location":"api/class_luna_1_1_name_1a970adff199cd33d49ec88821e8d5ef98/","text":"Luna::Name::operator== bool operator==(const Name &rhs) const Compares two names for equality. Overview Parameters rhs The name to compare with. Return value Returns true if two names are equal, returns false otherwise.","title":"Luna::Name::operator=="},{"location":"api/class_luna_1_1_name_1a970adff199cd33d49ec88821e8d5ef98/#lunanameoperator","text":"bool operator==(const Name &rhs) const Compares two names for equality.","title":"Luna::Name::operator=="},{"location":"api/class_luna_1_1_name_1a970adff199cd33d49ec88821e8d5ef98/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_name_1a970adff199cd33d49ec88821e8d5ef98/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_name_1a970adff199cd33d49ec88821e8d5ef98/#rhs","text":"The name to compare with.","title":"rhs"},{"location":"api/class_luna_1_1_name_1a970adff199cd33d49ec88821e8d5ef98/#return-value","text":"Returns true if two names are equal, returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_name_1a97b5bb171560e992a13a551821f9b73b/","text":"Luna::Name::Name Name(const String &str, usize pos, usize count) Constructs one name from one substring of the provided string. Overview Parameters str The name string. pos The first character used for the name. count The number of characters used for the name.","title":"Luna::Name::Name"},{"location":"api/class_luna_1_1_name_1a97b5bb171560e992a13a551821f9b73b/#lunanamename","text":"Name(const String &str, usize pos, usize count) Constructs one name from one substring of the provided string.","title":"Luna::Name::Name"},{"location":"api/class_luna_1_1_name_1a97b5bb171560e992a13a551821f9b73b/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_name_1a97b5bb171560e992a13a551821f9b73b/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_name_1a97b5bb171560e992a13a551821f9b73b/#str","text":"The name string.","title":"str"},{"location":"api/class_luna_1_1_name_1a97b5bb171560e992a13a551821f9b73b/#pos","text":"The first character used for the name.","title":"pos"},{"location":"api/class_luna_1_1_name_1a97b5bb171560e992a13a551821f9b73b/#count","text":"The number of characters used for the name.","title":"count"},{"location":"api/class_luna_1_1_name_1ad20897c5c8bd47f5d4005989bead0e55/","text":"Luna::Name::reset void reset() Clears the name string and resets it to one empty name.","title":"Luna::Name::reset"},{"location":"api/class_luna_1_1_name_1ad20897c5c8bd47f5d4005989bead0e55/#lunanamereset","text":"void reset() Clears the name string and resets it to one empty name.","title":"Luna::Name::reset"},{"location":"api/class_luna_1_1_name_1ad2500b704d297c0a2cde6256112d770e/","text":"Luna::Name::operator String operator String() const Converts one name to one string. Overview Return value Returns one string containing name characters.","title":"Luna::Name::operator String"},{"location":"api/class_luna_1_1_name_1ad2500b704d297c0a2cde6256112d770e/#lunanameoperator-string","text":"operator String() const Converts one name to one string.","title":"Luna::Name::operator String"},{"location":"api/class_luna_1_1_name_1ad2500b704d297c0a2cde6256112d770e/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_name_1ad2500b704d297c0a2cde6256112d770e/#return-value","text":"Returns one string containing name characters.","title":"Return value"},{"location":"api/class_luna_1_1_name_1aee637aaac62ffd89b7b7c6b6529e913b/","text":"Luna::Name::Name Name() Constructs one empty name.","title":"Luna::Name::Name"},{"location":"api/class_luna_1_1_name_1aee637aaac62ffd89b7b7c6b6529e913b/#lunanamename","text":"Name() Constructs one empty name.","title":"Luna::Name::Name"},{"location":"api/class_luna_1_1_name_1af3a1e19372a372acc6afb54dea79fadc/","text":"Luna::Name::operator!= bool operator!=(const Name &rhs) const Compares two names for non-equality. Overview Parameters rhs The name to compare with. Return value Returns true if two names are not equal, returns false otherwise.","title":"Luna::Name::operator!="},{"location":"api/class_luna_1_1_name_1af3a1e19372a372acc6afb54dea79fadc/#lunanameoperator","text":"bool operator!=(const Name &rhs) const Compares two names for non-equality.","title":"Luna::Name::operator!="},{"location":"api/class_luna_1_1_name_1af3a1e19372a372acc6afb54dea79fadc/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_name_1af3a1e19372a372acc6afb54dea79fadc/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_name_1af3a1e19372a372acc6afb54dea79fadc/#rhs","text":"The name to compare with.","title":"rhs"},{"location":"api/class_luna_1_1_name_1af3a1e19372a372acc6afb54dea79fadc/#return-value","text":"Returns true if two names are not equal, returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_obj_ref/","text":"Luna::ObjRef The smart pointer that represents one typeless strong reference to one boxed object. class Luna::ObjRef Functions void reset() Resets the reference to null. bool valid() const Checks whether this reference is valid. object_t get() const Gets the boxed object. void attach(object_t ptr) Attaches provided pointer. object_t detach() Detaches the stored pointer. The reference becomes null after this operation. ObjRef() Constructs one null reference. ObjRef(const ObjRef &rhs) Constructs one reference by coping the pointer from another reference. ObjRef(ObjRef &&rhs) Constructs one reference by moving the pointer from another reference. ObjRef & operator=(const ObjRef &rhs) Assigns this reference by coping the pointer from another reference. ObjRef & operator=(ObjRef &&rhs) Assigns this reference by moving the pointer from another reference. ObjRef(object_t ptr) Constructs one reference by providing the underlying pointer directly. ObjRef & operator=(object_t rhs) Replaces the underlying pointer of this reference with the given pointer. bool operator==(const ObjRef &rhs) const Compares two references for equality. bool operator!=(const ObjRef &rhs) const Compares two references for non-equality. bool operator<(const ObjRef &rhs) const Compares two references. typeinfo_t type() const Gets the type object of the boxed object. operator bool() const Checks whether this reference is valid.","title":"Luna::ObjRef"},{"location":"api/class_luna_1_1_obj_ref/#lunaobjref","text":"The smart pointer that represents one typeless strong reference to one boxed object. class Luna::ObjRef","title":"Luna::ObjRef"},{"location":"api/class_luna_1_1_obj_ref/#functions","text":"void reset() Resets the reference to null. bool valid() const Checks whether this reference is valid. object_t get() const Gets the boxed object. void attach(object_t ptr) Attaches provided pointer. object_t detach() Detaches the stored pointer. The reference becomes null after this operation. ObjRef() Constructs one null reference. ObjRef(const ObjRef &rhs) Constructs one reference by coping the pointer from another reference. ObjRef(ObjRef &&rhs) Constructs one reference by moving the pointer from another reference. ObjRef & operator=(const ObjRef &rhs) Assigns this reference by coping the pointer from another reference. ObjRef & operator=(ObjRef &&rhs) Assigns this reference by moving the pointer from another reference. ObjRef(object_t ptr) Constructs one reference by providing the underlying pointer directly. ObjRef & operator=(object_t rhs) Replaces the underlying pointer of this reference with the given pointer. bool operator==(const ObjRef &rhs) const Compares two references for equality. bool operator!=(const ObjRef &rhs) const Compares two references for non-equality. bool operator<(const ObjRef &rhs) const Compares two references. typeinfo_t type() const Gets the type object of the boxed object. operator bool() const Checks whether this reference is valid.","title":"Functions"},{"location":"api/class_luna_1_1_obj_ref_1a0d4850ee757648dcfbe03ddafc2fd405/","text":"Luna::ObjRef::operator= ObjRef & operator=(object_t rhs) Replaces the underlying pointer of this reference with the given pointer. Overview The strong reference counter of the new boxed object will be increased if the provided pointer is valid. The weak reference counter of the original boxed object, if not null, will be decreased before assignment. Parameters rhs The pointer to set. Return value Returns *this .","title":"Luna::ObjRef::operator="},{"location":"api/class_luna_1_1_obj_ref_1a0d4850ee757648dcfbe03ddafc2fd405/#lunaobjrefoperator","text":"ObjRef & operator=(object_t rhs) Replaces the underlying pointer of this reference with the given pointer.","title":"Luna::ObjRef::operator="},{"location":"api/class_luna_1_1_obj_ref_1a0d4850ee757648dcfbe03ddafc2fd405/#overview","text":"The strong reference counter of the new boxed object will be increased if the provided pointer is valid. The weak reference counter of the original boxed object, if not null, will be decreased before assignment.","title":"Overview"},{"location":"api/class_luna_1_1_obj_ref_1a0d4850ee757648dcfbe03ddafc2fd405/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_obj_ref_1a0d4850ee757648dcfbe03ddafc2fd405/#rhs","text":"The pointer to set.","title":"rhs"},{"location":"api/class_luna_1_1_obj_ref_1a0d4850ee757648dcfbe03ddafc2fd405/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/class_luna_1_1_obj_ref_1a11ee9c316d4e82ce3923aa5954852ccf/","text":"Luna::ObjRef::operator< bool operator<(const ObjRef &rhs) const Compares two references. Overview The referneces are compared by comparing their underlying pointers after converted to unsigned integers. If the reference is not valid, the converted integer will be 0 . Parameters rhs The reference to compare with. Return value Returns true if this reference is less than the incoming reference. Returns false otherwise.","title":"Luna::ObjRef::operator<"},{"location":"api/class_luna_1_1_obj_ref_1a11ee9c316d4e82ce3923aa5954852ccf/#lunaobjrefoperator","text":"bool operator<(const ObjRef &rhs) const Compares two references.","title":"Luna::ObjRef::operator&lt;"},{"location":"api/class_luna_1_1_obj_ref_1a11ee9c316d4e82ce3923aa5954852ccf/#overview","text":"The referneces are compared by comparing their underlying pointers after converted to unsigned integers. If the reference is not valid, the converted integer will be 0 .","title":"Overview"},{"location":"api/class_luna_1_1_obj_ref_1a11ee9c316d4e82ce3923aa5954852ccf/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_obj_ref_1a11ee9c316d4e82ce3923aa5954852ccf/#rhs","text":"The reference to compare with.","title":"rhs"},{"location":"api/class_luna_1_1_obj_ref_1a11ee9c316d4e82ce3923aa5954852ccf/#return-value","text":"Returns true if this reference is less than the incoming reference. Returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_obj_ref_1a17c9fbece817be82a9e608789d97bd60/","text":"Luna::ObjRef::ObjRef ObjRef(const ObjRef &rhs) Constructs one reference by coping the pointer from another reference. Overview The strong reference counter of the new boxed object, if not null, will be increased. Parameters rhs The reference to copy from.","title":"Luna::ObjRef::ObjRef"},{"location":"api/class_luna_1_1_obj_ref_1a17c9fbece817be82a9e608789d97bd60/#lunaobjrefobjref","text":"ObjRef(const ObjRef &rhs) Constructs one reference by coping the pointer from another reference.","title":"Luna::ObjRef::ObjRef"},{"location":"api/class_luna_1_1_obj_ref_1a17c9fbece817be82a9e608789d97bd60/#overview","text":"The strong reference counter of the new boxed object, if not null, will be increased.","title":"Overview"},{"location":"api/class_luna_1_1_obj_ref_1a17c9fbece817be82a9e608789d97bd60/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_obj_ref_1a17c9fbece817be82a9e608789d97bd60/#rhs","text":"The reference to copy from.","title":"rhs"},{"location":"api/class_luna_1_1_obj_ref_1a1ba3eb3ceae46d4bc4b6d09430ffd620/","text":"Luna::ObjRef::ObjRef ObjRef() Constructs one null reference.","title":"Luna::ObjRef::ObjRef"},{"location":"api/class_luna_1_1_obj_ref_1a1ba3eb3ceae46d4bc4b6d09430ffd620/#lunaobjrefobjref","text":"ObjRef() Constructs one null reference.","title":"Luna::ObjRef::ObjRef"},{"location":"api/class_luna_1_1_obj_ref_1a1c56e321384fe3edf65345f272d774fc/","text":"Luna::ObjRef::get object_t get() const Gets the boxed object. Overview This call does not modify the reference counter of the object. Return value Returns one pointer to the boxed object. Returns nullptr if the reference is null.","title":"Luna::ObjRef::get"},{"location":"api/class_luna_1_1_obj_ref_1a1c56e321384fe3edf65345f272d774fc/#lunaobjrefget","text":"object_t get() const Gets the boxed object.","title":"Luna::ObjRef::get"},{"location":"api/class_luna_1_1_obj_ref_1a1c56e321384fe3edf65345f272d774fc/#overview","text":"This call does not modify the reference counter of the object.","title":"Overview"},{"location":"api/class_luna_1_1_obj_ref_1a1c56e321384fe3edf65345f272d774fc/#return-value","text":"Returns one pointer to the boxed object. Returns nullptr if the reference is null.","title":"Return value"},{"location":"api/class_luna_1_1_obj_ref_1a315419f26d3c59fa143b49b90a019049/","text":"Luna::ObjRef::valid bool valid() const Checks whether this reference is valid. Overview One strong reference is valid when it is not null. Return value Returns true when the reference is valid. Returns false otherwise.","title":"Luna::ObjRef::valid"},{"location":"api/class_luna_1_1_obj_ref_1a315419f26d3c59fa143b49b90a019049/#lunaobjrefvalid","text":"bool valid() const Checks whether this reference is valid.","title":"Luna::ObjRef::valid"},{"location":"api/class_luna_1_1_obj_ref_1a315419f26d3c59fa143b49b90a019049/#overview","text":"One strong reference is valid when it is not null.","title":"Overview"},{"location":"api/class_luna_1_1_obj_ref_1a315419f26d3c59fa143b49b90a019049/#return-value","text":"Returns true when the reference is valid. Returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_obj_ref_1a31d709143dcc4de3e30d4f7f56a13580/","text":"Luna::ObjRef::type typeinfo_t type() const Gets the type object of the boxed object. Overview Return value Returns the type object of the boxed object. Returns nullptr if the reference is not valid.","title":"Luna::ObjRef::type"},{"location":"api/class_luna_1_1_obj_ref_1a31d709143dcc4de3e30d4f7f56a13580/#lunaobjreftype","text":"typeinfo_t type() const Gets the type object of the boxed object.","title":"Luna::ObjRef::type"},{"location":"api/class_luna_1_1_obj_ref_1a31d709143dcc4de3e30d4f7f56a13580/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_obj_ref_1a31d709143dcc4de3e30d4f7f56a13580/#return-value","text":"Returns the type object of the boxed object. Returns nullptr if the reference is not valid.","title":"Return value"},{"location":"api/class_luna_1_1_obj_ref_1a41df0b6f925a2dae8825f304c1144cbf/","text":"Luna::ObjRef::operator= ObjRef & operator=(const ObjRef &rhs) Assigns this reference by coping the pointer from another reference. Overview The strong reference counter of the new boxed object, if not null, will be increased. The strong reference counter of the original boxed object, if not null, will be decreased before assignment. Parameters rhs The reference to copy from. Return value Returns *this .","title":"Luna::ObjRef::operator="},{"location":"api/class_luna_1_1_obj_ref_1a41df0b6f925a2dae8825f304c1144cbf/#lunaobjrefoperator","text":"ObjRef & operator=(const ObjRef &rhs) Assigns this reference by coping the pointer from another reference.","title":"Luna::ObjRef::operator="},{"location":"api/class_luna_1_1_obj_ref_1a41df0b6f925a2dae8825f304c1144cbf/#overview","text":"The strong reference counter of the new boxed object, if not null, will be increased. The strong reference counter of the original boxed object, if not null, will be decreased before assignment.","title":"Overview"},{"location":"api/class_luna_1_1_obj_ref_1a41df0b6f925a2dae8825f304c1144cbf/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_obj_ref_1a41df0b6f925a2dae8825f304c1144cbf/#rhs","text":"The reference to copy from.","title":"rhs"},{"location":"api/class_luna_1_1_obj_ref_1a41df0b6f925a2dae8825f304c1144cbf/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/class_luna_1_1_obj_ref_1a42f8a12dc6b3fb4c189af9ef37d2da0e/","text":"Luna::ObjRef::ObjRef ObjRef(object_t ptr) Constructs one reference by providing the underlying pointer directly. Overview The strong reference counter of the new boxed object will be increased if the provided pointer is valid. Parameters ptr The pointer to set.","title":"Luna::ObjRef::ObjRef"},{"location":"api/class_luna_1_1_obj_ref_1a42f8a12dc6b3fb4c189af9ef37d2da0e/#lunaobjrefobjref","text":"ObjRef(object_t ptr) Constructs one reference by providing the underlying pointer directly.","title":"Luna::ObjRef::ObjRef"},{"location":"api/class_luna_1_1_obj_ref_1a42f8a12dc6b3fb4c189af9ef37d2da0e/#overview","text":"The strong reference counter of the new boxed object will be increased if the provided pointer is valid.","title":"Overview"},{"location":"api/class_luna_1_1_obj_ref_1a42f8a12dc6b3fb4c189af9ef37d2da0e/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_obj_ref_1a42f8a12dc6b3fb4c189af9ef37d2da0e/#ptr","text":"The pointer to set.","title":"ptr"},{"location":"api/class_luna_1_1_obj_ref_1a493ad14c2b79b5f2331783f88d97c0b5/","text":"Luna::ObjRef::operator= ObjRef & operator=(ObjRef &&rhs) Assigns this reference by moving the pointer from another reference. Overview The reference counter of the new boxed object is not modified. The strong reference counter of the original boxed object, if not null, will be decreased before assignment. Parameters rhs The reference to move from. This reference will be null after this operation. Return value Returns *this .","title":"Luna::ObjRef::operator="},{"location":"api/class_luna_1_1_obj_ref_1a493ad14c2b79b5f2331783f88d97c0b5/#lunaobjrefoperator","text":"ObjRef & operator=(ObjRef &&rhs) Assigns this reference by moving the pointer from another reference.","title":"Luna::ObjRef::operator="},{"location":"api/class_luna_1_1_obj_ref_1a493ad14c2b79b5f2331783f88d97c0b5/#overview","text":"The reference counter of the new boxed object is not modified. The strong reference counter of the original boxed object, if not null, will be decreased before assignment.","title":"Overview"},{"location":"api/class_luna_1_1_obj_ref_1a493ad14c2b79b5f2331783f88d97c0b5/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_obj_ref_1a493ad14c2b79b5f2331783f88d97c0b5/#rhs","text":"The reference to move from. This reference will be null after this operation.","title":"rhs"},{"location":"api/class_luna_1_1_obj_ref_1a493ad14c2b79b5f2331783f88d97c0b5/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/class_luna_1_1_obj_ref_1a644c3ae10bfb0268fe3c29e353e0b55c/","text":"Luna::ObjRef::operator!= bool operator!=(const ObjRef &rhs) const Compares two references for non-equality. Overview Two references are not equal if their underlying pointers are not equal. Parameters rhs The reference to compare with. Return value Returns true if two references are not equal. Returns false otherwise.","title":"Luna::ObjRef::operator!="},{"location":"api/class_luna_1_1_obj_ref_1a644c3ae10bfb0268fe3c29e353e0b55c/#lunaobjrefoperator","text":"bool operator!=(const ObjRef &rhs) const Compares two references for non-equality.","title":"Luna::ObjRef::operator!="},{"location":"api/class_luna_1_1_obj_ref_1a644c3ae10bfb0268fe3c29e353e0b55c/#overview","text":"Two references are not equal if their underlying pointers are not equal.","title":"Overview"},{"location":"api/class_luna_1_1_obj_ref_1a644c3ae10bfb0268fe3c29e353e0b55c/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_obj_ref_1a644c3ae10bfb0268fe3c29e353e0b55c/#rhs","text":"The reference to compare with.","title":"rhs"},{"location":"api/class_luna_1_1_obj_ref_1a644c3ae10bfb0268fe3c29e353e0b55c/#return-value","text":"Returns true if two references are not equal. Returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_obj_ref_1a67b76affb3b5d35fa419ac234144038b/","text":"Luna::ObjRef::operator bool operator bool() const Checks whether this reference is valid. Overview One reference is valid when the underlying pointer is not nullptr . Return value Returns true when the reference is valid. Returns false otherwise.","title":"Luna::ObjRef::operator bool"},{"location":"api/class_luna_1_1_obj_ref_1a67b76affb3b5d35fa419ac234144038b/#lunaobjrefoperator-bool","text":"operator bool() const Checks whether this reference is valid.","title":"Luna::ObjRef::operator bool"},{"location":"api/class_luna_1_1_obj_ref_1a67b76affb3b5d35fa419ac234144038b/#overview","text":"One reference is valid when the underlying pointer is not nullptr .","title":"Overview"},{"location":"api/class_luna_1_1_obj_ref_1a67b76affb3b5d35fa419ac234144038b/#return-value","text":"Returns true when the reference is valid. Returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_obj_ref_1a7be0b40dc76fc93f46c2ae9316513142/","text":"Luna::ObjRef::attach void attach(object_t ptr) Attaches provided pointer. Overview This call does not modify the reference counter of the new boxed object. The strong reference counter of the original boxed object, if not null, will be decreased before new pointer is attached. Parameters ptr The pointer to attach.","title":"Luna::ObjRef::attach"},{"location":"api/class_luna_1_1_obj_ref_1a7be0b40dc76fc93f46c2ae9316513142/#lunaobjrefattach","text":"void attach(object_t ptr) Attaches provided pointer.","title":"Luna::ObjRef::attach"},{"location":"api/class_luna_1_1_obj_ref_1a7be0b40dc76fc93f46c2ae9316513142/#overview","text":"This call does not modify the reference counter of the new boxed object. The strong reference counter of the original boxed object, if not null, will be decreased before new pointer is attached.","title":"Overview"},{"location":"api/class_luna_1_1_obj_ref_1a7be0b40dc76fc93f46c2ae9316513142/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_obj_ref_1a7be0b40dc76fc93f46c2ae9316513142/#ptr","text":"The pointer to attach.","title":"ptr"},{"location":"api/class_luna_1_1_obj_ref_1a8b980cb86bd65155f3240b3a00597e6c/","text":"Luna::ObjRef::detach object_t detach() Detaches the stored pointer. The reference becomes null after this operation. Overview This operation does not modify the reference counter of the original boxed object. Return value Returns the pointer to the original boxed object. Returns nullptr if the reference is null when this function is called.","title":"Luna::ObjRef::detach"},{"location":"api/class_luna_1_1_obj_ref_1a8b980cb86bd65155f3240b3a00597e6c/#lunaobjrefdetach","text":"object_t detach() Detaches the stored pointer. The reference becomes null after this operation.","title":"Luna::ObjRef::detach"},{"location":"api/class_luna_1_1_obj_ref_1a8b980cb86bd65155f3240b3a00597e6c/#overview","text":"This operation does not modify the reference counter of the original boxed object.","title":"Overview"},{"location":"api/class_luna_1_1_obj_ref_1a8b980cb86bd65155f3240b3a00597e6c/#return-value","text":"Returns the pointer to the original boxed object. Returns nullptr if the reference is null when this function is called.","title":"Return value"},{"location":"api/class_luna_1_1_obj_ref_1ad1d6c7854b7bb70e4472870503b90fcd/","text":"Luna::ObjRef::ObjRef ObjRef(ObjRef &&rhs) Constructs one reference by moving the pointer from another reference. Overview The reference counter of the new boxed object is not modified. Parameters rhs The reference to move from. This reference will be null after this operation.","title":"Luna::ObjRef::ObjRef"},{"location":"api/class_luna_1_1_obj_ref_1ad1d6c7854b7bb70e4472870503b90fcd/#lunaobjrefobjref","text":"ObjRef(ObjRef &&rhs) Constructs one reference by moving the pointer from another reference.","title":"Luna::ObjRef::ObjRef"},{"location":"api/class_luna_1_1_obj_ref_1ad1d6c7854b7bb70e4472870503b90fcd/#overview","text":"The reference counter of the new boxed object is not modified.","title":"Overview"},{"location":"api/class_luna_1_1_obj_ref_1ad1d6c7854b7bb70e4472870503b90fcd/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_obj_ref_1ad1d6c7854b7bb70e4472870503b90fcd/#rhs","text":"The reference to move from. This reference will be null after this operation.","title":"rhs"},{"location":"api/class_luna_1_1_obj_ref_1ad20897c5c8bd47f5d4005989bead0e55/","text":"Luna::ObjRef::reset void reset() Resets the reference to null. Overview This function decreases the strong reference counter of the boxed object before resetting the reference. If this reference is null when this function is called, this function does nothing.","title":"Luna::ObjRef::reset"},{"location":"api/class_luna_1_1_obj_ref_1ad20897c5c8bd47f5d4005989bead0e55/#lunaobjrefreset","text":"void reset() Resets the reference to null.","title":"Luna::ObjRef::reset"},{"location":"api/class_luna_1_1_obj_ref_1ad20897c5c8bd47f5d4005989bead0e55/#overview","text":"This function decreases the strong reference counter of the boxed object before resetting the reference. If this reference is null when this function is called, this function does nothing.","title":"Overview"},{"location":"api/class_luna_1_1_obj_ref_1ad8f4fdca727abf909c72d5ee3554790d/","text":"Luna::ObjRef::operator== bool operator==(const ObjRef &rhs) const Compares two references for equality. Overview Two references are equal if their underlying pointers are equal. Parameters rhs The reference to compare with. Return value Returns true if two references are equal. Returns false otherwise.","title":"Luna::ObjRef::operator=="},{"location":"api/class_luna_1_1_obj_ref_1ad8f4fdca727abf909c72d5ee3554790d/#lunaobjrefoperator","text":"bool operator==(const ObjRef &rhs) const Compares two references for equality.","title":"Luna::ObjRef::operator=="},{"location":"api/class_luna_1_1_obj_ref_1ad8f4fdca727abf909c72d5ee3554790d/#overview","text":"Two references are equal if their underlying pointers are equal.","title":"Overview"},{"location":"api/class_luna_1_1_obj_ref_1ad8f4fdca727abf909c72d5ee3554790d/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_obj_ref_1ad8f4fdca727abf909c72d5ee3554790d/#rhs","text":"The reference to compare with.","title":"rhs"},{"location":"api/class_luna_1_1_obj_ref_1ad8f4fdca727abf909c72d5ee3554790d/#return-value","text":"Returns true if two references are equal. Returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_optional_pair/","text":"Luna::OptionalPair Similar to [Pair](struct_luna_1_1_pair.md) , but allows one element in the pair to be empty and does not have one byte dummy allocation. class Luna::OptionalPair","title":"Luna::OptionalPair"},{"location":"api/class_luna_1_1_optional_pair/#lunaoptionalpair","text":"Similar to [Pair](struct_luna_1_1_pair.md) , but allows one element in the pair to be empty and does not have one byte dummy allocation. class Luna::OptionalPair","title":"Luna::OptionalPair"},{"location":"api/class_luna_1_1_path/","text":"Luna::Path A container that contains a sequence of names that describe one path. class Luna::Path Overview Path is one kind of string that describes the location of one node in a hierarchical-based node tree, given that each node in the tree can be identified by a name string. For example, a file path is used to identify a file or folder in the given file system. Path is designed to be platform-independent and efficient to handle file path related operations. In implementation, the path object does not store the path string directly, but breaks it down to several parts, and stores each part independently. This makes path-related operations very fast and consumes less memory if you need to store lots of paths. One path is composed by the following components: Functions Path() Constructs one empty path. Path(const String &str) Constructs one path by parsing the specified path string. Path(const String &str, usize pos) Constructs one path by parsing the specified path string with custom starting position. Path(const String &str, usize pos, usize count) Constructs one path by parsing the specified path string with custom starting position and string size. Path(const c8 *s) Constructs one path by parsing the specified path string. Path(const c8 *s, usize count) Constructs one path by parsing the specified path string. Path(const Path &rhs) Constructs one path by moving coping content from another path. Path(Path &&rhs) Constructs one path by moving moving content from another path. Path & operator=(const String &str) Replaces content of the path by parsing the specified path string. Path & operator=(const c8 *s) Replaces content of the path by parsing the specified path string. Path & operator=(const Path &rhs) Replaces content of the path by coping content from another path. Path & operator=(Path &&rhs) Replaces content of the path by coping content from another path. PathFlag flags() const Gets the path flags. PathFlag & flags() Gets the path flags. void normalize() Normalizes the path. String encode(PathSeparator separator=PathSeparator::slash, bool has_root=true) const Encodes the current path to a string. void assign(const Path &rhs) Replaces content of the path by coping content from another path. void assign(Path &&rhs) Replaces content of the path by coping content from another path. void assign(const String &str) Replaces content of the path by parsing the specified path string. void assign(const String &str, usize pos) Replaces content of the path by parsing the specified path string with custom starting position. void assign(const String &str, usize pos, usize count) CReplaces content of the path by parsing the specified path string with custom starting position and string size. void assign(const c8 *s) Replaces content of the path by parsing the specified path string. void assign(const c8 *s, usize count) Replaces content of the path by parsing the specified path string. void assign_relative(const Path &base, const Path &target) Assigns the content of this path with a new path that if appended to base path, creates a path equal to target path. const Name & root() const Gets the path root name. Name & root() Gets the path root name. Name extension() const Gets the extension name of the path, that is, the name string after the last dot(.) character. Name filename() const Gets the filename of the path, which is the last node in the path excluding extension and the separating dot( . ). void replace_extension(const c8 *new_extension) Replaces the extension. void replace_extension(const c8 *new_extension, usize count) Replaces the extension. void append_extension(const c8 *new_extension) Appends the extension. void append_extension(const c8 *new_extension, usize count) Appends the extension. void remove_extension() Removes the extension. const_reference at(usize index) const Gets the name node at the specified index. reference at(usize index) Gets the name node at the specified index. const_reference operator[](usize index) const Gets the name node at the specified index. reference operator[](usize index) Gets the name node at the specified index. iterator begin() Gets one iterator pointing to the first name node of the path. const_iterator begin() const Gets one constant iterator pointing to the first name node of the path. const_iterator cbegin() const Gets one constant iterator pointing to the first name node of the path. iterator end() Gets one iterator pointing to the one past last name node of the path. const_iterator end() const Gets one constant iterator pointing to the one past last name node of the path. const_iterator cend() const Gets one constant iterator pointing to the one past last name node of the path. reverse_iterator rbegin() Gets one reverse iterator pointing to the last name node of the path. const_reverse_iterator rbegin() const Gets one constant reverse iterator pointing to the last name node of the path. const_reverse_iterator crbegin() const Gets one constant reverse iterator pointing to the last name node of the path. reverse_iterator rend() Gets one reverse iterator pointing to the one-before-first name node of the path. const_reverse_iterator rend() const Gets one constant reverse iterator pointing to the one-before-first name node of the path. const_reverse_iterator crend() const Gets one constant reverse iterator pointing to the one-before-first name node of the path. usize size() const Gets the size of the path, that is, the number of name nodes in the path. bool empty() const Checks whether this path is empty, that is, the size of this path is 0 . reference front() Gets the first name node in the path. const_reference front() const Gets the first name node in the path. reference back() Gets the last name node in the path. const_reference back() const Gets the last name node in the path. void push_back(const Name &path_node) Inserts one name node at the back of the path. void push_back(Name &&path_node) Inserts one name node at the back of the path. void pop_back() Removes the last name node of the path. void append(const Path &appended_path) Appends another path to the end of this path. void append(const Path &appended_path, usize pos) Appends another path to the end of this path. void append(const Path &appended_path, usize pos, usize count) Appends another path to the end of this path. void clear() Clears all nodes in the path. void reset() Resets the path object. iterator erase(const_iterator pos) Removes one name node from the path. iterator erase(const_iterator first, const_iterator last) Removes one range of name nodes from the path. usize hash_code() const Computes the hash code of this path. bool is_subpath_of(const Path &base) const Checks whether the current path is one subsequent path of the specified base path. bool equal_to(const Path &rhs, PathComponent compared_components=PathComponent::all) const Compares two paths for equality. bool operator==(const Path &rhs) const Compares all components of two paths for equality. bool operator!=(const Path &rhs) const Compares all components of two paths for non-equality.","title":"Luna::Path"},{"location":"api/class_luna_1_1_path/#lunapath","text":"A container that contains a sequence of names that describe one path. class Luna::Path","title":"Luna::Path"},{"location":"api/class_luna_1_1_path/#overview","text":"Path is one kind of string that describes the location of one node in a hierarchical-based node tree, given that each node in the tree can be identified by a name string. For example, a file path is used to identify a file or folder in the given file system. Path is designed to be platform-independent and efficient to handle file path related operations. In implementation, the path object does not store the path string directly, but breaks it down to several parts, and stores each part independently. This makes path-related operations very fast and consumes less memory if you need to store lots of paths. One path is composed by the following components:","title":"Overview"},{"location":"api/class_luna_1_1_path/#functions","text":"Path() Constructs one empty path. Path(const String &str) Constructs one path by parsing the specified path string. Path(const String &str, usize pos) Constructs one path by parsing the specified path string with custom starting position. Path(const String &str, usize pos, usize count) Constructs one path by parsing the specified path string with custom starting position and string size. Path(const c8 *s) Constructs one path by parsing the specified path string. Path(const c8 *s, usize count) Constructs one path by parsing the specified path string. Path(const Path &rhs) Constructs one path by moving coping content from another path. Path(Path &&rhs) Constructs one path by moving moving content from another path. Path & operator=(const String &str) Replaces content of the path by parsing the specified path string. Path & operator=(const c8 *s) Replaces content of the path by parsing the specified path string. Path & operator=(const Path &rhs) Replaces content of the path by coping content from another path. Path & operator=(Path &&rhs) Replaces content of the path by coping content from another path. PathFlag flags() const Gets the path flags. PathFlag & flags() Gets the path flags. void normalize() Normalizes the path. String encode(PathSeparator separator=PathSeparator::slash, bool has_root=true) const Encodes the current path to a string. void assign(const Path &rhs) Replaces content of the path by coping content from another path. void assign(Path &&rhs) Replaces content of the path by coping content from another path. void assign(const String &str) Replaces content of the path by parsing the specified path string. void assign(const String &str, usize pos) Replaces content of the path by parsing the specified path string with custom starting position. void assign(const String &str, usize pos, usize count) CReplaces content of the path by parsing the specified path string with custom starting position and string size. void assign(const c8 *s) Replaces content of the path by parsing the specified path string. void assign(const c8 *s, usize count) Replaces content of the path by parsing the specified path string. void assign_relative(const Path &base, const Path &target) Assigns the content of this path with a new path that if appended to base path, creates a path equal to target path. const Name & root() const Gets the path root name. Name & root() Gets the path root name. Name extension() const Gets the extension name of the path, that is, the name string after the last dot(.) character. Name filename() const Gets the filename of the path, which is the last node in the path excluding extension and the separating dot( . ). void replace_extension(const c8 *new_extension) Replaces the extension. void replace_extension(const c8 *new_extension, usize count) Replaces the extension. void append_extension(const c8 *new_extension) Appends the extension. void append_extension(const c8 *new_extension, usize count) Appends the extension. void remove_extension() Removes the extension. const_reference at(usize index) const Gets the name node at the specified index. reference at(usize index) Gets the name node at the specified index. const_reference operator[](usize index) const Gets the name node at the specified index. reference operator[](usize index) Gets the name node at the specified index. iterator begin() Gets one iterator pointing to the first name node of the path. const_iterator begin() const Gets one constant iterator pointing to the first name node of the path. const_iterator cbegin() const Gets one constant iterator pointing to the first name node of the path. iterator end() Gets one iterator pointing to the one past last name node of the path. const_iterator end() const Gets one constant iterator pointing to the one past last name node of the path. const_iterator cend() const Gets one constant iterator pointing to the one past last name node of the path. reverse_iterator rbegin() Gets one reverse iterator pointing to the last name node of the path. const_reverse_iterator rbegin() const Gets one constant reverse iterator pointing to the last name node of the path. const_reverse_iterator crbegin() const Gets one constant reverse iterator pointing to the last name node of the path. reverse_iterator rend() Gets one reverse iterator pointing to the one-before-first name node of the path. const_reverse_iterator rend() const Gets one constant reverse iterator pointing to the one-before-first name node of the path. const_reverse_iterator crend() const Gets one constant reverse iterator pointing to the one-before-first name node of the path. usize size() const Gets the size of the path, that is, the number of name nodes in the path. bool empty() const Checks whether this path is empty, that is, the size of this path is 0 . reference front() Gets the first name node in the path. const_reference front() const Gets the first name node in the path. reference back() Gets the last name node in the path. const_reference back() const Gets the last name node in the path. void push_back(const Name &path_node) Inserts one name node at the back of the path. void push_back(Name &&path_node) Inserts one name node at the back of the path. void pop_back() Removes the last name node of the path. void append(const Path &appended_path) Appends another path to the end of this path. void append(const Path &appended_path, usize pos) Appends another path to the end of this path. void append(const Path &appended_path, usize pos, usize count) Appends another path to the end of this path. void clear() Clears all nodes in the path. void reset() Resets the path object. iterator erase(const_iterator pos) Removes one name node from the path. iterator erase(const_iterator first, const_iterator last) Removes one range of name nodes from the path. usize hash_code() const Computes the hash code of this path. bool is_subpath_of(const Path &base) const Checks whether the current path is one subsequent path of the specified base path. bool equal_to(const Path &rhs, PathComponent compared_components=PathComponent::all) const Compares two paths for equality. bool operator==(const Path &rhs) const Compares all components of two paths for equality. bool operator!=(const Path &rhs) const Compares all components of two paths for non-equality.","title":"Functions"},{"location":"api/class_luna_1_1_path_1a058bda4957df6a97b1ea6c9fd783f672/","text":"Luna::Path::pop_back void pop_back() Removes the last name node of the path. Overview Valid Usage empty() must be false when calling this function.","title":"Luna::Path::pop_back"},{"location":"api/class_luna_1_1_path_1a058bda4957df6a97b1ea6c9fd783f672/#lunapathpop_back","text":"void pop_back() Removes the last name node of the path.","title":"Luna::Path::pop_back"},{"location":"api/class_luna_1_1_path_1a058bda4957df6a97b1ea6c9fd783f672/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a058bda4957df6a97b1ea6c9fd783f672/#valid-usage","text":"empty() must be false when calling this function.","title":"Valid Usage"},{"location":"api/class_luna_1_1_path_1a07068d47f128b725dbc93964dc48c0ad/","text":"Luna::Path::assign void assign(const c8 *s, usize count) Replaces content of the path by parsing the specified path string. Overview Parameters s The path string. count The number of characters to parse.","title":"Luna::Path::assign"},{"location":"api/class_luna_1_1_path_1a07068d47f128b725dbc93964dc48c0ad/#lunapathassign","text":"void assign(const c8 *s, usize count) Replaces content of the path by parsing the specified path string.","title":"Luna::Path::assign"},{"location":"api/class_luna_1_1_path_1a07068d47f128b725dbc93964dc48c0ad/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a07068d47f128b725dbc93964dc48c0ad/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1a07068d47f128b725dbc93964dc48c0ad/#s","text":"The path string.","title":"s"},{"location":"api/class_luna_1_1_path_1a07068d47f128b725dbc93964dc48c0ad/#count","text":"The number of characters to parse.","title":"count"},{"location":"api/class_luna_1_1_path_1a07da1fdc890b6949f1a20a1961c6fc44/","text":"Luna::Path::rend const_reverse_iterator rend() const Gets one constant reverse iterator pointing to the one-before-first name node of the path. Overview Return value Returns one constant reverse iterator pointing to the one-before-first name node of the path.","title":"Luna::Path::rend"},{"location":"api/class_luna_1_1_path_1a07da1fdc890b6949f1a20a1961c6fc44/#lunapathrend","text":"const_reverse_iterator rend() const Gets one constant reverse iterator pointing to the one-before-first name node of the path.","title":"Luna::Path::rend"},{"location":"api/class_luna_1_1_path_1a07da1fdc890b6949f1a20a1961c6fc44/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a07da1fdc890b6949f1a20a1961c6fc44/#return-value","text":"Returns one constant reverse iterator pointing to the one-before-first name node of the path.","title":"Return value"},{"location":"api/class_luna_1_1_path_1a0a50994e226f282875ffd4789a71548e/","text":"Luna::Path::extension Name extension() const Gets the extension name of the path, that is, the name string after the last dot(.) character. Overview Return value Returns the extension name of the path. The extension is always in lower case. Returns an empty name if the path does not have an extension name.","title":"Luna::Path::extension"},{"location":"api/class_luna_1_1_path_1a0a50994e226f282875ffd4789a71548e/#lunapathextension","text":"Name extension() const Gets the extension name of the path, that is, the name string after the last dot(.) character.","title":"Luna::Path::extension"},{"location":"api/class_luna_1_1_path_1a0a50994e226f282875ffd4789a71548e/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a0a50994e226f282875ffd4789a71548e/#return-value","text":"Returns the extension name of the path. The extension is always in lower case. Returns an empty name if the path does not have an extension name.","title":"Return value"},{"location":"api/class_luna_1_1_path_1a0ae6b4f9719202f7ddb334c16fb03d80/","text":"Luna::Path::front const_reference front() const Gets the first name node in the path. Overview Return value Returns one constant reference to the first name node in the path. Valid Usage empty() must be false when calling this function.","title":"Luna::Path::front"},{"location":"api/class_luna_1_1_path_1a0ae6b4f9719202f7ddb334c16fb03d80/#lunapathfront","text":"const_reference front() const Gets the first name node in the path.","title":"Luna::Path::front"},{"location":"api/class_luna_1_1_path_1a0ae6b4f9719202f7ddb334c16fb03d80/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a0ae6b4f9719202f7ddb334c16fb03d80/#return-value","text":"Returns one constant reference to the first name node in the path.","title":"Return value"},{"location":"api/class_luna_1_1_path_1a0ae6b4f9719202f7ddb334c16fb03d80/#valid-usage","text":"empty() must be false when calling this function.","title":"Valid Usage"},{"location":"api/class_luna_1_1_path_1a0b13de52fa02fe7301a3ad19222d1ed5/","text":"Luna::Path::assign void assign(Path &&rhs) Replaces content of the path by coping content from another path. Overview Parameters rhs The path to move from.","title":"Luna::Path::assign"},{"location":"api/class_luna_1_1_path_1a0b13de52fa02fe7301a3ad19222d1ed5/#lunapathassign","text":"void assign(Path &&rhs) Replaces content of the path by coping content from another path.","title":"Luna::Path::assign"},{"location":"api/class_luna_1_1_path_1a0b13de52fa02fe7301a3ad19222d1ed5/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a0b13de52fa02fe7301a3ad19222d1ed5/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1a0b13de52fa02fe7301a3ad19222d1ed5/#rhs","text":"The path to move from.","title":"rhs"},{"location":"api/class_luna_1_1_path_1a1c1b5cd48d55ddc2bf6f6cc636b2115c/","text":"Luna::Path::operator= Path & operator=(const String &str) Replaces content of the path by parsing the specified path string. Overview Parameters str The path string. Return value Returns *this .","title":"Luna::Path::operator="},{"location":"api/class_luna_1_1_path_1a1c1b5cd48d55ddc2bf6f6cc636b2115c/#lunapathoperator","text":"Path & operator=(const String &str) Replaces content of the path by parsing the specified path string.","title":"Luna::Path::operator="},{"location":"api/class_luna_1_1_path_1a1c1b5cd48d55ddc2bf6f6cc636b2115c/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a1c1b5cd48d55ddc2bf6f6cc636b2115c/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1a1c1b5cd48d55ddc2bf6f6cc636b2115c/#str","text":"The path string.","title":"str"},{"location":"api/class_luna_1_1_path_1a1c1b5cd48d55ddc2bf6f6cc636b2115c/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/class_luna_1_1_path_1a27045ce733dd1f9807788ac3c11a491e/","text":"Luna::Path::at const_reference at(usize index) const Gets the name node at the specified index. Overview Parameters index The index of the name node. Return value Returns one constant reference of the name node.","title":"Luna::Path::at"},{"location":"api/class_luna_1_1_path_1a27045ce733dd1f9807788ac3c11a491e/#lunapathat","text":"const_reference at(usize index) const Gets the name node at the specified index.","title":"Luna::Path::at"},{"location":"api/class_luna_1_1_path_1a27045ce733dd1f9807788ac3c11a491e/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a27045ce733dd1f9807788ac3c11a491e/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1a27045ce733dd1f9807788ac3c11a491e/#index","text":"The index of the name node.","title":"index"},{"location":"api/class_luna_1_1_path_1a27045ce733dd1f9807788ac3c11a491e/#return-value","text":"Returns one constant reference of the name node.","title":"Return value"},{"location":"api/class_luna_1_1_path_1a29305669b60ca1680752e2fc3592ba99/","text":"Luna::Path::begin const_iterator begin() const Gets one constant iterator pointing to the first name node of the path. Overview Return value Returns one constant iterator pointing to the first name node of the path.","title":"Luna::Path::begin"},{"location":"api/class_luna_1_1_path_1a29305669b60ca1680752e2fc3592ba99/#lunapathbegin","text":"const_iterator begin() const Gets one constant iterator pointing to the first name node of the path.","title":"Luna::Path::begin"},{"location":"api/class_luna_1_1_path_1a29305669b60ca1680752e2fc3592ba99/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a29305669b60ca1680752e2fc3592ba99/#return-value","text":"Returns one constant iterator pointing to the first name node of the path.","title":"Return value"},{"location":"api/class_luna_1_1_path_1a29790c28710ec0e64b48c2f4edd0b08c/","text":"Luna::Path::erase iterator erase(const_iterator pos) Removes one name node from the path. Overview Parameters pos The iterator pointing to the name node to be removed. Return value Returns one iterator pointing to the next name node of the removed name node when iterating nodes. Valid Usage pos must points to a valid name node in the path.","title":"Luna::Path::erase"},{"location":"api/class_luna_1_1_path_1a29790c28710ec0e64b48c2f4edd0b08c/#lunapatherase","text":"iterator erase(const_iterator pos) Removes one name node from the path.","title":"Luna::Path::erase"},{"location":"api/class_luna_1_1_path_1a29790c28710ec0e64b48c2f4edd0b08c/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a29790c28710ec0e64b48c2f4edd0b08c/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1a29790c28710ec0e64b48c2f4edd0b08c/#pos","text":"The iterator pointing to the name node to be removed.","title":"pos"},{"location":"api/class_luna_1_1_path_1a29790c28710ec0e64b48c2f4edd0b08c/#return-value","text":"Returns one iterator pointing to the next name node of the removed name node when iterating nodes.","title":"Return value"},{"location":"api/class_luna_1_1_path_1a29790c28710ec0e64b48c2f4edd0b08c/#valid-usage","text":"pos must points to a valid name node in the path.","title":"Valid Usage"},{"location":"api/class_luna_1_1_path_1a2c04c06788cea21fabc550d98791986b/","text":"Luna::Path::equal_to bool equal_to(const Path &rhs, PathComponent compared_components=PathComponent::all) const Compares two paths for equality. Overview Parameters rhs The path to compare with. compared_components The components to compare, default is to compare all components and only true if all components of both paths are equal. Return value Returns true if all compared components in both paths are equal. Returns false otherwise.","title":"Luna::Path::equal_to"},{"location":"api/class_luna_1_1_path_1a2c04c06788cea21fabc550d98791986b/#lunapathequal_to","text":"bool equal_to(const Path &rhs, PathComponent compared_components=PathComponent::all) const Compares two paths for equality.","title":"Luna::Path::equal_to"},{"location":"api/class_luna_1_1_path_1a2c04c06788cea21fabc550d98791986b/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a2c04c06788cea21fabc550d98791986b/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1a2c04c06788cea21fabc550d98791986b/#rhs","text":"The path to compare with.","title":"rhs"},{"location":"api/class_luna_1_1_path_1a2c04c06788cea21fabc550d98791986b/#compared_components","text":"The components to compare, default is to compare all components and only true if all components of both paths are equal.","title":"compared_components"},{"location":"api/class_luna_1_1_path_1a2c04c06788cea21fabc550d98791986b/#return-value","text":"Returns true if all compared components in both paths are equal. Returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_path_1a30239146566a281f5112902a0a47634e/","text":"Luna::Path::operator!= bool operator!=(const Path &rhs) const Compares all components of two paths for non-equality. Overview Parameters rhs The path to compare with. Return value Returns false if all components in both paths are equal. Returns true otherwise.","title":"Luna::Path::operator!="},{"location":"api/class_luna_1_1_path_1a30239146566a281f5112902a0a47634e/#lunapathoperator","text":"bool operator!=(const Path &rhs) const Compares all components of two paths for non-equality.","title":"Luna::Path::operator!="},{"location":"api/class_luna_1_1_path_1a30239146566a281f5112902a0a47634e/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a30239146566a281f5112902a0a47634e/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1a30239146566a281f5112902a0a47634e/#rhs","text":"The path to compare with.","title":"rhs"},{"location":"api/class_luna_1_1_path_1a30239146566a281f5112902a0a47634e/#return-value","text":"Returns false if all components in both paths are equal. Returns true otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_path_1a38f299dc7e0d3750ae0fadeecae24962/","text":"Luna::Path::assign_relative void assign_relative(const Path &base, const Path &target) Assigns the content of this path with a new path that if appended to base path, creates a path equal to target path. Overview Parameters base The base path. target The target path. Return value If the system can decide how to redirect target path to this path, returns the relative path, else, returns failure.","title":"Luna::Path::assign_relative"},{"location":"api/class_luna_1_1_path_1a38f299dc7e0d3750ae0fadeecae24962/#lunapathassign_relative","text":"void assign_relative(const Path &base, const Path &target) Assigns the content of this path with a new path that if appended to base path, creates a path equal to target path.","title":"Luna::Path::assign_relative"},{"location":"api/class_luna_1_1_path_1a38f299dc7e0d3750ae0fadeecae24962/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a38f299dc7e0d3750ae0fadeecae24962/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1a38f299dc7e0d3750ae0fadeecae24962/#base","text":"The base path.","title":"base"},{"location":"api/class_luna_1_1_path_1a38f299dc7e0d3750ae0fadeecae24962/#target","text":"The target path.","title":"target"},{"location":"api/class_luna_1_1_path_1a38f299dc7e0d3750ae0fadeecae24962/#return-value","text":"If the system can decide how to redirect target path to this path, returns the relative path, else, returns failure.","title":"Return value"},{"location":"api/class_luna_1_1_path_1a39112ae08f6ffc7ee58c6aa79772e094/","text":"Luna::Path::cbegin const_iterator cbegin() const Gets one constant iterator pointing to the first name node of the path. Overview Return value Returns one constant iterator pointing to the first name node of the path.","title":"Luna::Path::cbegin"},{"location":"api/class_luna_1_1_path_1a39112ae08f6ffc7ee58c6aa79772e094/#lunapathcbegin","text":"const_iterator cbegin() const Gets one constant iterator pointing to the first name node of the path.","title":"Luna::Path::cbegin"},{"location":"api/class_luna_1_1_path_1a39112ae08f6ffc7ee58c6aa79772e094/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a39112ae08f6ffc7ee58c6aa79772e094/#return-value","text":"Returns one constant iterator pointing to the first name node of the path.","title":"Return value"},{"location":"api/class_luna_1_1_path_1a4ca6742f3a8c0e58359756b0ad7e3026/","text":"Luna::Path::operator[] const_reference operator[](usize index) const Gets the name node at the specified index. Overview Parameters index The index of the name node. Return value Returns one constant reference of the name node.","title":"Luna::Path::operator[]"},{"location":"api/class_luna_1_1_path_1a4ca6742f3a8c0e58359756b0ad7e3026/#lunapathoperator","text":"const_reference operator[](usize index) const Gets the name node at the specified index.","title":"Luna::Path::operator[]"},{"location":"api/class_luna_1_1_path_1a4ca6742f3a8c0e58359756b0ad7e3026/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a4ca6742f3a8c0e58359756b0ad7e3026/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1a4ca6742f3a8c0e58359756b0ad7e3026/#index","text":"The index of the name node.","title":"index"},{"location":"api/class_luna_1_1_path_1a4ca6742f3a8c0e58359756b0ad7e3026/#return-value","text":"Returns one constant reference of the name node.","title":"Return value"},{"location":"api/class_luna_1_1_path_1a5b8ddc45644b88514324f01fc4850c6b/","text":"Luna::Path::replace_extension void replace_extension(const c8 *new_extension) Replaces the extension. Overview Parameters new_extension The new extension to replace. Valid Usage new_extension must be null-terminated.","title":"Luna::Path::replace_extension"},{"location":"api/class_luna_1_1_path_1a5b8ddc45644b88514324f01fc4850c6b/#lunapathreplace_extension","text":"void replace_extension(const c8 *new_extension) Replaces the extension.","title":"Luna::Path::replace_extension"},{"location":"api/class_luna_1_1_path_1a5b8ddc45644b88514324f01fc4850c6b/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a5b8ddc45644b88514324f01fc4850c6b/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1a5b8ddc45644b88514324f01fc4850c6b/#new_extension","text":"The new extension to replace.","title":"new_extension"},{"location":"api/class_luna_1_1_path_1a5b8ddc45644b88514324f01fc4850c6b/#valid-usage","text":"new_extension must be null-terminated.","title":"Valid Usage"},{"location":"api/class_luna_1_1_path_1a5ce99aa038c83a37e488b30c9b72b264/","text":"Luna::Path::assign void assign(const c8 *s) Replaces content of the path by parsing the specified path string. Overview Parameters s The path string. Valid Usage s must be null-terminated.","title":"Luna::Path::assign"},{"location":"api/class_luna_1_1_path_1a5ce99aa038c83a37e488b30c9b72b264/#lunapathassign","text":"void assign(const c8 *s) Replaces content of the path by parsing the specified path string.","title":"Luna::Path::assign"},{"location":"api/class_luna_1_1_path_1a5ce99aa038c83a37e488b30c9b72b264/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a5ce99aa038c83a37e488b30c9b72b264/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1a5ce99aa038c83a37e488b30c9b72b264/#s","text":"The path string.","title":"s"},{"location":"api/class_luna_1_1_path_1a5ce99aa038c83a37e488b30c9b72b264/#valid-usage","text":"s must be null-terminated.","title":"Valid Usage"},{"location":"api/class_luna_1_1_path_1a61772c77ad2abfbb296912e7281e154c/","text":"Luna::Path::back const_reference back() const Gets the last name node in the path. Overview Return value Returns one constant reference to the last name node in the path. Valid Usage empty() must be false when calling this function.","title":"Luna::Path::back"},{"location":"api/class_luna_1_1_path_1a61772c77ad2abfbb296912e7281e154c/#lunapathback","text":"const_reference back() const Gets the last name node in the path.","title":"Luna::Path::back"},{"location":"api/class_luna_1_1_path_1a61772c77ad2abfbb296912e7281e154c/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a61772c77ad2abfbb296912e7281e154c/#return-value","text":"Returns one constant reference to the last name node in the path.","title":"Return value"},{"location":"api/class_luna_1_1_path_1a61772c77ad2abfbb296912e7281e154c/#valid-usage","text":"empty() must be false when calling this function.","title":"Valid Usage"},{"location":"api/class_luna_1_1_path_1a644718bb2fb240de962dc3c9a1fdf0dc/","text":"Luna::Path::empty bool empty() const Checks whether this path is empty, that is, the size of this path is 0 . Overview Return value Returns true if this path is empty, returns false otherwise.","title":"Luna::Path::empty"},{"location":"api/class_luna_1_1_path_1a644718bb2fb240de962dc3c9a1fdf0dc/#lunapathempty","text":"bool empty() const Checks whether this path is empty, that is, the size of this path is 0 .","title":"Luna::Path::empty"},{"location":"api/class_luna_1_1_path_1a644718bb2fb240de962dc3c9a1fdf0dc/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a644718bb2fb240de962dc3c9a1fdf0dc/#return-value","text":"Returns true if this path is empty, returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_path_1a653eb49e972bb8c18143e8dc85c47fd3/","text":"Luna::Path::operator[] reference operator[](usize index) Gets the name node at the specified index. Overview Parameters index The index of the name node. Return value Returns one reference of the name node.","title":"Luna::Path::operator[]"},{"location":"api/class_luna_1_1_path_1a653eb49e972bb8c18143e8dc85c47fd3/#lunapathoperator","text":"reference operator[](usize index) Gets the name node at the specified index.","title":"Luna::Path::operator[]"},{"location":"api/class_luna_1_1_path_1a653eb49e972bb8c18143e8dc85c47fd3/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a653eb49e972bb8c18143e8dc85c47fd3/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1a653eb49e972bb8c18143e8dc85c47fd3/#index","text":"The index of the name node.","title":"index"},{"location":"api/class_luna_1_1_path_1a653eb49e972bb8c18143e8dc85c47fd3/#return-value","text":"Returns one reference of the name node.","title":"Return value"},{"location":"api/class_luna_1_1_path_1a68c599ddcbfddc65170de524ac165e44/","text":"Luna::Path::rend reverse_iterator rend() Gets one reverse iterator pointing to the one-before-first name node of the path. Overview Return value Returns one reverse iterator pointing to the one-before-first name node of the path.","title":"Luna::Path::rend"},{"location":"api/class_luna_1_1_path_1a68c599ddcbfddc65170de524ac165e44/#lunapathrend","text":"reverse_iterator rend() Gets one reverse iterator pointing to the one-before-first name node of the path.","title":"Luna::Path::rend"},{"location":"api/class_luna_1_1_path_1a68c599ddcbfddc65170de524ac165e44/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a68c599ddcbfddc65170de524ac165e44/#return-value","text":"Returns one reverse iterator pointing to the one-before-first name node of the path.","title":"Return value"},{"location":"api/class_luna_1_1_path_1a6a48363b4355f6f5b441637774f79a59/","text":"Luna::Path::front reference front() Gets the first name node in the path. Overview Return value Returns one reference to the first name node in the path. Valid Usage empty() must be false when calling this function.","title":"Luna::Path::front"},{"location":"api/class_luna_1_1_path_1a6a48363b4355f6f5b441637774f79a59/#lunapathfront","text":"reference front() Gets the first name node in the path.","title":"Luna::Path::front"},{"location":"api/class_luna_1_1_path_1a6a48363b4355f6f5b441637774f79a59/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a6a48363b4355f6f5b441637774f79a59/#return-value","text":"Returns one reference to the first name node in the path.","title":"Return value"},{"location":"api/class_luna_1_1_path_1a6a48363b4355f6f5b441637774f79a59/#valid-usage","text":"empty() must be false when calling this function.","title":"Valid Usage"},{"location":"api/class_luna_1_1_path_1a6acef455b6bcc678f8844b29dc330c5a/","text":"Luna::Path::operator= Path & operator=(Path &&rhs) Replaces content of the path by coping content from another path. Overview Parameters rhs The path to move from. Return value Returns *this .","title":"Luna::Path::operator="},{"location":"api/class_luna_1_1_path_1a6acef455b6bcc678f8844b29dc330c5a/#lunapathoperator","text":"Path & operator=(Path &&rhs) Replaces content of the path by coping content from another path.","title":"Luna::Path::operator="},{"location":"api/class_luna_1_1_path_1a6acef455b6bcc678f8844b29dc330c5a/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a6acef455b6bcc678f8844b29dc330c5a/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1a6acef455b6bcc678f8844b29dc330c5a/#rhs","text":"The path to move from.","title":"rhs"},{"location":"api/class_luna_1_1_path_1a6acef455b6bcc678f8844b29dc330c5a/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/class_luna_1_1_path_1a6ccb12f7e525f5ea56591ab4985f7ffc/","text":"Luna::Path::assign void assign(const Path &rhs) Replaces content of the path by coping content from another path. Overview Parameters rhs The path to copy from.","title":"Luna::Path::assign"},{"location":"api/class_luna_1_1_path_1a6ccb12f7e525f5ea56591ab4985f7ffc/#lunapathassign","text":"void assign(const Path &rhs) Replaces content of the path by coping content from another path.","title":"Luna::Path::assign"},{"location":"api/class_luna_1_1_path_1a6ccb12f7e525f5ea56591ab4985f7ffc/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a6ccb12f7e525f5ea56591ab4985f7ffc/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1a6ccb12f7e525f5ea56591ab4985f7ffc/#rhs","text":"The path to copy from.","title":"rhs"},{"location":"api/class_luna_1_1_path_1a6dea008a7b7a36a8360f693219a60342/","text":"Luna::Path::operator= Path & operator=(const c8 *s) Replaces content of the path by parsing the specified path string. Overview Parameters s The path string. Return value Returns *this .","title":"Luna::Path::operator="},{"location":"api/class_luna_1_1_path_1a6dea008a7b7a36a8360f693219a60342/#lunapathoperator","text":"Path & operator=(const c8 *s) Replaces content of the path by parsing the specified path string.","title":"Luna::Path::operator="},{"location":"api/class_luna_1_1_path_1a6dea008a7b7a36a8360f693219a60342/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a6dea008a7b7a36a8360f693219a60342/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1a6dea008a7b7a36a8360f693219a60342/#s","text":"The path string.","title":"s"},{"location":"api/class_luna_1_1_path_1a6dea008a7b7a36a8360f693219a60342/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/class_luna_1_1_path_1a6f0b65d8220590bc0de51a6f9178db0c/","text":"Luna::Path::Path Path(const Path &rhs) Constructs one path by moving coping content from another path. Overview Parameters rhs The path to copy from.","title":"Luna::Path::Path"},{"location":"api/class_luna_1_1_path_1a6f0b65d8220590bc0de51a6f9178db0c/#lunapathpath","text":"Path(const Path &rhs) Constructs one path by moving coping content from another path.","title":"Luna::Path::Path"},{"location":"api/class_luna_1_1_path_1a6f0b65d8220590bc0de51a6f9178db0c/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a6f0b65d8220590bc0de51a6f9178db0c/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1a6f0b65d8220590bc0de51a6f9178db0c/#rhs","text":"The path to copy from.","title":"rhs"},{"location":"api/class_luna_1_1_path_1a7786a55970b548f907139eb1ba305322/","text":"Luna::Path::root const Name & root() const Gets the path root name. Overview Return value Returns a constant reference to the path root name.","title":"Luna::Path::root"},{"location":"api/class_luna_1_1_path_1a7786a55970b548f907139eb1ba305322/#lunapathroot","text":"const Name & root() const Gets the path root name.","title":"Luna::Path::root"},{"location":"api/class_luna_1_1_path_1a7786a55970b548f907139eb1ba305322/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a7786a55970b548f907139eb1ba305322/#return-value","text":"Returns a constant reference to the path root name.","title":"Return value"},{"location":"api/class_luna_1_1_path_1a785ace02c15772e6b69c85ac561df3ae/","text":"Luna::Path::replace_extension void replace_extension(const c8 *new_extension, usize count) Replaces the extension. Overview Parameters new_extension The new extension to replace. count The length of the new extension string.","title":"Luna::Path::replace_extension"},{"location":"api/class_luna_1_1_path_1a785ace02c15772e6b69c85ac561df3ae/#lunapathreplace_extension","text":"void replace_extension(const c8 *new_extension, usize count) Replaces the extension.","title":"Luna::Path::replace_extension"},{"location":"api/class_luna_1_1_path_1a785ace02c15772e6b69c85ac561df3ae/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a785ace02c15772e6b69c85ac561df3ae/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1a785ace02c15772e6b69c85ac561df3ae/#new_extension","text":"The new extension to replace.","title":"new_extension"},{"location":"api/class_luna_1_1_path_1a785ace02c15772e6b69c85ac561df3ae/#count","text":"The length of the new extension string.","title":"count"},{"location":"api/class_luna_1_1_path_1a79348f1b7c06b34052b42656a0279429/","text":"Luna::Path::size usize size() const Gets the size of the path, that is, the number of name nodes in the path. Overview Return value Returns the size of the path.","title":"Luna::Path::size"},{"location":"api/class_luna_1_1_path_1a79348f1b7c06b34052b42656a0279429/#lunapathsize","text":"usize size() const Gets the size of the path, that is, the number of name nodes in the path.","title":"Luna::Path::size"},{"location":"api/class_luna_1_1_path_1a79348f1b7c06b34052b42656a0279429/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a79348f1b7c06b34052b42656a0279429/#return-value","text":"Returns the size of the path.","title":"Return value"},{"location":"api/class_luna_1_1_path_1a79bc3eff38f18e90af46526dd4595a4b/","text":"Luna::Path::append void append(const Path &appended_path) Appends another path to the end of this path. Overview The flags and the root name of the appended path are ignored. Parameters appended_path The path to append.","title":"Luna::Path::append"},{"location":"api/class_luna_1_1_path_1a79bc3eff38f18e90af46526dd4595a4b/#lunapathappend","text":"void append(const Path &appended_path) Appends another path to the end of this path.","title":"Luna::Path::append"},{"location":"api/class_luna_1_1_path_1a79bc3eff38f18e90af46526dd4595a4b/#overview","text":"The flags and the root name of the appended path are ignored.","title":"Overview"},{"location":"api/class_luna_1_1_path_1a79bc3eff38f18e90af46526dd4595a4b/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1a79bc3eff38f18e90af46526dd4595a4b/#appended_path","text":"The path to append.","title":"appended_path"},{"location":"api/class_luna_1_1_path_1a7ccd7a00a55cd570e29bf063d550cde0/","text":"Luna::Path::Path Path(Path &&rhs) Constructs one path by moving moving content from another path. Overview Parameters rhs The path to move from.","title":"Luna::Path::Path"},{"location":"api/class_luna_1_1_path_1a7ccd7a00a55cd570e29bf063d550cde0/#lunapathpath","text":"Path(Path &&rhs) Constructs one path by moving moving content from another path.","title":"Luna::Path::Path"},{"location":"api/class_luna_1_1_path_1a7ccd7a00a55cd570e29bf063d550cde0/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a7ccd7a00a55cd570e29bf063d550cde0/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1a7ccd7a00a55cd570e29bf063d550cde0/#rhs","text":"The path to move from.","title":"rhs"},{"location":"api/class_luna_1_1_path_1a81f80a31923e85af56a7b1ae0712a33b/","text":"Luna::Path::crbegin const_reverse_iterator crbegin() const Gets one constant reverse iterator pointing to the last name node of the path. Overview Return value Returns one constant reverse iterator pointing to the last name node of the path.","title":"Luna::Path::crbegin"},{"location":"api/class_luna_1_1_path_1a81f80a31923e85af56a7b1ae0712a33b/#lunapathcrbegin","text":"const_reverse_iterator crbegin() const Gets one constant reverse iterator pointing to the last name node of the path.","title":"Luna::Path::crbegin"},{"location":"api/class_luna_1_1_path_1a81f80a31923e85af56a7b1ae0712a33b/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a81f80a31923e85af56a7b1ae0712a33b/#return-value","text":"Returns one constant reverse iterator pointing to the last name node of the path.","title":"Return value"},{"location":"api/class_luna_1_1_path_1a93486edb4c1e7673d42c9c45abd487d4/","text":"Luna::Path::Path Path(const c8 *s, usize count) Constructs one path by parsing the specified path string. Overview Parameters s The path string. count The number of characters to parse.","title":"Luna::Path::Path"},{"location":"api/class_luna_1_1_path_1a93486edb4c1e7673d42c9c45abd487d4/#lunapathpath","text":"Path(const c8 *s, usize count) Constructs one path by parsing the specified path string.","title":"Luna::Path::Path"},{"location":"api/class_luna_1_1_path_1a93486edb4c1e7673d42c9c45abd487d4/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a93486edb4c1e7673d42c9c45abd487d4/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1a93486edb4c1e7673d42c9c45abd487d4/#s","text":"The path string.","title":"s"},{"location":"api/class_luna_1_1_path_1a93486edb4c1e7673d42c9c45abd487d4/#count","text":"The number of characters to parse.","title":"count"},{"location":"api/class_luna_1_1_path_1a93791e61ab486b4022c389d634b4facc/","text":"Luna::Path::cend const_iterator cend() const Gets one constant iterator pointing to the one past last name node of the path. Overview Return value Returns one constant iterator pointing to the one past last name node of the path.","title":"Luna::Path::cend"},{"location":"api/class_luna_1_1_path_1a93791e61ab486b4022c389d634b4facc/#lunapathcend","text":"const_iterator cend() const Gets one constant iterator pointing to the one past last name node of the path.","title":"Luna::Path::cend"},{"location":"api/class_luna_1_1_path_1a93791e61ab486b4022c389d634b4facc/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a93791e61ab486b4022c389d634b4facc/#return-value","text":"Returns one constant iterator pointing to the one past last name node of the path.","title":"Return value"},{"location":"api/class_luna_1_1_path_1a93b14a8ea0945ce65496b6ee7373453a/","text":"Luna::Path::root Name & root() Gets the path root name. Overview Return value Returns a reference to the path root name.","title":"Luna::Path::root"},{"location":"api/class_luna_1_1_path_1a93b14a8ea0945ce65496b6ee7373453a/#lunapathroot","text":"Name & root() Gets the path root name.","title":"Luna::Path::root"},{"location":"api/class_luna_1_1_path_1a93b14a8ea0945ce65496b6ee7373453a/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1a93b14a8ea0945ce65496b6ee7373453a/#return-value","text":"Returns a reference to the path root name.","title":"Return value"},{"location":"api/class_luna_1_1_path_1a978e690ac37f02e6e92ceb690d7bc711/","text":"Luna::Path::append_extension void append_extension(const c8 *new_extension) Appends the extension. Overview The system adds one extension separator (\".\") between extension and filename automatically. Parameters new_extension The extension to append. Valid Usage new_extension must be null-terminated.","title":"Luna::Path::append_extension"},{"location":"api/class_luna_1_1_path_1a978e690ac37f02e6e92ceb690d7bc711/#lunapathappend_extension","text":"void append_extension(const c8 *new_extension) Appends the extension.","title":"Luna::Path::append_extension"},{"location":"api/class_luna_1_1_path_1a978e690ac37f02e6e92ceb690d7bc711/#overview","text":"The system adds one extension separator (\".\") between extension and filename automatically.","title":"Overview"},{"location":"api/class_luna_1_1_path_1a978e690ac37f02e6e92ceb690d7bc711/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1a978e690ac37f02e6e92ceb690d7bc711/#new_extension","text":"The extension to append.","title":"new_extension"},{"location":"api/class_luna_1_1_path_1a978e690ac37f02e6e92ceb690d7bc711/#valid-usage","text":"new_extension must be null-terminated.","title":"Valid Usage"},{"location":"api/class_luna_1_1_path_1aa18422283cee9a92d1de2d05ebd886b8/","text":"Luna::Path::remove_extension void remove_extension() Removes the extension. Overview The extension separator (\".\") is removed as well in this operation. If the path does not have one extension ( extension().empty() == true ), this operation does nothing.","title":"Luna::Path::remove_extension"},{"location":"api/class_luna_1_1_path_1aa18422283cee9a92d1de2d05ebd886b8/#lunapathremove_extension","text":"void remove_extension() Removes the extension.","title":"Luna::Path::remove_extension"},{"location":"api/class_luna_1_1_path_1aa18422283cee9a92d1de2d05ebd886b8/#overview","text":"The extension separator (\".\") is removed as well in this operation. If the path does not have one extension ( extension().empty() == true ), this operation does nothing.","title":"Overview"},{"location":"api/class_luna_1_1_path_1aa3af768723cd533218ea3d83af440713/","text":"Luna::Path::erase iterator erase(const_iterator first, const_iterator last) Removes one range of name nodes from the path. Overview Parameters first The iterator pointing to the first name node to be removed. last The iterator pointing to the one-past-last name node to be removed. Return value Returns one iterator pointing to the next name node of the removed name nodes when iterating name nodes. Valid Usage first must be either end() or one valid name node in the path. If first != end() , [ first , last ) must specifies either one empty range ( first == last ) or one valid name node range of the path. If first == end() , [ first , last ) must specifies one empty range ( first == last ).","title":"Luna::Path::erase"},{"location":"api/class_luna_1_1_path_1aa3af768723cd533218ea3d83af440713/#lunapatherase","text":"iterator erase(const_iterator first, const_iterator last) Removes one range of name nodes from the path.","title":"Luna::Path::erase"},{"location":"api/class_luna_1_1_path_1aa3af768723cd533218ea3d83af440713/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1aa3af768723cd533218ea3d83af440713/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1aa3af768723cd533218ea3d83af440713/#first","text":"The iterator pointing to the first name node to be removed.","title":"first"},{"location":"api/class_luna_1_1_path_1aa3af768723cd533218ea3d83af440713/#last","text":"The iterator pointing to the one-past-last name node to be removed.","title":"last"},{"location":"api/class_luna_1_1_path_1aa3af768723cd533218ea3d83af440713/#return-value","text":"Returns one iterator pointing to the next name node of the removed name nodes when iterating name nodes.","title":"Return value"},{"location":"api/class_luna_1_1_path_1aa3af768723cd533218ea3d83af440713/#valid-usage","text":"first must be either end() or one valid name node in the path. If first != end() , [ first , last ) must specifies either one empty range ( first == last ) or one valid name node range of the path. If first == end() , [ first , last ) must specifies one empty range ( first == last ).","title":"Valid Usage"},{"location":"api/class_luna_1_1_path_1aa3f7adcb8eaf8e0b1288c248bbb035a8/","text":"Luna::Path::operator== bool operator==(const Path &rhs) const Compares all components of two paths for equality. Overview Parameters rhs The path to compare with. Return value Returns true if all components in both paths are equal. Returns false otherwise.","title":"Luna::Path::operator=="},{"location":"api/class_luna_1_1_path_1aa3f7adcb8eaf8e0b1288c248bbb035a8/#lunapathoperator","text":"bool operator==(const Path &rhs) const Compares all components of two paths for equality.","title":"Luna::Path::operator=="},{"location":"api/class_luna_1_1_path_1aa3f7adcb8eaf8e0b1288c248bbb035a8/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1aa3f7adcb8eaf8e0b1288c248bbb035a8/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1aa3f7adcb8eaf8e0b1288c248bbb035a8/#rhs","text":"The path to compare with.","title":"rhs"},{"location":"api/class_luna_1_1_path_1aa3f7adcb8eaf8e0b1288c248bbb035a8/#return-value","text":"Returns true if all components in both paths are equal. Returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_path_1aa4d2e3f76cdd763239847613176226fc/","text":"Luna::Path::hash_code usize hash_code() const Computes the hash code of this path. Overview Return value Returns the hash code of this path.","title":"Luna::Path::hash_code"},{"location":"api/class_luna_1_1_path_1aa4d2e3f76cdd763239847613176226fc/#lunapathhash_code","text":"usize hash_code() const Computes the hash code of this path.","title":"Luna::Path::hash_code"},{"location":"api/class_luna_1_1_path_1aa4d2e3f76cdd763239847613176226fc/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1aa4d2e3f76cdd763239847613176226fc/#return-value","text":"Returns the hash code of this path.","title":"Return value"},{"location":"api/class_luna_1_1_path_1aaa44fef284bec9041f7eb22b921c6174/","text":"Luna::Path::Path Path() Constructs one empty path.","title":"Luna::Path::Path"},{"location":"api/class_luna_1_1_path_1aaa44fef284bec9041f7eb22b921c6174/#lunapathpath","text":"Path() Constructs one empty path.","title":"Luna::Path::Path"},{"location":"api/class_luna_1_1_path_1aaf3ff431ade941697522db53026aa3d8/","text":"Luna::Path::assign void assign(const String &str) Replaces content of the path by parsing the specified path string. Overview Parameters str The path string.","title":"Luna::Path::assign"},{"location":"api/class_luna_1_1_path_1aaf3ff431ade941697522db53026aa3d8/#lunapathassign","text":"void assign(const String &str) Replaces content of the path by parsing the specified path string.","title":"Luna::Path::assign"},{"location":"api/class_luna_1_1_path_1aaf3ff431ade941697522db53026aa3d8/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1aaf3ff431ade941697522db53026aa3d8/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1aaf3ff431ade941697522db53026aa3d8/#str","text":"The path string.","title":"str"},{"location":"api/class_luna_1_1_path_1ab2f0455e08d54d6e9dbd4a222a2501c6/","text":"Luna::Path::assign void assign(const String &str, usize pos) Replaces content of the path by parsing the specified path string with custom starting position. Overview Parameters str The path string. pos The index of the first character to parse.","title":"Luna::Path::assign"},{"location":"api/class_luna_1_1_path_1ab2f0455e08d54d6e9dbd4a222a2501c6/#lunapathassign","text":"void assign(const String &str, usize pos) Replaces content of the path by parsing the specified path string with custom starting position.","title":"Luna::Path::assign"},{"location":"api/class_luna_1_1_path_1ab2f0455e08d54d6e9dbd4a222a2501c6/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1ab2f0455e08d54d6e9dbd4a222a2501c6/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1ab2f0455e08d54d6e9dbd4a222a2501c6/#str","text":"The path string.","title":"str"},{"location":"api/class_luna_1_1_path_1ab2f0455e08d54d6e9dbd4a222a2501c6/#pos","text":"The index of the first character to parse.","title":"pos"},{"location":"api/class_luna_1_1_path_1ab2f799b011c22cb3d0ed69097a602354/","text":"Luna::Path::Path Path(const c8 *s) Constructs one path by parsing the specified path string. Overview Parameters s The path string. Valid Usage s must specifies one null-terminated string.","title":"Luna::Path::Path"},{"location":"api/class_luna_1_1_path_1ab2f799b011c22cb3d0ed69097a602354/#lunapathpath","text":"Path(const c8 *s) Constructs one path by parsing the specified path string.","title":"Luna::Path::Path"},{"location":"api/class_luna_1_1_path_1ab2f799b011c22cb3d0ed69097a602354/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1ab2f799b011c22cb3d0ed69097a602354/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1ab2f799b011c22cb3d0ed69097a602354/#s","text":"The path string.","title":"s"},{"location":"api/class_luna_1_1_path_1ab2f799b011c22cb3d0ed69097a602354/#valid-usage","text":"s must specifies one null-terminated string.","title":"Valid Usage"},{"location":"api/class_luna_1_1_path_1ab3985f073a6cb98ef41ab10a6e6237d6/","text":"Luna::Path::flags PathFlag & flags() Gets the path flags. Overview Return value Returns a reference of the path flags.","title":"Luna::Path::flags"},{"location":"api/class_luna_1_1_path_1ab3985f073a6cb98ef41ab10a6e6237d6/#lunapathflags","text":"PathFlag & flags() Gets the path flags.","title":"Luna::Path::flags"},{"location":"api/class_luna_1_1_path_1ab3985f073a6cb98ef41ab10a6e6237d6/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1ab3985f073a6cb98ef41ab10a6e6237d6/#return-value","text":"Returns a reference of the path flags.","title":"Return value"},{"location":"api/class_luna_1_1_path_1ab8d46075aaf0f2d24e57f880fe5a2f51/","text":"Luna::Path::operator= Path & operator=(const Path &rhs) Replaces content of the path by coping content from another path. Overview Parameters rhs The path to copy from. Return value Returns *this .","title":"Luna::Path::operator="},{"location":"api/class_luna_1_1_path_1ab8d46075aaf0f2d24e57f880fe5a2f51/#lunapathoperator","text":"Path & operator=(const Path &rhs) Replaces content of the path by coping content from another path.","title":"Luna::Path::operator="},{"location":"api/class_luna_1_1_path_1ab8d46075aaf0f2d24e57f880fe5a2f51/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1ab8d46075aaf0f2d24e57f880fe5a2f51/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1ab8d46075aaf0f2d24e57f880fe5a2f51/#rhs","text":"The path to copy from.","title":"rhs"},{"location":"api/class_luna_1_1_path_1ab8d46075aaf0f2d24e57f880fe5a2f51/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/class_luna_1_1_path_1abe4510c91d51327a875596eac8c238b6/","text":"Luna::Path::push_back void push_back(Name &&path_node) Inserts one name node at the back of the path. Overview Parameters path_node The name node to insert. The name node will be move-inserted to the path.","title":"Luna::Path::push_back"},{"location":"api/class_luna_1_1_path_1abe4510c91d51327a875596eac8c238b6/#lunapathpush_back","text":"void push_back(Name &&path_node) Inserts one name node at the back of the path.","title":"Luna::Path::push_back"},{"location":"api/class_luna_1_1_path_1abe4510c91d51327a875596eac8c238b6/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1abe4510c91d51327a875596eac8c238b6/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1abe4510c91d51327a875596eac8c238b6/#path_node","text":"The name node to insert. The name node will be move-inserted to the path.","title":"path_node"},{"location":"api/class_luna_1_1_path_1abef9dfc7607c7e1a3854788ba56a4f34/","text":"Luna::Path::crend const_reverse_iterator crend() const Gets one constant reverse iterator pointing to the one-before-first name node of the path. Overview Return value Returns one constant reverse iterator pointing to the one-before-first name node of the path.","title":"Luna::Path::crend"},{"location":"api/class_luna_1_1_path_1abef9dfc7607c7e1a3854788ba56a4f34/#lunapathcrend","text":"const_reverse_iterator crend() const Gets one constant reverse iterator pointing to the one-before-first name node of the path.","title":"Luna::Path::crend"},{"location":"api/class_luna_1_1_path_1abef9dfc7607c7e1a3854788ba56a4f34/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1abef9dfc7607c7e1a3854788ba56a4f34/#return-value","text":"Returns one constant reverse iterator pointing to the one-before-first name node of the path.","title":"Return value"},{"location":"api/class_luna_1_1_path_1ac74c1bcf917bd1ba67ebda7b6b815068/","text":"Luna::Path::Path Path(const String &str, usize pos) Constructs one path by parsing the specified path string with custom starting position. Overview Parameters str The path string. pos The index of the first character to parse.","title":"Luna::Path::Path"},{"location":"api/class_luna_1_1_path_1ac74c1bcf917bd1ba67ebda7b6b815068/#lunapathpath","text":"Path(const String &str, usize pos) Constructs one path by parsing the specified path string with custom starting position.","title":"Luna::Path::Path"},{"location":"api/class_luna_1_1_path_1ac74c1bcf917bd1ba67ebda7b6b815068/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1ac74c1bcf917bd1ba67ebda7b6b815068/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1ac74c1bcf917bd1ba67ebda7b6b815068/#str","text":"The path string.","title":"str"},{"location":"api/class_luna_1_1_path_1ac74c1bcf917bd1ba67ebda7b6b815068/#pos","text":"The index of the first character to parse.","title":"pos"},{"location":"api/class_luna_1_1_path_1ac8bb3912a3ce86b15842e79d0b421204/","text":"Luna::Path::clear void clear() Clears all nodes in the path.","title":"Luna::Path::clear"},{"location":"api/class_luna_1_1_path_1ac8bb3912a3ce86b15842e79d0b421204/#lunapathclear","text":"void clear() Clears all nodes in the path.","title":"Luna::Path::clear"},{"location":"api/class_luna_1_1_path_1acad38d52497a975bfb6f2f6acd76631f/","text":"Luna::Path::end iterator end() Gets one iterator pointing to the one past last name node of the path. Overview Return value Returns one iterator pointing to the one past last name node of the path.","title":"Luna::Path::end"},{"location":"api/class_luna_1_1_path_1acad38d52497a975bfb6f2f6acd76631f/#lunapathend","text":"iterator end() Gets one iterator pointing to the one past last name node of the path.","title":"Luna::Path::end"},{"location":"api/class_luna_1_1_path_1acad38d52497a975bfb6f2f6acd76631f/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1acad38d52497a975bfb6f2f6acd76631f/#return-value","text":"Returns one iterator pointing to the one past last name node of the path.","title":"Return value"},{"location":"api/class_luna_1_1_path_1acb0ff70a20d6bb5ea56b8c5c9a5c198b/","text":"Luna::Path::push_back void push_back(const Name &path_node) Inserts one name node at the back of the path. Overview Parameters path_node The name node to insert. The name node will be copy-inserted to the path.","title":"Luna::Path::push_back"},{"location":"api/class_luna_1_1_path_1acb0ff70a20d6bb5ea56b8c5c9a5c198b/#lunapathpush_back","text":"void push_back(const Name &path_node) Inserts one name node at the back of the path.","title":"Luna::Path::push_back"},{"location":"api/class_luna_1_1_path_1acb0ff70a20d6bb5ea56b8c5c9a5c198b/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1acb0ff70a20d6bb5ea56b8c5c9a5c198b/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1acb0ff70a20d6bb5ea56b8c5c9a5c198b/#path_node","text":"The name node to insert. The name node will be copy-inserted to the path.","title":"path_node"},{"location":"api/class_luna_1_1_path_1accf9a4bd0c34d4a5f6a7dab66ea10cdc/","text":"Luna::Path::end const_iterator end() const Gets one constant iterator pointing to the one past last name node of the path. Overview Return value Returns one constant iterator pointing to the one past last name node of the path.","title":"Luna::Path::end"},{"location":"api/class_luna_1_1_path_1accf9a4bd0c34d4a5f6a7dab66ea10cdc/#lunapathend","text":"const_iterator end() const Gets one constant iterator pointing to the one past last name node of the path.","title":"Luna::Path::end"},{"location":"api/class_luna_1_1_path_1accf9a4bd0c34d4a5f6a7dab66ea10cdc/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1accf9a4bd0c34d4a5f6a7dab66ea10cdc/#return-value","text":"Returns one constant iterator pointing to the one past last name node of the path.","title":"Return value"},{"location":"api/class_luna_1_1_path_1acd0de676568888d848beb97dcc53ae47/","text":"Luna::Path::normalize void normalize() Normalizes the path. Overview This call remove all unneeded \"..\" and \".\" nodes from the path.","title":"Luna::Path::normalize"},{"location":"api/class_luna_1_1_path_1acd0de676568888d848beb97dcc53ae47/#lunapathnormalize","text":"void normalize() Normalizes the path.","title":"Luna::Path::normalize"},{"location":"api/class_luna_1_1_path_1acd0de676568888d848beb97dcc53ae47/#overview","text":"This call remove all unneeded \"..\" and \".\" nodes from the path.","title":"Overview"},{"location":"api/class_luna_1_1_path_1acea44ed500a54b2bb93e16b86e81afa8/","text":"Luna::Path::rbegin reverse_iterator rbegin() Gets one reverse iterator pointing to the last name node of the path. Overview Return value Returns one reverse iterator pointing to the last name node of the path.","title":"Luna::Path::rbegin"},{"location":"api/class_luna_1_1_path_1acea44ed500a54b2bb93e16b86e81afa8/#lunapathrbegin","text":"reverse_iterator rbegin() Gets one reverse iterator pointing to the last name node of the path.","title":"Luna::Path::rbegin"},{"location":"api/class_luna_1_1_path_1acea44ed500a54b2bb93e16b86e81afa8/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1acea44ed500a54b2bb93e16b86e81afa8/#return-value","text":"Returns one reverse iterator pointing to the last name node of the path.","title":"Return value"},{"location":"api/class_luna_1_1_path_1ad20897c5c8bd47f5d4005989bead0e55/","text":"Luna::Path::reset void reset() Resets the path object. Overview This operation clears all nodes in the path, then clears the root name and flags of the path.","title":"Luna::Path::reset"},{"location":"api/class_luna_1_1_path_1ad20897c5c8bd47f5d4005989bead0e55/#lunapathreset","text":"void reset() Resets the path object.","title":"Luna::Path::reset"},{"location":"api/class_luna_1_1_path_1ad20897c5c8bd47f5d4005989bead0e55/#overview","text":"This operation clears all nodes in the path, then clears the root name and flags of the path.","title":"Overview"},{"location":"api/class_luna_1_1_path_1ad69bd11391be1a1dba5c8202259664f8/","text":"Luna::Path::begin iterator begin() Gets one iterator pointing to the first name node of the path. Overview Return value Returns one iterator pointing to the first name node of the path.","title":"Luna::Path::begin"},{"location":"api/class_luna_1_1_path_1ad69bd11391be1a1dba5c8202259664f8/#lunapathbegin","text":"iterator begin() Gets one iterator pointing to the first name node of the path.","title":"Luna::Path::begin"},{"location":"api/class_luna_1_1_path_1ad69bd11391be1a1dba5c8202259664f8/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1ad69bd11391be1a1dba5c8202259664f8/#return-value","text":"Returns one iterator pointing to the first name node of the path.","title":"Return value"},{"location":"api/class_luna_1_1_path_1ad78b5b48657110467ac0e2653d6ecca0/","text":"Luna::Path::assign void assign(const String &str, usize pos, usize count) CReplaces content of the path by parsing the specified path string with custom starting position and string size. Overview Parameters str The path string. pos The index of the first character to parse. count The number of characters to parse.","title":"Luna::Path::assign"},{"location":"api/class_luna_1_1_path_1ad78b5b48657110467ac0e2653d6ecca0/#lunapathassign","text":"void assign(const String &str, usize pos, usize count) CReplaces content of the path by parsing the specified path string with custom starting position and string size.","title":"Luna::Path::assign"},{"location":"api/class_luna_1_1_path_1ad78b5b48657110467ac0e2653d6ecca0/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1ad78b5b48657110467ac0e2653d6ecca0/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1ad78b5b48657110467ac0e2653d6ecca0/#str","text":"The path string.","title":"str"},{"location":"api/class_luna_1_1_path_1ad78b5b48657110467ac0e2653d6ecca0/#pos","text":"The index of the first character to parse.","title":"pos"},{"location":"api/class_luna_1_1_path_1ad78b5b48657110467ac0e2653d6ecca0/#count","text":"The number of characters to parse.","title":"count"},{"location":"api/class_luna_1_1_path_1adbf7e6539b0ad25282e4fb77b92635b4/","text":"Luna::Path::Path Path(const String &str) Constructs one path by parsing the specified path string. Overview Parameters str The path string.","title":"Luna::Path::Path"},{"location":"api/class_luna_1_1_path_1adbf7e6539b0ad25282e4fb77b92635b4/#lunapathpath","text":"Path(const String &str) Constructs one path by parsing the specified path string.","title":"Luna::Path::Path"},{"location":"api/class_luna_1_1_path_1adbf7e6539b0ad25282e4fb77b92635b4/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1adbf7e6539b0ad25282e4fb77b92635b4/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1adbf7e6539b0ad25282e4fb77b92635b4/#str","text":"The path string.","title":"str"},{"location":"api/class_luna_1_1_path_1adcf25a5902a60521258ccf9f0ebcff23/","text":"Luna::Path::encode String encode(PathSeparator separator=PathSeparator::slash, bool has_root=true) const Encodes the current path to a string. Overview Parameters separator The separator format to use. Default is slash since it is well supported by all major platforms. has_root Whether to add root name to the path string. Return value Returns the encoded path string.","title":"Luna::Path::encode"},{"location":"api/class_luna_1_1_path_1adcf25a5902a60521258ccf9f0ebcff23/#lunapathencode","text":"String encode(PathSeparator separator=PathSeparator::slash, bool has_root=true) const Encodes the current path to a string.","title":"Luna::Path::encode"},{"location":"api/class_luna_1_1_path_1adcf25a5902a60521258ccf9f0ebcff23/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1adcf25a5902a60521258ccf9f0ebcff23/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1adcf25a5902a60521258ccf9f0ebcff23/#separator","text":"The separator format to use. Default is slash since it is well supported by all major platforms.","title":"separator"},{"location":"api/class_luna_1_1_path_1adcf25a5902a60521258ccf9f0ebcff23/#has_root","text":"Whether to add root name to the path string.","title":"has_root"},{"location":"api/class_luna_1_1_path_1adcf25a5902a60521258ccf9f0ebcff23/#return-value","text":"Returns the encoded path string.","title":"Return value"},{"location":"api/class_luna_1_1_path_1ae433944abc9fd0a6a7d1f404cabc0161/","text":"Luna::Path::flags PathFlag flags() const Gets the path flags. Overview Return value Returns a copy of the path flags.","title":"Luna::Path::flags"},{"location":"api/class_luna_1_1_path_1ae433944abc9fd0a6a7d1f404cabc0161/#lunapathflags","text":"PathFlag flags() const Gets the path flags.","title":"Luna::Path::flags"},{"location":"api/class_luna_1_1_path_1ae433944abc9fd0a6a7d1f404cabc0161/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1ae433944abc9fd0a6a7d1f404cabc0161/#return-value","text":"Returns a copy of the path flags.","title":"Return value"},{"location":"api/class_luna_1_1_path_1ae671ac3329f501e4dedb55204c7eef41/","text":"Luna::Path::at reference at(usize index) Gets the name node at the specified index. Overview Parameters index The index of the name node. Return value Returns one reference of the name node.","title":"Luna::Path::at"},{"location":"api/class_luna_1_1_path_1ae671ac3329f501e4dedb55204c7eef41/#lunapathat","text":"reference at(usize index) Gets the name node at the specified index.","title":"Luna::Path::at"},{"location":"api/class_luna_1_1_path_1ae671ac3329f501e4dedb55204c7eef41/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1ae671ac3329f501e4dedb55204c7eef41/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1ae671ac3329f501e4dedb55204c7eef41/#index","text":"The index of the name node.","title":"index"},{"location":"api/class_luna_1_1_path_1ae671ac3329f501e4dedb55204c7eef41/#return-value","text":"Returns one reference of the name node.","title":"Return value"},{"location":"api/class_luna_1_1_path_1ae6cc9015817f77ee7b14831b579765f5/","text":"Luna::Path::append_extension void append_extension(const c8 *new_extension, usize count) Appends the extension. Overview The system adds one extension separator (\".\") between extension and filename automatically. Parameters new_extension The new extension to replace. count The length of the new extension string.","title":"Luna::Path::append_extension"},{"location":"api/class_luna_1_1_path_1ae6cc9015817f77ee7b14831b579765f5/#lunapathappend_extension","text":"void append_extension(const c8 *new_extension, usize count) Appends the extension.","title":"Luna::Path::append_extension"},{"location":"api/class_luna_1_1_path_1ae6cc9015817f77ee7b14831b579765f5/#overview","text":"The system adds one extension separator (\".\") between extension and filename automatically.","title":"Overview"},{"location":"api/class_luna_1_1_path_1ae6cc9015817f77ee7b14831b579765f5/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1ae6cc9015817f77ee7b14831b579765f5/#new_extension","text":"The new extension to replace.","title":"new_extension"},{"location":"api/class_luna_1_1_path_1ae6cc9015817f77ee7b14831b579765f5/#count","text":"The length of the new extension string.","title":"count"},{"location":"api/class_luna_1_1_path_1aeac4679402dd42e18a4e161e118c02a3/","text":"Luna::Path::is_subpath_of bool is_subpath_of(const Path &base) const Checks whether the current path is one subsequent path of the specified base path. Overview For example, \"/foo/bar\" is a subsequent path of \"/foo\". Parameters base The base path to be checked.","title":"Luna::Path::is_subpath_of"},{"location":"api/class_luna_1_1_path_1aeac4679402dd42e18a4e161e118c02a3/#lunapathis_subpath_of","text":"bool is_subpath_of(const Path &base) const Checks whether the current path is one subsequent path of the specified base path.","title":"Luna::Path::is_subpath_of"},{"location":"api/class_luna_1_1_path_1aeac4679402dd42e18a4e161e118c02a3/#overview","text":"For example, \"/foo/bar\" is a subsequent path of \"/foo\".","title":"Overview"},{"location":"api/class_luna_1_1_path_1aeac4679402dd42e18a4e161e118c02a3/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1aeac4679402dd42e18a4e161e118c02a3/#base","text":"The base path to be checked.","title":"base"},{"location":"api/class_luna_1_1_path_1aeb65295a550d14c73c933be870a9412e/","text":"Luna::Path::append void append(const Path &appended_path, usize pos, usize count) Appends another path to the end of this path. Overview The flags and the root name of the appended path are ignored. Parameters appended_path The path to append. pos The index of the first node to append. count The number of nodes to append. Nodes in range [ appended_path.begin() + pos , appended_path.begin() + pos + count ) will be appended.","title":"Luna::Path::append"},{"location":"api/class_luna_1_1_path_1aeb65295a550d14c73c933be870a9412e/#lunapathappend","text":"void append(const Path &appended_path, usize pos, usize count) Appends another path to the end of this path.","title":"Luna::Path::append"},{"location":"api/class_luna_1_1_path_1aeb65295a550d14c73c933be870a9412e/#overview","text":"The flags and the root name of the appended path are ignored.","title":"Overview"},{"location":"api/class_luna_1_1_path_1aeb65295a550d14c73c933be870a9412e/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1aeb65295a550d14c73c933be870a9412e/#appended_path","text":"The path to append.","title":"appended_path"},{"location":"api/class_luna_1_1_path_1aeb65295a550d14c73c933be870a9412e/#pos","text":"The index of the first node to append.","title":"pos"},{"location":"api/class_luna_1_1_path_1aeb65295a550d14c73c933be870a9412e/#count","text":"The number of nodes to append. Nodes in range [ appended_path.begin() + pos , appended_path.begin() + pos + count ) will be appended.","title":"count"},{"location":"api/class_luna_1_1_path_1af086cceac199bd735c7a97c2a8d7ed21/","text":"Luna::Path::rbegin const_reverse_iterator rbegin() const Gets one constant reverse iterator pointing to the last name node of the path. Overview Return value Returns one constant reverse iterator pointing to the last name node of the path.","title":"Luna::Path::rbegin"},{"location":"api/class_luna_1_1_path_1af086cceac199bd735c7a97c2a8d7ed21/#lunapathrbegin","text":"const_reverse_iterator rbegin() const Gets one constant reverse iterator pointing to the last name node of the path.","title":"Luna::Path::rbegin"},{"location":"api/class_luna_1_1_path_1af086cceac199bd735c7a97c2a8d7ed21/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1af086cceac199bd735c7a97c2a8d7ed21/#return-value","text":"Returns one constant reverse iterator pointing to the last name node of the path.","title":"Return value"},{"location":"api/class_luna_1_1_path_1af0d3e5a420e1e64cf8d5ad2cfad717ee/","text":"Luna::Path::Path Path(const String &str, usize pos, usize count) Constructs one path by parsing the specified path string with custom starting position and string size. Overview Parameters str The path string. pos The index of the first character to parse. count The number of characters to parse.","title":"Luna::Path::Path"},{"location":"api/class_luna_1_1_path_1af0d3e5a420e1e64cf8d5ad2cfad717ee/#lunapathpath","text":"Path(const String &str, usize pos, usize count) Constructs one path by parsing the specified path string with custom starting position and string size.","title":"Luna::Path::Path"},{"location":"api/class_luna_1_1_path_1af0d3e5a420e1e64cf8d5ad2cfad717ee/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1af0d3e5a420e1e64cf8d5ad2cfad717ee/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1af0d3e5a420e1e64cf8d5ad2cfad717ee/#str","text":"The path string.","title":"str"},{"location":"api/class_luna_1_1_path_1af0d3e5a420e1e64cf8d5ad2cfad717ee/#pos","text":"The index of the first character to parse.","title":"pos"},{"location":"api/class_luna_1_1_path_1af0d3e5a420e1e64cf8d5ad2cfad717ee/#count","text":"The number of characters to parse.","title":"count"},{"location":"api/class_luna_1_1_path_1af6073c5186c21acacde749524f8084a6/","text":"Luna::Path::append void append(const Path &appended_path, usize pos) Appends another path to the end of this path. Overview The flags and the root name of the appended path are ignored. Parameters appended_path The path to append. pos The index of the first node to append. Nodes in range [ appended_path.begin() + pos , appended_path.end() ) will be appended.","title":"Luna::Path::append"},{"location":"api/class_luna_1_1_path_1af6073c5186c21acacde749524f8084a6/#lunapathappend","text":"void append(const Path &appended_path, usize pos) Appends another path to the end of this path.","title":"Luna::Path::append"},{"location":"api/class_luna_1_1_path_1af6073c5186c21acacde749524f8084a6/#overview","text":"The flags and the root name of the appended path are ignored.","title":"Overview"},{"location":"api/class_luna_1_1_path_1af6073c5186c21acacde749524f8084a6/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_path_1af6073c5186c21acacde749524f8084a6/#appended_path","text":"The path to append.","title":"appended_path"},{"location":"api/class_luna_1_1_path_1af6073c5186c21acacde749524f8084a6/#pos","text":"The index of the first node to append. Nodes in range [ appended_path.begin() + pos , appended_path.end() ) will be appended.","title":"pos"},{"location":"api/class_luna_1_1_path_1af71e6c1eccbc12e9339c00a86a981a43/","text":"Luna::Path::back reference back() Gets the last name node in the path. Overview Return value Returns one reference to the last name node in the path. Valid Usage empty() must be false when calling this function.","title":"Luna::Path::back"},{"location":"api/class_luna_1_1_path_1af71e6c1eccbc12e9339c00a86a981a43/#lunapathback","text":"reference back() Gets the last name node in the path.","title":"Luna::Path::back"},{"location":"api/class_luna_1_1_path_1af71e6c1eccbc12e9339c00a86a981a43/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1af71e6c1eccbc12e9339c00a86a981a43/#return-value","text":"Returns one reference to the last name node in the path.","title":"Return value"},{"location":"api/class_luna_1_1_path_1af71e6c1eccbc12e9339c00a86a981a43/#valid-usage","text":"empty() must be false when calling this function.","title":"Valid Usage"},{"location":"api/class_luna_1_1_path_1afefe2b622247530ff0b1b292a33e905f/","text":"Luna::Path::filename Name filename() const Gets the filename of the path, which is the last node in the path excluding extension and the separating dot( . ). Overview Return value Returns the filename of the path. Returns an empty name if the path is empty.","title":"Luna::Path::filename"},{"location":"api/class_luna_1_1_path_1afefe2b622247530ff0b1b292a33e905f/#lunapathfilename","text":"Name filename() const Gets the filename of the path, which is the last node in the path excluding extension and the separating dot( . ).","title":"Luna::Path::filename"},{"location":"api/class_luna_1_1_path_1afefe2b622247530ff0b1b292a33e905f/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_path_1afefe2b622247530ff0b1b292a33e905f/#return-value","text":"Returns the filename of the path. Returns an empty name if the path is empty.","title":"Return value"},{"location":"api/class_luna_1_1_recursive_spin_lock/","text":"Luna::RecursiveSpinLock class Luna::RecursiveSpinLock Overview Similar to SpinLock , but allows the lock to be obtained mutable times from the same thread. The user should release the lock the same times as obtaining the lock to finally release the lock.","title":"Luna::RecursiveSpinLock"},{"location":"api/class_luna_1_1_recursive_spin_lock/#lunarecursivespinlock","text":"class Luna::RecursiveSpinLock","title":"Luna::RecursiveSpinLock"},{"location":"api/class_luna_1_1_recursive_spin_lock/#overview","text":"Similar to SpinLock , but allows the lock to be obtained mutable times from the same thread. The user should release the lock the same times as obtaining the lock to finally release the lock.","title":"Overview"},{"location":"api/class_luna_1_1_ref/","text":"Luna::Ref The smart pointer that represents one typed strong reference to one boxed object. class Luna::Ref Functions void reset() Resets the reference to null. bool valid() const Checks whether this reference is valid. object_t object() const Gets the boxed object. _Ty * get() const Gets the boxed object casted to _Ty . _Ty * operator->() const Gets the boxed object casted to _Ty . void attach(object_t ptr) Attaches provided pointer. object_t detach() Detaches the stored pointer. The reference becomes null after this operation. Ref() Constructs one null reference. Ref(const Ref &rhs) Constructs one reference by coping the pointer from another reference of the same type. Ref(Ref &&rhs) Constructs one reference by moving the pointer from another reference of the same type. Ref & operator=(const Ref &rhs) Assigns this reference by coping the pointer from another reference of the same type. Ref & operator=(Ref &&rhs) Assigns this reference by moving the pointer from another reference of the same type. Ref(const Ref< _Rty > &rhs) Constructs one reference by coping the pointer from another reference of one different type. Ref & operator=(const Ref< _Rty > &rhs) Assigns this reference by coping the pointer from another reference of one different type. Ref(Ref< _Rty > &&rhs) Constructs one reference by moving the pointer from another reference of one different type. Ref & operator=(Ref< _Rty > &&rhs) Assigns this reference by moving the pointer from another reference of one different type. Ref(_Ty *ptr) Constructs one reference using the native pointer of the same type. Ref & operator=(_Ty *ptr) Assigns this reference using the native pointer of the same type. Ref(_Rty *ptr) Constructs one reference using the native pointer of one different type. Ref(const ObjRef &rhs) Constructs one reference by coping the pointer from one typeless reference. Ref(ObjRef &&rhs) Constructs one reference by moving the pointer from one typeless reference. Ref & operator=(const ObjRef &rhs) Assigns this reference by coping the pointer from one typeless reference. Ref & operator=(ObjRef &&rhs) Assigns this reference by moving the pointer from one typeless reference. bool operator==(const Ref &rhs) const Compares two references for equality. bool operator!=(const Ref &rhs) const Compares two references for non-equality. bool operator==(_Ty *rhs) const Compares one reference with one native pointer for equality. bool operator!=(_Ty *rhs) const Compares one reference with one native pointer for non-equality. bool operator<(const Ref &rhs) const Compares two references. operator _Ty *() const Gets the boxed object casted to _Ty . _Rty * as() const Gets the boxed object casted to _Rty .","title":"Luna::Ref"},{"location":"api/class_luna_1_1_ref/#lunaref","text":"The smart pointer that represents one typed strong reference to one boxed object. class Luna::Ref","title":"Luna::Ref"},{"location":"api/class_luna_1_1_ref/#functions","text":"void reset() Resets the reference to null. bool valid() const Checks whether this reference is valid. object_t object() const Gets the boxed object. _Ty * get() const Gets the boxed object casted to _Ty . _Ty * operator->() const Gets the boxed object casted to _Ty . void attach(object_t ptr) Attaches provided pointer. object_t detach() Detaches the stored pointer. The reference becomes null after this operation. Ref() Constructs one null reference. Ref(const Ref &rhs) Constructs one reference by coping the pointer from another reference of the same type. Ref(Ref &&rhs) Constructs one reference by moving the pointer from another reference of the same type. Ref & operator=(const Ref &rhs) Assigns this reference by coping the pointer from another reference of the same type. Ref & operator=(Ref &&rhs) Assigns this reference by moving the pointer from another reference of the same type. Ref(const Ref< _Rty > &rhs) Constructs one reference by coping the pointer from another reference of one different type. Ref & operator=(const Ref< _Rty > &rhs) Assigns this reference by coping the pointer from another reference of one different type. Ref(Ref< _Rty > &&rhs) Constructs one reference by moving the pointer from another reference of one different type. Ref & operator=(Ref< _Rty > &&rhs) Assigns this reference by moving the pointer from another reference of one different type. Ref(_Ty *ptr) Constructs one reference using the native pointer of the same type. Ref & operator=(_Ty *ptr) Assigns this reference using the native pointer of the same type. Ref(_Rty *ptr) Constructs one reference using the native pointer of one different type. Ref(const ObjRef &rhs) Constructs one reference by coping the pointer from one typeless reference. Ref(ObjRef &&rhs) Constructs one reference by moving the pointer from one typeless reference. Ref & operator=(const ObjRef &rhs) Assigns this reference by coping the pointer from one typeless reference. Ref & operator=(ObjRef &&rhs) Assigns this reference by moving the pointer from one typeless reference. bool operator==(const Ref &rhs) const Compares two references for equality. bool operator!=(const Ref &rhs) const Compares two references for non-equality. bool operator==(_Ty *rhs) const Compares one reference with one native pointer for equality. bool operator!=(_Ty *rhs) const Compares one reference with one native pointer for non-equality. bool operator<(const Ref &rhs) const Compares two references. operator _Ty *() const Gets the boxed object casted to _Ty . _Rty * as() const Gets the boxed object casted to _Rty .","title":"Functions"},{"location":"api/class_luna_1_1_ref_1a0c62005b5c43288845fcc6d3e177bd8b/","text":"Luna::Ref::get _Ty * get() const Gets the boxed object casted to _Ty . Overview This call does not modify the reference counter of the object. Return value Returns the interface or object pointer of the boxed object. Returns nullptr if the reference is not valid.","title":"Luna::Ref::get"},{"location":"api/class_luna_1_1_ref_1a0c62005b5c43288845fcc6d3e177bd8b/#lunarefget","text":"_Ty * get() const Gets the boxed object casted to _Ty .","title":"Luna::Ref::get"},{"location":"api/class_luna_1_1_ref_1a0c62005b5c43288845fcc6d3e177bd8b/#overview","text":"This call does not modify the reference counter of the object.","title":"Overview"},{"location":"api/class_luna_1_1_ref_1a0c62005b5c43288845fcc6d3e177bd8b/#return-value","text":"Returns the interface or object pointer of the boxed object. Returns nullptr if the reference is not valid.","title":"Return value"},{"location":"api/class_luna_1_1_ref_1a111a3aed594614582dba180a5b807e1d/","text":"Luna::Ref::Ref template <typename _Rty, typename _Enable> Ref(_Rty *ptr) Constructs one reference using the native pointer of one different type. Overview The assignment will fail if the new pointer is nullptr or cannot be casted to _Ty . If the assignment fails, this reference will be null after this operation. If the assignment succeeds, The strong reference counter of the new boxed object will be increased. Parameters ptr The native pointer to set.","title":"Luna::Ref::Ref"},{"location":"api/class_luna_1_1_ref_1a111a3aed594614582dba180a5b807e1d/#lunarefref","text":"template <typename _Rty, typename _Enable> Ref(_Rty *ptr) Constructs one reference using the native pointer of one different type.","title":"Luna::Ref::Ref"},{"location":"api/class_luna_1_1_ref_1a111a3aed594614582dba180a5b807e1d/#overview","text":"The assignment will fail if the new pointer is nullptr or cannot be casted to _Ty . If the assignment fails, this reference will be null after this operation. If the assignment succeeds, The strong reference counter of the new boxed object will be increased.","title":"Overview"},{"location":"api/class_luna_1_1_ref_1a111a3aed594614582dba180a5b807e1d/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_ref_1a111a3aed594614582dba180a5b807e1d/#ptr","text":"The native pointer to set.","title":"ptr"},{"location":"api/class_luna_1_1_ref_1a1dca4a71bb24c736f5a3b09263b2742e/","text":"Luna::Ref::operator= template <typename _Rty> Ref & operator=(const Ref< _Rty > &rhs) Assigns this reference by coping the pointer from another reference of one different type. Overview The assignment will fail if the new reference is null or cannot be casted to _Ty . If the assignment fails, this reference will be null after this operation. If the assignment succeeds, The strong reference counter of the new boxed object will be increased. The strong reference counter of the original boxed object, if not null, will be decreased before assignment. Parameters rhs The reference to copy from. Return value Returns *this .","title":"Luna::Ref::operator="},{"location":"api/class_luna_1_1_ref_1a1dca4a71bb24c736f5a3b09263b2742e/#lunarefoperator","text":"template <typename _Rty> Ref & operator=(const Ref< _Rty > &rhs) Assigns this reference by coping the pointer from another reference of one different type.","title":"Luna::Ref::operator="},{"location":"api/class_luna_1_1_ref_1a1dca4a71bb24c736f5a3b09263b2742e/#overview","text":"The assignment will fail if the new reference is null or cannot be casted to _Ty . If the assignment fails, this reference will be null after this operation. If the assignment succeeds, The strong reference counter of the new boxed object will be increased. The strong reference counter of the original boxed object, if not null, will be decreased before assignment.","title":"Overview"},{"location":"api/class_luna_1_1_ref_1a1dca4a71bb24c736f5a3b09263b2742e/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_ref_1a1dca4a71bb24c736f5a3b09263b2742e/#rhs","text":"The reference to copy from.","title":"rhs"},{"location":"api/class_luna_1_1_ref_1a1dca4a71bb24c736f5a3b09263b2742e/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/class_luna_1_1_ref_1a286e50de153d783006fcf2c3475f5ef8/","text":"Luna::Ref::operator= Ref & operator=(const ObjRef &rhs) Assigns this reference by coping the pointer from one typeless reference. Overview The assignment will fail if the new reference is null or cannot be casted to _Ty . If the assignment fails, this reference will be null after this operation. If the assignment succeeds, The strong reference counter of the new boxed object will be increased. The strong reference counter of the original boxed object, if not null, will be decreased before assignment. Parameters rhs The reference to copy from. Return value Returns *this .","title":"Luna::Ref::operator="},{"location":"api/class_luna_1_1_ref_1a286e50de153d783006fcf2c3475f5ef8/#lunarefoperator","text":"Ref & operator=(const ObjRef &rhs) Assigns this reference by coping the pointer from one typeless reference.","title":"Luna::Ref::operator="},{"location":"api/class_luna_1_1_ref_1a286e50de153d783006fcf2c3475f5ef8/#overview","text":"The assignment will fail if the new reference is null or cannot be casted to _Ty . If the assignment fails, this reference will be null after this operation. If the assignment succeeds, The strong reference counter of the new boxed object will be increased. The strong reference counter of the original boxed object, if not null, will be decreased before assignment.","title":"Overview"},{"location":"api/class_luna_1_1_ref_1a286e50de153d783006fcf2c3475f5ef8/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_ref_1a286e50de153d783006fcf2c3475f5ef8/#rhs","text":"The reference to copy from.","title":"rhs"},{"location":"api/class_luna_1_1_ref_1a286e50de153d783006fcf2c3475f5ef8/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/class_luna_1_1_ref_1a2a03b2d9c01bf054359744d25ba13be9/","text":"Luna::Ref::as template <typename _Rty> _Rty * as() const Gets the boxed object casted to _Rty . Overview Return value Returns one pointer to the boxed object casted to _Rty . Returns nullptr if the reference is null or the boxed object cannot be casted to _Rty .","title":"Luna::Ref::as"},{"location":"api/class_luna_1_1_ref_1a2a03b2d9c01bf054359744d25ba13be9/#lunarefas","text":"template <typename _Rty> _Rty * as() const Gets the boxed object casted to _Rty .","title":"Luna::Ref::as"},{"location":"api/class_luna_1_1_ref_1a2a03b2d9c01bf054359744d25ba13be9/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_ref_1a2a03b2d9c01bf054359744d25ba13be9/#return-value","text":"Returns one pointer to the boxed object casted to _Rty . Returns nullptr if the reference is null or the boxed object cannot be casted to _Rty .","title":"Return value"},{"location":"api/class_luna_1_1_ref_1a2db44e247ecbb0e6c05c590d5fa0818c/","text":"Luna::Ref::operator= template <typename _Rty> Ref & operator=(Ref< _Rty > &&rhs) Assigns this reference by moving the pointer from another reference of one different type. Overview The assignment will fail if the new reference is null or cannot be casted to _Ty . If the assignment fails, this reference will be null after this operation, and the strong reference counter of the new boxed object, if not null, will be decreased. If the assignment succeeds, the reference counter of the new boxed object will not be modified. The strong reference counter of the original boxed object, if not null, will be decreased before assignment. Parameters rhs The reference to move from. This reference will be null after this operation. Return value Returns *this .","title":"Luna::Ref::operator="},{"location":"api/class_luna_1_1_ref_1a2db44e247ecbb0e6c05c590d5fa0818c/#lunarefoperator","text":"template <typename _Rty> Ref & operator=(Ref< _Rty > &&rhs) Assigns this reference by moving the pointer from another reference of one different type.","title":"Luna::Ref::operator="},{"location":"api/class_luna_1_1_ref_1a2db44e247ecbb0e6c05c590d5fa0818c/#overview","text":"The assignment will fail if the new reference is null or cannot be casted to _Ty . If the assignment fails, this reference will be null after this operation, and the strong reference counter of the new boxed object, if not null, will be decreased. If the assignment succeeds, the reference counter of the new boxed object will not be modified. The strong reference counter of the original boxed object, if not null, will be decreased before assignment.","title":"Overview"},{"location":"api/class_luna_1_1_ref_1a2db44e247ecbb0e6c05c590d5fa0818c/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_ref_1a2db44e247ecbb0e6c05c590d5fa0818c/#rhs","text":"The reference to move from. This reference will be null after this operation.","title":"rhs"},{"location":"api/class_luna_1_1_ref_1a2db44e247ecbb0e6c05c590d5fa0818c/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/class_luna_1_1_ref_1a2de641defb8a484bd1812d784e3af0e8/","text":"Luna::Ref::operator= Ref & operator=(_Ty *ptr) Assigns this reference using the native pointer of the same type. Overview The strong reference counter of the new boxed object, if not null, will be increased. The strong reference counter of the original boxed object, if not null, will be decreased before assignment. Parameters ptr The native pointer to set.","title":"Luna::Ref::operator="},{"location":"api/class_luna_1_1_ref_1a2de641defb8a484bd1812d784e3af0e8/#lunarefoperator","text":"Ref & operator=(_Ty *ptr) Assigns this reference using the native pointer of the same type.","title":"Luna::Ref::operator="},{"location":"api/class_luna_1_1_ref_1a2de641defb8a484bd1812d784e3af0e8/#overview","text":"The strong reference counter of the new boxed object, if not null, will be increased. The strong reference counter of the original boxed object, if not null, will be decreased before assignment.","title":"Overview"},{"location":"api/class_luna_1_1_ref_1a2de641defb8a484bd1812d784e3af0e8/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_ref_1a2de641defb8a484bd1812d784e3af0e8/#ptr","text":"The native pointer to set.","title":"ptr"},{"location":"api/class_luna_1_1_ref_1a315419f26d3c59fa143b49b90a019049/","text":"Luna::Ref::valid bool valid() const Checks whether this reference is valid. Overview One strong reference is valid when it is not null. Return value Returns true when the reference is valid. Returns false otherwise.","title":"Luna::Ref::valid"},{"location":"api/class_luna_1_1_ref_1a315419f26d3c59fa143b49b90a019049/#lunarefvalid","text":"bool valid() const Checks whether this reference is valid.","title":"Luna::Ref::valid"},{"location":"api/class_luna_1_1_ref_1a315419f26d3c59fa143b49b90a019049/#overview","text":"One strong reference is valid when it is not null.","title":"Overview"},{"location":"api/class_luna_1_1_ref_1a315419f26d3c59fa143b49b90a019049/#return-value","text":"Returns true when the reference is valid. Returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_ref_1a523237139b59716450886f730457a30c/","text":"Luna::Ref::operator== bool operator==(const Ref &rhs) const Compares two references for equality. Overview Two references are equal if their underlying pointers are equal. Parameters rhs The reference to compare with. Return value Returns true if two references are equal. Returns false otherwise.","title":"Luna::Ref::operator=="},{"location":"api/class_luna_1_1_ref_1a523237139b59716450886f730457a30c/#lunarefoperator","text":"bool operator==(const Ref &rhs) const Compares two references for equality.","title":"Luna::Ref::operator=="},{"location":"api/class_luna_1_1_ref_1a523237139b59716450886f730457a30c/#overview","text":"Two references are equal if their underlying pointers are equal.","title":"Overview"},{"location":"api/class_luna_1_1_ref_1a523237139b59716450886f730457a30c/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_ref_1a523237139b59716450886f730457a30c/#rhs","text":"The reference to compare with.","title":"rhs"},{"location":"api/class_luna_1_1_ref_1a523237139b59716450886f730457a30c/#return-value","text":"Returns true if two references are equal. Returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_ref_1a532310075c287e3d05ad8ab7ab44b18c/","text":"Luna::Ref::Ref Ref(_Ty *ptr) Constructs one reference using the native pointer of the same type. Overview The strong reference counter of the new boxed object, if not null, will be increased. Parameters ptr The native pointer to set.","title":"Luna::Ref::Ref"},{"location":"api/class_luna_1_1_ref_1a532310075c287e3d05ad8ab7ab44b18c/#lunarefref","text":"Ref(_Ty *ptr) Constructs one reference using the native pointer of the same type.","title":"Luna::Ref::Ref"},{"location":"api/class_luna_1_1_ref_1a532310075c287e3d05ad8ab7ab44b18c/#overview","text":"The strong reference counter of the new boxed object, if not null, will be increased.","title":"Overview"},{"location":"api/class_luna_1_1_ref_1a532310075c287e3d05ad8ab7ab44b18c/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_ref_1a532310075c287e3d05ad8ab7ab44b18c/#ptr","text":"The native pointer to set.","title":"ptr"},{"location":"api/class_luna_1_1_ref_1a54a36e8f2a667d7f560dd031236ab682/","text":"Luna::Ref::Ref template <typename _Rty> Ref(Ref< _Rty > &&rhs) Constructs one reference by moving the pointer from another reference of one different type. Overview The assignment will fail if the new reference is null or cannot be casted to _Ty . If the assignment fails, this reference will be null after this operation, and the strong reference counter of the new boxed object, if not null, will be decreased. If the assignment succeeds, the reference counter of the new boxed object will not be modified. Parameters rhs The reference to move from. This reference will be null after this operation.","title":"Luna::Ref::Ref"},{"location":"api/class_luna_1_1_ref_1a54a36e8f2a667d7f560dd031236ab682/#lunarefref","text":"template <typename _Rty> Ref(Ref< _Rty > &&rhs) Constructs one reference by moving the pointer from another reference of one different type.","title":"Luna::Ref::Ref"},{"location":"api/class_luna_1_1_ref_1a54a36e8f2a667d7f560dd031236ab682/#overview","text":"The assignment will fail if the new reference is null or cannot be casted to _Ty . If the assignment fails, this reference will be null after this operation, and the strong reference counter of the new boxed object, if not null, will be decreased. If the assignment succeeds, the reference counter of the new boxed object will not be modified.","title":"Overview"},{"location":"api/class_luna_1_1_ref_1a54a36e8f2a667d7f560dd031236ab682/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_ref_1a54a36e8f2a667d7f560dd031236ab682/#rhs","text":"The reference to move from. This reference will be null after this operation.","title":"rhs"},{"location":"api/class_luna_1_1_ref_1a5c8675c3964f3c1313663a72d9d1c7f1/","text":"Luna::Ref::operator!= bool operator!=(_Ty *rhs) const Compares one reference with one native pointer for non-equality. Overview Parameters rhs The native pointer to compare with. Return value Returns true if get() != rhs . Returns false otherwise.","title":"Luna::Ref::operator!="},{"location":"api/class_luna_1_1_ref_1a5c8675c3964f3c1313663a72d9d1c7f1/#lunarefoperator","text":"bool operator!=(_Ty *rhs) const Compares one reference with one native pointer for non-equality.","title":"Luna::Ref::operator!="},{"location":"api/class_luna_1_1_ref_1a5c8675c3964f3c1313663a72d9d1c7f1/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_ref_1a5c8675c3964f3c1313663a72d9d1c7f1/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_ref_1a5c8675c3964f3c1313663a72d9d1c7f1/#rhs","text":"The native pointer to compare with.","title":"rhs"},{"location":"api/class_luna_1_1_ref_1a5c8675c3964f3c1313663a72d9d1c7f1/#return-value","text":"Returns true if get() != rhs . Returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_ref_1a5e55bfc932dd471834f05a1fcd192484/","text":"Luna::Ref::operator!= bool operator!=(const Ref &rhs) const Compares two references for non-equality. Overview Two references are not equal if their underlying pointers are not equal. Parameters rhs The reference to compare with. Return value Returns true if two references are not equal. Returns false otherwise.","title":"Luna::Ref::operator!="},{"location":"api/class_luna_1_1_ref_1a5e55bfc932dd471834f05a1fcd192484/#lunarefoperator","text":"bool operator!=(const Ref &rhs) const Compares two references for non-equality.","title":"Luna::Ref::operator!="},{"location":"api/class_luna_1_1_ref_1a5e55bfc932dd471834f05a1fcd192484/#overview","text":"Two references are not equal if their underlying pointers are not equal.","title":"Overview"},{"location":"api/class_luna_1_1_ref_1a5e55bfc932dd471834f05a1fcd192484/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_ref_1a5e55bfc932dd471834f05a1fcd192484/#rhs","text":"The reference to compare with.","title":"rhs"},{"location":"api/class_luna_1_1_ref_1a5e55bfc932dd471834f05a1fcd192484/#return-value","text":"Returns true if two references are not equal. Returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_ref_1a6b77fdc84e8c622c126fbc7c1e2b5f29/","text":"Luna::Ref::operator< bool operator<(const Ref &rhs) const Compares two references. Overview The referneces are compared by comparing their underlying pointers after comverted to unsigned integers. If the reference is not valid, the converted integer will be 0 . Parameters rhs The reference to compare with. Return value Returns true if this reference is less than the incoming reference. Returns false otherwise.","title":"Luna::Ref::operator<"},{"location":"api/class_luna_1_1_ref_1a6b77fdc84e8c622c126fbc7c1e2b5f29/#lunarefoperator","text":"bool operator<(const Ref &rhs) const Compares two references.","title":"Luna::Ref::operator&lt;"},{"location":"api/class_luna_1_1_ref_1a6b77fdc84e8c622c126fbc7c1e2b5f29/#overview","text":"The referneces are compared by comparing their underlying pointers after comverted to unsigned integers. If the reference is not valid, the converted integer will be 0 .","title":"Overview"},{"location":"api/class_luna_1_1_ref_1a6b77fdc84e8c622c126fbc7c1e2b5f29/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_ref_1a6b77fdc84e8c622c126fbc7c1e2b5f29/#rhs","text":"The reference to compare with.","title":"rhs"},{"location":"api/class_luna_1_1_ref_1a6b77fdc84e8c622c126fbc7c1e2b5f29/#return-value","text":"Returns true if this reference is less than the incoming reference. Returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_ref_1a726e3844670c9dd7c3f3a118a6bbe9a5/","text":"Luna::Ref::Ref Ref(const ObjRef &rhs) Constructs one reference by coping the pointer from one typeless reference. Overview The assignment will fail if the new reference is null or cannot be casted to _Ty . If the assignment fails, this reference will be null after this operation. If the assignment succeeds, The strong reference counter of the new boxed object will be increased. Parameters rhs The reference to copy from.","title":"Luna::Ref::Ref"},{"location":"api/class_luna_1_1_ref_1a726e3844670c9dd7c3f3a118a6bbe9a5/#lunarefref","text":"Ref(const ObjRef &rhs) Constructs one reference by coping the pointer from one typeless reference.","title":"Luna::Ref::Ref"},{"location":"api/class_luna_1_1_ref_1a726e3844670c9dd7c3f3a118a6bbe9a5/#overview","text":"The assignment will fail if the new reference is null or cannot be casted to _Ty . If the assignment fails, this reference will be null after this operation. If the assignment succeeds, The strong reference counter of the new boxed object will be increased.","title":"Overview"},{"location":"api/class_luna_1_1_ref_1a726e3844670c9dd7c3f3a118a6bbe9a5/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_ref_1a726e3844670c9dd7c3f3a118a6bbe9a5/#rhs","text":"The reference to copy from.","title":"rhs"},{"location":"api/class_luna_1_1_ref_1a7be0b40dc76fc93f46c2ae9316513142/","text":"Luna::Ref::attach void attach(object_t ptr) Attaches provided pointer. Overview This call does not modify the reference counter of the new boxed object. The original boxed object, if not null, will be released before new pointer is attached. Parameters ptr The pointer to attach.","title":"Luna::Ref::attach"},{"location":"api/class_luna_1_1_ref_1a7be0b40dc76fc93f46c2ae9316513142/#lunarefattach","text":"void attach(object_t ptr) Attaches provided pointer.","title":"Luna::Ref::attach"},{"location":"api/class_luna_1_1_ref_1a7be0b40dc76fc93f46c2ae9316513142/#overview","text":"This call does not modify the reference counter of the new boxed object. The original boxed object, if not null, will be released before new pointer is attached.","title":"Overview"},{"location":"api/class_luna_1_1_ref_1a7be0b40dc76fc93f46c2ae9316513142/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_ref_1a7be0b40dc76fc93f46c2ae9316513142/#ptr","text":"The pointer to attach.","title":"ptr"},{"location":"api/class_luna_1_1_ref_1a883e3f228b14c8960e1ba648358388af/","text":"Luna::Ref::operator= Ref & operator=(ObjRef &&rhs) Assigns this reference by moving the pointer from one typeless reference. Overview The assignment will fail if the new reference is null or cannot be casted to _Ty . If the assignment fails, this reference will be null after this operation, and the strong reference counter of the new boxed object, if not null, will be decreased. If the assignment succeeds, the reference counter of the new boxed object will not be modified. The strong reference counter of the original boxed object, if not null, will be decreased before assignment. Parameters rhs The reference to move from. This reference will be null after this operation. Return value Returns *this .","title":"Luna::Ref::operator="},{"location":"api/class_luna_1_1_ref_1a883e3f228b14c8960e1ba648358388af/#lunarefoperator","text":"Ref & operator=(ObjRef &&rhs) Assigns this reference by moving the pointer from one typeless reference.","title":"Luna::Ref::operator="},{"location":"api/class_luna_1_1_ref_1a883e3f228b14c8960e1ba648358388af/#overview","text":"The assignment will fail if the new reference is null or cannot be casted to _Ty . If the assignment fails, this reference will be null after this operation, and the strong reference counter of the new boxed object, if not null, will be decreased. If the assignment succeeds, the reference counter of the new boxed object will not be modified. The strong reference counter of the original boxed object, if not null, will be decreased before assignment.","title":"Overview"},{"location":"api/class_luna_1_1_ref_1a883e3f228b14c8960e1ba648358388af/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_ref_1a883e3f228b14c8960e1ba648358388af/#rhs","text":"The reference to move from. This reference will be null after this operation.","title":"rhs"},{"location":"api/class_luna_1_1_ref_1a883e3f228b14c8960e1ba648358388af/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/class_luna_1_1_ref_1a8b980cb86bd65155f3240b3a00597e6c/","text":"Luna::Ref::detach object_t detach() Detaches the stored pointer. The reference becomes null after this operation. Overview This operation does not modify the reference counter of the original boxed object. Return value Returns the pointer to the original boxed object. Returns nullptr if the reference is null when this function is called.","title":"Luna::Ref::detach"},{"location":"api/class_luna_1_1_ref_1a8b980cb86bd65155f3240b3a00597e6c/#lunarefdetach","text":"object_t detach() Detaches the stored pointer. The reference becomes null after this operation.","title":"Luna::Ref::detach"},{"location":"api/class_luna_1_1_ref_1a8b980cb86bd65155f3240b3a00597e6c/#overview","text":"This operation does not modify the reference counter of the original boxed object.","title":"Overview"},{"location":"api/class_luna_1_1_ref_1a8b980cb86bd65155f3240b3a00597e6c/#return-value","text":"Returns the pointer to the original boxed object. Returns nullptr if the reference is null when this function is called.","title":"Return value"},{"location":"api/class_luna_1_1_ref_1a8cb1ae7f0793df666b8a09f606e6ac44/","text":"Luna::Ref::Ref Ref() Constructs one null reference.","title":"Luna::Ref::Ref"},{"location":"api/class_luna_1_1_ref_1a8cb1ae7f0793df666b8a09f606e6ac44/#lunarefref","text":"Ref() Constructs one null reference.","title":"Luna::Ref::Ref"},{"location":"api/class_luna_1_1_ref_1a9ea7a476b6cca6ec37adf26e42eee6b0/","text":"Luna::Ref::operator= Ref & operator=(Ref &&rhs) Assigns this reference by moving the pointer from another reference of the same type. Overview The reference counter of the new boxed object is not modified. The strong reference counter of the original boxed object, if not null, will be decreased before assignment. Parameters rhs The reference to move from. This reference will be null after this operation. Return value Returns *this .","title":"Luna::Ref::operator="},{"location":"api/class_luna_1_1_ref_1a9ea7a476b6cca6ec37adf26e42eee6b0/#lunarefoperator","text":"Ref & operator=(Ref &&rhs) Assigns this reference by moving the pointer from another reference of the same type.","title":"Luna::Ref::operator="},{"location":"api/class_luna_1_1_ref_1a9ea7a476b6cca6ec37adf26e42eee6b0/#overview","text":"The reference counter of the new boxed object is not modified. The strong reference counter of the original boxed object, if not null, will be decreased before assignment.","title":"Overview"},{"location":"api/class_luna_1_1_ref_1a9ea7a476b6cca6ec37adf26e42eee6b0/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_ref_1a9ea7a476b6cca6ec37adf26e42eee6b0/#rhs","text":"The reference to move from. This reference will be null after this operation.","title":"rhs"},{"location":"api/class_luna_1_1_ref_1a9ea7a476b6cca6ec37adf26e42eee6b0/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/class_luna_1_1_ref_1aa137966a77920b6f8564c03bbe1bf5b2/","text":"Luna::Ref::operator _Ty * operator _Ty *() const Gets the boxed object casted to _Ty . Overview This call does not modify the reference counter of the object. Return value Returns the interface or object pointer of the boxed object. Returns nullptr if the reference is not valid.","title":"Luna::Ref::operator _Ty *"},{"location":"api/class_luna_1_1_ref_1aa137966a77920b6f8564c03bbe1bf5b2/#lunarefoperator-_ty","text":"operator _Ty *() const Gets the boxed object casted to _Ty .","title":"Luna::Ref::operator _Ty *"},{"location":"api/class_luna_1_1_ref_1aa137966a77920b6f8564c03bbe1bf5b2/#overview","text":"This call does not modify the reference counter of the object.","title":"Overview"},{"location":"api/class_luna_1_1_ref_1aa137966a77920b6f8564c03bbe1bf5b2/#return-value","text":"Returns the interface or object pointer of the boxed object. Returns nullptr if the reference is not valid.","title":"Return value"},{"location":"api/class_luna_1_1_ref_1aa35fe176621b16279c1bde6c9f242af5/","text":"Luna::Ref::object object_t object() const Gets the boxed object. Overview This call does not modify the reference counter of the object. Return value Returns one pointer to the boxed object. Returns nullptr if the reference is null.","title":"Luna::Ref::object"},{"location":"api/class_luna_1_1_ref_1aa35fe176621b16279c1bde6c9f242af5/#lunarefobject","text":"object_t object() const Gets the boxed object.","title":"Luna::Ref::object"},{"location":"api/class_luna_1_1_ref_1aa35fe176621b16279c1bde6c9f242af5/#overview","text":"This call does not modify the reference counter of the object.","title":"Overview"},{"location":"api/class_luna_1_1_ref_1aa35fe176621b16279c1bde6c9f242af5/#return-value","text":"Returns one pointer to the boxed object. Returns nullptr if the reference is null.","title":"Return value"},{"location":"api/class_luna_1_1_ref_1aa7bb102b7487a97e50f3ce4cf40e2e3f/","text":"Luna::Ref::Ref Ref(ObjRef &&rhs) Constructs one reference by moving the pointer from one typeless reference. Overview The assignment will fail if the new reference is null or cannot be casted to _Ty . If the assignment fails, this reference will be null after this operation, and the strong reference counter of the new boxed object, if not null, will be decreased. If the assignment succeeds, the reference counter of the new boxed object will not be modified. Parameters rhs The reference to move from. This reference will be null after this operation.","title":"Luna::Ref::Ref"},{"location":"api/class_luna_1_1_ref_1aa7bb102b7487a97e50f3ce4cf40e2e3f/#lunarefref","text":"Ref(ObjRef &&rhs) Constructs one reference by moving the pointer from one typeless reference.","title":"Luna::Ref::Ref"},{"location":"api/class_luna_1_1_ref_1aa7bb102b7487a97e50f3ce4cf40e2e3f/#overview","text":"The assignment will fail if the new reference is null or cannot be casted to _Ty . If the assignment fails, this reference will be null after this operation, and the strong reference counter of the new boxed object, if not null, will be decreased. If the assignment succeeds, the reference counter of the new boxed object will not be modified.","title":"Overview"},{"location":"api/class_luna_1_1_ref_1aa7bb102b7487a97e50f3ce4cf40e2e3f/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_ref_1aa7bb102b7487a97e50f3ce4cf40e2e3f/#rhs","text":"The reference to move from. This reference will be null after this operation.","title":"rhs"},{"location":"api/class_luna_1_1_ref_1ab91bfef355bf234da318c997538097d9/","text":"Luna::Ref::Ref Ref(Ref &&rhs) Constructs one reference by moving the pointer from another reference of the same type. Overview The reference counter of the new boxed object is not modified. Parameters rhs The reference to move from. This reference will be null after this operation.","title":"Luna::Ref::Ref"},{"location":"api/class_luna_1_1_ref_1ab91bfef355bf234da318c997538097d9/#lunarefref","text":"Ref(Ref &&rhs) Constructs one reference by moving the pointer from another reference of the same type.","title":"Luna::Ref::Ref"},{"location":"api/class_luna_1_1_ref_1ab91bfef355bf234da318c997538097d9/#overview","text":"The reference counter of the new boxed object is not modified.","title":"Overview"},{"location":"api/class_luna_1_1_ref_1ab91bfef355bf234da318c997538097d9/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_ref_1ab91bfef355bf234da318c997538097d9/#rhs","text":"The reference to move from. This reference will be null after this operation.","title":"rhs"},{"location":"api/class_luna_1_1_ref_1abab12019678beb9e1714ec156e5a678c/","text":"Luna::Ref::operator= Ref & operator=(const Ref &rhs) Assigns this reference by coping the pointer from another reference of the same type. Overview The strong reference counter of the new boxed object, if not null, will be increased. The strong reference counter of the original boxed object, if not null, will be decreased before assignment. Parameters rhs The reference to copy from. Return value Returns *this .","title":"Luna::Ref::operator="},{"location":"api/class_luna_1_1_ref_1abab12019678beb9e1714ec156e5a678c/#lunarefoperator","text":"Ref & operator=(const Ref &rhs) Assigns this reference by coping the pointer from another reference of the same type.","title":"Luna::Ref::operator="},{"location":"api/class_luna_1_1_ref_1abab12019678beb9e1714ec156e5a678c/#overview","text":"The strong reference counter of the new boxed object, if not null, will be increased. The strong reference counter of the original boxed object, if not null, will be decreased before assignment.","title":"Overview"},{"location":"api/class_luna_1_1_ref_1abab12019678beb9e1714ec156e5a678c/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_ref_1abab12019678beb9e1714ec156e5a678c/#rhs","text":"The reference to copy from.","title":"rhs"},{"location":"api/class_luna_1_1_ref_1abab12019678beb9e1714ec156e5a678c/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/class_luna_1_1_ref_1ad20897c5c8bd47f5d4005989bead0e55/","text":"Luna::Ref::reset void reset() Resets the reference to null. Overview This function decreases the strong reference counter of the boxed object before resetting the reference. If this reference is null when this function is called, this function does nothing.","title":"Luna::Ref::reset"},{"location":"api/class_luna_1_1_ref_1ad20897c5c8bd47f5d4005989bead0e55/#lunarefreset","text":"void reset() Resets the reference to null.","title":"Luna::Ref::reset"},{"location":"api/class_luna_1_1_ref_1ad20897c5c8bd47f5d4005989bead0e55/#overview","text":"This function decreases the strong reference counter of the boxed object before resetting the reference. If this reference is null when this function is called, this function does nothing.","title":"Overview"},{"location":"api/class_luna_1_1_ref_1ad918ea8b0e2ae19ad3abb31fc87f5559/","text":"Luna::Ref::operator== bool operator==(_Ty *rhs) const Compares one reference with one native pointer for equality. Overview Parameters rhs The native pointer to compare with. Return value Returns true if get() == rhs . Returns false otherwise.","title":"Luna::Ref::operator=="},{"location":"api/class_luna_1_1_ref_1ad918ea8b0e2ae19ad3abb31fc87f5559/#lunarefoperator","text":"bool operator==(_Ty *rhs) const Compares one reference with one native pointer for equality.","title":"Luna::Ref::operator=="},{"location":"api/class_luna_1_1_ref_1ad918ea8b0e2ae19ad3abb31fc87f5559/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_ref_1ad918ea8b0e2ae19ad3abb31fc87f5559/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_ref_1ad918ea8b0e2ae19ad3abb31fc87f5559/#rhs","text":"The native pointer to compare with.","title":"rhs"},{"location":"api/class_luna_1_1_ref_1ad918ea8b0e2ae19ad3abb31fc87f5559/#return-value","text":"Returns true if get() == rhs . Returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_ref_1af080798d5ee0c1c7e3714c9f1eef19c8/","text":"Luna::Ref::Ref Ref(const Ref &rhs) Constructs one reference by coping the pointer from another reference of the same type. Overview The strong reference counter of the new boxed object, if not null, will be increased. Parameters rhs The reference to copy from.","title":"Luna::Ref::Ref"},{"location":"api/class_luna_1_1_ref_1af080798d5ee0c1c7e3714c9f1eef19c8/#lunarefref","text":"Ref(const Ref &rhs) Constructs one reference by coping the pointer from another reference of the same type.","title":"Luna::Ref::Ref"},{"location":"api/class_luna_1_1_ref_1af080798d5ee0c1c7e3714c9f1eef19c8/#overview","text":"The strong reference counter of the new boxed object, if not null, will be increased.","title":"Overview"},{"location":"api/class_luna_1_1_ref_1af080798d5ee0c1c7e3714c9f1eef19c8/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_ref_1af080798d5ee0c1c7e3714c9f1eef19c8/#rhs","text":"The reference to copy from.","title":"rhs"},{"location":"api/class_luna_1_1_ref_1af7d21b3f738d8731703c6378ba20ce77/","text":"Luna::Ref::Ref template <typename _Rty> Ref(const Ref< _Rty > &rhs) Constructs one reference by coping the pointer from another reference of one different type. Overview The assignment will fail if the new reference is null or cannot be casted to _Ty . If the assignment fails, this reference will be null after this operation. If the assignment succeeds, The strong reference counter of the new boxed object will be increased. Parameters rhs The reference to copy from.","title":"Luna::Ref::Ref"},{"location":"api/class_luna_1_1_ref_1af7d21b3f738d8731703c6378ba20ce77/#lunarefref","text":"template <typename _Rty> Ref(const Ref< _Rty > &rhs) Constructs one reference by coping the pointer from another reference of one different type.","title":"Luna::Ref::Ref"},{"location":"api/class_luna_1_1_ref_1af7d21b3f738d8731703c6378ba20ce77/#overview","text":"The assignment will fail if the new reference is null or cannot be casted to _Ty . If the assignment fails, this reference will be null after this operation. If the assignment succeeds, The strong reference counter of the new boxed object will be increased.","title":"Overview"},{"location":"api/class_luna_1_1_ref_1af7d21b3f738d8731703c6378ba20ce77/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_ref_1af7d21b3f738d8731703c6378ba20ce77/#rhs","text":"The reference to copy from.","title":"rhs"},{"location":"api/class_luna_1_1_ref_1afc2ad7a38eefaa297c20a07fa669a674/","text":"Luna::Ref::operator-> _Ty * operator->() const Gets the boxed object casted to _Ty . Overview This call does not modify the reference counter of the object. Return value Returns the interface or object pointer of the boxed object. Returns nullptr if the reference is not valid.","title":"Luna::Ref::operator->"},{"location":"api/class_luna_1_1_ref_1afc2ad7a38eefaa297c20a07fa669a674/#lunarefoperator-","text":"_Ty * operator->() const Gets the boxed object casted to _Ty .","title":"Luna::Ref::operator-&gt;"},{"location":"api/class_luna_1_1_ref_1afc2ad7a38eefaa297c20a07fa669a674/#overview","text":"This call does not modify the reference counter of the object.","title":"Overview"},{"location":"api/class_luna_1_1_ref_1afc2ad7a38eefaa297c20a07fa669a674/#return-value","text":"Returns the interface or object pointer of the boxed object. Returns nullptr if the reference is not valid.","title":"Return value"},{"location":"api/class_luna_1_1_reference_wrapper/","text":"Luna::ReferenceWrapper Wraps one reference to one copyable, assignable object. class Luna::ReferenceWrapper","title":"Luna::ReferenceWrapper"},{"location":"api/class_luna_1_1_reference_wrapper/#lunareferencewrapper","text":"Wraps one reference to one copyable, assignable object. class Luna::ReferenceWrapper","title":"Luna::ReferenceWrapper"},{"location":"api/class_luna_1_1_reverse_iterator/","text":"Luna::ReverseIterator An iterator adaptor that reverses the direction of a given iterator. class Luna::ReverseIterator Overview The given iterator must be at least an bidirectional iterator. Functions constexpr ReverseIterator() Constructs an empty reverse iterator. constexpr ReverseIterator(iterator_type i) Constructs a reverse iterator for the given iterator. constexpr ReverseIterator(const ReverseIterator &ri) Constructs a reverse iterator by coping from the specified reverse iterator. constexpr ReverseIterator(const ReverseIterator< _Uty > &ri) Constructs a reverse iterator by coping from the specified reverse iterator of different iterator type. constexpr iterator_type base() const Gets the base iterator of this reverse iterator. constexpr reference operator*() const Gets the object this iterator points to. constexpr pointer operator->() const Gets one pointer to the object this iterator points to. constexpr ReverseIterator & operator++() Pre-increments the iterator to the next object, which is the last object the base iterator points to. constexpr ReverseIterator operator++(int) Post-increments the iterator to the next object, which is the last object the base iterator points to. constexpr ReverseIterator & operator--() Pre-decrements the iterator to the last object, which is the next object the base iterator points to. constexpr ReverseIterator operator--(int) Post-decrements the iterator to the last object, which is the next object the base iterator points to. constexpr ReverseIterator operator+(isize n) const Gets one iterator which is advanced by n positions respectively. constexpr ReverseIterator & operator+=(isize n) Advances the iterator by n positions respectively. constexpr ReverseIterator operator-(isize n) const Gets one iterator which is advanced by -n positions respectively. constexpr ReverseIterator & operator-=(isize n) Advances the iterator by -n positions respectively. constexpr reference operator[](isize n) const Returns a reference to the element at specified relative location.","title":"Luna::ReverseIterator"},{"location":"api/class_luna_1_1_reverse_iterator/#lunareverseiterator","text":"An iterator adaptor that reverses the direction of a given iterator. class Luna::ReverseIterator","title":"Luna::ReverseIterator"},{"location":"api/class_luna_1_1_reverse_iterator/#overview","text":"The given iterator must be at least an bidirectional iterator.","title":"Overview"},{"location":"api/class_luna_1_1_reverse_iterator/#functions","text":"constexpr ReverseIterator() Constructs an empty reverse iterator. constexpr ReverseIterator(iterator_type i) Constructs a reverse iterator for the given iterator. constexpr ReverseIterator(const ReverseIterator &ri) Constructs a reverse iterator by coping from the specified reverse iterator. constexpr ReverseIterator(const ReverseIterator< _Uty > &ri) Constructs a reverse iterator by coping from the specified reverse iterator of different iterator type. constexpr iterator_type base() const Gets the base iterator of this reverse iterator. constexpr reference operator*() const Gets the object this iterator points to. constexpr pointer operator->() const Gets one pointer to the object this iterator points to. constexpr ReverseIterator & operator++() Pre-increments the iterator to the next object, which is the last object the base iterator points to. constexpr ReverseIterator operator++(int) Post-increments the iterator to the next object, which is the last object the base iterator points to. constexpr ReverseIterator & operator--() Pre-decrements the iterator to the last object, which is the next object the base iterator points to. constexpr ReverseIterator operator--(int) Post-decrements the iterator to the last object, which is the next object the base iterator points to. constexpr ReverseIterator operator+(isize n) const Gets one iterator which is advanced by n positions respectively. constexpr ReverseIterator & operator+=(isize n) Advances the iterator by n positions respectively. constexpr ReverseIterator operator-(isize n) const Gets one iterator which is advanced by -n positions respectively. constexpr ReverseIterator & operator-=(isize n) Advances the iterator by -n positions respectively. constexpr reference operator[](isize n) const Returns a reference to the element at specified relative location.","title":"Functions"},{"location":"api/class_luna_1_1_reverse_iterator_1a04c10267229369040999255d87aa3a7e/","text":"Luna::ReverseIterator::operator++ constexpr ReverseIterator & operator++() Pre-increments the iterator to the next object, which is the last object the base iterator points to. Overview Return value Returns *this .","title":"Luna::ReverseIterator::operator++"},{"location":"api/class_luna_1_1_reverse_iterator_1a04c10267229369040999255d87aa3a7e/#lunareverseiteratoroperator","text":"constexpr ReverseIterator & operator++() Pre-increments the iterator to the next object, which is the last object the base iterator points to.","title":"Luna::ReverseIterator::operator++"},{"location":"api/class_luna_1_1_reverse_iterator_1a04c10267229369040999255d87aa3a7e/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_reverse_iterator_1a04c10267229369040999255d87aa3a7e/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/class_luna_1_1_reverse_iterator_1a05aba67cbe324325ac708d6694b1baa0/","text":"Luna::ReverseIterator::operator++ constexpr ReverseIterator operator++(int) Post-increments the iterator to the next object, which is the last object the base iterator points to. Overview Return value Returns one copy of *this that was made before the change.","title":"Luna::ReverseIterator::operator++"},{"location":"api/class_luna_1_1_reverse_iterator_1a05aba67cbe324325ac708d6694b1baa0/#lunareverseiteratoroperator","text":"constexpr ReverseIterator operator++(int) Post-increments the iterator to the next object, which is the last object the base iterator points to.","title":"Luna::ReverseIterator::operator++"},{"location":"api/class_luna_1_1_reverse_iterator_1a05aba67cbe324325ac708d6694b1baa0/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_reverse_iterator_1a05aba67cbe324325ac708d6694b1baa0/#return-value","text":"Returns one copy of *this that was made before the change.","title":"Return value"},{"location":"api/class_luna_1_1_reverse_iterator_1a07f9fc974b732184a91f03d404cf38e5/","text":"Luna::ReverseIterator::ReverseIterator constexpr ReverseIterator(const ReverseIterator &ri) Constructs a reverse iterator by coping from the specified reverse iterator. Overview Parameters ri The reverse iterator to use.","title":"Luna::ReverseIterator::ReverseIterator"},{"location":"api/class_luna_1_1_reverse_iterator_1a07f9fc974b732184a91f03d404cf38e5/#lunareverseiteratorreverseiterator","text":"constexpr ReverseIterator(const ReverseIterator &ri) Constructs a reverse iterator by coping from the specified reverse iterator.","title":"Luna::ReverseIterator::ReverseIterator"},{"location":"api/class_luna_1_1_reverse_iterator_1a07f9fc974b732184a91f03d404cf38e5/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_reverse_iterator_1a07f9fc974b732184a91f03d404cf38e5/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_reverse_iterator_1a07f9fc974b732184a91f03d404cf38e5/#ri","text":"The reverse iterator to use.","title":"ri"},{"location":"api/class_luna_1_1_reverse_iterator_1a262df38391f7cebfd071a522a744ba4a/","text":"Luna::ReverseIterator::ReverseIterator constexpr ReverseIterator(iterator_type i) Constructs a reverse iterator for the given iterator. Overview Parameters i The iterator to use.","title":"Luna::ReverseIterator::ReverseIterator"},{"location":"api/class_luna_1_1_reverse_iterator_1a262df38391f7cebfd071a522a744ba4a/#lunareverseiteratorreverseiterator","text":"constexpr ReverseIterator(iterator_type i) Constructs a reverse iterator for the given iterator.","title":"Luna::ReverseIterator::ReverseIterator"},{"location":"api/class_luna_1_1_reverse_iterator_1a262df38391f7cebfd071a522a744ba4a/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_reverse_iterator_1a262df38391f7cebfd071a522a744ba4a/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_reverse_iterator_1a262df38391f7cebfd071a522a744ba4a/#i","text":"The iterator to use.","title":"i"},{"location":"api/class_luna_1_1_reverse_iterator_1a2898cb2d3fc27522131b180bb878dd28/","text":"Luna::ReverseIterator::operator+= constexpr ReverseIterator & operator+=(isize n) Advances the iterator by n positions respectively. Overview Parameters n The position to advance relative to the current position. Return value Returns *this .","title":"Luna::ReverseIterator::operator+="},{"location":"api/class_luna_1_1_reverse_iterator_1a2898cb2d3fc27522131b180bb878dd28/#lunareverseiteratoroperator","text":"constexpr ReverseIterator & operator+=(isize n) Advances the iterator by n positions respectively.","title":"Luna::ReverseIterator::operator+="},{"location":"api/class_luna_1_1_reverse_iterator_1a2898cb2d3fc27522131b180bb878dd28/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_reverse_iterator_1a2898cb2d3fc27522131b180bb878dd28/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_reverse_iterator_1a2898cb2d3fc27522131b180bb878dd28/#n","text":"The position to advance relative to the current position.","title":"n"},{"location":"api/class_luna_1_1_reverse_iterator_1a2898cb2d3fc27522131b180bb878dd28/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/class_luna_1_1_reverse_iterator_1a28a5b5ae737fec33586d3751a67d4c7f/","text":"Luna::ReverseIterator::operator-= constexpr ReverseIterator & operator-=(isize n) Advances the iterator by -n positions respectively. Overview Parameters n The position to advance relative to the current position. Return value Returns *this .","title":"Luna::ReverseIterator::operator-="},{"location":"api/class_luna_1_1_reverse_iterator_1a28a5b5ae737fec33586d3751a67d4c7f/#lunareverseiteratoroperator-","text":"constexpr ReverseIterator & operator-=(isize n) Advances the iterator by -n positions respectively.","title":"Luna::ReverseIterator::operator-="},{"location":"api/class_luna_1_1_reverse_iterator_1a28a5b5ae737fec33586d3751a67d4c7f/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_reverse_iterator_1a28a5b5ae737fec33586d3751a67d4c7f/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_reverse_iterator_1a28a5b5ae737fec33586d3751a67d4c7f/#n","text":"The position to advance relative to the current position.","title":"n"},{"location":"api/class_luna_1_1_reverse_iterator_1a28a5b5ae737fec33586d3751a67d4c7f/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/class_luna_1_1_reverse_iterator_1a28b609b37d166f341abde3197efe2b2a/","text":"Luna::ReverseIterator::operator[] constexpr reference operator[](isize n) const Returns a reference to the element at specified relative location. Overview Parameters n The position relative to the current position.","title":"Luna::ReverseIterator::operator[]"},{"location":"api/class_luna_1_1_reverse_iterator_1a28b609b37d166f341abde3197efe2b2a/#lunareverseiteratoroperator","text":"constexpr reference operator[](isize n) const Returns a reference to the element at specified relative location.","title":"Luna::ReverseIterator::operator[]"},{"location":"api/class_luna_1_1_reverse_iterator_1a28b609b37d166f341abde3197efe2b2a/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_reverse_iterator_1a28b609b37d166f341abde3197efe2b2a/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_reverse_iterator_1a28b609b37d166f341abde3197efe2b2a/#n","text":"The position relative to the current position.","title":"n"},{"location":"api/class_luna_1_1_reverse_iterator_1a400de181c195ee419fecece2689d44cc/","text":"Luna::ReverseIterator::base constexpr iterator_type base() const Gets the base iterator of this reverse iterator. Overview Return value Returns a copy of the base iterator of this reverse iterator.","title":"Luna::ReverseIterator::base"},{"location":"api/class_luna_1_1_reverse_iterator_1a400de181c195ee419fecece2689d44cc/#lunareverseiteratorbase","text":"constexpr iterator_type base() const Gets the base iterator of this reverse iterator.","title":"Luna::ReverseIterator::base"},{"location":"api/class_luna_1_1_reverse_iterator_1a400de181c195ee419fecece2689d44cc/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_reverse_iterator_1a400de181c195ee419fecece2689d44cc/#return-value","text":"Returns a copy of the base iterator of this reverse iterator.","title":"Return value"},{"location":"api/class_luna_1_1_reverse_iterator_1a462221ea988ebbbf625cdfd6defaa348/","text":"Luna::ReverseIterator::operator-- constexpr ReverseIterator & operator--() Pre-decrements the iterator to the last object, which is the next object the base iterator points to. Overview Return value Returns *this .","title":"Luna::ReverseIterator::operator--"},{"location":"api/class_luna_1_1_reverse_iterator_1a462221ea988ebbbf625cdfd6defaa348/#lunareverseiteratoroperator-","text":"constexpr ReverseIterator & operator--() Pre-decrements the iterator to the last object, which is the next object the base iterator points to.","title":"Luna::ReverseIterator::operator--"},{"location":"api/class_luna_1_1_reverse_iterator_1a462221ea988ebbbf625cdfd6defaa348/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_reverse_iterator_1a462221ea988ebbbf625cdfd6defaa348/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/class_luna_1_1_reverse_iterator_1a7a27a93824c22c3d1062eda8f36bf9b0/","text":"Luna::ReverseIterator::ReverseIterator constexpr ReverseIterator() Constructs an empty reverse iterator.","title":"Luna::ReverseIterator::ReverseIterator"},{"location":"api/class_luna_1_1_reverse_iterator_1a7a27a93824c22c3d1062eda8f36bf9b0/#lunareverseiteratorreverseiterator","text":"constexpr ReverseIterator() Constructs an empty reverse iterator.","title":"Luna::ReverseIterator::ReverseIterator"},{"location":"api/class_luna_1_1_reverse_iterator_1a880cf7ee1debad9672e00064d6bb5228/","text":"Luna::ReverseIterator::ReverseIterator template <typename _Uty> constexpr ReverseIterator(const ReverseIterator< _Uty > &ri) Constructs a reverse iterator by coping from the specified reverse iterator of different iterator type. Overview Parameters ri The reverse iterator to use.","title":"Luna::ReverseIterator::ReverseIterator"},{"location":"api/class_luna_1_1_reverse_iterator_1a880cf7ee1debad9672e00064d6bb5228/#lunareverseiteratorreverseiterator","text":"template <typename _Uty> constexpr ReverseIterator(const ReverseIterator< _Uty > &ri) Constructs a reverse iterator by coping from the specified reverse iterator of different iterator type.","title":"Luna::ReverseIterator::ReverseIterator"},{"location":"api/class_luna_1_1_reverse_iterator_1a880cf7ee1debad9672e00064d6bb5228/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_reverse_iterator_1a880cf7ee1debad9672e00064d6bb5228/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_reverse_iterator_1a880cf7ee1debad9672e00064d6bb5228/#ri","text":"The reverse iterator to use.","title":"ri"},{"location":"api/class_luna_1_1_reverse_iterator_1abae71b38b2deccb8c7b6956db40cf670/","text":"Luna::ReverseIterator::operator* constexpr reference operator*() const Gets the object this iterator points to. Overview Return value Returns the object this iterator points to.","title":"Luna::ReverseIterator::operator*"},{"location":"api/class_luna_1_1_reverse_iterator_1abae71b38b2deccb8c7b6956db40cf670/#lunareverseiteratoroperator","text":"constexpr reference operator*() const Gets the object this iterator points to.","title":"Luna::ReverseIterator::operator*"},{"location":"api/class_luna_1_1_reverse_iterator_1abae71b38b2deccb8c7b6956db40cf670/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_reverse_iterator_1abae71b38b2deccb8c7b6956db40cf670/#return-value","text":"Returns the object this iterator points to.","title":"Return value"},{"location":"api/class_luna_1_1_reverse_iterator_1acec6c1dc8f0d6f87c794808f19f87396/","text":"Luna::ReverseIterator::operator-- constexpr ReverseIterator operator--(int) Post-decrements the iterator to the last object, which is the next object the base iterator points to. Overview Return value Returns one copy of *this that was made before the change.","title":"Luna::ReverseIterator::operator--"},{"location":"api/class_luna_1_1_reverse_iterator_1acec6c1dc8f0d6f87c794808f19f87396/#lunareverseiteratoroperator-","text":"constexpr ReverseIterator operator--(int) Post-decrements the iterator to the last object, which is the next object the base iterator points to.","title":"Luna::ReverseIterator::operator--"},{"location":"api/class_luna_1_1_reverse_iterator_1acec6c1dc8f0d6f87c794808f19f87396/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_reverse_iterator_1acec6c1dc8f0d6f87c794808f19f87396/#return-value","text":"Returns one copy of *this that was made before the change.","title":"Return value"},{"location":"api/class_luna_1_1_reverse_iterator_1ad383851db942340c7eada562c5977bbb/","text":"Luna::ReverseIterator::operator+ constexpr ReverseIterator operator+(isize n) const Gets one iterator which is advanced by n positions respectively. Overview Parameters n The position to advance relative to the current position. Return value Returns one iterator which is advanced by n positions respectively.","title":"Luna::ReverseIterator::operator+"},{"location":"api/class_luna_1_1_reverse_iterator_1ad383851db942340c7eada562c5977bbb/#lunareverseiteratoroperator","text":"constexpr ReverseIterator operator+(isize n) const Gets one iterator which is advanced by n positions respectively.","title":"Luna::ReverseIterator::operator+"},{"location":"api/class_luna_1_1_reverse_iterator_1ad383851db942340c7eada562c5977bbb/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_reverse_iterator_1ad383851db942340c7eada562c5977bbb/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_reverse_iterator_1ad383851db942340c7eada562c5977bbb/#n","text":"The position to advance relative to the current position.","title":"n"},{"location":"api/class_luna_1_1_reverse_iterator_1ad383851db942340c7eada562c5977bbb/#return-value","text":"Returns one iterator which is advanced by n positions respectively.","title":"Return value"},{"location":"api/class_luna_1_1_reverse_iterator_1adce875cdb45f3fb34643b8a8bfe9e258/","text":"Luna::ReverseIterator::operator-> constexpr pointer operator->() const Gets one pointer to the object this iterator points to. Overview Return value Returns one pointer to the object this iterator points to.","title":"Luna::ReverseIterator::operator->"},{"location":"api/class_luna_1_1_reverse_iterator_1adce875cdb45f3fb34643b8a8bfe9e258/#lunareverseiteratoroperator-","text":"constexpr pointer operator->() const Gets one pointer to the object this iterator points to.","title":"Luna::ReverseIterator::operator-&gt;"},{"location":"api/class_luna_1_1_reverse_iterator_1adce875cdb45f3fb34643b8a8bfe9e258/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_reverse_iterator_1adce875cdb45f3fb34643b8a8bfe9e258/#return-value","text":"Returns one pointer to the object this iterator points to.","title":"Return value"},{"location":"api/class_luna_1_1_reverse_iterator_1afc07350a9d4a009150e92c972423e297/","text":"Luna::ReverseIterator::operator- constexpr ReverseIterator operator-(isize n) const Gets one iterator which is advanced by -n positions respectively. Overview Parameters n The position to advance relative to the current position. Return value Returns one iterator which is advanced by -n positions respectively.","title":"Luna::ReverseIterator::operator-"},{"location":"api/class_luna_1_1_reverse_iterator_1afc07350a9d4a009150e92c972423e297/#lunareverseiteratoroperator-","text":"constexpr ReverseIterator operator-(isize n) const Gets one iterator which is advanced by -n positions respectively.","title":"Luna::ReverseIterator::operator-"},{"location":"api/class_luna_1_1_reverse_iterator_1afc07350a9d4a009150e92c972423e297/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_reverse_iterator_1afc07350a9d4a009150e92c972423e297/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_reverse_iterator_1afc07350a9d4a009150e92c972423e297/#n","text":"The position to advance relative to the current position.","title":"n"},{"location":"api/class_luna_1_1_reverse_iterator_1afc07350a9d4a009150e92c972423e297/#return-value","text":"Returns one iterator which is advanced by -n positions respectively.","title":"Return value"},{"location":"api/class_luna_1_1_ring_deque/","text":"Luna::RingDeque A container that implements a double-ended queue and uses a ring buffer as its internal storage. class Luna::RingDeque","title":"Luna::RingDeque"},{"location":"api/class_luna_1_1_ring_deque/#lunaringdeque","text":"A container that implements a double-ended queue and uses a ring buffer as its internal storage. class Luna::RingDeque","title":"Luna::RingDeque"},{"location":"api/class_luna_1_1_self_indexed_hash_map/","text":"Luna::SelfIndexedHashMap class Luna::SelfIndexedHashMap Overview The self indexed hash map is for values whose key is one data member of the value, or can be computed from the value. For every value type that the user want to use for self indexed hash map, the user must define one special structure called \"key extractor\", and passes the type as the _ExtractKey template argument for the map. In this structure, one operator function const _Kty& operator()(const _Ty& p) const (or _Kty operator()(const _Ty& p) const if the key is computed from value) must be defined to fetch the key of the value. The user must ensure that the key data member is not changed after the element is inserted to the map and before the element is removed from the map, or the behavior is undefined.","title":"Luna::SelfIndexedHashMap"},{"location":"api/class_luna_1_1_self_indexed_hash_map/#lunaselfindexedhashmap","text":"class Luna::SelfIndexedHashMap","title":"Luna::SelfIndexedHashMap"},{"location":"api/class_luna_1_1_self_indexed_hash_map/#overview","text":"The self indexed hash map is for values whose key is one data member of the value, or can be computed from the value. For every value type that the user want to use for self indexed hash map, the user must define one special structure called \"key extractor\", and passes the type as the _ExtractKey template argument for the map. In this structure, one operator function const _Kty& operator()(const _Ty& p) const (or _Kty operator()(const _Ty& p) const if the key is computed from value) must be defined to fetch the key of the value. The user must ensure that the key data member is not changed after the element is inserted to the map and before the element is removed from the map, or the behavior is undefined.","title":"Overview"},{"location":"api/class_luna_1_1_self_indexed_unordered_map/","text":"Luna::SelfIndexedUnorderedMap class Luna::SelfIndexedUnorderedMap Overview The self indexed hash map is for values whose key is one data member of the value, or can be computed from the value. For every value type that the user want to use for self indexed hash map, the user must define one special structure called \"key extractor\", and passes the type as the _ExtractKey template argument for the map. In this structure, one operator function const _Kty& operator()(const _Ty& p) const (or _Kty operator()(const _Ty& p) const if the key is computed from value) must be defined to fetch the key of the value. The user must ensure that the key data member is not changed after the element is inserted to the map and before the element is removed from the map, or the behavior is undefined.","title":"Luna::SelfIndexedUnorderedMap"},{"location":"api/class_luna_1_1_self_indexed_unordered_map/#lunaselfindexedunorderedmap","text":"class Luna::SelfIndexedUnorderedMap","title":"Luna::SelfIndexedUnorderedMap"},{"location":"api/class_luna_1_1_self_indexed_unordered_map/#overview","text":"The self indexed hash map is for values whose key is one data member of the value, or can be computed from the value. For every value type that the user want to use for self indexed hash map, the user must define one special structure called \"key extractor\", and passes the type as the _ExtractKey template argument for the map. In this structure, one operator function const _Kty& operator()(const _Ty& p) const (or _Kty operator()(const _Ty& p) const if the key is computed from value) must be defined to fetch the key of the value. The user must ensure that the key data member is not changed after the element is inserted to the map and before the element is removed from the map, or the behavior is undefined.","title":"Overview"},{"location":"api/class_luna_1_1_self_indexed_unordered_multi_map/","text":"Luna::SelfIndexedUnorderedMultiMap class Luna::SelfIndexedUnorderedMultiMap Overview This container is similar to [SelfIndexedUnorderedMap](class_luna_1_1_self_indexed_unordered_map.md) , but allows multiple elements with the same key to exist.","title":"Luna::SelfIndexedUnorderedMultiMap"},{"location":"api/class_luna_1_1_self_indexed_unordered_multi_map/#lunaselfindexedunorderedmultimap","text":"class Luna::SelfIndexedUnorderedMultiMap","title":"Luna::SelfIndexedUnorderedMultiMap"},{"location":"api/class_luna_1_1_self_indexed_unordered_multi_map/#overview","text":"This container is similar to [SelfIndexedUnorderedMap](class_luna_1_1_self_indexed_unordered_map.md) , but allows multiple elements with the same key to exist.","title":"Overview"},{"location":"api/class_luna_1_1_span/","text":"Luna::Span Represents one reference to one continuous sequence of instances. class Luna::Span","title":"Luna::Span"},{"location":"api/class_luna_1_1_span/#lunaspan","text":"Represents one reference to one continuous sequence of instances. class Luna::Span","title":"Luna::Span"},{"location":"api/class_luna_1_1_spin_lock/","text":"Luna::SpinLock class Luna::SpinLock Overview A spin lock is like a light-weight mutex. Both mutex and spin lock are used to give one thread exclusive access to some specific resource, but they have the following differences:","title":"Luna::SpinLock"},{"location":"api/class_luna_1_1_spin_lock/#lunaspinlock","text":"class Luna::SpinLock","title":"Luna::SpinLock"},{"location":"api/class_luna_1_1_spin_lock/#overview","text":"A spin lock is like a light-weight mutex. Both mutex and spin lock are used to give one thread exclusive access to some specific resource, but they have the following differences:","title":"Overview"},{"location":"api/class_luna_1_1_unconstructed/","text":"Luna::Unconstructed Represents one object that supports manual construction and destruction. class Luna::Unconstructed Overview [Unconstructed](class_luna_1_1_unconstructed.md) provides a way to allocate the memory for a C++ object without their constructor/destructor being called by system. You have the ability to call their constructor/destructor manually. Such feature is useful when you need to declare some static constructed objects and want to control their construction/ destruction orders. Note that the [Unconstructed](class_luna_1_1_unconstructed.md) class does not actually know if the object is constructed, you need to manage it manually and always call the destructor of the object when you want to destroy it. Functions _Ty & get() Get a reference to the object. const _Ty & get() const Get a const reference to the object. void construct(Args &&... args) Constructs the object. void destruct() Destructs the object.","title":"Luna::Unconstructed"},{"location":"api/class_luna_1_1_unconstructed/#lunaunconstructed","text":"Represents one object that supports manual construction and destruction. class Luna::Unconstructed","title":"Luna::Unconstructed"},{"location":"api/class_luna_1_1_unconstructed/#overview","text":"[Unconstructed](class_luna_1_1_unconstructed.md) provides a way to allocate the memory for a C++ object without their constructor/destructor being called by system. You have the ability to call their constructor/destructor manually. Such feature is useful when you need to declare some static constructed objects and want to control their construction/ destruction orders. Note that the [Unconstructed](class_luna_1_1_unconstructed.md) class does not actually know if the object is constructed, you need to manage it manually and always call the destructor of the object when you want to destroy it.","title":"Overview"},{"location":"api/class_luna_1_1_unconstructed/#functions","text":"_Ty & get() Get a reference to the object. const _Ty & get() const Get a const reference to the object. void construct(Args &&... args) Constructs the object. void destruct() Destructs the object.","title":"Functions"},{"location":"api/class_luna_1_1_unconstructed_1a38a9abd57df742d690f2ca0c668abab8/","text":"Luna::Unconstructed::get _Ty & get() Get a reference to the object. Overview Return value Returns a reference to the object.","title":"Luna::Unconstructed::get"},{"location":"api/class_luna_1_1_unconstructed_1a38a9abd57df742d690f2ca0c668abab8/#lunaunconstructedget","text":"_Ty & get() Get a reference to the object.","title":"Luna::Unconstructed::get"},{"location":"api/class_luna_1_1_unconstructed_1a38a9abd57df742d690f2ca0c668abab8/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_unconstructed_1a38a9abd57df742d690f2ca0c668abab8/#return-value","text":"Returns a reference to the object.","title":"Return value"},{"location":"api/class_luna_1_1_unconstructed_1a99f878496613323217993a6b57e6e7f6/","text":"Luna::Unconstructed::get const _Ty & get() const Get a const reference to the object. Overview Return value Returns a const reference to the object.","title":"Luna::Unconstructed::get"},{"location":"api/class_luna_1_1_unconstructed_1a99f878496613323217993a6b57e6e7f6/#lunaunconstructedget","text":"const _Ty & get() const Get a const reference to the object.","title":"Luna::Unconstructed::get"},{"location":"api/class_luna_1_1_unconstructed_1a99f878496613323217993a6b57e6e7f6/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_unconstructed_1a99f878496613323217993a6b57e6e7f6/#return-value","text":"Returns a const reference to the object.","title":"Return value"},{"location":"api/class_luna_1_1_unconstructed_1a9cd3f54567668a517b7ca3df525e90c2/","text":"Luna::Unconstructed::construct template <typename...> void construct(Args &&... args) Constructs the object. Overview Parameters args Arguments that will be passed to the constructor of the object.","title":"Luna::Unconstructed::construct"},{"location":"api/class_luna_1_1_unconstructed_1a9cd3f54567668a517b7ca3df525e90c2/#lunaunconstructedconstruct","text":"template <typename...> void construct(Args &&... args) Constructs the object.","title":"Luna::Unconstructed::construct"},{"location":"api/class_luna_1_1_unconstructed_1a9cd3f54567668a517b7ca3df525e90c2/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_unconstructed_1a9cd3f54567668a517b7ca3df525e90c2/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_unconstructed_1a9cd3f54567668a517b7ca3df525e90c2/#args","text":"Arguments that will be passed to the constructor of the object.","title":"args"},{"location":"api/class_luna_1_1_unconstructed_1af3b43681b3f195f17dac4f4ef64891f5/","text":"Luna::Unconstructed::destruct void destruct() Destructs the object.","title":"Luna::Unconstructed::destruct"},{"location":"api/class_luna_1_1_unconstructed_1af3b43681b3f195f17dac4f4ef64891f5/#lunaunconstructeddestruct","text":"void destruct() Destructs the object.","title":"Luna::Unconstructed::destruct"},{"location":"api/class_luna_1_1_variant/","text":"Luna::Variant Represents a dynamic typed object that stores data in a schema-less (self-described) manner. class Luna::Variant","title":"Luna::Variant"},{"location":"api/class_luna_1_1_variant/#lunavariant","text":"Represents a dynamic typed object that stores data in a schema-less (self-described) manner. class Luna::Variant","title":"Luna::Variant"},{"location":"api/class_luna_1_1_vector/","text":"Luna::Vector A dynamic container type that stores a continuous array of elements. class Luna::Vector","title":"Luna::Vector"},{"location":"api/class_luna_1_1_vector/#lunavector","text":"A dynamic container type that stores a continuous array of elements. class Luna::Vector","title":"Luna::Vector"},{"location":"api/class_luna_1_1_weak_obj_ref/","text":"Luna::WeakObjRef The smart pointer that represents one typeless weak reference to one boxed object. class Luna::WeakObjRef Functions void reset() Resets the reference to null. bool valid() const Checks whether this reference is valid. object_t get() const Gets the boxed object. void attach(object_t ptr) Attaches provided pointer. object_t detach() Detaches the stored pointer. The reference becomes null after this operation. WeakObjRef() Constructs one null reference. WeakObjRef(const WeakObjRef &rhs) Constructs one reference by coping the pointer from another reference. WeakObjRef(WeakObjRef &&rhs) Constructs one reference by moving the pointer from another reference. WeakObjRef & operator=(const WeakObjRef &rhs) Assigns this reference by coping the pointer from another reference. WeakObjRef & operator=(WeakObjRef &&rhs) Assigns this reference by moving the pointer from another reference. WeakObjRef(const ObjRef &rhs) Constructs one weak reference from one strong reference. WeakObjRef & operator=(const ObjRef &rhs) Assigns this reference by coping the pointer from one strong reference. WeakObjRef(object_t rhs) Constructs one reference by providing the underlying pointer directly. WeakObjRef & operator=(object_t rhs) Replaces the underlying pointer of this reference with the given pointer. bool operator==(const WeakObjRef &rhs) const Compares two references for equality. bool operator!=(const WeakObjRef &rhs) const Compares two references for non-equality. bool operator<(const WeakObjRef &rhs) const Compares two references. operator bool() const Checks whether this reference is valid. ObjRef pin() const Creates one strong reference from this weak reference.","title":"Luna::WeakObjRef"},{"location":"api/class_luna_1_1_weak_obj_ref/#lunaweakobjref","text":"The smart pointer that represents one typeless weak reference to one boxed object. class Luna::WeakObjRef","title":"Luna::WeakObjRef"},{"location":"api/class_luna_1_1_weak_obj_ref/#functions","text":"void reset() Resets the reference to null. bool valid() const Checks whether this reference is valid. object_t get() const Gets the boxed object. void attach(object_t ptr) Attaches provided pointer. object_t detach() Detaches the stored pointer. The reference becomes null after this operation. WeakObjRef() Constructs one null reference. WeakObjRef(const WeakObjRef &rhs) Constructs one reference by coping the pointer from another reference. WeakObjRef(WeakObjRef &&rhs) Constructs one reference by moving the pointer from another reference. WeakObjRef & operator=(const WeakObjRef &rhs) Assigns this reference by coping the pointer from another reference. WeakObjRef & operator=(WeakObjRef &&rhs) Assigns this reference by moving the pointer from another reference. WeakObjRef(const ObjRef &rhs) Constructs one weak reference from one strong reference. WeakObjRef & operator=(const ObjRef &rhs) Assigns this reference by coping the pointer from one strong reference. WeakObjRef(object_t rhs) Constructs one reference by providing the underlying pointer directly. WeakObjRef & operator=(object_t rhs) Replaces the underlying pointer of this reference with the given pointer. bool operator==(const WeakObjRef &rhs) const Compares two references for equality. bool operator!=(const WeakObjRef &rhs) const Compares two references for non-equality. bool operator<(const WeakObjRef &rhs) const Compares two references. operator bool() const Checks whether this reference is valid. ObjRef pin() const Creates one strong reference from this weak reference.","title":"Functions"},{"location":"api/class_luna_1_1_weak_obj_ref_1a09577bca14140885ea414330cc9634ea/","text":"Luna::WeakObjRef::WeakObjRef WeakObjRef(object_t rhs) Constructs one reference by providing the underlying pointer directly. Overview The weak reference counter of the new boxed object will be increased if the provided pointer is valid. Parameters ptr The pointer to set.","title":"Luna::WeakObjRef::WeakObjRef"},{"location":"api/class_luna_1_1_weak_obj_ref_1a09577bca14140885ea414330cc9634ea/#lunaweakobjrefweakobjref","text":"WeakObjRef(object_t rhs) Constructs one reference by providing the underlying pointer directly.","title":"Luna::WeakObjRef::WeakObjRef"},{"location":"api/class_luna_1_1_weak_obj_ref_1a09577bca14140885ea414330cc9634ea/#overview","text":"The weak reference counter of the new boxed object will be increased if the provided pointer is valid.","title":"Overview"},{"location":"api/class_luna_1_1_weak_obj_ref_1a09577bca14140885ea414330cc9634ea/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_weak_obj_ref_1a09577bca14140885ea414330cc9634ea/#ptr","text":"The pointer to set.","title":"ptr"},{"location":"api/class_luna_1_1_weak_obj_ref_1a169c54555e3a8f25622ad3b332a5c660/","text":"Luna::WeakObjRef::operator= WeakObjRef & operator=(WeakObjRef &&rhs) Assigns this reference by moving the pointer from another reference. Overview The reference counter of the new boxed object is not modified. The weak reference counter of the original boxed object, if not null, will be decreased before assignment. Parameters rhs The reference to move from. This reference will be null after this operation. Return value Returns *this .","title":"Luna::WeakObjRef::operator="},{"location":"api/class_luna_1_1_weak_obj_ref_1a169c54555e3a8f25622ad3b332a5c660/#lunaweakobjrefoperator","text":"WeakObjRef & operator=(WeakObjRef &&rhs) Assigns this reference by moving the pointer from another reference.","title":"Luna::WeakObjRef::operator="},{"location":"api/class_luna_1_1_weak_obj_ref_1a169c54555e3a8f25622ad3b332a5c660/#overview","text":"The reference counter of the new boxed object is not modified. The weak reference counter of the original boxed object, if not null, will be decreased before assignment.","title":"Overview"},{"location":"api/class_luna_1_1_weak_obj_ref_1a169c54555e3a8f25622ad3b332a5c660/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_weak_obj_ref_1a169c54555e3a8f25622ad3b332a5c660/#rhs","text":"The reference to move from. This reference will be null after this operation.","title":"rhs"},{"location":"api/class_luna_1_1_weak_obj_ref_1a169c54555e3a8f25622ad3b332a5c660/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/class_luna_1_1_weak_obj_ref_1a1c56e321384fe3edf65345f272d774fc/","text":"Luna::WeakObjRef::get object_t get() const Gets the boxed object. Overview This call does not modify the reference counter of the object. Return value Returns one pointer to the boxed object. Returns nullptr if the reference is null or the boxed object is expired.","title":"Luna::WeakObjRef::get"},{"location":"api/class_luna_1_1_weak_obj_ref_1a1c56e321384fe3edf65345f272d774fc/#lunaweakobjrefget","text":"object_t get() const Gets the boxed object.","title":"Luna::WeakObjRef::get"},{"location":"api/class_luna_1_1_weak_obj_ref_1a1c56e321384fe3edf65345f272d774fc/#overview","text":"This call does not modify the reference counter of the object.","title":"Overview"},{"location":"api/class_luna_1_1_weak_obj_ref_1a1c56e321384fe3edf65345f272d774fc/#return-value","text":"Returns one pointer to the boxed object. Returns nullptr if the reference is null or the boxed object is expired.","title":"Return value"},{"location":"api/class_luna_1_1_weak_obj_ref_1a315419f26d3c59fa143b49b90a019049/","text":"Luna::WeakObjRef::valid bool valid() const Checks whether this reference is valid. Overview One weak reference is valid when it is not null, and the boxed object is not expired. Return value Returns true when the reference is valid. Returns false otherwise.","title":"Luna::WeakObjRef::valid"},{"location":"api/class_luna_1_1_weak_obj_ref_1a315419f26d3c59fa143b49b90a019049/#lunaweakobjrefvalid","text":"bool valid() const Checks whether this reference is valid.","title":"Luna::WeakObjRef::valid"},{"location":"api/class_luna_1_1_weak_obj_ref_1a315419f26d3c59fa143b49b90a019049/#overview","text":"One weak reference is valid when it is not null, and the boxed object is not expired.","title":"Overview"},{"location":"api/class_luna_1_1_weak_obj_ref_1a315419f26d3c59fa143b49b90a019049/#return-value","text":"Returns true when the reference is valid. Returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_weak_obj_ref_1a36466d5931b88276f96fb42bdcb5129c/","text":"Luna::WeakObjRef::WeakObjRef WeakObjRef(const WeakObjRef &rhs) Constructs one reference by coping the pointer from another reference. Overview The weak reference counter of the new boxed object, if not null, will be increased. Parameters rhs The reference to copy from.","title":"Luna::WeakObjRef::WeakObjRef"},{"location":"api/class_luna_1_1_weak_obj_ref_1a36466d5931b88276f96fb42bdcb5129c/#lunaweakobjrefweakobjref","text":"WeakObjRef(const WeakObjRef &rhs) Constructs one reference by coping the pointer from another reference.","title":"Luna::WeakObjRef::WeakObjRef"},{"location":"api/class_luna_1_1_weak_obj_ref_1a36466d5931b88276f96fb42bdcb5129c/#overview","text":"The weak reference counter of the new boxed object, if not null, will be increased.","title":"Overview"},{"location":"api/class_luna_1_1_weak_obj_ref_1a36466d5931b88276f96fb42bdcb5129c/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_weak_obj_ref_1a36466d5931b88276f96fb42bdcb5129c/#rhs","text":"The reference to copy from.","title":"rhs"},{"location":"api/class_luna_1_1_weak_obj_ref_1a67b76affb3b5d35fa419ac234144038b/","text":"Luna::WeakObjRef::operator bool operator bool() const Checks whether this reference is valid. Overview One weak reference is valid when it is not null, and the boxed object is not expired. Return value Returns true when the reference is valid. Returns false otherwise.","title":"Luna::WeakObjRef::operator bool"},{"location":"api/class_luna_1_1_weak_obj_ref_1a67b76affb3b5d35fa419ac234144038b/#lunaweakobjrefoperator-bool","text":"operator bool() const Checks whether this reference is valid.","title":"Luna::WeakObjRef::operator bool"},{"location":"api/class_luna_1_1_weak_obj_ref_1a67b76affb3b5d35fa419ac234144038b/#overview","text":"One weak reference is valid when it is not null, and the boxed object is not expired.","title":"Overview"},{"location":"api/class_luna_1_1_weak_obj_ref_1a67b76affb3b5d35fa419ac234144038b/#return-value","text":"Returns true when the reference is valid. Returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_weak_obj_ref_1a7be0b40dc76fc93f46c2ae9316513142/","text":"Luna::WeakObjRef::attach void attach(object_t ptr) Attaches provided pointer. Overview This call does not modify the reference counter of the new boxed object. The weak reference counter of the original boxed object, if not null, will be decreased before new pointer is attached. Parameters ptr The pointer to attach.","title":"Luna::WeakObjRef::attach"},{"location":"api/class_luna_1_1_weak_obj_ref_1a7be0b40dc76fc93f46c2ae9316513142/#lunaweakobjrefattach","text":"void attach(object_t ptr) Attaches provided pointer.","title":"Luna::WeakObjRef::attach"},{"location":"api/class_luna_1_1_weak_obj_ref_1a7be0b40dc76fc93f46c2ae9316513142/#overview","text":"This call does not modify the reference counter of the new boxed object. The weak reference counter of the original boxed object, if not null, will be decreased before new pointer is attached.","title":"Overview"},{"location":"api/class_luna_1_1_weak_obj_ref_1a7be0b40dc76fc93f46c2ae9316513142/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_weak_obj_ref_1a7be0b40dc76fc93f46c2ae9316513142/#ptr","text":"The pointer to attach.","title":"ptr"},{"location":"api/class_luna_1_1_weak_obj_ref_1a8ae3a46cc5b5e10fa2c6b04818317413/","text":"Luna::WeakObjRef::operator== bool operator==(const WeakObjRef &rhs) const Compares two references for equality. Overview Two references are equal if their underlying pointers are either equal or both invalid. Parameters rhs The reference to compare with. Return value Returns true if two references are equal. Returns false otherwise.","title":"Luna::WeakObjRef::operator=="},{"location":"api/class_luna_1_1_weak_obj_ref_1a8ae3a46cc5b5e10fa2c6b04818317413/#lunaweakobjrefoperator","text":"bool operator==(const WeakObjRef &rhs) const Compares two references for equality.","title":"Luna::WeakObjRef::operator=="},{"location":"api/class_luna_1_1_weak_obj_ref_1a8ae3a46cc5b5e10fa2c6b04818317413/#overview","text":"Two references are equal if their underlying pointers are either equal or both invalid.","title":"Overview"},{"location":"api/class_luna_1_1_weak_obj_ref_1a8ae3a46cc5b5e10fa2c6b04818317413/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_weak_obj_ref_1a8ae3a46cc5b5e10fa2c6b04818317413/#rhs","text":"The reference to compare with.","title":"rhs"},{"location":"api/class_luna_1_1_weak_obj_ref_1a8ae3a46cc5b5e10fa2c6b04818317413/#return-value","text":"Returns true if two references are equal. Returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_weak_obj_ref_1a8b980cb86bd65155f3240b3a00597e6c/","text":"Luna::WeakObjRef::detach object_t detach() Detaches the stored pointer. The reference becomes null after this operation. Overview This operation does not modify the reference counter of the original boxed object. Return value Returns the pointer to the original boxed object. Returns nullptr if the reference is null when this function is called.","title":"Luna::WeakObjRef::detach"},{"location":"api/class_luna_1_1_weak_obj_ref_1a8b980cb86bd65155f3240b3a00597e6c/#lunaweakobjrefdetach","text":"object_t detach() Detaches the stored pointer. The reference becomes null after this operation.","title":"Luna::WeakObjRef::detach"},{"location":"api/class_luna_1_1_weak_obj_ref_1a8b980cb86bd65155f3240b3a00597e6c/#overview","text":"This operation does not modify the reference counter of the original boxed object.","title":"Overview"},{"location":"api/class_luna_1_1_weak_obj_ref_1a8b980cb86bd65155f3240b3a00597e6c/#return-value","text":"Returns the pointer to the original boxed object. Returns nullptr if the reference is null when this function is called.","title":"Return value"},{"location":"api/class_luna_1_1_weak_obj_ref_1a908ad4f960e681b49662883f689e8fb8/","text":"Luna::WeakObjRef::operator= WeakObjRef & operator=(object_t rhs) Replaces the underlying pointer of this reference with the given pointer. Overview The weak reference counter of the new boxed object will be increased if the provided pointer is valid. The weak reference counter of the original boxed object, if not null, will be decreased before assignment. Parameters rhs The pointer to set. Return value Returns *this .","title":"Luna::WeakObjRef::operator="},{"location":"api/class_luna_1_1_weak_obj_ref_1a908ad4f960e681b49662883f689e8fb8/#lunaweakobjrefoperator","text":"WeakObjRef & operator=(object_t rhs) Replaces the underlying pointer of this reference with the given pointer.","title":"Luna::WeakObjRef::operator="},{"location":"api/class_luna_1_1_weak_obj_ref_1a908ad4f960e681b49662883f689e8fb8/#overview","text":"The weak reference counter of the new boxed object will be increased if the provided pointer is valid. The weak reference counter of the original boxed object, if not null, will be decreased before assignment.","title":"Overview"},{"location":"api/class_luna_1_1_weak_obj_ref_1a908ad4f960e681b49662883f689e8fb8/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_weak_obj_ref_1a908ad4f960e681b49662883f689e8fb8/#rhs","text":"The pointer to set.","title":"rhs"},{"location":"api/class_luna_1_1_weak_obj_ref_1a908ad4f960e681b49662883f689e8fb8/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/class_luna_1_1_weak_obj_ref_1a9e1e1a9d41c945724bf81587eda9b60d/","text":"Luna::WeakObjRef::operator!= bool operator!=(const WeakObjRef &rhs) const Compares two references for non-equality. Overview Two references are equal if their underlying pointers are either equal or both invalid. Parameters rhs The reference to compare with. Return value Returns true if two references are not equal. Returns false otherwise.","title":"Luna::WeakObjRef::operator!="},{"location":"api/class_luna_1_1_weak_obj_ref_1a9e1e1a9d41c945724bf81587eda9b60d/#lunaweakobjrefoperator","text":"bool operator!=(const WeakObjRef &rhs) const Compares two references for non-equality.","title":"Luna::WeakObjRef::operator!="},{"location":"api/class_luna_1_1_weak_obj_ref_1a9e1e1a9d41c945724bf81587eda9b60d/#overview","text":"Two references are equal if their underlying pointers are either equal or both invalid.","title":"Overview"},{"location":"api/class_luna_1_1_weak_obj_ref_1a9e1e1a9d41c945724bf81587eda9b60d/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_weak_obj_ref_1a9e1e1a9d41c945724bf81587eda9b60d/#rhs","text":"The reference to compare with.","title":"rhs"},{"location":"api/class_luna_1_1_weak_obj_ref_1a9e1e1a9d41c945724bf81587eda9b60d/#return-value","text":"Returns true if two references are not equal. Returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_weak_obj_ref_1aa26b6268bdd12d66947b7ae6c0c61028/","text":"Luna::WeakObjRef::WeakObjRef WeakObjRef(const ObjRef &rhs) Constructs one weak reference from one strong reference. Overview The weak reference counter of the new boxed object, if not null, will be increased. Parameters rhs The reference to set.","title":"Luna::WeakObjRef::WeakObjRef"},{"location":"api/class_luna_1_1_weak_obj_ref_1aa26b6268bdd12d66947b7ae6c0c61028/#lunaweakobjrefweakobjref","text":"WeakObjRef(const ObjRef &rhs) Constructs one weak reference from one strong reference.","title":"Luna::WeakObjRef::WeakObjRef"},{"location":"api/class_luna_1_1_weak_obj_ref_1aa26b6268bdd12d66947b7ae6c0c61028/#overview","text":"The weak reference counter of the new boxed object, if not null, will be increased.","title":"Overview"},{"location":"api/class_luna_1_1_weak_obj_ref_1aa26b6268bdd12d66947b7ae6c0c61028/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_weak_obj_ref_1aa26b6268bdd12d66947b7ae6c0c61028/#rhs","text":"The reference to set.","title":"rhs"},{"location":"api/class_luna_1_1_weak_obj_ref_1aa33ac6a09f5c20c7c708544a9f914f09/","text":"Luna::WeakObjRef::operator= WeakObjRef & operator=(const WeakObjRef &rhs) Assigns this reference by coping the pointer from another reference. Overview The weak reference counter of the new boxed object, if not null, will be increased. The weak reference counter of the original boxed object, if not null, will be decreased before assignment. Parameters rhs The reference to copy from. Return value Returns *this .","title":"Luna::WeakObjRef::operator="},{"location":"api/class_luna_1_1_weak_obj_ref_1aa33ac6a09f5c20c7c708544a9f914f09/#lunaweakobjrefoperator","text":"WeakObjRef & operator=(const WeakObjRef &rhs) Assigns this reference by coping the pointer from another reference.","title":"Luna::WeakObjRef::operator="},{"location":"api/class_luna_1_1_weak_obj_ref_1aa33ac6a09f5c20c7c708544a9f914f09/#overview","text":"The weak reference counter of the new boxed object, if not null, will be increased. The weak reference counter of the original boxed object, if not null, will be decreased before assignment.","title":"Overview"},{"location":"api/class_luna_1_1_weak_obj_ref_1aa33ac6a09f5c20c7c708544a9f914f09/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_weak_obj_ref_1aa33ac6a09f5c20c7c708544a9f914f09/#rhs","text":"The reference to copy from.","title":"rhs"},{"location":"api/class_luna_1_1_weak_obj_ref_1aa33ac6a09f5c20c7c708544a9f914f09/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/class_luna_1_1_weak_obj_ref_1ab364b38c62c8ab3f1d76767f6e233da0/","text":"Luna::WeakObjRef::WeakObjRef WeakObjRef(WeakObjRef &&rhs) Constructs one reference by moving the pointer from another reference. Overview The weak reference counter of the new boxed object is not modified. Parameters rhs The reference to move from. This reference will be null after this operation.","title":"Luna::WeakObjRef::WeakObjRef"},{"location":"api/class_luna_1_1_weak_obj_ref_1ab364b38c62c8ab3f1d76767f6e233da0/#lunaweakobjrefweakobjref","text":"WeakObjRef(WeakObjRef &&rhs) Constructs one reference by moving the pointer from another reference.","title":"Luna::WeakObjRef::WeakObjRef"},{"location":"api/class_luna_1_1_weak_obj_ref_1ab364b38c62c8ab3f1d76767f6e233da0/#overview","text":"The weak reference counter of the new boxed object is not modified.","title":"Overview"},{"location":"api/class_luna_1_1_weak_obj_ref_1ab364b38c62c8ab3f1d76767f6e233da0/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_weak_obj_ref_1ab364b38c62c8ab3f1d76767f6e233da0/#rhs","text":"The reference to move from. This reference will be null after this operation.","title":"rhs"},{"location":"api/class_luna_1_1_weak_obj_ref_1ad20897c5c8bd47f5d4005989bead0e55/","text":"Luna::WeakObjRef::reset void reset() Resets the reference to null. Overview This function decreases the weak reference counter of the boxed object before resetting the reference. If this reference is null when this function is called, this function does nothing.","title":"Luna::WeakObjRef::reset"},{"location":"api/class_luna_1_1_weak_obj_ref_1ad20897c5c8bd47f5d4005989bead0e55/#lunaweakobjrefreset","text":"void reset() Resets the reference to null.","title":"Luna::WeakObjRef::reset"},{"location":"api/class_luna_1_1_weak_obj_ref_1ad20897c5c8bd47f5d4005989bead0e55/#overview","text":"This function decreases the weak reference counter of the boxed object before resetting the reference. If this reference is null when this function is called, this function does nothing.","title":"Overview"},{"location":"api/class_luna_1_1_weak_obj_ref_1ad3714842385b187235170a18e5bd02f8/","text":"Luna::WeakObjRef::operator< bool operator<(const WeakObjRef &rhs) const Compares two references. Overview The referneces are compared by comparing their underlying pointers after converted to unsigned integers. If the reference is not valid, the converted integer will be 0 . Parameters rhs The reference to compare with. Return value Returns true if this reference is less than the incoming reference. Returns false otherwise.","title":"Luna::WeakObjRef::operator<"},{"location":"api/class_luna_1_1_weak_obj_ref_1ad3714842385b187235170a18e5bd02f8/#lunaweakobjrefoperator","text":"bool operator<(const WeakObjRef &rhs) const Compares two references.","title":"Luna::WeakObjRef::operator&lt;"},{"location":"api/class_luna_1_1_weak_obj_ref_1ad3714842385b187235170a18e5bd02f8/#overview","text":"The referneces are compared by comparing their underlying pointers after converted to unsigned integers. If the reference is not valid, the converted integer will be 0 .","title":"Overview"},{"location":"api/class_luna_1_1_weak_obj_ref_1ad3714842385b187235170a18e5bd02f8/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_weak_obj_ref_1ad3714842385b187235170a18e5bd02f8/#rhs","text":"The reference to compare with.","title":"rhs"},{"location":"api/class_luna_1_1_weak_obj_ref_1ad3714842385b187235170a18e5bd02f8/#return-value","text":"Returns true if this reference is less than the incoming reference. Returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_weak_obj_ref_1ae029dea2956d9779fadbcfa5c55927e3/","text":"Luna::WeakObjRef::operator= WeakObjRef & operator=(const ObjRef &rhs) Assigns this reference by coping the pointer from one strong reference. Overview The weak reference counter of the new boxed object, if not null, will be increased. The weak reference counter of the original boxed object, if not null, will be decreased before assignment. Parameters rhs The reference to set.","title":"Luna::WeakObjRef::operator="},{"location":"api/class_luna_1_1_weak_obj_ref_1ae029dea2956d9779fadbcfa5c55927e3/#lunaweakobjrefoperator","text":"WeakObjRef & operator=(const ObjRef &rhs) Assigns this reference by coping the pointer from one strong reference.","title":"Luna::WeakObjRef::operator="},{"location":"api/class_luna_1_1_weak_obj_ref_1ae029dea2956d9779fadbcfa5c55927e3/#overview","text":"The weak reference counter of the new boxed object, if not null, will be increased. The weak reference counter of the original boxed object, if not null, will be decreased before assignment.","title":"Overview"},{"location":"api/class_luna_1_1_weak_obj_ref_1ae029dea2956d9779fadbcfa5c55927e3/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_weak_obj_ref_1ae029dea2956d9779fadbcfa5c55927e3/#rhs","text":"The reference to set.","title":"rhs"},{"location":"api/class_luna_1_1_weak_obj_ref_1af5b8dbc0845b4ae06e0282238300cc88/","text":"Luna::WeakObjRef::WeakObjRef WeakObjRef() Constructs one null reference.","title":"Luna::WeakObjRef::WeakObjRef"},{"location":"api/class_luna_1_1_weak_obj_ref_1af5b8dbc0845b4ae06e0282238300cc88/#lunaweakobjrefweakobjref","text":"WeakObjRef() Constructs one null reference.","title":"Luna::WeakObjRef::WeakObjRef"},{"location":"api/class_luna_1_1_weak_obj_ref_1af6347ac675db0acd160d0b36e8418dfd/","text":"Luna::WeakObjRef::pin ObjRef pin() const Creates one strong reference from this weak reference. Overview Return value Returns the created strong reference if this weak reference is valid. Returns one null reference if this weak reference is not valid.","title":"Luna::WeakObjRef::pin"},{"location":"api/class_luna_1_1_weak_obj_ref_1af6347ac675db0acd160d0b36e8418dfd/#lunaweakobjrefpin","text":"ObjRef pin() const Creates one strong reference from this weak reference.","title":"Luna::WeakObjRef::pin"},{"location":"api/class_luna_1_1_weak_obj_ref_1af6347ac675db0acd160d0b36e8418dfd/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_weak_obj_ref_1af6347ac675db0acd160d0b36e8418dfd/#return-value","text":"Returns the created strong reference if this weak reference is valid. Returns one null reference if this weak reference is not valid.","title":"Return value"},{"location":"api/class_luna_1_1_weak_ref/","text":"Luna::WeakRef The smart pointer that represents one typed weak reference to one boxed object. class Luna::WeakRef Functions void reset() Resets the reference to null. bool valid() const Checks whether this reference is valid. object_t object() const Gets the boxed object. WeakRef() Constructs one null reference. WeakRef(const WeakRef &rhs) Constructs one reference by coping the pointer from another reference of the same type. WeakRef(WeakRef &&rhs) Constructs one reference by moving the pointer from another reference. WeakRef & operator=(const WeakRef &rhs) Assigns this reference by coping the pointer from another reference of the same type. WeakRef & operator=(WeakRef &&rhs) Assigns this reference by moving the pointer from another reference of the same type. WeakRef(const Ref< _Ty > &rhs) Constructs one weak reference from one strong reference of the same type. WeakRef & operator=(const Ref< _Ty > &rhs) Assigns this reference by coping the pointer from one strong reference of the same type. bool operator==(const WeakRef &rhs) const Compares two references for equality. bool operator!=(const WeakRef &rhs) const Compares two references for non-equality. bool operator<(const WeakRef &rhs) const Compares two references. operator bool() const Checks whether this reference is valid. Ref< _Ty > pin() const Creates one strong reference from this weak reference.","title":"Luna::WeakRef"},{"location":"api/class_luna_1_1_weak_ref/#lunaweakref","text":"The smart pointer that represents one typed weak reference to one boxed object. class Luna::WeakRef","title":"Luna::WeakRef"},{"location":"api/class_luna_1_1_weak_ref/#functions","text":"void reset() Resets the reference to null. bool valid() const Checks whether this reference is valid. object_t object() const Gets the boxed object. WeakRef() Constructs one null reference. WeakRef(const WeakRef &rhs) Constructs one reference by coping the pointer from another reference of the same type. WeakRef(WeakRef &&rhs) Constructs one reference by moving the pointer from another reference. WeakRef & operator=(const WeakRef &rhs) Assigns this reference by coping the pointer from another reference of the same type. WeakRef & operator=(WeakRef &&rhs) Assigns this reference by moving the pointer from another reference of the same type. WeakRef(const Ref< _Ty > &rhs) Constructs one weak reference from one strong reference of the same type. WeakRef & operator=(const Ref< _Ty > &rhs) Assigns this reference by coping the pointer from one strong reference of the same type. bool operator==(const WeakRef &rhs) const Compares two references for equality. bool operator!=(const WeakRef &rhs) const Compares two references for non-equality. bool operator<(const WeakRef &rhs) const Compares two references. operator bool() const Checks whether this reference is valid. Ref< _Ty > pin() const Creates one strong reference from this weak reference.","title":"Functions"},{"location":"api/class_luna_1_1_weak_ref_1a0e25e45b431942b3b6b3b3b264d4c423/","text":"Luna::WeakRef::operator== bool operator==(const WeakRef &rhs) const Compares two references for equality. Overview Two references are equal if their underlying pointers are either equal or both invalid. Parameters rhs The reference to compare with. Return value Returns true if two references are equal. Returns false otherwise.","title":"Luna::WeakRef::operator=="},{"location":"api/class_luna_1_1_weak_ref_1a0e25e45b431942b3b6b3b3b264d4c423/#lunaweakrefoperator","text":"bool operator==(const WeakRef &rhs) const Compares two references for equality.","title":"Luna::WeakRef::operator=="},{"location":"api/class_luna_1_1_weak_ref_1a0e25e45b431942b3b6b3b3b264d4c423/#overview","text":"Two references are equal if their underlying pointers are either equal or both invalid.","title":"Overview"},{"location":"api/class_luna_1_1_weak_ref_1a0e25e45b431942b3b6b3b3b264d4c423/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_weak_ref_1a0e25e45b431942b3b6b3b3b264d4c423/#rhs","text":"The reference to compare with.","title":"rhs"},{"location":"api/class_luna_1_1_weak_ref_1a0e25e45b431942b3b6b3b3b264d4c423/#return-value","text":"Returns true if two references are equal. Returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_weak_ref_1a315419f26d3c59fa143b49b90a019049/","text":"Luna::WeakRef::valid bool valid() const Checks whether this reference is valid. Overview One weak reference is valid when it is not null, and the boxed object is not expired. Return value Returns true when the reference is valid. Returns false otherwise.","title":"Luna::WeakRef::valid"},{"location":"api/class_luna_1_1_weak_ref_1a315419f26d3c59fa143b49b90a019049/#lunaweakrefvalid","text":"bool valid() const Checks whether this reference is valid.","title":"Luna::WeakRef::valid"},{"location":"api/class_luna_1_1_weak_ref_1a315419f26d3c59fa143b49b90a019049/#overview","text":"One weak reference is valid when it is not null, and the boxed object is not expired.","title":"Overview"},{"location":"api/class_luna_1_1_weak_ref_1a315419f26d3c59fa143b49b90a019049/#return-value","text":"Returns true when the reference is valid. Returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_weak_ref_1a5f1661fef3e84060b69b0166f65b35ab/","text":"Luna::WeakRef::operator< bool operator<(const WeakRef &rhs) const Compares two references. Overview The referneces are compared by comparing their underlying pointers after converted to unsigned integers. If the reference is not valid, the converted integer will be 0 . Parameters rhs The reference to compare with. Return value Returns true if this reference is less than the incoming reference. Returns false otherwise.","title":"Luna::WeakRef::operator<"},{"location":"api/class_luna_1_1_weak_ref_1a5f1661fef3e84060b69b0166f65b35ab/#lunaweakrefoperator","text":"bool operator<(const WeakRef &rhs) const Compares two references.","title":"Luna::WeakRef::operator&lt;"},{"location":"api/class_luna_1_1_weak_ref_1a5f1661fef3e84060b69b0166f65b35ab/#overview","text":"The referneces are compared by comparing their underlying pointers after converted to unsigned integers. If the reference is not valid, the converted integer will be 0 .","title":"Overview"},{"location":"api/class_luna_1_1_weak_ref_1a5f1661fef3e84060b69b0166f65b35ab/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_weak_ref_1a5f1661fef3e84060b69b0166f65b35ab/#rhs","text":"The reference to compare with.","title":"rhs"},{"location":"api/class_luna_1_1_weak_ref_1a5f1661fef3e84060b69b0166f65b35ab/#return-value","text":"Returns true if this reference is less than the incoming reference. Returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_weak_ref_1a67b76affb3b5d35fa419ac234144038b/","text":"Luna::WeakRef::operator bool operator bool() const Checks whether this reference is valid. Overview One weak reference is valid when it is not null, and the boxed object is not expired. Return value Returns true when the reference is valid. Returns false otherwise.","title":"Luna::WeakRef::operator bool"},{"location":"api/class_luna_1_1_weak_ref_1a67b76affb3b5d35fa419ac234144038b/#lunaweakrefoperator-bool","text":"operator bool() const Checks whether this reference is valid.","title":"Luna::WeakRef::operator bool"},{"location":"api/class_luna_1_1_weak_ref_1a67b76affb3b5d35fa419ac234144038b/#overview","text":"One weak reference is valid when it is not null, and the boxed object is not expired.","title":"Overview"},{"location":"api/class_luna_1_1_weak_ref_1a67b76affb3b5d35fa419ac234144038b/#return-value","text":"Returns true when the reference is valid. Returns false otherwise.","title":"Return value"},{"location":"api/class_luna_1_1_weak_ref_1a6aa90ee83e8f7fe220ce9206c4d53ef3/","text":"Luna::WeakRef::WeakRef WeakRef(const WeakRef &rhs) Constructs one reference by coping the pointer from another reference of the same type. Overview The weak reference counter of the new boxed object, if not null, will be increased. Parameters rhs The reference to copy from.","title":"Luna::WeakRef::WeakRef"},{"location":"api/class_luna_1_1_weak_ref_1a6aa90ee83e8f7fe220ce9206c4d53ef3/#lunaweakrefweakref","text":"WeakRef(const WeakRef &rhs) Constructs one reference by coping the pointer from another reference of the same type.","title":"Luna::WeakRef::WeakRef"},{"location":"api/class_luna_1_1_weak_ref_1a6aa90ee83e8f7fe220ce9206c4d53ef3/#overview","text":"The weak reference counter of the new boxed object, if not null, will be increased.","title":"Overview"},{"location":"api/class_luna_1_1_weak_ref_1a6aa90ee83e8f7fe220ce9206c4d53ef3/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_weak_ref_1a6aa90ee83e8f7fe220ce9206c4d53ef3/#rhs","text":"The reference to copy from.","title":"rhs"},{"location":"api/class_luna_1_1_weak_ref_1a702244fb6dc28ced79f38c2f9f0a4448/","text":"Luna::WeakRef::WeakRef WeakRef(const Ref< _Ty > &rhs) Constructs one weak reference from one strong reference of the same type. Overview The weak reference counter of the new boxed object, if not null, will be increased. Parameters rhs The reference to set.","title":"Luna::WeakRef::WeakRef"},{"location":"api/class_luna_1_1_weak_ref_1a702244fb6dc28ced79f38c2f9f0a4448/#lunaweakrefweakref","text":"WeakRef(const Ref< _Ty > &rhs) Constructs one weak reference from one strong reference of the same type.","title":"Luna::WeakRef::WeakRef"},{"location":"api/class_luna_1_1_weak_ref_1a702244fb6dc28ced79f38c2f9f0a4448/#overview","text":"The weak reference counter of the new boxed object, if not null, will be increased.","title":"Overview"},{"location":"api/class_luna_1_1_weak_ref_1a702244fb6dc28ced79f38c2f9f0a4448/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_weak_ref_1a702244fb6dc28ced79f38c2f9f0a4448/#rhs","text":"The reference to set.","title":"rhs"},{"location":"api/class_luna_1_1_weak_ref_1a7f87b543b6961a11c59e71670e03633e/","text":"Luna::WeakRef::WeakRef WeakRef(WeakRef &&rhs) Constructs one reference by moving the pointer from another reference. Overview The weak reference counter of the new boxed object is not modified. Parameters rhs The reference to move from. This reference will be null after this operation.","title":"Luna::WeakRef::WeakRef"},{"location":"api/class_luna_1_1_weak_ref_1a7f87b543b6961a11c59e71670e03633e/#lunaweakrefweakref","text":"WeakRef(WeakRef &&rhs) Constructs one reference by moving the pointer from another reference.","title":"Luna::WeakRef::WeakRef"},{"location":"api/class_luna_1_1_weak_ref_1a7f87b543b6961a11c59e71670e03633e/#overview","text":"The weak reference counter of the new boxed object is not modified.","title":"Overview"},{"location":"api/class_luna_1_1_weak_ref_1a7f87b543b6961a11c59e71670e03633e/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_weak_ref_1a7f87b543b6961a11c59e71670e03633e/#rhs","text":"The reference to move from. This reference will be null after this operation.","title":"rhs"},{"location":"api/class_luna_1_1_weak_ref_1a931d441cb2ce42d1b99a4f27191f86f6/","text":"Luna::WeakRef::WeakRef WeakRef() Constructs one null reference.","title":"Luna::WeakRef::WeakRef"},{"location":"api/class_luna_1_1_weak_ref_1a931d441cb2ce42d1b99a4f27191f86f6/#lunaweakrefweakref","text":"WeakRef() Constructs one null reference.","title":"Luna::WeakRef::WeakRef"},{"location":"api/class_luna_1_1_weak_ref_1a9f6be6ccd380471b4f72cac3553ecd24/","text":"Luna::WeakRef::operator= WeakRef & operator=(const WeakRef &rhs) Assigns this reference by coping the pointer from another reference of the same type. Overview The weak reference counter of the new boxed object, if not null, will be increased. The weak reference counter of the original boxed object, if not null, will be decreased before assignment. Parameters rhs The reference to copy from. Return value Returns *this .","title":"Luna::WeakRef::operator="},{"location":"api/class_luna_1_1_weak_ref_1a9f6be6ccd380471b4f72cac3553ecd24/#lunaweakrefoperator","text":"WeakRef & operator=(const WeakRef &rhs) Assigns this reference by coping the pointer from another reference of the same type.","title":"Luna::WeakRef::operator="},{"location":"api/class_luna_1_1_weak_ref_1a9f6be6ccd380471b4f72cac3553ecd24/#overview","text":"The weak reference counter of the new boxed object, if not null, will be increased. The weak reference counter of the original boxed object, if not null, will be decreased before assignment.","title":"Overview"},{"location":"api/class_luna_1_1_weak_ref_1a9f6be6ccd380471b4f72cac3553ecd24/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_weak_ref_1a9f6be6ccd380471b4f72cac3553ecd24/#rhs","text":"The reference to copy from.","title":"rhs"},{"location":"api/class_luna_1_1_weak_ref_1a9f6be6ccd380471b4f72cac3553ecd24/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/class_luna_1_1_weak_ref_1aa35fe176621b16279c1bde6c9f242af5/","text":"Luna::WeakRef::object object_t object() const Gets the boxed object. Overview This call does not modify the reference counter of the object. Return value Returns one pointer to the boxed object. Returns nullptr if the reference is null or the boxed object is expired.","title":"Luna::WeakRef::object"},{"location":"api/class_luna_1_1_weak_ref_1aa35fe176621b16279c1bde6c9f242af5/#lunaweakrefobject","text":"object_t object() const Gets the boxed object.","title":"Luna::WeakRef::object"},{"location":"api/class_luna_1_1_weak_ref_1aa35fe176621b16279c1bde6c9f242af5/#overview","text":"This call does not modify the reference counter of the object.","title":"Overview"},{"location":"api/class_luna_1_1_weak_ref_1aa35fe176621b16279c1bde6c9f242af5/#return-value","text":"Returns one pointer to the boxed object. Returns nullptr if the reference is null or the boxed object is expired.","title":"Return value"},{"location":"api/class_luna_1_1_weak_ref_1aaaf46c2b360fbb282e6d5704f02fb7e7/","text":"Luna::WeakRef::pin Ref< _Ty > pin() const Creates one strong reference from this weak reference. Overview Return value Returns the created strong reference if this weak reference is valid. Returns one null reference if this weak reference is not valid.","title":"Luna::WeakRef::pin"},{"location":"api/class_luna_1_1_weak_ref_1aaaf46c2b360fbb282e6d5704f02fb7e7/#lunaweakrefpin","text":"Ref< _Ty > pin() const Creates one strong reference from this weak reference.","title":"Luna::WeakRef::pin"},{"location":"api/class_luna_1_1_weak_ref_1aaaf46c2b360fbb282e6d5704f02fb7e7/#overview","text":"","title":"Overview"},{"location":"api/class_luna_1_1_weak_ref_1aaaf46c2b360fbb282e6d5704f02fb7e7/#return-value","text":"Returns the created strong reference if this weak reference is valid. Returns one null reference if this weak reference is not valid.","title":"Return value"},{"location":"api/class_luna_1_1_weak_ref_1ab24b03c6da517e2d7a81783441fc0ce8/","text":"Luna::WeakRef::operator= WeakRef & operator=(WeakRef &&rhs) Assigns this reference by moving the pointer from another reference of the same type. Overview The reference counter of the new boxed object is not modified. The weak reference counter of the original boxed object, if not null, will be decreased before assignment. Parameters rhs The reference to move from. This reference will be null after this operation. Return value Returns *this .","title":"Luna::WeakRef::operator="},{"location":"api/class_luna_1_1_weak_ref_1ab24b03c6da517e2d7a81783441fc0ce8/#lunaweakrefoperator","text":"WeakRef & operator=(WeakRef &&rhs) Assigns this reference by moving the pointer from another reference of the same type.","title":"Luna::WeakRef::operator="},{"location":"api/class_luna_1_1_weak_ref_1ab24b03c6da517e2d7a81783441fc0ce8/#overview","text":"The reference counter of the new boxed object is not modified. The weak reference counter of the original boxed object, if not null, will be decreased before assignment.","title":"Overview"},{"location":"api/class_luna_1_1_weak_ref_1ab24b03c6da517e2d7a81783441fc0ce8/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_weak_ref_1ab24b03c6da517e2d7a81783441fc0ce8/#rhs","text":"The reference to move from. This reference will be null after this operation.","title":"rhs"},{"location":"api/class_luna_1_1_weak_ref_1ab24b03c6da517e2d7a81783441fc0ce8/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/class_luna_1_1_weak_ref_1ab65fb1011f2337038338956e8a0c75d4/","text":"Luna::WeakRef::operator= WeakRef & operator=(const Ref< _Ty > &rhs) Assigns this reference by coping the pointer from one strong reference of the same type. Overview The weak reference counter of the new boxed object, if not null, will be increased. The weak reference counter of the original boxed object, if not null, will be decreased before assignment. Parameters rhs The reference to set.","title":"Luna::WeakRef::operator="},{"location":"api/class_luna_1_1_weak_ref_1ab65fb1011f2337038338956e8a0c75d4/#lunaweakrefoperator","text":"WeakRef & operator=(const Ref< _Ty > &rhs) Assigns this reference by coping the pointer from one strong reference of the same type.","title":"Luna::WeakRef::operator="},{"location":"api/class_luna_1_1_weak_ref_1ab65fb1011f2337038338956e8a0c75d4/#overview","text":"The weak reference counter of the new boxed object, if not null, will be increased. The weak reference counter of the original boxed object, if not null, will be decreased before assignment.","title":"Overview"},{"location":"api/class_luna_1_1_weak_ref_1ab65fb1011f2337038338956e8a0c75d4/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_weak_ref_1ab65fb1011f2337038338956e8a0c75d4/#rhs","text":"The reference to set.","title":"rhs"},{"location":"api/class_luna_1_1_weak_ref_1ad20897c5c8bd47f5d4005989bead0e55/","text":"Luna::WeakRef::reset void reset() Resets the reference to null. Overview This function decreases the weak reference counter of the boxed object before resetting the reference. If this reference is null when this function is called, this function does nothing.","title":"Luna::WeakRef::reset"},{"location":"api/class_luna_1_1_weak_ref_1ad20897c5c8bd47f5d4005989bead0e55/#lunaweakrefreset","text":"void reset() Resets the reference to null.","title":"Luna::WeakRef::reset"},{"location":"api/class_luna_1_1_weak_ref_1ad20897c5c8bd47f5d4005989bead0e55/#overview","text":"This function decreases the weak reference counter of the boxed object before resetting the reference. If this reference is null when this function is called, this function does nothing.","title":"Overview"},{"location":"api/class_luna_1_1_weak_ref_1afb9da8b47f78ad237089422c75f65edf/","text":"Luna::WeakRef::operator!= bool operator!=(const WeakRef &rhs) const Compares two references for non-equality. Overview Two references are equal if their underlying pointers are either equal or both invalid. Parameters rhs The reference to compare with. Return value Returns true if two references are not equal. Returns false otherwise.","title":"Luna::WeakRef::operator!="},{"location":"api/class_luna_1_1_weak_ref_1afb9da8b47f78ad237089422c75f65edf/#lunaweakrefoperator","text":"bool operator!=(const WeakRef &rhs) const Compares two references for non-equality.","title":"Luna::WeakRef::operator!="},{"location":"api/class_luna_1_1_weak_ref_1afb9da8b47f78ad237089422c75f65edf/#overview","text":"Two references are equal if their underlying pointers are either equal or both invalid.","title":"Overview"},{"location":"api/class_luna_1_1_weak_ref_1afb9da8b47f78ad237089422c75f65edf/#parameters","text":"","title":"Parameters"},{"location":"api/class_luna_1_1_weak_ref_1afb9da8b47f78ad237089422c75f65edf/#rhs","text":"The reference to compare with.","title":"rhs"},{"location":"api/class_luna_1_1_weak_ref_1afb9da8b47f78ad237089422c75f65edf/#return-value","text":"Returns true if two references are not equal. Returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_1ga090e14ab721404d80f4404634d5c79cc/","text":"Luna::i8 using i8 = std::int8_t Signed 8-bit integer (-128~127).","title":"Luna::i8"},{"location":"api/group___runtime_1ga090e14ab721404d80f4404634d5c79cc/#lunai8","text":"using i8 = std::int8_t Signed 8-bit integer (-128~127).","title":"Luna::i8"},{"location":"api/group___runtime_1ga1d45eaaf0075f53ddcda26ad3a960faf/","text":"Luna::opaque_t using opaque_t = void* Overview opaque_t is used to represent one opaque pointer that shall not be reinterpreted or dereferred by the user. opaque_t are ususally used as arguments or returns values of interface functions to hide the implementation from the user.","title":"Luna::opaque_t"},{"location":"api/group___runtime_1ga1d45eaaf0075f53ddcda26ad3a960faf/#lunaopaque_t","text":"using opaque_t = void*","title":"Luna::opaque_t"},{"location":"api/group___runtime_1ga1d45eaaf0075f53ddcda26ad3a960faf/#overview","text":"opaque_t is used to represent one opaque pointer that shall not be reinterpreted or dereferred by the user. opaque_t are ususally used as arguments or returns values of interface functions to hide the implementation from the user.","title":"Overview"},{"location":"api/group___runtime_1ga254d32383658e016368673396e7afc1b/","text":"Luna::u8 using u8 = std::uint8_t Unsigned 8-bit integer (0~255).","title":"Luna::u8"},{"location":"api/group___runtime_1ga254d32383658e016368673396e7afc1b/#lunau8","text":"using u8 = std::uint8_t Unsigned 8-bit integer (0~255).","title":"Luna::u8"},{"location":"api/group___runtime_1ga3eab7cd933798dde3a66eb98069ea222/","text":"Luna::prev template <typename _BidirIt> _BidirIt prev(_BidirIt it, isize n=1) Gets one iterator pointing to the last n th element of the element pointed by the input iterator. Overview Parameters it The base iterator. n The position relative to the base iterator. Return value Returns the iterator pointing to the last n th element of the element pointed by the input iterator.","title":"Luna::prev"},{"location":"api/group___runtime_1ga3eab7cd933798dde3a66eb98069ea222/#lunaprev","text":"template <typename _BidirIt> _BidirIt prev(_BidirIt it, isize n=1) Gets one iterator pointing to the last n th element of the element pointed by the input iterator.","title":"Luna::prev"},{"location":"api/group___runtime_1ga3eab7cd933798dde3a66eb98069ea222/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_1ga3eab7cd933798dde3a66eb98069ea222/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_1ga3eab7cd933798dde3a66eb98069ea222/#it","text":"The base iterator.","title":"it"},{"location":"api/group___runtime_1ga3eab7cd933798dde3a66eb98069ea222/#n","text":"The position relative to the base iterator.","title":"n"},{"location":"api/group___runtime_1ga3eab7cd933798dde3a66eb98069ea222/#return-value","text":"Returns the iterator pointing to the last n th element of the element pointed by the input iterator.","title":"Return value"},{"location":"api/group___runtime_1ga47d3dca6512d0867b2a4126b4643756c/","text":"Luna::c8 using c8 = char 8-bit character. Signed/unsigned is unspecified, cast this to u8/i8 for fetching number.","title":"Luna::c8"},{"location":"api/group___runtime_1ga47d3dca6512d0867b2a4126b4643756c/#lunac8","text":"using c8 = char 8-bit character. Signed/unsigned is unspecified, cast this to u8/i8 for fetching number.","title":"Luna::c8"},{"location":"api/group___runtime_1ga4e2d965044b1d306278d256d980423fd/","text":"Luna::next template <typename _Iter> _Iter next(_Iter it, isize n=1) Gets one iterator pointing to the next n th element of the element pointed by the input iterator. Overview Parameters it The base iterator. n The position relative to the base iterator. Return value Returns the iterator pointing to the next n th element of the element pointed by the input iterator.","title":"Luna::next"},{"location":"api/group___runtime_1ga4e2d965044b1d306278d256d980423fd/#lunanext","text":"template <typename _Iter> _Iter next(_Iter it, isize n=1) Gets one iterator pointing to the next n th element of the element pointed by the input iterator.","title":"Luna::next"},{"location":"api/group___runtime_1ga4e2d965044b1d306278d256d980423fd/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_1ga4e2d965044b1d306278d256d980423fd/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_1ga4e2d965044b1d306278d256d980423fd/#it","text":"The base iterator.","title":"it"},{"location":"api/group___runtime_1ga4e2d965044b1d306278d256d980423fd/#n","text":"The position relative to the base iterator.","title":"n"},{"location":"api/group___runtime_1ga4e2d965044b1d306278d256d980423fd/#return-value","text":"Returns the iterator pointing to the next n th element of the element pointed by the input iterator.","title":"Return value"},{"location":"api/group___runtime_1ga50c94d018de369c551742772ae62d6c9/","text":"Luna::c32 using c32 = char32_t 32-bit character. Signed/unsigned is unspecified, cast this to u32/i32 for fetching number.","title":"Luna::c32"},{"location":"api/group___runtime_1ga50c94d018de369c551742772ae62d6c9/#lunac32","text":"using c32 = char32_t 32-bit character. Signed/unsigned is unspecified, cast this to u32/i32 for fetching number.","title":"Luna::c32"},{"location":"api/group___runtime_1ga65cf28726f89e62ccf2f1354bc2716df/","text":"Luna::u32 using u32 = std::uint32_t Unsigned 32-bit integer (0~4294967295).","title":"Luna::u32"},{"location":"api/group___runtime_1ga65cf28726f89e62ccf2f1354bc2716df/#lunau32","text":"using u32 = std::uint32_t Unsigned 32-bit integer (0~4294967295).","title":"Luna::u32"},{"location":"api/group___runtime_1ga66e1d499241ccae9a18a20a1f4f0590d/","text":"Luna::u64 using u64 = std::uint64_t Unsigned 64-bit integer (0~18446744073709551615).","title":"Luna::u64"},{"location":"api/group___runtime_1ga66e1d499241ccae9a18a20a1f4f0590d/#lunau64","text":"using u64 = std::uint64_t Unsigned 64-bit integer (0~18446744073709551615).","title":"Luna::u64"},{"location":"api/group___runtime_1ga6b613b9a6a5376f4ae5ea90d14d310ed/","text":"Luna::reset_flags template <typename _Ty> constexpr auto reset_flags(_Ty &flags, _Ty options) -> enable_if_t< is_enum_v< _Ty >, void > Resets the provided enumeration options to 0. Overview Parameters flags The flag variable to reset. options The options to set to 0.","title":"Luna::reset_flags"},{"location":"api/group___runtime_1ga6b613b9a6a5376f4ae5ea90d14d310ed/#lunareset_flags","text":"template <typename _Ty> constexpr auto reset_flags(_Ty &flags, _Ty options) -> enable_if_t< is_enum_v< _Ty >, void > Resets the provided enumeration options to 0.","title":"Luna::reset_flags"},{"location":"api/group___runtime_1ga6b613b9a6a5376f4ae5ea90d14d310ed/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_1ga6b613b9a6a5376f4ae5ea90d14d310ed/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_1ga6b613b9a6a5376f4ae5ea90d14d310ed/#flags","text":"The flag variable to reset.","title":"flags"},{"location":"api/group___runtime_1ga6b613b9a6a5376f4ae5ea90d14d310ed/#options","text":"The options to set to 0.","title":"options"},{"location":"api/group___runtime_1ga7b29db1791dc9e52d93ada17d953ed6d/","text":"Luna::nullptr_t using nullptr_t = std::nullptr_t Overview usize is the unsigned integer type of whose length marches the machine architecture. In particular, in 32-bit application, this is 32-bit unsigned integer; in 64-bit application, this is 64-bit unsigned integer. The usize type is guaranteed to be large enough to store a indexable memory address, so that any pointer can be reinterpreted casted to usize . isize is similar to usize , but is a signed integer type, so this can be used to store the result of subtracting two pointers, and can be used to offset memory addresses and pointers.","title":"Luna::nullptr_t"},{"location":"api/group___runtime_1ga7b29db1791dc9e52d93ada17d953ed6d/#lunanullptr_t","text":"using nullptr_t = std::nullptr_t","title":"Luna::nullptr_t"},{"location":"api/group___runtime_1ga7b29db1791dc9e52d93ada17d953ed6d/#overview","text":"usize is the unsigned integer type of whose length marches the machine architecture. In particular, in 32-bit application, this is 32-bit unsigned integer; in 64-bit application, this is 64-bit unsigned integer. The usize type is guaranteed to be large enough to store a indexable memory address, so that any pointer can be reinterpreted casted to usize . isize is similar to usize , but is a signed integer type, so this can be used to store the result of subtracting two pointers, and can be used to offset memory addresses and pointers.","title":"Overview"},{"location":"api/group___runtime_1ga7f4ce9f18bca2ab726b2c13925d13797/","text":"Luna::set_flags template <typename _Ty> constexpr auto set_flags(_Ty &flags, _Ty options) -> enable_if_t< is_enum_v< _Ty >, void > Sets the provided enumeration options to 1. Overview Parameters flags The flag variable to set. options The options to set to 1.","title":"Luna::set_flags"},{"location":"api/group___runtime_1ga7f4ce9f18bca2ab726b2c13925d13797/#lunaset_flags","text":"template <typename _Ty> constexpr auto set_flags(_Ty &flags, _Ty options) -> enable_if_t< is_enum_v< _Ty >, void > Sets the provided enumeration options to 1.","title":"Luna::set_flags"},{"location":"api/group___runtime_1ga7f4ce9f18bca2ab726b2c13925d13797/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_1ga7f4ce9f18bca2ab726b2c13925d13797/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_1ga7f4ce9f18bca2ab726b2c13925d13797/#flags","text":"The flag variable to set.","title":"flags"},{"location":"api/group___runtime_1ga7f4ce9f18bca2ab726b2c13925d13797/#options","text":"The options to set to 1.","title":"options"},{"location":"api/group___runtime_1ga8199bae21a87e395af52aaa6a96dd16c/","text":"Luna::test_flags template <typename _Ty> constexpr auto test_flags(_Ty flags, _Ty options) -> enable_if_t< is_enum_v< _Ty >, bool > Tests if the provided enumeration contains the specified enumeration option. Overview Parameters flags The flags to test. options A combination of flags to test. Return value Returns true if all flags in the options combination are set in flags , returns false otherwise.","title":"Luna::test_flags"},{"location":"api/group___runtime_1ga8199bae21a87e395af52aaa6a96dd16c/#lunatest_flags","text":"template <typename _Ty> constexpr auto test_flags(_Ty flags, _Ty options) -> enable_if_t< is_enum_v< _Ty >, bool > Tests if the provided enumeration contains the specified enumeration option.","title":"Luna::test_flags"},{"location":"api/group___runtime_1ga8199bae21a87e395af52aaa6a96dd16c/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_1ga8199bae21a87e395af52aaa6a96dd16c/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_1ga8199bae21a87e395af52aaa6a96dd16c/#flags","text":"The flags to test.","title":"flags"},{"location":"api/group___runtime_1ga8199bae21a87e395af52aaa6a96dd16c/#options","text":"A combination of flags to test.","title":"options"},{"location":"api/group___runtime_1ga8199bae21a87e395af52aaa6a96dd16c/#return-value","text":"Returns true if all flags in the options combination are set in flags , returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_1ga917e58b0692c2df778a27350534cbfe7/","text":"Luna::u16 using u16 = std::uint16_t Unsigned 16-bit integer (0~65535).","title":"Luna::u16"},{"location":"api/group___runtime_1ga917e58b0692c2df778a27350534cbfe7/#lunau16","text":"using u16 = std::uint16_t Unsigned 16-bit integer (0~65535).","title":"Luna::u16"},{"location":"api/group___runtime_1ga9ffa672f4edd97e1402ea85d169de3aa/","text":"Luna::box_ptr template <typename _Ty> Ref< _Ty > box_ptr(_Ty *obj) Creates a strong reference from one raw pointer without modifing its reference count. Overview Parameters obj The raw pointer. Return value Returns the strong reference created from the raw pointer.","title":"Luna::box_ptr"},{"location":"api/group___runtime_1ga9ffa672f4edd97e1402ea85d169de3aa/#lunabox_ptr","text":"template <typename _Ty> Ref< _Ty > box_ptr(_Ty *obj) Creates a strong reference from one raw pointer without modifing its reference count.","title":"Luna::box_ptr"},{"location":"api/group___runtime_1ga9ffa672f4edd97e1402ea85d169de3aa/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_1ga9ffa672f4edd97e1402ea85d169de3aa/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_1ga9ffa672f4edd97e1402ea85d169de3aa/#obj","text":"The raw pointer.","title":"obj"},{"location":"api/group___runtime_1ga9ffa672f4edd97e1402ea85d169de3aa/#return-value","text":"Returns the strong reference created from the raw pointer.","title":"Return value"},{"location":"api/group___runtime_1gaa7e539a91bc5a8e68c91db8d2d8a9c23/","text":"Luna::new_object template <typename _Ty, typename...> Ref< _Ty > new_object(_Args &&... args) Creates one new boxed object. Overview This function uses object_alloc to allocate one new boxed object, then use placement new operator to initialize the object. Parameters args The arguments to construct the new boxed object. Return value Returns one strong reference to the new boxed object.","title":"Luna::new_object"},{"location":"api/group___runtime_1gaa7e539a91bc5a8e68c91db8d2d8a9c23/#lunanew_object","text":"template <typename _Ty, typename...> Ref< _Ty > new_object(_Args &&... args) Creates one new boxed object.","title":"Luna::new_object"},{"location":"api/group___runtime_1gaa7e539a91bc5a8e68c91db8d2d8a9c23/#overview","text":"This function uses object_alloc to allocate one new boxed object, then use placement new operator to initialize the object.","title":"Overview"},{"location":"api/group___runtime_1gaa7e539a91bc5a8e68c91db8d2d8a9c23/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_1gaa7e539a91bc5a8e68c91db8d2d8a9c23/#args","text":"The arguments to construct the new boxed object.","title":"args"},{"location":"api/group___runtime_1gaa7e539a91bc5a8e68c91db8d2d8a9c23/#return-value","text":"Returns one strong reference to the new boxed object.","title":"Return value"},{"location":"api/group___runtime_1gaa9061c03e78b5c69a2e90542f956b1b9/","text":"Luna::i16 using i16 = std::int16_t Signed 16-bit integer (-32768~32767).","title":"Luna::i16"},{"location":"api/group___runtime_1gaa9061c03e78b5c69a2e90542f956b1b9/#lunai16","text":"using i16 = std::int16_t Signed 16-bit integer (-32768~32767).","title":"Luna::i16"},{"location":"api/group___runtime_1gaac1fbcf6f355341ea568024167e570fe/","text":"Luna::byte_t using byte_t = u8 Overview An alias of u8 that represents one byte. You may use this type to differentiate the concept of byte stream (byte_t ) from number array (u8 ).","title":"Luna::byte_t"},{"location":"api/group___runtime_1gaac1fbcf6f355341ea568024167e570fe/#lunabyte_t","text":"using byte_t = u8","title":"Luna::byte_t"},{"location":"api/group___runtime_1gaac1fbcf6f355341ea568024167e570fe/#overview","text":"An alias of u8 that represents one byte. You may use this type to differentiate the concept of byte stream (byte_t ) from number array (u8 ).","title":"Overview"},{"location":"api/group___runtime_1gab53d4c159697d19e8fda0a022d611150/","text":"Luna::make_reverse_iterator template <typename _Iter> constexpr ReverseIterator< _Iter > make_reverse_iterator(_Iter i) Creates one reverse iterator from one iterator. Overview Parameters i The base iterator to create reverse iterator for. Return value Returns the created reverse iterator.","title":"Luna::make_reverse_iterator"},{"location":"api/group___runtime_1gab53d4c159697d19e8fda0a022d611150/#lunamake_reverse_iterator","text":"template <typename _Iter> constexpr ReverseIterator< _Iter > make_reverse_iterator(_Iter i) Creates one reverse iterator from one iterator.","title":"Luna::make_reverse_iterator"},{"location":"api/group___runtime_1gab53d4c159697d19e8fda0a022d611150/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_1gab53d4c159697d19e8fda0a022d611150/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_1gab53d4c159697d19e8fda0a022d611150/#i","text":"The base iterator to create reverse iterator for.","title":"i"},{"location":"api/group___runtime_1gab53d4c159697d19e8fda0a022d611150/#return-value","text":"Returns the created reverse iterator.","title":"Return value"},{"location":"api/group___runtime_1gabc2f107791bd7c1d49ecf0f168c085a3/","text":"Luna::f64 using f64 = double 64-bit (double precision) floating point number.","title":"Luna::f64"},{"location":"api/group___runtime_1gabc2f107791bd7c1d49ecf0f168c085a3/#lunaf64","text":"using f64 = double 64-bit (double precision) floating point number.","title":"Luna::f64"},{"location":"api/group___runtime_1gac68b8f40b00545b7c1772fa01931e3c1/","text":"Luna::c16 using c16 = char16_t 16-bit character. Signed/unsigned is unspecified, cast this to u16/i16 for fetching number.","title":"Luna::c16"},{"location":"api/group___runtime_1gac68b8f40b00545b7c1772fa01931e3c1/#lunac16","text":"using c16 = char16_t 16-bit character. Signed/unsigned is unspecified, cast this to u16/i16 for fetching number.","title":"Luna::c16"},{"location":"api/group___runtime_1gac769aef9bea2b465a9437c25ac6ac9ac/","text":"Luna::invoke_r template <typename _Return, typename _Func, typename...> _Return invoke_r(_Func &&f, _Args &&... args) Invokes the specified callable object. Overview Parameters f The callable object to invoke. arg1 The first argument passed to the callable object. args The rest arguments passed to the callable object. Return value Returns the return value of the callable object, implicitly converted to _Return , if _Return is not void. None otherwise.","title":"Luna::invoke_r"},{"location":"api/group___runtime_1gac769aef9bea2b465a9437c25ac6ac9ac/#lunainvoke_r","text":"template <typename _Return, typename _Func, typename...> _Return invoke_r(_Func &&f, _Args &&... args) Invokes the specified callable object.","title":"Luna::invoke_r"},{"location":"api/group___runtime_1gac769aef9bea2b465a9437c25ac6ac9ac/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_1gac769aef9bea2b465a9437c25ac6ac9ac/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_1gac769aef9bea2b465a9437c25ac6ac9ac/#f","text":"The callable object to invoke.","title":"f"},{"location":"api/group___runtime_1gac769aef9bea2b465a9437c25ac6ac9ac/#arg1","text":"The first argument passed to the callable object.","title":"arg1"},{"location":"api/group___runtime_1gac769aef9bea2b465a9437c25ac6ac9ac/#args","text":"The rest arguments passed to the callable object.","title":"args"},{"location":"api/group___runtime_1gac769aef9bea2b465a9437c25ac6ac9ac/#return-value","text":"Returns the return value of the callable object, implicitly converted to _Return , if _Return is not void. None otherwise.","title":"Return value"},{"location":"api/group___runtime_1gacceb07c8bab688f75ae3207dea30f02e/","text":"Luna::distance template <typename _It> isize distance(_It first, _It last) Gets the number of elements between two iterators. Overview Parameters first The iterator pointing to the first element. last The iterator pointing to the one-past-last element.","title":"Luna::distance"},{"location":"api/group___runtime_1gacceb07c8bab688f75ae3207dea30f02e/#lunadistance","text":"template <typename _It> isize distance(_It first, _It last) Gets the number of elements between two iterators.","title":"Luna::distance"},{"location":"api/group___runtime_1gacceb07c8bab688f75ae3207dea30f02e/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_1gacceb07c8bab688f75ae3207dea30f02e/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_1gacceb07c8bab688f75ae3207dea30f02e/#first","text":"The iterator pointing to the first element.","title":"first"},{"location":"api/group___runtime_1gacceb07c8bab688f75ae3207dea30f02e/#last","text":"The iterator pointing to the one-past-last element.","title":"last"},{"location":"api/group___runtime_1gad34d88453d37b65a09797bad37f2f527/","text":"Luna::f32 using f32 = float 32-bit (single precision) floating point number.","title":"Luna::f32"},{"location":"api/group___runtime_1gad34d88453d37b65a09797bad37f2f527/#lunaf32","text":"using f32 = float 32-bit (single precision) floating point number.","title":"Luna::f32"},{"location":"api/group___runtime_1gadb531c46cbcfc8f24d9d859afe3cd61c/","text":"Luna::set_flags template <typename _Ty> constexpr auto set_flags(_Ty flags, _Ty options, bool value) -> enable_if_t< is_enum_v< _Ty >, _Ty > Sets the provided enumeration options to 1 or 0 based on the value provided. Overview Parameters flags The original flags before set. options The options to set to 1 or 0. value If this is true , all options specified will be set to 1, else they will be set to 0. Return value Returns the enumeration after all options specified being set.","title":"Luna::set_flags"},{"location":"api/group___runtime_1gadb531c46cbcfc8f24d9d859afe3cd61c/#lunaset_flags","text":"template <typename _Ty> constexpr auto set_flags(_Ty flags, _Ty options, bool value) -> enable_if_t< is_enum_v< _Ty >, _Ty > Sets the provided enumeration options to 1 or 0 based on the value provided.","title":"Luna::set_flags"},{"location":"api/group___runtime_1gadb531c46cbcfc8f24d9d859afe3cd61c/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_1gadb531c46cbcfc8f24d9d859afe3cd61c/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_1gadb531c46cbcfc8f24d9d859afe3cd61c/#flags","text":"The original flags before set.","title":"flags"},{"location":"api/group___runtime_1gadb531c46cbcfc8f24d9d859afe3cd61c/#options","text":"The options to set to 1 or 0.","title":"options"},{"location":"api/group___runtime_1gadb531c46cbcfc8f24d9d859afe3cd61c/#value","text":"If this is true , all options specified will be set to 1, else they will be set to 0.","title":"value"},{"location":"api/group___runtime_1gadb531c46cbcfc8f24d9d859afe3cd61c/#return-value","text":"Returns the enumeration after all options specified being set.","title":"Return value"},{"location":"api/group___runtime_1gae72e52134285dbd83ca4227ec77394a2/","text":"Luna::i64 using i64 = std::int64_t Signed 64-bit integer (-9223372036854775808~9223372036854775807).","title":"Luna::i64"},{"location":"api/group___runtime_1gae72e52134285dbd83ca4227ec77394a2/#lunai64","text":"using i64 = std::int64_t Signed 64-bit integer (-9223372036854775808~9223372036854775807).","title":"Luna::i64"},{"location":"api/group___runtime_1gaeb004dafbae757b1fe66452065ae8739/","text":"Luna::advance template <typename _Iter, typename _Distance> void advance(_Iter &it, _Distance n) Advances the given iterator by n positions respectively. Overview Parameters it The iterator to advance. n The position to advance relative to the current position.","title":"Luna::advance"},{"location":"api/group___runtime_1gaeb004dafbae757b1fe66452065ae8739/#lunaadvance","text":"template <typename _Iter, typename _Distance> void advance(_Iter &it, _Distance n) Advances the given iterator by n positions respectively.","title":"Luna::advance"},{"location":"api/group___runtime_1gaeb004dafbae757b1fe66452065ae8739/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_1gaeb004dafbae757b1fe66452065ae8739/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_1gaeb004dafbae757b1fe66452065ae8739/#it","text":"The iterator to advance.","title":"it"},{"location":"api/group___runtime_1gaeb004dafbae757b1fe66452065ae8739/#n","text":"The position to advance relative to the current position.","title":"n"},{"location":"api/group___runtime_1gaec4a1429cc91fb7ff41599b263c348cc/","text":"Luna::i32 using i32 = std::int32_t Signed 32-bit integer (-2147482648~2147483647).","title":"Luna::i32"},{"location":"api/group___runtime_1gaec4a1429cc91fb7ff41599b263c348cc/#lunai32","text":"using i32 = std::int32_t Signed 32-bit integer (-2147482648~2147483647).","title":"Luna::i32"},{"location":"api/group___runtime_1gaf7411fc1e4c76b86c6f6b69eeb62b704/","text":"Luna::invoke template <typename _Func> auto invoke(_Func &&f) -> decltype(static_cast< _Func && >(f)()) Invokes the specified callable object. Overview Parameters f The callable object to invoke. Return value Returns the return value of the callable object.","title":"Luna::invoke"},{"location":"api/group___runtime_1gaf7411fc1e4c76b86c6f6b69eeb62b704/#lunainvoke","text":"template <typename _Func> auto invoke(_Func &&f) -> decltype(static_cast< _Func && >(f)()) Invokes the specified callable object.","title":"Luna::invoke"},{"location":"api/group___runtime_1gaf7411fc1e4c76b86c6f6b69eeb62b704/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_1gaf7411fc1e4c76b86c6f6b69eeb62b704/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_1gaf7411fc1e4c76b86c6f6b69eeb62b704/#f","text":"The callable object to invoke.","title":"f"},{"location":"api/group___runtime_1gaf7411fc1e4c76b86c6f6b69eeb62b704/#return-value","text":"Returns the return value of the callable object.","title":"Return value"},{"location":"api/group___runtime_1gaf7a93152ce0e85bc60d65da9d62c0ca7/","text":"Luna::invoke template <typename _Func, typename _Ty, typename...> auto invoke(_Func &&f, _Ty &&arg1, _Args &&... args) -> invoke_result_t< _Func, _Ty, _Args... > Invokes the specified callable object. Overview Parameters f The callable object to invoke. arg1 The first argument passed to the callable object. args The rest arguments passed to the callable object. Return value Returns the return value of the callable object.","title":"Luna::invoke"},{"location":"api/group___runtime_1gaf7a93152ce0e85bc60d65da9d62c0ca7/#lunainvoke","text":"template <typename _Func, typename _Ty, typename...> auto invoke(_Func &&f, _Ty &&arg1, _Args &&... args) -> invoke_result_t< _Func, _Ty, _Args... > Invokes the specified callable object.","title":"Luna::invoke"},{"location":"api/group___runtime_1gaf7a93152ce0e85bc60d65da9d62c0ca7/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_1gaf7a93152ce0e85bc60d65da9d62c0ca7/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_1gaf7a93152ce0e85bc60d65da9d62c0ca7/#f","text":"The callable object to invoke.","title":"f"},{"location":"api/group___runtime_1gaf7a93152ce0e85bc60d65da9d62c0ca7/#arg1","text":"The first argument passed to the callable object.","title":"arg1"},{"location":"api/group___runtime_1gaf7a93152ce0e85bc60d65da9d62c0ca7/#args","text":"The rest arguments passed to the callable object.","title":"args"},{"location":"api/group___runtime_1gaf7a93152ce0e85bc60d65da9d62c0ca7/#return-value","text":"Returns the return value of the callable object.","title":"Return value"},{"location":"api/group___runtime_algorithm_1ga0391eb9b8b2b28284c625b1e51f02813/","text":"Luna::equal template <typename _Iter1, typename _Iter2, typename _EqualComp> bool equal(_Iter1 first1, _Iter1 last1, _Iter2 first2, _EqualComp equal_compare) Tests the equality of two ranges. Overview Parameters first1 The iterator pointing to the first element of the first range. last1 The iterator pointing to the one-past-last element of the first range. first2 The iterator pointing to the first element of the second range. equal_compare The user-defined equal (==) comparison function used for comparing. Return value Returns true if two ranges are equal, returns false otherwise.","title":"Luna::equal"},{"location":"api/group___runtime_algorithm_1ga0391eb9b8b2b28284c625b1e51f02813/#lunaequal","text":"template <typename _Iter1, typename _Iter2, typename _EqualComp> bool equal(_Iter1 first1, _Iter1 last1, _Iter2 first2, _EqualComp equal_compare) Tests the equality of two ranges.","title":"Luna::equal"},{"location":"api/group___runtime_algorithm_1ga0391eb9b8b2b28284c625b1e51f02813/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1ga0391eb9b8b2b28284c625b1e51f02813/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1ga0391eb9b8b2b28284c625b1e51f02813/#first1","text":"The iterator pointing to the first element of the first range.","title":"first1"},{"location":"api/group___runtime_algorithm_1ga0391eb9b8b2b28284c625b1e51f02813/#last1","text":"The iterator pointing to the one-past-last element of the first range.","title":"last1"},{"location":"api/group___runtime_algorithm_1ga0391eb9b8b2b28284c625b1e51f02813/#first2","text":"The iterator pointing to the first element of the second range.","title":"first2"},{"location":"api/group___runtime_algorithm_1ga0391eb9b8b2b28284c625b1e51f02813/#equal_compare","text":"The user-defined equal (==) comparison function used for comparing.","title":"equal_compare"},{"location":"api/group___runtime_algorithm_1ga0391eb9b8b2b28284c625b1e51f02813/#return-value","text":"Returns true if two ranges are equal, returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_algorithm_1ga0ad37076ea35bbf85db8b16099e57f5a/","text":"Luna::binary_search_iter template <typename _ForwardIt, typename _Ty, typename _Compare> _ForwardIt binary_search_iter(_ForwardIt first, _ForwardIt last, const _Ty &value, _Compare comp) Finds an element equivalent to the specified value in the range. Overview Parameters first The iterator pointing to the first element of the range. last The iterator pointing to the one-past-last element of the range. value The value to compare elements to. comp The user-provided binary predicate which returns \u200btrue if the first argument is less than the second. Return value Returns an iterator pointing to the found element. If multiple equivalent elements exist in the range, returns the first one. Returns last if not found. Valid Usage Elements in the range specified by [ first , last ) must be sorted in non-descending order. comp must have the following function signature: bool comp(const Type& a, const Type& b) , where Type is the value type of _ForwardIt .","title":"Luna::binary_search_iter"},{"location":"api/group___runtime_algorithm_1ga0ad37076ea35bbf85db8b16099e57f5a/#lunabinary_search_iter","text":"template <typename _ForwardIt, typename _Ty, typename _Compare> _ForwardIt binary_search_iter(_ForwardIt first, _ForwardIt last, const _Ty &value, _Compare comp) Finds an element equivalent to the specified value in the range.","title":"Luna::binary_search_iter"},{"location":"api/group___runtime_algorithm_1ga0ad37076ea35bbf85db8b16099e57f5a/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1ga0ad37076ea35bbf85db8b16099e57f5a/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1ga0ad37076ea35bbf85db8b16099e57f5a/#first","text":"The iterator pointing to the first element of the range.","title":"first"},{"location":"api/group___runtime_algorithm_1ga0ad37076ea35bbf85db8b16099e57f5a/#last","text":"The iterator pointing to the one-past-last element of the range.","title":"last"},{"location":"api/group___runtime_algorithm_1ga0ad37076ea35bbf85db8b16099e57f5a/#value","text":"The value to compare elements to.","title":"value"},{"location":"api/group___runtime_algorithm_1ga0ad37076ea35bbf85db8b16099e57f5a/#comp","text":"The user-provided binary predicate which returns \u200btrue if the first argument is less than the second.","title":"comp"},{"location":"api/group___runtime_algorithm_1ga0ad37076ea35bbf85db8b16099e57f5a/#return-value","text":"Returns an iterator pointing to the found element. If multiple equivalent elements exist in the range, returns the first one. Returns last if not found.","title":"Return value"},{"location":"api/group___runtime_algorithm_1ga0ad37076ea35bbf85db8b16099e57f5a/#valid-usage","text":"Elements in the range specified by [ first , last ) must be sorted in non-descending order. comp must have the following function signature: bool comp(const Type& a, const Type& b) , where Type is the value type of _ForwardIt .","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1ga147659ad95276a9b14825c4c2452bce6/","text":"Luna::min template <typename _Ty> constexpr const _Ty & min(const _Ty &a, const _Ty &b) Returns the smaller of the given values. Overview Parameters a The first value to compare. b The second value to compare. Return value Returns the smaller of the given values. Returns a if values are equivalent.","title":"Luna::min"},{"location":"api/group___runtime_algorithm_1ga147659ad95276a9b14825c4c2452bce6/#lunamin","text":"template <typename _Ty> constexpr const _Ty & min(const _Ty &a, const _Ty &b) Returns the smaller of the given values.","title":"Luna::min"},{"location":"api/group___runtime_algorithm_1ga147659ad95276a9b14825c4c2452bce6/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1ga147659ad95276a9b14825c4c2452bce6/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1ga147659ad95276a9b14825c4c2452bce6/#a","text":"The first value to compare.","title":"a"},{"location":"api/group___runtime_algorithm_1ga147659ad95276a9b14825c4c2452bce6/#b","text":"The second value to compare.","title":"b"},{"location":"api/group___runtime_algorithm_1ga147659ad95276a9b14825c4c2452bce6/#return-value","text":"Returns the smaller of the given values. Returns a if values are equivalent.","title":"Return value"},{"location":"api/group___runtime_algorithm_1ga1f8fc6922e9b20976056dec2d59b89cc/","text":"Luna::upper_bound template <typename _ForwardIt, typename _Ty> _ForwardIt upper_bound(_ForwardIt first, _ForwardIt last, const _Ty &value) Finds the first element in the range such that value < element is true . Overview Parameters first The iterator pointing to the first element of the range. last The iterator pointing to the one-past-last element of the range. value The value to compare elements to. Return value Returns an iterator pointing to the first element in the range such that value < element is true , or last if no such element is found. Valid Usage Elements in the range specified by [ first , last ) must be sorted in non-descending order.","title":"Luna::upper_bound"},{"location":"api/group___runtime_algorithm_1ga1f8fc6922e9b20976056dec2d59b89cc/#lunaupper_bound","text":"template <typename _ForwardIt, typename _Ty> _ForwardIt upper_bound(_ForwardIt first, _ForwardIt last, const _Ty &value) Finds the first element in the range such that value < element is true .","title":"Luna::upper_bound"},{"location":"api/group___runtime_algorithm_1ga1f8fc6922e9b20976056dec2d59b89cc/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1ga1f8fc6922e9b20976056dec2d59b89cc/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1ga1f8fc6922e9b20976056dec2d59b89cc/#first","text":"The iterator pointing to the first element of the range.","title":"first"},{"location":"api/group___runtime_algorithm_1ga1f8fc6922e9b20976056dec2d59b89cc/#last","text":"The iterator pointing to the one-past-last element of the range.","title":"last"},{"location":"api/group___runtime_algorithm_1ga1f8fc6922e9b20976056dec2d59b89cc/#value","text":"The value to compare elements to.","title":"value"},{"location":"api/group___runtime_algorithm_1ga1f8fc6922e9b20976056dec2d59b89cc/#return-value","text":"Returns an iterator pointing to the first element in the range such that value < element is true , or last if no such element is found.","title":"Return value"},{"location":"api/group___runtime_algorithm_1ga1f8fc6922e9b20976056dec2d59b89cc/#valid-usage","text":"Elements in the range specified by [ first , last ) must be sorted in non-descending order.","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1ga3a8ea741d7e44683b3f90bf71fced6fa/","text":"Luna::min template <typename _Ty, typename _LessComp> constexpr const _Ty & min(const _Ty &a, const _Ty &b, _LessComp less_comp) Returns the smaller of the given values. Overview Parameters a The first value to compare. b The second value to compare. less_comp The user-defined less (<) comparison function used for comparing. Return value Returns the smaller of the given values. Returns a if values are equivalent.","title":"Luna::min"},{"location":"api/group___runtime_algorithm_1ga3a8ea741d7e44683b3f90bf71fced6fa/#lunamin","text":"template <typename _Ty, typename _LessComp> constexpr const _Ty & min(const _Ty &a, const _Ty &b, _LessComp less_comp) Returns the smaller of the given values.","title":"Luna::min"},{"location":"api/group___runtime_algorithm_1ga3a8ea741d7e44683b3f90bf71fced6fa/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1ga3a8ea741d7e44683b3f90bf71fced6fa/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1ga3a8ea741d7e44683b3f90bf71fced6fa/#a","text":"The first value to compare.","title":"a"},{"location":"api/group___runtime_algorithm_1ga3a8ea741d7e44683b3f90bf71fced6fa/#b","text":"The second value to compare.","title":"b"},{"location":"api/group___runtime_algorithm_1ga3a8ea741d7e44683b3f90bf71fced6fa/#less_comp","text":"The user-defined less (<) comparison function used for comparing.","title":"less_comp"},{"location":"api/group___runtime_algorithm_1ga3a8ea741d7e44683b3f90bf71fced6fa/#return-value","text":"Returns the smaller of the given values. Returns a if values are equivalent.","title":"Return value"},{"location":"api/group___runtime_algorithm_1ga44f147d1f9a010b109bf59872d327e38/","text":"Luna::max template <typename _Ty> constexpr const _Ty & max(const _Ty &a, const _Ty &b) Returns the greater of the given values. Overview Parameters a The first value to compare. b The second value to compare. Return value Returns the greater of the given values. Returns a if values are equivalent.","title":"Luna::max"},{"location":"api/group___runtime_algorithm_1ga44f147d1f9a010b109bf59872d327e38/#lunamax","text":"template <typename _Ty> constexpr const _Ty & max(const _Ty &a, const _Ty &b) Returns the greater of the given values.","title":"Luna::max"},{"location":"api/group___runtime_algorithm_1ga44f147d1f9a010b109bf59872d327e38/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1ga44f147d1f9a010b109bf59872d327e38/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1ga44f147d1f9a010b109bf59872d327e38/#a","text":"The first value to compare.","title":"a"},{"location":"api/group___runtime_algorithm_1ga44f147d1f9a010b109bf59872d327e38/#b","text":"The second value to compare.","title":"b"},{"location":"api/group___runtime_algorithm_1ga44f147d1f9a010b109bf59872d327e38/#return-value","text":"Returns the greater of the given values. Returns a if values are equivalent.","title":"Return value"},{"location":"api/group___runtime_algorithm_1ga4902d63e5b5d907172734ff3ec4a2adf/","text":"Luna::set_symmetric_difference template <typename _InputIt1, typename _InputIt2, typename _OutputIt> _OutputIt set_symmetric_difference(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first) Computes symmetric difference of two sorted ranges: elements that are found in either of the ranges, but not in both of them are copied to the destination range. The destination range is also sorted. Overview Parameters first1 The iterator pointing to the first element of the first range. last1 The iterator pointing to the one-past-last element of the first range. first2 The iterator pointing to the first element of the second range. last2 The iterator pointing to the one-past-last element of the second range. d_first The iterator pointing to the first element of the destination range. Return value Returns one iterator pointing to the one-past-last element of the destination range. Valid Usage Elements in the ranges specified by [ first1 , last1 ) and [ first2 , last2 ) must be sorted in non-descending order.","title":"Luna::set_symmetric_difference"},{"location":"api/group___runtime_algorithm_1ga4902d63e5b5d907172734ff3ec4a2adf/#lunaset_symmetric_difference","text":"template <typename _InputIt1, typename _InputIt2, typename _OutputIt> _OutputIt set_symmetric_difference(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first) Computes symmetric difference of two sorted ranges: elements that are found in either of the ranges, but not in both of them are copied to the destination range. The destination range is also sorted.","title":"Luna::set_symmetric_difference"},{"location":"api/group___runtime_algorithm_1ga4902d63e5b5d907172734ff3ec4a2adf/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1ga4902d63e5b5d907172734ff3ec4a2adf/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1ga4902d63e5b5d907172734ff3ec4a2adf/#first1","text":"The iterator pointing to the first element of the first range.","title":"first1"},{"location":"api/group___runtime_algorithm_1ga4902d63e5b5d907172734ff3ec4a2adf/#last1","text":"The iterator pointing to the one-past-last element of the first range.","title":"last1"},{"location":"api/group___runtime_algorithm_1ga4902d63e5b5d907172734ff3ec4a2adf/#first2","text":"The iterator pointing to the first element of the second range.","title":"first2"},{"location":"api/group___runtime_algorithm_1ga4902d63e5b5d907172734ff3ec4a2adf/#last2","text":"The iterator pointing to the one-past-last element of the second range.","title":"last2"},{"location":"api/group___runtime_algorithm_1ga4902d63e5b5d907172734ff3ec4a2adf/#d_first","text":"The iterator pointing to the first element of the destination range.","title":"d_first"},{"location":"api/group___runtime_algorithm_1ga4902d63e5b5d907172734ff3ec4a2adf/#return-value","text":"Returns one iterator pointing to the one-past-last element of the destination range.","title":"Return value"},{"location":"api/group___runtime_algorithm_1ga4902d63e5b5d907172734ff3ec4a2adf/#valid-usage","text":"Elements in the ranges specified by [ first1 , last1 ) and [ first2 , last2 ) must be sorted in non-descending order.","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1ga4d6ea50d77bcca151eae75c7e9f5e9ff/","text":"Luna::any_of template <typename _InputIt, typename _UnaryPredicate> constexpr bool any_of(_InputIt first, _InputIt last, _UnaryPredicate p) Checks if the unary predicate returns true for at least one element in the range. Overview Parameters first The iterator pointing to the first element of the range. last The iterator pointing to the one-past-last element of the range. p The user-provided unary predicate which will be called to test elements. Return value Returns ture if the unary predicate returns true for at least one element in the range. Returns false otherwise. Valid Usage The expression p(v) must be convertible to bool for every argument v of type VT , where VT is the value type of _InputIt , and must not modify v .","title":"Luna::any_of"},{"location":"api/group___runtime_algorithm_1ga4d6ea50d77bcca151eae75c7e9f5e9ff/#lunaany_of","text":"template <typename _InputIt, typename _UnaryPredicate> constexpr bool any_of(_InputIt first, _InputIt last, _UnaryPredicate p) Checks if the unary predicate returns true for at least one element in the range.","title":"Luna::any_of"},{"location":"api/group___runtime_algorithm_1ga4d6ea50d77bcca151eae75c7e9f5e9ff/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1ga4d6ea50d77bcca151eae75c7e9f5e9ff/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1ga4d6ea50d77bcca151eae75c7e9f5e9ff/#first","text":"The iterator pointing to the first element of the range.","title":"first"},{"location":"api/group___runtime_algorithm_1ga4d6ea50d77bcca151eae75c7e9f5e9ff/#last","text":"The iterator pointing to the one-past-last element of the range.","title":"last"},{"location":"api/group___runtime_algorithm_1ga4d6ea50d77bcca151eae75c7e9f5e9ff/#p","text":"The user-provided unary predicate which will be called to test elements.","title":"p"},{"location":"api/group___runtime_algorithm_1ga4d6ea50d77bcca151eae75c7e9f5e9ff/#return-value","text":"Returns ture if the unary predicate returns true for at least one element in the range. Returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_algorithm_1ga4d6ea50d77bcca151eae75c7e9f5e9ff/#valid-usage","text":"The expression p(v) must be convertible to bool for every argument v of type VT , where VT is the value type of _InputIt , and must not modify v .","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1ga52881ea0d7864b4201d5c34a9f65e975/","text":"Luna::set_union template <typename _InputIt1, typename _InputIt2, typename _OutputIt> _OutputIt set_union(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first) Constructs a sorted union beginning at the destination range consisting of the set of elements present in one or both sorted ranges. Overview Parameters first1 The iterator pointing to the first element of the first range. last1 The iterator pointing to the one-past-last element of the first range. first2 The iterator pointing to the first element of the second range. last2 The iterator pointing to the one-past-last element of the second range. d_first The iterator pointing to the first element of the destination range. Valid Usage Elements in the ranges specified by [ first1 , last1 ) and [ first2 , last2 ) must be sorted in non-descending order.","title":"Luna::set_union"},{"location":"api/group___runtime_algorithm_1ga52881ea0d7864b4201d5c34a9f65e975/#lunaset_union","text":"template <typename _InputIt1, typename _InputIt2, typename _OutputIt> _OutputIt set_union(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first) Constructs a sorted union beginning at the destination range consisting of the set of elements present in one or both sorted ranges.","title":"Luna::set_union"},{"location":"api/group___runtime_algorithm_1ga52881ea0d7864b4201d5c34a9f65e975/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1ga52881ea0d7864b4201d5c34a9f65e975/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1ga52881ea0d7864b4201d5c34a9f65e975/#first1","text":"The iterator pointing to the first element of the first range.","title":"first1"},{"location":"api/group___runtime_algorithm_1ga52881ea0d7864b4201d5c34a9f65e975/#last1","text":"The iterator pointing to the one-past-last element of the first range.","title":"last1"},{"location":"api/group___runtime_algorithm_1ga52881ea0d7864b4201d5c34a9f65e975/#first2","text":"The iterator pointing to the first element of the second range.","title":"first2"},{"location":"api/group___runtime_algorithm_1ga52881ea0d7864b4201d5c34a9f65e975/#last2","text":"The iterator pointing to the one-past-last element of the second range.","title":"last2"},{"location":"api/group___runtime_algorithm_1ga52881ea0d7864b4201d5c34a9f65e975/#d_first","text":"The iterator pointing to the first element of the destination range.","title":"d_first"},{"location":"api/group___runtime_algorithm_1ga52881ea0d7864b4201d5c34a9f65e975/#valid-usage","text":"Elements in the ranges specified by [ first1 , last1 ) and [ first2 , last2 ) must be sorted in non-descending order.","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1ga53e062c1f9ef3170e738a71ea756a7bd/","text":"Luna::equal_range template <typename _ForwardIt, typename _Ty> Pair< _ForwardIt, _ForwardIt > equal_range(_ForwardIt first, _ForwardIt last, const _Ty &value) Gets a range containing all elements equivalent to the specified value in the range. Overview Parameters first The iterator pointing to the first element of the range. last The iterator pointing to the one-past-last element of the range. value The value to compare elements to. Return value Returns a pair of iterators pointing to the begin and end of the range. The first iterator points to the first element of the range, the second iterator points to the one-past-last element of the range. If the specified element is not found in the range, returns one pair of iterators that are equal to each other. Valid Usage Elements in the range specified by [ first , last ) must be sorted in non-descending order.","title":"Luna::equal_range"},{"location":"api/group___runtime_algorithm_1ga53e062c1f9ef3170e738a71ea756a7bd/#lunaequal_range","text":"template <typename _ForwardIt, typename _Ty> Pair< _ForwardIt, _ForwardIt > equal_range(_ForwardIt first, _ForwardIt last, const _Ty &value) Gets a range containing all elements equivalent to the specified value in the range.","title":"Luna::equal_range"},{"location":"api/group___runtime_algorithm_1ga53e062c1f9ef3170e738a71ea756a7bd/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1ga53e062c1f9ef3170e738a71ea756a7bd/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1ga53e062c1f9ef3170e738a71ea756a7bd/#first","text":"The iterator pointing to the first element of the range.","title":"first"},{"location":"api/group___runtime_algorithm_1ga53e062c1f9ef3170e738a71ea756a7bd/#last","text":"The iterator pointing to the one-past-last element of the range.","title":"last"},{"location":"api/group___runtime_algorithm_1ga53e062c1f9ef3170e738a71ea756a7bd/#value","text":"The value to compare elements to.","title":"value"},{"location":"api/group___runtime_algorithm_1ga53e062c1f9ef3170e738a71ea756a7bd/#return-value","text":"Returns a pair of iterators pointing to the begin and end of the range. The first iterator points to the first element of the range, the second iterator points to the one-past-last element of the range. If the specified element is not found in the range, returns one pair of iterators that are equal to each other.","title":"Return value"},{"location":"api/group___runtime_algorithm_1ga53e062c1f9ef3170e738a71ea756a7bd/#valid-usage","text":"Elements in the range specified by [ first , last ) must be sorted in non-descending order.","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1ga556703289c68c3e7548657f42807a9a3/","text":"Luna::set_symmetric_difference template <typename _InputIt1, typename _InputIt2, typename _OutputIt, typename _Compare> _OutputIt set_symmetric_difference(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first, _Compare comp) Computes symmetric difference of two sorted ranges: elements that are found in either of the ranges, but not in both of them are copied to the destination range. The destination range is also sorted. Overview Parameters first1 The iterator pointing to the first element of the first range. last1 The iterator pointing to the one-past-last element of the first range. first2 The iterator pointing to the first element of the second range. last2 The iterator pointing to the one-past-last element of the second range. d_first The iterator pointing to the first element of the destination range. comp The user-provided binary predicate which returns \u200btrue if the first argument is less than the second. Return value Returns one iterator pointing to the one-past-last element of the destination range. Valid Usage Elements in the ranges specified by [ first1 , last1 ) and [ first2 , last2 ) must be sorted in non-descending order. comp must have the following function signature: bool comp(const Type& a, const Type& b) , where Type is the value type of both _InputIt1 and _InputIt2 .","title":"Luna::set_symmetric_difference"},{"location":"api/group___runtime_algorithm_1ga556703289c68c3e7548657f42807a9a3/#lunaset_symmetric_difference","text":"template <typename _InputIt1, typename _InputIt2, typename _OutputIt, typename _Compare> _OutputIt set_symmetric_difference(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first, _Compare comp) Computes symmetric difference of two sorted ranges: elements that are found in either of the ranges, but not in both of them are copied to the destination range. The destination range is also sorted.","title":"Luna::set_symmetric_difference"},{"location":"api/group___runtime_algorithm_1ga556703289c68c3e7548657f42807a9a3/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1ga556703289c68c3e7548657f42807a9a3/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1ga556703289c68c3e7548657f42807a9a3/#first1","text":"The iterator pointing to the first element of the first range.","title":"first1"},{"location":"api/group___runtime_algorithm_1ga556703289c68c3e7548657f42807a9a3/#last1","text":"The iterator pointing to the one-past-last element of the first range.","title":"last1"},{"location":"api/group___runtime_algorithm_1ga556703289c68c3e7548657f42807a9a3/#first2","text":"The iterator pointing to the first element of the second range.","title":"first2"},{"location":"api/group___runtime_algorithm_1ga556703289c68c3e7548657f42807a9a3/#last2","text":"The iterator pointing to the one-past-last element of the second range.","title":"last2"},{"location":"api/group___runtime_algorithm_1ga556703289c68c3e7548657f42807a9a3/#d_first","text":"The iterator pointing to the first element of the destination range.","title":"d_first"},{"location":"api/group___runtime_algorithm_1ga556703289c68c3e7548657f42807a9a3/#comp","text":"The user-provided binary predicate which returns \u200btrue if the first argument is less than the second.","title":"comp"},{"location":"api/group___runtime_algorithm_1ga556703289c68c3e7548657f42807a9a3/#return-value","text":"Returns one iterator pointing to the one-past-last element of the destination range.","title":"Return value"},{"location":"api/group___runtime_algorithm_1ga556703289c68c3e7548657f42807a9a3/#valid-usage","text":"Elements in the ranges specified by [ first1 , last1 ) and [ first2 , last2 ) must be sorted in non-descending order. comp must have the following function signature: bool comp(const Type& a, const Type& b) , where Type is the value type of both _InputIt1 and _InputIt2 .","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1ga56e90c79b7400e2bbff7b2fc7e0baf1d/","text":"Luna::binary_search template <typename _ForwardIt, typename _Ty> bool binary_search(_ForwardIt first, _ForwardIt last, const _Ty &value) Checks if an element equivalent to the specified value appears within the range. Overview Parameters first The iterator pointing to the first element of the range. last The iterator pointing to the one-past-last element of the range. value The value to compare elements to. Return value Returns true if an element equal to value is found, false otherwise. Valid Usage Elements in the range specified by [ first , last ) must be sorted in non-descending order.","title":"Luna::binary_search"},{"location":"api/group___runtime_algorithm_1ga56e90c79b7400e2bbff7b2fc7e0baf1d/#lunabinary_search","text":"template <typename _ForwardIt, typename _Ty> bool binary_search(_ForwardIt first, _ForwardIt last, const _Ty &value) Checks if an element equivalent to the specified value appears within the range.","title":"Luna::binary_search"},{"location":"api/group___runtime_algorithm_1ga56e90c79b7400e2bbff7b2fc7e0baf1d/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1ga56e90c79b7400e2bbff7b2fc7e0baf1d/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1ga56e90c79b7400e2bbff7b2fc7e0baf1d/#first","text":"The iterator pointing to the first element of the range.","title":"first"},{"location":"api/group___runtime_algorithm_1ga56e90c79b7400e2bbff7b2fc7e0baf1d/#last","text":"The iterator pointing to the one-past-last element of the range.","title":"last"},{"location":"api/group___runtime_algorithm_1ga56e90c79b7400e2bbff7b2fc7e0baf1d/#value","text":"The value to compare elements to.","title":"value"},{"location":"api/group___runtime_algorithm_1ga56e90c79b7400e2bbff7b2fc7e0baf1d/#return-value","text":"Returns true if an element equal to value is found, false otherwise.","title":"Return value"},{"location":"api/group___runtime_algorithm_1ga56e90c79b7400e2bbff7b2fc7e0baf1d/#valid-usage","text":"Elements in the range specified by [ first , last ) must be sorted in non-descending order.","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1ga5c427ac4e48338499c50b6fbffed62bd/","text":"Luna::find template <typename _InputIt, typename _Ty> constexpr _InputIt find(_InputIt first, _InputIt last, const _Ty &value) Searches for the first element in the range that is equal to (==) the specified value. Overview Parameters first The iterator pointing to the first element of the search range. last The iterator pointing to the one-past-last element of the search range. value The value to compare for equality. Return value Returns one iterator pointing to the first element that is equal to the specified value. Returns last if not found.","title":"Luna::find"},{"location":"api/group___runtime_algorithm_1ga5c427ac4e48338499c50b6fbffed62bd/#lunafind","text":"template <typename _InputIt, typename _Ty> constexpr _InputIt find(_InputIt first, _InputIt last, const _Ty &value) Searches for the first element in the range that is equal to (==) the specified value.","title":"Luna::find"},{"location":"api/group___runtime_algorithm_1ga5c427ac4e48338499c50b6fbffed62bd/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1ga5c427ac4e48338499c50b6fbffed62bd/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1ga5c427ac4e48338499c50b6fbffed62bd/#first","text":"The iterator pointing to the first element of the search range.","title":"first"},{"location":"api/group___runtime_algorithm_1ga5c427ac4e48338499c50b6fbffed62bd/#last","text":"The iterator pointing to the one-past-last element of the search range.","title":"last"},{"location":"api/group___runtime_algorithm_1ga5c427ac4e48338499c50b6fbffed62bd/#value","text":"The value to compare for equality.","title":"value"},{"location":"api/group___runtime_algorithm_1ga5c427ac4e48338499c50b6fbffed62bd/#return-value","text":"Returns one iterator pointing to the first element that is equal to the specified value. Returns last if not found.","title":"Return value"},{"location":"api/group___runtime_algorithm_1ga5f2487857061fcf0a115c13a476a1222/","text":"Luna::includes template <typename _InputIt1, typename _InputIt2, typename _Compare> bool includes(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _Compare comp) Checks if the sorted range [ first2 , last2 ) is a subsequence of the sorted range [ first1 , last1 ). (A subsequence need not be contiguous.) Overview Parameters first1 The iterator pointing to the first element of the first range. last1 The iterator pointing to the one-past-last element of the first range. first2 The iterator pointing to the first element of the second range. last2 The iterator pointing to the one-past-last element of the second range. comp The user-provided binary predicate which returns \u200btrue if the first argument is less than the second. Return value Returns true if the sorted range [ first2 , last2 ) is a subsequence of the sorted range [ first1 , last1 ). Returns false otherwise. Valid Usage Elements in the ranges specified by [ first1 , last1 ) and [ first2 , last2 ) must be sorted in non-descending order. comp must have the following function signature: bool comp(const Type& a, const Type& b) , where Type is the value type of both _InputIt1 and _InputIt2 .","title":"Luna::includes"},{"location":"api/group___runtime_algorithm_1ga5f2487857061fcf0a115c13a476a1222/#lunaincludes","text":"template <typename _InputIt1, typename _InputIt2, typename _Compare> bool includes(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _Compare comp) Checks if the sorted range [ first2 , last2 ) is a subsequence of the sorted range [ first1 , last1 ). (A subsequence need not be contiguous.)","title":"Luna::includes"},{"location":"api/group___runtime_algorithm_1ga5f2487857061fcf0a115c13a476a1222/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1ga5f2487857061fcf0a115c13a476a1222/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1ga5f2487857061fcf0a115c13a476a1222/#first1","text":"The iterator pointing to the first element of the first range.","title":"first1"},{"location":"api/group___runtime_algorithm_1ga5f2487857061fcf0a115c13a476a1222/#last1","text":"The iterator pointing to the one-past-last element of the first range.","title":"last1"},{"location":"api/group___runtime_algorithm_1ga5f2487857061fcf0a115c13a476a1222/#first2","text":"The iterator pointing to the first element of the second range.","title":"first2"},{"location":"api/group___runtime_algorithm_1ga5f2487857061fcf0a115c13a476a1222/#last2","text":"The iterator pointing to the one-past-last element of the second range.","title":"last2"},{"location":"api/group___runtime_algorithm_1ga5f2487857061fcf0a115c13a476a1222/#comp","text":"The user-provided binary predicate which returns \u200btrue if the first argument is less than the second.","title":"comp"},{"location":"api/group___runtime_algorithm_1ga5f2487857061fcf0a115c13a476a1222/#return-value","text":"Returns true if the sorted range [ first2 , last2 ) is a subsequence of the sorted range [ first1 , last1 ). Returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_algorithm_1ga5f2487857061fcf0a115c13a476a1222/#valid-usage","text":"Elements in the ranges specified by [ first1 , last1 ) and [ first2 , last2 ) must be sorted in non-descending order. comp must have the following function signature: bool comp(const Type& a, const Type& b) , where Type is the value type of both _InputIt1 and _InputIt2 .","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1ga622971e5f7d0e413ef3941c6092d7849/","text":"Luna::equal template <typename _Iter1, typename _Iter2> bool equal(_Iter1 first1, _Iter1 last1, _Iter2 first2) Tests the equality of two ranges. Overview Parameters first1 The iterator pointing to the first element of the first range. last1 The iterator pointing to the one-past-last element of the first range. first2 The iterator pointing to the first element of the second range. Return value Returns true if two ranges are equal, returns false otherwise.","title":"Luna::equal"},{"location":"api/group___runtime_algorithm_1ga622971e5f7d0e413ef3941c6092d7849/#lunaequal","text":"template <typename _Iter1, typename _Iter2> bool equal(_Iter1 first1, _Iter1 last1, _Iter2 first2) Tests the equality of two ranges.","title":"Luna::equal"},{"location":"api/group___runtime_algorithm_1ga622971e5f7d0e413ef3941c6092d7849/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1ga622971e5f7d0e413ef3941c6092d7849/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1ga622971e5f7d0e413ef3941c6092d7849/#first1","text":"The iterator pointing to the first element of the first range.","title":"first1"},{"location":"api/group___runtime_algorithm_1ga622971e5f7d0e413ef3941c6092d7849/#last1","text":"The iterator pointing to the one-past-last element of the first range.","title":"last1"},{"location":"api/group___runtime_algorithm_1ga622971e5f7d0e413ef3941c6092d7849/#first2","text":"The iterator pointing to the first element of the second range.","title":"first2"},{"location":"api/group___runtime_algorithm_1ga622971e5f7d0e413ef3941c6092d7849/#return-value","text":"Returns true if two ranges are equal, returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_algorithm_1ga69dd3d53c2eb4f49fefa002b643e3231/","text":"Luna::set_union template <typename _InputIt1, typename _InputIt2, typename _OutputIt, typename _Compare> _OutputIt set_union(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first, _Compare comp) Constructs a sorted union beginning at the destination range consisting of the set of elements present in one or both sorted ranges. Overview Parameters first1 The iterator pointing to the first element of the first range. last1 The iterator pointing to the one-past-last element of the first range. first2 The iterator pointing to the first element of the second range. last2 The iterator pointing to the one-past-last element of the second range. d_first The iterator pointing to the first element of the destination range. comp The user-provided binary predicate which returns \u200btrue if the first argument is less than the second. Valid Usage Elements in the ranges specified by [ first1 , last1 ) and [ first2 , last2 ) must be sorted in non-descending order. comp must have the following function signature: bool comp(const Type& a, const Type& b) , where Type is the value type of both _InputIt1 and _InputIt2 .","title":"Luna::set_union"},{"location":"api/group___runtime_algorithm_1ga69dd3d53c2eb4f49fefa002b643e3231/#lunaset_union","text":"template <typename _InputIt1, typename _InputIt2, typename _OutputIt, typename _Compare> _OutputIt set_union(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first, _Compare comp) Constructs a sorted union beginning at the destination range consisting of the set of elements present in one or both sorted ranges.","title":"Luna::set_union"},{"location":"api/group___runtime_algorithm_1ga69dd3d53c2eb4f49fefa002b643e3231/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1ga69dd3d53c2eb4f49fefa002b643e3231/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1ga69dd3d53c2eb4f49fefa002b643e3231/#first1","text":"The iterator pointing to the first element of the first range.","title":"first1"},{"location":"api/group___runtime_algorithm_1ga69dd3d53c2eb4f49fefa002b643e3231/#last1","text":"The iterator pointing to the one-past-last element of the first range.","title":"last1"},{"location":"api/group___runtime_algorithm_1ga69dd3d53c2eb4f49fefa002b643e3231/#first2","text":"The iterator pointing to the first element of the second range.","title":"first2"},{"location":"api/group___runtime_algorithm_1ga69dd3d53c2eb4f49fefa002b643e3231/#last2","text":"The iterator pointing to the one-past-last element of the second range.","title":"last2"},{"location":"api/group___runtime_algorithm_1ga69dd3d53c2eb4f49fefa002b643e3231/#d_first","text":"The iterator pointing to the first element of the destination range.","title":"d_first"},{"location":"api/group___runtime_algorithm_1ga69dd3d53c2eb4f49fefa002b643e3231/#comp","text":"The user-provided binary predicate which returns \u200btrue if the first argument is less than the second.","title":"comp"},{"location":"api/group___runtime_algorithm_1ga69dd3d53c2eb4f49fefa002b643e3231/#valid-usage","text":"Elements in the ranges specified by [ first1 , last1 ) and [ first2 , last2 ) must be sorted in non-descending order. comp must have the following function signature: bool comp(const Type& a, const Type& b) , where Type is the value type of both _InputIt1 and _InputIt2 .","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1ga6ac8c4d3198b4604c7a091ed93521b48/","text":"Luna::lower_bound template <typename _ForwardIt, typename _Ty, typename _Compare> _ForwardIt lower_bound(_ForwardIt first, _ForwardIt last, const _Ty &value, _Compare comp) Finds the first element in the range such that comp(element, value) is false . Overview Parameters first The iterator pointing to the first element of the range. last The iterator pointing to the one-past-last element of the range. value The value to compare elements to. comp The user-provided binary predicate which returns \u200btrue if the first argument is less than the second. Return value Returns an iterator pointing to the first element in the range such that comp(element, value) is false , or last if no such element is found. Valid Usage Elements in the range specified by [ first , last ) must be sorted in non-descending order. comp must have the following function signature: bool comp(const Type& a, const Type& b) , where Type is the value type of _ForwardIt .","title":"Luna::lower_bound"},{"location":"api/group___runtime_algorithm_1ga6ac8c4d3198b4604c7a091ed93521b48/#lunalower_bound","text":"template <typename _ForwardIt, typename _Ty, typename _Compare> _ForwardIt lower_bound(_ForwardIt first, _ForwardIt last, const _Ty &value, _Compare comp) Finds the first element in the range such that comp(element, value) is false .","title":"Luna::lower_bound"},{"location":"api/group___runtime_algorithm_1ga6ac8c4d3198b4604c7a091ed93521b48/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1ga6ac8c4d3198b4604c7a091ed93521b48/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1ga6ac8c4d3198b4604c7a091ed93521b48/#first","text":"The iterator pointing to the first element of the range.","title":"first"},{"location":"api/group___runtime_algorithm_1ga6ac8c4d3198b4604c7a091ed93521b48/#last","text":"The iterator pointing to the one-past-last element of the range.","title":"last"},{"location":"api/group___runtime_algorithm_1ga6ac8c4d3198b4604c7a091ed93521b48/#value","text":"The value to compare elements to.","title":"value"},{"location":"api/group___runtime_algorithm_1ga6ac8c4d3198b4604c7a091ed93521b48/#comp","text":"The user-provided binary predicate which returns \u200btrue if the first argument is less than the second.","title":"comp"},{"location":"api/group___runtime_algorithm_1ga6ac8c4d3198b4604c7a091ed93521b48/#return-value","text":"Returns an iterator pointing to the first element in the range such that comp(element, value) is false , or last if no such element is found.","title":"Return value"},{"location":"api/group___runtime_algorithm_1ga6ac8c4d3198b4604c7a091ed93521b48/#valid-usage","text":"Elements in the range specified by [ first , last ) must be sorted in non-descending order. comp must have the following function signature: bool comp(const Type& a, const Type& b) , where Type is the value type of _ForwardIt .","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1ga6c2f327e87aecc5de9593f6b4b2807ce/","text":"Luna::set_intersection template <typename _InputIt1, typename _InputIt2, typename _OutputIt> _OutputIt set_intersection(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first) Constructs a sorted range consisting of elements that are found in both sorted ranges. Overview Parameters first1 The iterator pointing to the first element of the first range. last1 The iterator pointing to the one-past-last element of the first range. first2 The iterator pointing to the first element of the second range. last2 The iterator pointing to the one-past-last element of the second range. d_first The iterator pointing to the first element of the destination range. Return value Returns one iterator pointing to the one-past-last element of the destination range. Valid Usage Elements in the ranges specified by [ first1 , last1 ) and [ first2 , last2 ) must be sorted in non-descending order.","title":"Luna::set_intersection"},{"location":"api/group___runtime_algorithm_1ga6c2f327e87aecc5de9593f6b4b2807ce/#lunaset_intersection","text":"template <typename _InputIt1, typename _InputIt2, typename _OutputIt> _OutputIt set_intersection(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first) Constructs a sorted range consisting of elements that are found in both sorted ranges.","title":"Luna::set_intersection"},{"location":"api/group___runtime_algorithm_1ga6c2f327e87aecc5de9593f6b4b2807ce/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1ga6c2f327e87aecc5de9593f6b4b2807ce/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1ga6c2f327e87aecc5de9593f6b4b2807ce/#first1","text":"The iterator pointing to the first element of the first range.","title":"first1"},{"location":"api/group___runtime_algorithm_1ga6c2f327e87aecc5de9593f6b4b2807ce/#last1","text":"The iterator pointing to the one-past-last element of the first range.","title":"last1"},{"location":"api/group___runtime_algorithm_1ga6c2f327e87aecc5de9593f6b4b2807ce/#first2","text":"The iterator pointing to the first element of the second range.","title":"first2"},{"location":"api/group___runtime_algorithm_1ga6c2f327e87aecc5de9593f6b4b2807ce/#last2","text":"The iterator pointing to the one-past-last element of the second range.","title":"last2"},{"location":"api/group___runtime_algorithm_1ga6c2f327e87aecc5de9593f6b4b2807ce/#d_first","text":"The iterator pointing to the first element of the destination range.","title":"d_first"},{"location":"api/group___runtime_algorithm_1ga6c2f327e87aecc5de9593f6b4b2807ce/#return-value","text":"Returns one iterator pointing to the one-past-last element of the destination range.","title":"Return value"},{"location":"api/group___runtime_algorithm_1ga6c2f327e87aecc5de9593f6b4b2807ce/#valid-usage","text":"Elements in the ranges specified by [ first1 , last1 ) and [ first2 , last2 ) must be sorted in non-descending order.","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1ga7f57a6a6498420c062c1af9141080b17/","text":"Luna::set_difference template <typename _InputIt1, typename _InputIt2, typename _OutputIt> _OutputIt set_difference(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first) Copies elements that appear in the first sorted range and do not appear in the second sorted range to the destination range. The destination range is also sorted. Overview Parameters first1 The iterator pointing to the first element of the first range. last1 The iterator pointing to the one-past-last element of the first range. first2 The iterator pointing to the first element of the second range. last2 The iterator pointing to the one-past-last element of the second range. d_first The iterator pointing to the first element of the destination range. Return value Returns one iterator pointing to the one-past-last element of the destination range. Valid Usage Elements in the ranges specified by [ first1 , last1 ) and [ first2 , last2 ) must be sorted in non-descending order.","title":"Luna::set_difference"},{"location":"api/group___runtime_algorithm_1ga7f57a6a6498420c062c1af9141080b17/#lunaset_difference","text":"template <typename _InputIt1, typename _InputIt2, typename _OutputIt> _OutputIt set_difference(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first) Copies elements that appear in the first sorted range and do not appear in the second sorted range to the destination range. The destination range is also sorted.","title":"Luna::set_difference"},{"location":"api/group___runtime_algorithm_1ga7f57a6a6498420c062c1af9141080b17/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1ga7f57a6a6498420c062c1af9141080b17/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1ga7f57a6a6498420c062c1af9141080b17/#first1","text":"The iterator pointing to the first element of the first range.","title":"first1"},{"location":"api/group___runtime_algorithm_1ga7f57a6a6498420c062c1af9141080b17/#last1","text":"The iterator pointing to the one-past-last element of the first range.","title":"last1"},{"location":"api/group___runtime_algorithm_1ga7f57a6a6498420c062c1af9141080b17/#first2","text":"The iterator pointing to the first element of the second range.","title":"first2"},{"location":"api/group___runtime_algorithm_1ga7f57a6a6498420c062c1af9141080b17/#last2","text":"The iterator pointing to the one-past-last element of the second range.","title":"last2"},{"location":"api/group___runtime_algorithm_1ga7f57a6a6498420c062c1af9141080b17/#d_first","text":"The iterator pointing to the first element of the destination range.","title":"d_first"},{"location":"api/group___runtime_algorithm_1ga7f57a6a6498420c062c1af9141080b17/#return-value","text":"Returns one iterator pointing to the one-past-last element of the destination range.","title":"Return value"},{"location":"api/group___runtime_algorithm_1ga7f57a6a6498420c062c1af9141080b17/#valid-usage","text":"Elements in the ranges specified by [ first1 , last1 ) and [ first2 , last2 ) must be sorted in non-descending order.","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1ga82c4c36785b5acdc4d4f8a702b949660/","text":"Luna::copy template <typename _InputIt, typename _OutputIt> _OutputIt copy(_InputIt first, _InputIt last, _OutputIt d_first) Copies elements from one range to another range. Overview Parameters first The iterator pointing to the first element of the source range. last The iterator pointing to the one-past-last element of the source range. d_first The iterator pointing to the first element of the destination range. Return value Returns one iterator pointing to the one-past-last element of the destination range.","title":"Luna::copy"},{"location":"api/group___runtime_algorithm_1ga82c4c36785b5acdc4d4f8a702b949660/#lunacopy","text":"template <typename _InputIt, typename _OutputIt> _OutputIt copy(_InputIt first, _InputIt last, _OutputIt d_first) Copies elements from one range to another range.","title":"Luna::copy"},{"location":"api/group___runtime_algorithm_1ga82c4c36785b5acdc4d4f8a702b949660/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1ga82c4c36785b5acdc4d4f8a702b949660/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1ga82c4c36785b5acdc4d4f8a702b949660/#first","text":"The iterator pointing to the first element of the source range.","title":"first"},{"location":"api/group___runtime_algorithm_1ga82c4c36785b5acdc4d4f8a702b949660/#last","text":"The iterator pointing to the one-past-last element of the source range.","title":"last"},{"location":"api/group___runtime_algorithm_1ga82c4c36785b5acdc4d4f8a702b949660/#d_first","text":"The iterator pointing to the first element of the destination range.","title":"d_first"},{"location":"api/group___runtime_algorithm_1ga82c4c36785b5acdc4d4f8a702b949660/#return-value","text":"Returns one iterator pointing to the one-past-last element of the destination range.","title":"Return value"},{"location":"api/group___runtime_algorithm_1ga8585025fd99a8ee19f11a8ad16ccb15b/","text":"Luna::upper_bound template <typename _ForwardIt, typename _Ty, typename _Compare> _ForwardIt upper_bound(_ForwardIt first, _ForwardIt last, const _Ty &value, _Compare comp) Finds the first element in the range such that comp(value, element) is true . Overview Parameters first The iterator pointing to the first element of the range. last The iterator pointing to the one-past-last element of the range. value The value to compare elements to. comp The user-provided binary predicate which returns \u200btrue if the first argument is less than the second. Return value Returns an iterator pointing to the first element in the range such that comp(value, element) is true , or last if no such element is found. Valid Usage Elements in the range specified by [ first , last ) must be sorted in non-descending order. comp must have the following function signature: bool comp(const Type& a, const Type& b) , where Type is the value type of _ForwardIt .","title":"Luna::upper_bound"},{"location":"api/group___runtime_algorithm_1ga8585025fd99a8ee19f11a8ad16ccb15b/#lunaupper_bound","text":"template <typename _ForwardIt, typename _Ty, typename _Compare> _ForwardIt upper_bound(_ForwardIt first, _ForwardIt last, const _Ty &value, _Compare comp) Finds the first element in the range such that comp(value, element) is true .","title":"Luna::upper_bound"},{"location":"api/group___runtime_algorithm_1ga8585025fd99a8ee19f11a8ad16ccb15b/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1ga8585025fd99a8ee19f11a8ad16ccb15b/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1ga8585025fd99a8ee19f11a8ad16ccb15b/#first","text":"The iterator pointing to the first element of the range.","title":"first"},{"location":"api/group___runtime_algorithm_1ga8585025fd99a8ee19f11a8ad16ccb15b/#last","text":"The iterator pointing to the one-past-last element of the range.","title":"last"},{"location":"api/group___runtime_algorithm_1ga8585025fd99a8ee19f11a8ad16ccb15b/#value","text":"The value to compare elements to.","title":"value"},{"location":"api/group___runtime_algorithm_1ga8585025fd99a8ee19f11a8ad16ccb15b/#comp","text":"The user-provided binary predicate which returns \u200btrue if the first argument is less than the second.","title":"comp"},{"location":"api/group___runtime_algorithm_1ga8585025fd99a8ee19f11a8ad16ccb15b/#return-value","text":"Returns an iterator pointing to the first element in the range such that comp(value, element) is true , or last if no such element is found.","title":"Return value"},{"location":"api/group___runtime_algorithm_1ga8585025fd99a8ee19f11a8ad16ccb15b/#valid-usage","text":"Elements in the range specified by [ first , last ) must be sorted in non-descending order. comp must have the following function signature: bool comp(const Type& a, const Type& b) , where Type is the value type of _ForwardIt .","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1ga91f5e4923dec9e86dc7898acf96f9d4e/","text":"Luna::search template <typename _ForwardIt> auto search(_ForwardIt first, _ForwardIt last, _ForwardIt pattern_first, _ForwardIt pattern_last) -> enable_if_t< is_pointer_v< _ForwardIt >, _ForwardIt > Searches for the first occurrence of the sequence of elements in the specified range. Overview Parameters first The iterator pointing to the first element of the search range. last The iterator pointing to the one-past-last element of the search range. pattern_first The iterator pointing to the first element of the sequence to search. pattern_last The iterator pointing to the one-past-last element of the sequence to search. Return value Returns one iterator pointing to the beginning of first occurrence of the sequence[ pattern_first , pattern_last ). Returns last if no such occurrence is found.","title":"Luna::search"},{"location":"api/group___runtime_algorithm_1ga91f5e4923dec9e86dc7898acf96f9d4e/#lunasearch","text":"template <typename _ForwardIt> auto search(_ForwardIt first, _ForwardIt last, _ForwardIt pattern_first, _ForwardIt pattern_last) -> enable_if_t< is_pointer_v< _ForwardIt >, _ForwardIt > Searches for the first occurrence of the sequence of elements in the specified range.","title":"Luna::search"},{"location":"api/group___runtime_algorithm_1ga91f5e4923dec9e86dc7898acf96f9d4e/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1ga91f5e4923dec9e86dc7898acf96f9d4e/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1ga91f5e4923dec9e86dc7898acf96f9d4e/#first","text":"The iterator pointing to the first element of the search range.","title":"first"},{"location":"api/group___runtime_algorithm_1ga91f5e4923dec9e86dc7898acf96f9d4e/#last","text":"The iterator pointing to the one-past-last element of the search range.","title":"last"},{"location":"api/group___runtime_algorithm_1ga91f5e4923dec9e86dc7898acf96f9d4e/#pattern_first","text":"The iterator pointing to the first element of the sequence to search.","title":"pattern_first"},{"location":"api/group___runtime_algorithm_1ga91f5e4923dec9e86dc7898acf96f9d4e/#pattern_last","text":"The iterator pointing to the one-past-last element of the sequence to search.","title":"pattern_last"},{"location":"api/group___runtime_algorithm_1ga91f5e4923dec9e86dc7898acf96f9d4e/#return-value","text":"Returns one iterator pointing to the beginning of first occurrence of the sequence[ pattern_first , pattern_last ). Returns last if no such occurrence is found.","title":"Return value"},{"location":"api/group___runtime_algorithm_1ga9780e6b83d6b4e4c2a8fb6f1195daf2d/","text":"Luna::binary_search_iter template <typename _ForwardIt, typename _Ty> _ForwardIt binary_search_iter(_ForwardIt first, _ForwardIt last, const _Ty &value) Finds an element equivalent to the specified value in the range. Overview Parameters first The iterator pointing to the first element of the range. last The iterator pointing to the one-past-last element of the range. value The value to compare elements to. Return value Returns an iterator pointing to the found element. If multiple equivalent elements exist in the range, returns the first one. Returns last if not found. Valid Usage Elements in the range specified by [ first , last ) must be sorted in non-descending order.","title":"Luna::binary_search_iter"},{"location":"api/group___runtime_algorithm_1ga9780e6b83d6b4e4c2a8fb6f1195daf2d/#lunabinary_search_iter","text":"template <typename _ForwardIt, typename _Ty> _ForwardIt binary_search_iter(_ForwardIt first, _ForwardIt last, const _Ty &value) Finds an element equivalent to the specified value in the range.","title":"Luna::binary_search_iter"},{"location":"api/group___runtime_algorithm_1ga9780e6b83d6b4e4c2a8fb6f1195daf2d/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1ga9780e6b83d6b4e4c2a8fb6f1195daf2d/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1ga9780e6b83d6b4e4c2a8fb6f1195daf2d/#first","text":"The iterator pointing to the first element of the range.","title":"first"},{"location":"api/group___runtime_algorithm_1ga9780e6b83d6b4e4c2a8fb6f1195daf2d/#last","text":"The iterator pointing to the one-past-last element of the range.","title":"last"},{"location":"api/group___runtime_algorithm_1ga9780e6b83d6b4e4c2a8fb6f1195daf2d/#value","text":"The value to compare elements to.","title":"value"},{"location":"api/group___runtime_algorithm_1ga9780e6b83d6b4e4c2a8fb6f1195daf2d/#return-value","text":"Returns an iterator pointing to the found element. If multiple equivalent elements exist in the range, returns the first one. Returns last if not found.","title":"Return value"},{"location":"api/group___runtime_algorithm_1ga9780e6b83d6b4e4c2a8fb6f1195daf2d/#valid-usage","text":"Elements in the range specified by [ first , last ) must be sorted in non-descending order.","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1gaa2e088af2e0c50dd41eccda423ad419b/","text":"Luna::none_of template <typename _InputIt, typename _UnaryPredicate> constexpr bool none_of(_InputIt first, _InputIt last, _UnaryPredicate p) Checks if the unary predicate returns false for all elements in the range. Overview Parameters first The iterator pointing to the first element of the range. last The iterator pointing to the one-past-last element of the range. p The user-provided unary predicate which will be called to test elements. Return value Returns ture if the unary predicate returns false for all elements in the range. Returns false otherwise. Valid Usage The expression p(v) must be convertible to bool for every argument v of type VT , where VT is the value type of _InputIt , and must not modify v .","title":"Luna::none_of"},{"location":"api/group___runtime_algorithm_1gaa2e088af2e0c50dd41eccda423ad419b/#lunanone_of","text":"template <typename _InputIt, typename _UnaryPredicate> constexpr bool none_of(_InputIt first, _InputIt last, _UnaryPredicate p) Checks if the unary predicate returns false for all elements in the range.","title":"Luna::none_of"},{"location":"api/group___runtime_algorithm_1gaa2e088af2e0c50dd41eccda423ad419b/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1gaa2e088af2e0c50dd41eccda423ad419b/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1gaa2e088af2e0c50dd41eccda423ad419b/#first","text":"The iterator pointing to the first element of the range.","title":"first"},{"location":"api/group___runtime_algorithm_1gaa2e088af2e0c50dd41eccda423ad419b/#last","text":"The iterator pointing to the one-past-last element of the range.","title":"last"},{"location":"api/group___runtime_algorithm_1gaa2e088af2e0c50dd41eccda423ad419b/#p","text":"The user-provided unary predicate which will be called to test elements.","title":"p"},{"location":"api/group___runtime_algorithm_1gaa2e088af2e0c50dd41eccda423ad419b/#return-value","text":"Returns ture if the unary predicate returns false for all elements in the range. Returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_algorithm_1gaa2e088af2e0c50dd41eccda423ad419b/#valid-usage","text":"The expression p(v) must be convertible to bool for every argument v of type VT , where VT is the value type of _InputIt , and must not modify v .","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1gaa7d4ef4a1201800ca9187591a73faba6/","text":"Luna::find_end template <typename _ForwardIt> auto find_end(_ForwardIt first, _ForwardIt last, _ForwardIt pattern_first, _ForwardIt pattern_last) -> enable_if_t< is_pointer_v< _ForwardIt >, _ForwardIt > Searches for the last occurrence of the sequence of elements in the specified range. Overview Parameters first The iterator pointing to the first element of the search range. last The iterator pointing to the one-past-last element of the search range. pattern_first The iterator pointing to the first element of the sequence to search. pattern_last The iterator pointing to the one-past-last element of the sequence to search. Return value Returns one iterator pointing to the beginning of last occurrence of the sequence[ pattern_first , pattern_last ). Returns last if no such occurrence is found.","title":"Luna::find_end"},{"location":"api/group___runtime_algorithm_1gaa7d4ef4a1201800ca9187591a73faba6/#lunafind_end","text":"template <typename _ForwardIt> auto find_end(_ForwardIt first, _ForwardIt last, _ForwardIt pattern_first, _ForwardIt pattern_last) -> enable_if_t< is_pointer_v< _ForwardIt >, _ForwardIt > Searches for the last occurrence of the sequence of elements in the specified range.","title":"Luna::find_end"},{"location":"api/group___runtime_algorithm_1gaa7d4ef4a1201800ca9187591a73faba6/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1gaa7d4ef4a1201800ca9187591a73faba6/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1gaa7d4ef4a1201800ca9187591a73faba6/#first","text":"The iterator pointing to the first element of the search range.","title":"first"},{"location":"api/group___runtime_algorithm_1gaa7d4ef4a1201800ca9187591a73faba6/#last","text":"The iterator pointing to the one-past-last element of the search range.","title":"last"},{"location":"api/group___runtime_algorithm_1gaa7d4ef4a1201800ca9187591a73faba6/#pattern_first","text":"The iterator pointing to the first element of the sequence to search.","title":"pattern_first"},{"location":"api/group___runtime_algorithm_1gaa7d4ef4a1201800ca9187591a73faba6/#pattern_last","text":"The iterator pointing to the one-past-last element of the sequence to search.","title":"pattern_last"},{"location":"api/group___runtime_algorithm_1gaa7d4ef4a1201800ca9187591a73faba6/#return-value","text":"Returns one iterator pointing to the beginning of last occurrence of the sequence[ pattern_first , pattern_last ). Returns last if no such occurrence is found.","title":"Return value"},{"location":"api/group___runtime_algorithm_1gab776c0c36632ba15f2b8637f4aa18b16/","text":"Luna::includes template <typename _InputIt1, typename _InputIt2> bool includes(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2) Checks if the sorted range [ first2 , last2 ) is a subsequence of the sorted range [ first1 , last1 ). (A subsequence need not be contiguous.) Overview Parameters first1 The iterator pointing to the first element of the first range. last1 The iterator pointing to the one-past-last element of the first range. first2 The iterator pointing to the first element of the second range. last2 The iterator pointing to the one-past-last element of the second range. Return value Returns true if the sorted range [ first2 , last2 ) is a subsequence of the sorted range [ first1 , last1 ). Returns false otherwise. Valid Usage Elements in the ranges specified by [ first1 , last1 ) and [ first2 , last2 ) must be sorted in non-descending order.","title":"Luna::includes"},{"location":"api/group___runtime_algorithm_1gab776c0c36632ba15f2b8637f4aa18b16/#lunaincludes","text":"template <typename _InputIt1, typename _InputIt2> bool includes(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2) Checks if the sorted range [ first2 , last2 ) is a subsequence of the sorted range [ first1 , last1 ). (A subsequence need not be contiguous.)","title":"Luna::includes"},{"location":"api/group___runtime_algorithm_1gab776c0c36632ba15f2b8637f4aa18b16/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1gab776c0c36632ba15f2b8637f4aa18b16/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1gab776c0c36632ba15f2b8637f4aa18b16/#first1","text":"The iterator pointing to the first element of the first range.","title":"first1"},{"location":"api/group___runtime_algorithm_1gab776c0c36632ba15f2b8637f4aa18b16/#last1","text":"The iterator pointing to the one-past-last element of the first range.","title":"last1"},{"location":"api/group___runtime_algorithm_1gab776c0c36632ba15f2b8637f4aa18b16/#first2","text":"The iterator pointing to the first element of the second range.","title":"first2"},{"location":"api/group___runtime_algorithm_1gab776c0c36632ba15f2b8637f4aa18b16/#last2","text":"The iterator pointing to the one-past-last element of the second range.","title":"last2"},{"location":"api/group___runtime_algorithm_1gab776c0c36632ba15f2b8637f4aa18b16/#return-value","text":"Returns true if the sorted range [ first2 , last2 ) is a subsequence of the sorted range [ first1 , last1 ). Returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_algorithm_1gab776c0c36632ba15f2b8637f4aa18b16/#valid-usage","text":"Elements in the ranges specified by [ first1 , last1 ) and [ first2 , last2 ) must be sorted in non-descending order.","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1gab9f335c1db01662355d08c95f82d1d24/","text":"Luna::swap template <typename _Ty> void swap(_Ty &a, _Ty &b) Swaps two values. Overview Parameters a The first value to swap. b The second value to swap.","title":"Luna::swap"},{"location":"api/group___runtime_algorithm_1gab9f335c1db01662355d08c95f82d1d24/#lunaswap","text":"template <typename _Ty> void swap(_Ty &a, _Ty &b) Swaps two values.","title":"Luna::swap"},{"location":"api/group___runtime_algorithm_1gab9f335c1db01662355d08c95f82d1d24/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1gab9f335c1db01662355d08c95f82d1d24/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1gab9f335c1db01662355d08c95f82d1d24/#a","text":"The first value to swap.","title":"a"},{"location":"api/group___runtime_algorithm_1gab9f335c1db01662355d08c95f82d1d24/#b","text":"The second value to swap.","title":"b"},{"location":"api/group___runtime_algorithm_1gac1955e41a312fe40f9795a44a51cb4cf/","text":"Luna::sort template <typename _RandomIt> void sort(_RandomIt first, _RandomIt last) Sorts the elements in the range in non-descending order. The order of equal elements is not guaranteed to be preserved. Overview Parameters first The iterator pointing to the first element of the range. last The iterator pointing to the one-past-last element of the range.","title":"Luna::sort"},{"location":"api/group___runtime_algorithm_1gac1955e41a312fe40f9795a44a51cb4cf/#lunasort","text":"template <typename _RandomIt> void sort(_RandomIt first, _RandomIt last) Sorts the elements in the range in non-descending order. The order of equal elements is not guaranteed to be preserved.","title":"Luna::sort"},{"location":"api/group___runtime_algorithm_1gac1955e41a312fe40f9795a44a51cb4cf/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1gac1955e41a312fe40f9795a44a51cb4cf/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1gac1955e41a312fe40f9795a44a51cb4cf/#first","text":"The iterator pointing to the first element of the range.","title":"first"},{"location":"api/group___runtime_algorithm_1gac1955e41a312fe40f9795a44a51cb4cf/#last","text":"The iterator pointing to the one-past-last element of the range.","title":"last"},{"location":"api/group___runtime_algorithm_1gac9ec916bcbe424ac468c46772bb94605/","text":"Luna::copy_if template <typename _InputIt, typename _OutputIt, typename UnaryPredicate> _OutputIt copy_if(_InputIt first, _InputIt last, _OutputIt d_first, UnaryPredicate pred) Copies elements that pass user-defined function from one range to another range. The relative order of elements that are copied is preserved. Overview Parameters first The iterator pointing to the first element of the source range. last The iterator pointing to the one-past-last element of the source range. d_first The iterator pointing to the first element of the destination range. pred The user-defined unary predicate which returns \u200btrue for elements that should be copied. Return value Returns one iterator pointing to the one-past-last element of the destination range. Valid Usage The expression pred(v) must be convertible to bool for every argument v of type VT , where VT is the value type of _InputIt , and must not modify v .","title":"Luna::copy_if"},{"location":"api/group___runtime_algorithm_1gac9ec916bcbe424ac468c46772bb94605/#lunacopy_if","text":"template <typename _InputIt, typename _OutputIt, typename UnaryPredicate> _OutputIt copy_if(_InputIt first, _InputIt last, _OutputIt d_first, UnaryPredicate pred) Copies elements that pass user-defined function from one range to another range. The relative order of elements that are copied is preserved.","title":"Luna::copy_if"},{"location":"api/group___runtime_algorithm_1gac9ec916bcbe424ac468c46772bb94605/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1gac9ec916bcbe424ac468c46772bb94605/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1gac9ec916bcbe424ac468c46772bb94605/#first","text":"The iterator pointing to the first element of the source range.","title":"first"},{"location":"api/group___runtime_algorithm_1gac9ec916bcbe424ac468c46772bb94605/#last","text":"The iterator pointing to the one-past-last element of the source range.","title":"last"},{"location":"api/group___runtime_algorithm_1gac9ec916bcbe424ac468c46772bb94605/#d_first","text":"The iterator pointing to the first element of the destination range.","title":"d_first"},{"location":"api/group___runtime_algorithm_1gac9ec916bcbe424ac468c46772bb94605/#pred","text":"The user-defined unary predicate which returns \u200btrue for elements that should be copied.","title":"pred"},{"location":"api/group___runtime_algorithm_1gac9ec916bcbe424ac468c46772bb94605/#return-value","text":"Returns one iterator pointing to the one-past-last element of the destination range.","title":"Return value"},{"location":"api/group___runtime_algorithm_1gac9ec916bcbe424ac468c46772bb94605/#valid-usage","text":"The expression pred(v) must be convertible to bool for every argument v of type VT , where VT is the value type of _InputIt , and must not modify v .","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1gacd42dbba4eb002d62aba4a5e73136c1a/","text":"Luna::find_if_not template <typename _InputIt, typename _UnaryPredicate> constexpr _InputIt find_if_not(_InputIt first, _InputIt last, _UnaryPredicate q) Searches for the first element in the range that fails the user-provided unary predicate. Overview Parameters first The iterator pointing to the first element of the search range. last The iterator pointing to the one-past-last element of the search range. q The user-provided unary predicate which will be called to test elements. Return value Returns one iterator pointing to the first element that q(v) is false . Returns last if not found. Valid Usage The expression q(v) must be convertible to bool for every argument v of type VT , where VT is the value type of _InputIt , and must not modify v .","title":"Luna::find_if_not"},{"location":"api/group___runtime_algorithm_1gacd42dbba4eb002d62aba4a5e73136c1a/#lunafind_if_not","text":"template <typename _InputIt, typename _UnaryPredicate> constexpr _InputIt find_if_not(_InputIt first, _InputIt last, _UnaryPredicate q) Searches for the first element in the range that fails the user-provided unary predicate.","title":"Luna::find_if_not"},{"location":"api/group___runtime_algorithm_1gacd42dbba4eb002d62aba4a5e73136c1a/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1gacd42dbba4eb002d62aba4a5e73136c1a/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1gacd42dbba4eb002d62aba4a5e73136c1a/#first","text":"The iterator pointing to the first element of the search range.","title":"first"},{"location":"api/group___runtime_algorithm_1gacd42dbba4eb002d62aba4a5e73136c1a/#last","text":"The iterator pointing to the one-past-last element of the search range.","title":"last"},{"location":"api/group___runtime_algorithm_1gacd42dbba4eb002d62aba4a5e73136c1a/#q","text":"The user-provided unary predicate which will be called to test elements.","title":"q"},{"location":"api/group___runtime_algorithm_1gacd42dbba4eb002d62aba4a5e73136c1a/#return-value","text":"Returns one iterator pointing to the first element that q(v) is false . Returns last if not found.","title":"Return value"},{"location":"api/group___runtime_algorithm_1gacd42dbba4eb002d62aba4a5e73136c1a/#valid-usage","text":"The expression q(v) must be convertible to bool for every argument v of type VT , where VT is the value type of _InputIt , and must not modify v .","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1gad5b157c8d26251a7520da620b9434554/","text":"Luna::set_difference template <typename _InputIt1, typename _InputIt2, typename _OutputIt, typename _Compare> _OutputIt set_difference(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first, _Compare comp) Copies elements that appear in the first sorted range and do not appear in the second sorted range to the destination range. The destination range is also sorted. Overview Parameters first1 The iterator pointing to the first element of the first range. last1 The iterator pointing to the one-past-last element of the first range. first2 The iterator pointing to the first element of the second range. last2 The iterator pointing to the one-past-last element of the second range. d_first The iterator pointing to the first element of the destination range. comp The user-provided binary predicate which returns \u200btrue if the first argument is less than the second. Return value Returns one iterator pointing to the one-past-last element of the destination range. Valid Usage Elements in the ranges specified by [ first1 , last1 ) and [ first2 , last2 ) must be sorted in non-descending order. comp must have the following function signature: bool comp(const Type& a, const Type& b) , where Type is the value type of both _InputIt1 and _InputIt2 .","title":"Luna::set_difference"},{"location":"api/group___runtime_algorithm_1gad5b157c8d26251a7520da620b9434554/#lunaset_difference","text":"template <typename _InputIt1, typename _InputIt2, typename _OutputIt, typename _Compare> _OutputIt set_difference(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first, _Compare comp) Copies elements that appear in the first sorted range and do not appear in the second sorted range to the destination range. The destination range is also sorted.","title":"Luna::set_difference"},{"location":"api/group___runtime_algorithm_1gad5b157c8d26251a7520da620b9434554/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1gad5b157c8d26251a7520da620b9434554/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1gad5b157c8d26251a7520da620b9434554/#first1","text":"The iterator pointing to the first element of the first range.","title":"first1"},{"location":"api/group___runtime_algorithm_1gad5b157c8d26251a7520da620b9434554/#last1","text":"The iterator pointing to the one-past-last element of the first range.","title":"last1"},{"location":"api/group___runtime_algorithm_1gad5b157c8d26251a7520da620b9434554/#first2","text":"The iterator pointing to the first element of the second range.","title":"first2"},{"location":"api/group___runtime_algorithm_1gad5b157c8d26251a7520da620b9434554/#last2","text":"The iterator pointing to the one-past-last element of the second range.","title":"last2"},{"location":"api/group___runtime_algorithm_1gad5b157c8d26251a7520da620b9434554/#d_first","text":"The iterator pointing to the first element of the destination range.","title":"d_first"},{"location":"api/group___runtime_algorithm_1gad5b157c8d26251a7520da620b9434554/#comp","text":"The user-provided binary predicate which returns \u200btrue if the first argument is less than the second.","title":"comp"},{"location":"api/group___runtime_algorithm_1gad5b157c8d26251a7520da620b9434554/#return-value","text":"Returns one iterator pointing to the one-past-last element of the destination range.","title":"Return value"},{"location":"api/group___runtime_algorithm_1gad5b157c8d26251a7520da620b9434554/#valid-usage","text":"Elements in the ranges specified by [ first1 , last1 ) and [ first2 , last2 ) must be sorted in non-descending order. comp must have the following function signature: bool comp(const Type& a, const Type& b) , where Type is the value type of both _InputIt1 and _InputIt2 .","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1gadb4722898f14cc14eca45afc0affe514/","text":"Luna::lower_bound template <typename _ForwardIt, typename _Ty> _ForwardIt lower_bound(_ForwardIt first, _ForwardIt last, const _Ty &value) Finds the first element in the range such that element < value is false . Overview Parameters first The iterator pointing to the first element of the range. last The iterator pointing to the one-past-last element of the range. value The value to compare elements to. Return value Returns an iterator pointing to the first element in the range such that element < value is false , or last if no such element is found. Valid Usage Elements in the range specified by [ first , last ) must be sorted in non-descending order.","title":"Luna::lower_bound"},{"location":"api/group___runtime_algorithm_1gadb4722898f14cc14eca45afc0affe514/#lunalower_bound","text":"template <typename _ForwardIt, typename _Ty> _ForwardIt lower_bound(_ForwardIt first, _ForwardIt last, const _Ty &value) Finds the first element in the range such that element < value is false .","title":"Luna::lower_bound"},{"location":"api/group___runtime_algorithm_1gadb4722898f14cc14eca45afc0affe514/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1gadb4722898f14cc14eca45afc0affe514/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1gadb4722898f14cc14eca45afc0affe514/#first","text":"The iterator pointing to the first element of the range.","title":"first"},{"location":"api/group___runtime_algorithm_1gadb4722898f14cc14eca45afc0affe514/#last","text":"The iterator pointing to the one-past-last element of the range.","title":"last"},{"location":"api/group___runtime_algorithm_1gadb4722898f14cc14eca45afc0affe514/#value","text":"The value to compare elements to.","title":"value"},{"location":"api/group___runtime_algorithm_1gadb4722898f14cc14eca45afc0affe514/#return-value","text":"Returns an iterator pointing to the first element in the range such that element < value is false , or last if no such element is found.","title":"Return value"},{"location":"api/group___runtime_algorithm_1gadb4722898f14cc14eca45afc0affe514/#valid-usage","text":"Elements in the range specified by [ first , last ) must be sorted in non-descending order.","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1gae0f2d82171f4e735f6c9c667ca4c61dd/","text":"Luna::max template <typename _Ty, typename _LessComp> constexpr const _Ty & max(const _Ty &a, const _Ty &b, _LessComp less_comp) Returns the greater of the given values. Overview Parameters a The first value to compare. b The second value to compare. less_comp The user-defined less (<) comparison function used for comparing. Return value Returns the greater of the given values. Returns a if values are equivalent.","title":"Luna::max"},{"location":"api/group___runtime_algorithm_1gae0f2d82171f4e735f6c9c667ca4c61dd/#lunamax","text":"template <typename _Ty, typename _LessComp> constexpr const _Ty & max(const _Ty &a, const _Ty &b, _LessComp less_comp) Returns the greater of the given values.","title":"Luna::max"},{"location":"api/group___runtime_algorithm_1gae0f2d82171f4e735f6c9c667ca4c61dd/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1gae0f2d82171f4e735f6c9c667ca4c61dd/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1gae0f2d82171f4e735f6c9c667ca4c61dd/#a","text":"The first value to compare.","title":"a"},{"location":"api/group___runtime_algorithm_1gae0f2d82171f4e735f6c9c667ca4c61dd/#b","text":"The second value to compare.","title":"b"},{"location":"api/group___runtime_algorithm_1gae0f2d82171f4e735f6c9c667ca4c61dd/#less_comp","text":"The user-defined less (<) comparison function used for comparing.","title":"less_comp"},{"location":"api/group___runtime_algorithm_1gae0f2d82171f4e735f6c9c667ca4c61dd/#return-value","text":"Returns the greater of the given values. Returns a if values are equivalent.","title":"Return value"},{"location":"api/group___runtime_algorithm_1gae17af06dbbf1ba7013de2b4ca50783d5/","text":"Luna::binary_search template <typename _ForwardIt, typename _Ty, typename _Compare> bool binary_search(_ForwardIt first, _ForwardIt last, const _Ty &value, _Compare comp) Checks if an element equivalent to the specified value appears within the range. Overview Parameters first The iterator pointing to the first element of the range. last The iterator pointing to the one-past-last element of the range. value The value to compare elements to. comp The user-provided binary predicate which returns \u200btrue if the first argument is less than the second. Return value Returns true if an element equal to value is found, false otherwise. Valid Usage Elements in the range specified by [ first , last ) must be sorted in non-descending order. comp must have the following function signature: bool comp(const Type& a, const Type& b) , where Type is the value type of _ForwardIt .","title":"Luna::binary_search"},{"location":"api/group___runtime_algorithm_1gae17af06dbbf1ba7013de2b4ca50783d5/#lunabinary_search","text":"template <typename _ForwardIt, typename _Ty, typename _Compare> bool binary_search(_ForwardIt first, _ForwardIt last, const _Ty &value, _Compare comp) Checks if an element equivalent to the specified value appears within the range.","title":"Luna::binary_search"},{"location":"api/group___runtime_algorithm_1gae17af06dbbf1ba7013de2b4ca50783d5/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1gae17af06dbbf1ba7013de2b4ca50783d5/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1gae17af06dbbf1ba7013de2b4ca50783d5/#first","text":"The iterator pointing to the first element of the range.","title":"first"},{"location":"api/group___runtime_algorithm_1gae17af06dbbf1ba7013de2b4ca50783d5/#last","text":"The iterator pointing to the one-past-last element of the range.","title":"last"},{"location":"api/group___runtime_algorithm_1gae17af06dbbf1ba7013de2b4ca50783d5/#value","text":"The value to compare elements to.","title":"value"},{"location":"api/group___runtime_algorithm_1gae17af06dbbf1ba7013de2b4ca50783d5/#comp","text":"The user-provided binary predicate which returns \u200btrue if the first argument is less than the second.","title":"comp"},{"location":"api/group___runtime_algorithm_1gae17af06dbbf1ba7013de2b4ca50783d5/#return-value","text":"Returns true if an element equal to value is found, false otherwise.","title":"Return value"},{"location":"api/group___runtime_algorithm_1gae17af06dbbf1ba7013de2b4ca50783d5/#valid-usage","text":"Elements in the range specified by [ first , last ) must be sorted in non-descending order. comp must have the following function signature: bool comp(const Type& a, const Type& b) , where Type is the value type of _ForwardIt .","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1gae5453bc4d172c9055454c73fb47150d9/","text":"Luna::find_if template <typename _InputIt, typename _UnaryPredicate> constexpr _InputIt find_if(_InputIt first, _InputIt last, _UnaryPredicate p) Searches for the first element in the range that passes the user-provided unary predicate. Overview Parameters first The iterator pointing to the first element of the search range. last The iterator pointing to the one-past-last element of the search range. p The user-provided unary predicate which will be called to test elements. Return value Returns one iterator pointing to the first element that p(v) is true . Returns last if not found. Valid Usage The expression p(v) must be convertible to bool for every argument v of type VT , where VT is the value type of _InputIt , and must not modify v .","title":"Luna::find_if"},{"location":"api/group___runtime_algorithm_1gae5453bc4d172c9055454c73fb47150d9/#lunafind_if","text":"template <typename _InputIt, typename _UnaryPredicate> constexpr _InputIt find_if(_InputIt first, _InputIt last, _UnaryPredicate p) Searches for the first element in the range that passes the user-provided unary predicate.","title":"Luna::find_if"},{"location":"api/group___runtime_algorithm_1gae5453bc4d172c9055454c73fb47150d9/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1gae5453bc4d172c9055454c73fb47150d9/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1gae5453bc4d172c9055454c73fb47150d9/#first","text":"The iterator pointing to the first element of the search range.","title":"first"},{"location":"api/group___runtime_algorithm_1gae5453bc4d172c9055454c73fb47150d9/#last","text":"The iterator pointing to the one-past-last element of the search range.","title":"last"},{"location":"api/group___runtime_algorithm_1gae5453bc4d172c9055454c73fb47150d9/#p","text":"The user-provided unary predicate which will be called to test elements.","title":"p"},{"location":"api/group___runtime_algorithm_1gae5453bc4d172c9055454c73fb47150d9/#return-value","text":"Returns one iterator pointing to the first element that p(v) is true . Returns last if not found.","title":"Return value"},{"location":"api/group___runtime_algorithm_1gae5453bc4d172c9055454c73fb47150d9/#valid-usage","text":"The expression p(v) must be convertible to bool for every argument v of type VT , where VT is the value type of _InputIt , and must not modify v .","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1gaeb67b9af6950f0144ee3940274a2f586/","text":"Luna::all_of template <typename _InputIt, typename _UnaryPredicate> constexpr bool all_of(_InputIt first, _InputIt last, _UnaryPredicate p) Checks if the unary predicate returns true for all elements in the range. Overview Parameters first The iterator pointing to the first element of the range. last The iterator pointing to the one-past-last element of the range. p The user-provided unary predicate which will be called to test elements. Return value Returns ture if the unary predicate returns true for all elements in the range. Returns false otherwise. Valid Usage The expression p(v) must be convertible to bool for every argument v of type VT , where VT is the value type of _InputIt , and must not modify v .","title":"Luna::all_of"},{"location":"api/group___runtime_algorithm_1gaeb67b9af6950f0144ee3940274a2f586/#lunaall_of","text":"template <typename _InputIt, typename _UnaryPredicate> constexpr bool all_of(_InputIt first, _InputIt last, _UnaryPredicate p) Checks if the unary predicate returns true for all elements in the range.","title":"Luna::all_of"},{"location":"api/group___runtime_algorithm_1gaeb67b9af6950f0144ee3940274a2f586/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1gaeb67b9af6950f0144ee3940274a2f586/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1gaeb67b9af6950f0144ee3940274a2f586/#first","text":"The iterator pointing to the first element of the range.","title":"first"},{"location":"api/group___runtime_algorithm_1gaeb67b9af6950f0144ee3940274a2f586/#last","text":"The iterator pointing to the one-past-last element of the range.","title":"last"},{"location":"api/group___runtime_algorithm_1gaeb67b9af6950f0144ee3940274a2f586/#p","text":"The user-provided unary predicate which will be called to test elements.","title":"p"},{"location":"api/group___runtime_algorithm_1gaeb67b9af6950f0144ee3940274a2f586/#return-value","text":"Returns ture if the unary predicate returns true for all elements in the range. Returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_algorithm_1gaeb67b9af6950f0144ee3940274a2f586/#valid-usage","text":"The expression p(v) must be convertible to bool for every argument v of type VT , where VT is the value type of _InputIt , and must not modify v .","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1gaec62c07d494fde510ad4bc6a4421b51c/","text":"Luna::for_each template <typename _InputIt, typename _UnaryFunction> constexpr _UnaryFunction for_each(_InputIt first, _InputIt last, _UnaryFunction f) Applies the given function object to every element in the range, in order. Overview Parameters first The iterator pointing to the first element of the range. last The iterator pointing to the one-past-last element of the range. f The user-defined unary function object to be applied. Return value Returns f . Valid Usage f must have the following function signature: void f(const Type& v) , where Type is the value type of _InputIt .","title":"Luna::for_each"},{"location":"api/group___runtime_algorithm_1gaec62c07d494fde510ad4bc6a4421b51c/#lunafor_each","text":"template <typename _InputIt, typename _UnaryFunction> constexpr _UnaryFunction for_each(_InputIt first, _InputIt last, _UnaryFunction f) Applies the given function object to every element in the range, in order.","title":"Luna::for_each"},{"location":"api/group___runtime_algorithm_1gaec62c07d494fde510ad4bc6a4421b51c/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1gaec62c07d494fde510ad4bc6a4421b51c/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1gaec62c07d494fde510ad4bc6a4421b51c/#first","text":"The iterator pointing to the first element of the range.","title":"first"},{"location":"api/group___runtime_algorithm_1gaec62c07d494fde510ad4bc6a4421b51c/#last","text":"The iterator pointing to the one-past-last element of the range.","title":"last"},{"location":"api/group___runtime_algorithm_1gaec62c07d494fde510ad4bc6a4421b51c/#f","text":"The user-defined unary function object to be applied.","title":"f"},{"location":"api/group___runtime_algorithm_1gaec62c07d494fde510ad4bc6a4421b51c/#return-value","text":"Returns f .","title":"Return value"},{"location":"api/group___runtime_algorithm_1gaec62c07d494fde510ad4bc6a4421b51c/#valid-usage","text":"f must have the following function signature: void f(const Type& v) , where Type is the value type of _InputIt .","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1gaf546e5c4c399943badebda3ff2f355c0/","text":"Luna::set_intersection template <typename _InputIt1, typename _InputIt2, typename _OutputIt, typename _Compare> _OutputIt set_intersection(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first, _Compare comp) Constructs a sorted range consisting of elements that are found in both sorted ranges. Overview Parameters first1 The iterator pointing to the first element of the first range. last1 The iterator pointing to the one-past-last element of the first range. first2 The iterator pointing to the first element of the second range. last2 The iterator pointing to the one-past-last element of the second range. d_first The iterator pointing to the first element of the destination range. comp The user-provided binary predicate which returns \u200btrue if the first argument is less than the second. Return value Returns one iterator pointing to the one-past-last element of the destination range. Valid Usage Elements in the ranges specified by [ first1 , last1 ) and [ first2 , last2 ) must be sorted in non-descending order. comp must have the following function signature: bool comp(const Type& a, const Type& b) , where Type is the value type of both _InputIt1 and _InputIt2 .","title":"Luna::set_intersection"},{"location":"api/group___runtime_algorithm_1gaf546e5c4c399943badebda3ff2f355c0/#lunaset_intersection","text":"template <typename _InputIt1, typename _InputIt2, typename _OutputIt, typename _Compare> _OutputIt set_intersection(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first, _Compare comp) Constructs a sorted range consisting of elements that are found in both sorted ranges.","title":"Luna::set_intersection"},{"location":"api/group___runtime_algorithm_1gaf546e5c4c399943badebda3ff2f355c0/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1gaf546e5c4c399943badebda3ff2f355c0/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1gaf546e5c4c399943badebda3ff2f355c0/#first1","text":"The iterator pointing to the first element of the first range.","title":"first1"},{"location":"api/group___runtime_algorithm_1gaf546e5c4c399943badebda3ff2f355c0/#last1","text":"The iterator pointing to the one-past-last element of the first range.","title":"last1"},{"location":"api/group___runtime_algorithm_1gaf546e5c4c399943badebda3ff2f355c0/#first2","text":"The iterator pointing to the first element of the second range.","title":"first2"},{"location":"api/group___runtime_algorithm_1gaf546e5c4c399943badebda3ff2f355c0/#last2","text":"The iterator pointing to the one-past-last element of the second range.","title":"last2"},{"location":"api/group___runtime_algorithm_1gaf546e5c4c399943badebda3ff2f355c0/#d_first","text":"The iterator pointing to the first element of the destination range.","title":"d_first"},{"location":"api/group___runtime_algorithm_1gaf546e5c4c399943badebda3ff2f355c0/#comp","text":"The user-provided binary predicate which returns \u200btrue if the first argument is less than the second.","title":"comp"},{"location":"api/group___runtime_algorithm_1gaf546e5c4c399943badebda3ff2f355c0/#return-value","text":"Returns one iterator pointing to the one-past-last element of the destination range.","title":"Return value"},{"location":"api/group___runtime_algorithm_1gaf546e5c4c399943badebda3ff2f355c0/#valid-usage","text":"Elements in the ranges specified by [ first1 , last1 ) and [ first2 , last2 ) must be sorted in non-descending order. comp must have the following function signature: bool comp(const Type& a, const Type& b) , where Type is the value type of both _InputIt1 and _InputIt2 .","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1gaf65d96a5a322fb0ed174cda6b3de8847/","text":"Luna::equal_range template <typename _ForwardIt, typename _Ty, typename _Compare> Pair< _ForwardIt, _ForwardIt > equal_range(_ForwardIt first, _ForwardIt last, const _Ty &value, _Compare comp) Gets a range containing all elements equivalent to the specified value in the range. Overview Parameters first The iterator pointing to the first element of the range. last The iterator pointing to the one-past-last element of the range. value The value to compare elements to. comp The user-provided binary predicate which returns \u200btrue if the first argument is less than the second. Return value Returns a pair of iterators pointing to the begin and end of the range. The first iterator points to the first element of the range, the second iterator points to the one-past-last element of the range. If the specified element is not found in the range, returns one pair of iterators that are equal to each other. Valid Usage Elements in the range specified by [ first , last ) must be sorted in non-descending order. comp must have the following function signature: bool comp(const Type& a, const Type& b) , where Type is the value type of _ForwardIt .","title":"Luna::equal_range"},{"location":"api/group___runtime_algorithm_1gaf65d96a5a322fb0ed174cda6b3de8847/#lunaequal_range","text":"template <typename _ForwardIt, typename _Ty, typename _Compare> Pair< _ForwardIt, _ForwardIt > equal_range(_ForwardIt first, _ForwardIt last, const _Ty &value, _Compare comp) Gets a range containing all elements equivalent to the specified value in the range.","title":"Luna::equal_range"},{"location":"api/group___runtime_algorithm_1gaf65d96a5a322fb0ed174cda6b3de8847/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1gaf65d96a5a322fb0ed174cda6b3de8847/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1gaf65d96a5a322fb0ed174cda6b3de8847/#first","text":"The iterator pointing to the first element of the range.","title":"first"},{"location":"api/group___runtime_algorithm_1gaf65d96a5a322fb0ed174cda6b3de8847/#last","text":"The iterator pointing to the one-past-last element of the range.","title":"last"},{"location":"api/group___runtime_algorithm_1gaf65d96a5a322fb0ed174cda6b3de8847/#value","text":"The value to compare elements to.","title":"value"},{"location":"api/group___runtime_algorithm_1gaf65d96a5a322fb0ed174cda6b3de8847/#comp","text":"The user-provided binary predicate which returns \u200btrue if the first argument is less than the second.","title":"comp"},{"location":"api/group___runtime_algorithm_1gaf65d96a5a322fb0ed174cda6b3de8847/#return-value","text":"Returns a pair of iterators pointing to the begin and end of the range. The first iterator points to the first element of the range, the second iterator points to the one-past-last element of the range. If the specified element is not found in the range, returns one pair of iterators that are equal to each other.","title":"Return value"},{"location":"api/group___runtime_algorithm_1gaf65d96a5a322fb0ed174cda6b3de8847/#valid-usage","text":"Elements in the range specified by [ first , last ) must be sorted in non-descending order. comp must have the following function signature: bool comp(const Type& a, const Type& b) , where Type is the value type of _ForwardIt .","title":"Valid Usage"},{"location":"api/group___runtime_algorithm_1gaf79ba68237591937a91d96e1ef807944/","text":"Luna::sort template <typename _RandomIt, typename _Compare> void sort(_RandomIt first, _RandomIt last, _Compare comp) Sorts the elements in the range in non-descending order. The order of equal elements is not guaranteed to be preserved. Overview Parameters first The iterator pointing to the first element of the range. last The iterator pointing to the one-past-last element of the range. comp The user-defined comparision function object, which returns true if the first argument is less than the second. Valid Usage comp must have the following function signature: bool comp(const Type& a, const Type& b) , where Type is the value type of _RandomIt .","title":"Luna::sort"},{"location":"api/group___runtime_algorithm_1gaf79ba68237591937a91d96e1ef807944/#lunasort","text":"template <typename _RandomIt, typename _Compare> void sort(_RandomIt first, _RandomIt last, _Compare comp) Sorts the elements in the range in non-descending order. The order of equal elements is not guaranteed to be preserved.","title":"Luna::sort"},{"location":"api/group___runtime_algorithm_1gaf79ba68237591937a91d96e1ef807944/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_algorithm_1gaf79ba68237591937a91d96e1ef807944/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_algorithm_1gaf79ba68237591937a91d96e1ef807944/#first","text":"The iterator pointing to the first element of the range.","title":"first"},{"location":"api/group___runtime_algorithm_1gaf79ba68237591937a91d96e1ef807944/#last","text":"The iterator pointing to the one-past-last element of the range.","title":"last"},{"location":"api/group___runtime_algorithm_1gaf79ba68237591937a91d96e1ef807944/#comp","text":"The user-defined comparision function object, which returns true if the first argument is less than the second.","title":"comp"},{"location":"api/group___runtime_algorithm_1gaf79ba68237591937a91d96e1ef807944/#valid-usage","text":"comp must have the following function signature: bool comp(const Type& a, const Type& b) , where Type is the value type of _RandomIt .","title":"Valid Usage"},{"location":"api/group___runtime_atomic_1ga052ebc68d59e6cd7e925a6fba665d837/","text":"Luna::atom_compare_exchange_u32 u32 atom_compare_exchange_u32(u32 volatile *dst, u32 exchange, u32 comperand) Atomically compares the value of the variable with the specified comperand, and sets the variable to the specified value if equal. Overview Parameters dst The pointer to the variable that needs to be compared. exchange The value to set to the variable if *dst == comperand . comperand The value to compare with. Return value Returns the value of the variable before this operation took place.","title":"Luna::atom_compare_exchange_u32"},{"location":"api/group___runtime_atomic_1ga052ebc68d59e6cd7e925a6fba665d837/#lunaatom_compare_exchange_u32","text":"u32 atom_compare_exchange_u32(u32 volatile *dst, u32 exchange, u32 comperand) Atomically compares the value of the variable with the specified comperand, and sets the variable to the specified value if equal.","title":"Luna::atom_compare_exchange_u32"},{"location":"api/group___runtime_atomic_1ga052ebc68d59e6cd7e925a6fba665d837/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_atomic_1ga052ebc68d59e6cd7e925a6fba665d837/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_atomic_1ga052ebc68d59e6cd7e925a6fba665d837/#dst","text":"The pointer to the variable that needs to be compared.","title":"dst"},{"location":"api/group___runtime_atomic_1ga052ebc68d59e6cd7e925a6fba665d837/#exchange","text":"The value to set to the variable if *dst == comperand .","title":"exchange"},{"location":"api/group___runtime_atomic_1ga052ebc68d59e6cd7e925a6fba665d837/#comperand","text":"The value to compare with.","title":"comperand"},{"location":"api/group___runtime_atomic_1ga052ebc68d59e6cd7e925a6fba665d837/#return-value","text":"Returns the value of the variable before this operation took place.","title":"Return value"},{"location":"api/group___runtime_atomic_1ga1d9de4afb248d2c77378e1ea7b7a36cd/","text":"Luna::atom_exchange_i64 i64 atom_exchange_i64(i64 volatile *dst, i64 v) Atomically replace the value of the variable with the value provided. Overview This operation cannot be interrupted by system thread switching. Parameters dst The pointer to the variable that needs to be changed. v The value that needs to be set to the variable. Return value Returns the value of the variable before this operation took place.","title":"Luna::atom_exchange_i64"},{"location":"api/group___runtime_atomic_1ga1d9de4afb248d2c77378e1ea7b7a36cd/#lunaatom_exchange_i64","text":"i64 atom_exchange_i64(i64 volatile *dst, i64 v) Atomically replace the value of the variable with the value provided.","title":"Luna::atom_exchange_i64"},{"location":"api/group___runtime_atomic_1ga1d9de4afb248d2c77378e1ea7b7a36cd/#overview","text":"This operation cannot be interrupted by system thread switching.","title":"Overview"},{"location":"api/group___runtime_atomic_1ga1d9de4afb248d2c77378e1ea7b7a36cd/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_atomic_1ga1d9de4afb248d2c77378e1ea7b7a36cd/#dst","text":"The pointer to the variable that needs to be changed.","title":"dst"},{"location":"api/group___runtime_atomic_1ga1d9de4afb248d2c77378e1ea7b7a36cd/#v","text":"The value that needs to be set to the variable.","title":"v"},{"location":"api/group___runtime_atomic_1ga1d9de4afb248d2c77378e1ea7b7a36cd/#return-value","text":"Returns the value of the variable before this operation took place.","title":"Return value"},{"location":"api/group___runtime_atomic_1ga2edbadd594f46bf5a723bbb862816a7e/","text":"Luna::atom_dec_i64 i64 atom_dec_i64(i64 volatile *v) Atomically decrease the value of the variable by 1. Overview This operation cannot be interrupted by system thread switching. Parameters v The pointer to the variable that needs to be changed. Return value Returns the value of the variable after this operation.","title":"Luna::atom_dec_i64"},{"location":"api/group___runtime_atomic_1ga2edbadd594f46bf5a723bbb862816a7e/#lunaatom_dec_i64","text":"i64 atom_dec_i64(i64 volatile *v) Atomically decrease the value of the variable by 1.","title":"Luna::atom_dec_i64"},{"location":"api/group___runtime_atomic_1ga2edbadd594f46bf5a723bbb862816a7e/#overview","text":"This operation cannot be interrupted by system thread switching.","title":"Overview"},{"location":"api/group___runtime_atomic_1ga2edbadd594f46bf5a723bbb862816a7e/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_atomic_1ga2edbadd594f46bf5a723bbb862816a7e/#v","text":"The pointer to the variable that needs to be changed.","title":"v"},{"location":"api/group___runtime_atomic_1ga2edbadd594f46bf5a723bbb862816a7e/#return-value","text":"Returns the value of the variable after this operation.","title":"Return value"},{"location":"api/group___runtime_atomic_1ga49d341d1f579fbab68f5ef1132bd473c/","text":"Luna::atom_add_u32 u32 atom_add_u32(u32 volatile *base, i32 v) Atomically increase the value of the variable by the the value provided. Overview This operation cannot be interrupted by system thread switching. Parameters base The pointer to the variable that needs to be changed. v The value that needs to be added to the variable. Return value Returns the value of the variable before this operation.","title":"Luna::atom_add_u32"},{"location":"api/group___runtime_atomic_1ga49d341d1f579fbab68f5ef1132bd473c/#lunaatom_add_u32","text":"u32 atom_add_u32(u32 volatile *base, i32 v) Atomically increase the value of the variable by the the value provided.","title":"Luna::atom_add_u32"},{"location":"api/group___runtime_atomic_1ga49d341d1f579fbab68f5ef1132bd473c/#overview","text":"This operation cannot be interrupted by system thread switching.","title":"Overview"},{"location":"api/group___runtime_atomic_1ga49d341d1f579fbab68f5ef1132bd473c/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_atomic_1ga49d341d1f579fbab68f5ef1132bd473c/#base","text":"The pointer to the variable that needs to be changed.","title":"base"},{"location":"api/group___runtime_atomic_1ga49d341d1f579fbab68f5ef1132bd473c/#v","text":"The value that needs to be added to the variable.","title":"v"},{"location":"api/group___runtime_atomic_1ga49d341d1f579fbab68f5ef1132bd473c/#return-value","text":"Returns the value of the variable before this operation.","title":"Return value"},{"location":"api/group___runtime_atomic_1ga4dfa84dda4fc0790182c43da18d9b7ba/","text":"Luna::atom_exchange_i32 i32 atom_exchange_i32(i32 volatile *dst, i32 v) Atomically replace the value of the variable with the value provided. Overview This operation cannot be interrupted by system thread switching. Parameters dst The pointer to the variable that needs to be changed. v The value that needs to be set to the variable. Return value Returns the value of the variable before this operation took place.","title":"Luna::atom_exchange_i32"},{"location":"api/group___runtime_atomic_1ga4dfa84dda4fc0790182c43da18d9b7ba/#lunaatom_exchange_i32","text":"i32 atom_exchange_i32(i32 volatile *dst, i32 v) Atomically replace the value of the variable with the value provided.","title":"Luna::atom_exchange_i32"},{"location":"api/group___runtime_atomic_1ga4dfa84dda4fc0790182c43da18d9b7ba/#overview","text":"This operation cannot be interrupted by system thread switching.","title":"Overview"},{"location":"api/group___runtime_atomic_1ga4dfa84dda4fc0790182c43da18d9b7ba/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_atomic_1ga4dfa84dda4fc0790182c43da18d9b7ba/#dst","text":"The pointer to the variable that needs to be changed.","title":"dst"},{"location":"api/group___runtime_atomic_1ga4dfa84dda4fc0790182c43da18d9b7ba/#v","text":"The value that needs to be set to the variable.","title":"v"},{"location":"api/group___runtime_atomic_1ga4dfa84dda4fc0790182c43da18d9b7ba/#return-value","text":"Returns the value of the variable before this operation took place.","title":"Return value"},{"location":"api/group___runtime_atomic_1ga5d80a9933e7c6fd8b1aeffae59a9401e/","text":"Luna::atom_dec_u32 u32 atom_dec_u32(u32 volatile *v) Atomically decrease the value of the variable by 1. Overview This operation cannot be interrupted by system thread switching. Parameters v The pointer to the variable that needs to be changed. Return value Returns the value of the variable after this operation.","title":"Luna::atom_dec_u32"},{"location":"api/group___runtime_atomic_1ga5d80a9933e7c6fd8b1aeffae59a9401e/#lunaatom_dec_u32","text":"u32 atom_dec_u32(u32 volatile *v) Atomically decrease the value of the variable by 1.","title":"Luna::atom_dec_u32"},{"location":"api/group___runtime_atomic_1ga5d80a9933e7c6fd8b1aeffae59a9401e/#overview","text":"This operation cannot be interrupted by system thread switching.","title":"Overview"},{"location":"api/group___runtime_atomic_1ga5d80a9933e7c6fd8b1aeffae59a9401e/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_atomic_1ga5d80a9933e7c6fd8b1aeffae59a9401e/#v","text":"The pointer to the variable that needs to be changed.","title":"v"},{"location":"api/group___runtime_atomic_1ga5d80a9933e7c6fd8b1aeffae59a9401e/#return-value","text":"Returns the value of the variable after this operation.","title":"Return value"},{"location":"api/group___runtime_atomic_1ga6518f9b14abc2ee70d4091514214dfbf/","text":"Luna::atom_inc_u32 u32 atom_inc_u32(u32 volatile *v) Atomically increase the value of the variable by 1. Overview This operation cannot be interrupted by system thread switching. Parameters v The pointer to the variable that needs to be changed. Return value Returns the value of the variable after this operation.","title":"Luna::atom_inc_u32"},{"location":"api/group___runtime_atomic_1ga6518f9b14abc2ee70d4091514214dfbf/#lunaatom_inc_u32","text":"u32 atom_inc_u32(u32 volatile *v) Atomically increase the value of the variable by 1.","title":"Luna::atom_inc_u32"},{"location":"api/group___runtime_atomic_1ga6518f9b14abc2ee70d4091514214dfbf/#overview","text":"This operation cannot be interrupted by system thread switching.","title":"Overview"},{"location":"api/group___runtime_atomic_1ga6518f9b14abc2ee70d4091514214dfbf/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_atomic_1ga6518f9b14abc2ee70d4091514214dfbf/#v","text":"The pointer to the variable that needs to be changed.","title":"v"},{"location":"api/group___runtime_atomic_1ga6518f9b14abc2ee70d4091514214dfbf/#return-value","text":"Returns the value of the variable after this operation.","title":"Return value"},{"location":"api/group___runtime_atomic_1ga69573d3b1723490896654b184576459f/","text":"Luna::atom_inc_usize usize atom_inc_usize(usize volatile *v) Atomically increase the value of the variable by 1. Overview This operation cannot be interrupted by system thread switching. Parameters v The pointer to the variable that needs to be changed. Return value Returns the value of the variable after this operation.","title":"Luna::atom_inc_usize"},{"location":"api/group___runtime_atomic_1ga69573d3b1723490896654b184576459f/#lunaatom_inc_usize","text":"usize atom_inc_usize(usize volatile *v) Atomically increase the value of the variable by 1.","title":"Luna::atom_inc_usize"},{"location":"api/group___runtime_atomic_1ga69573d3b1723490896654b184576459f/#overview","text":"This operation cannot be interrupted by system thread switching.","title":"Overview"},{"location":"api/group___runtime_atomic_1ga69573d3b1723490896654b184576459f/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_atomic_1ga69573d3b1723490896654b184576459f/#v","text":"The pointer to the variable that needs to be changed.","title":"v"},{"location":"api/group___runtime_atomic_1ga69573d3b1723490896654b184576459f/#return-value","text":"Returns the value of the variable after this operation.","title":"Return value"},{"location":"api/group___runtime_atomic_1ga7863b3a44ba17280c9e03b50d4e7f70e/","text":"Luna::atom_exchange_usize usize atom_exchange_usize(usize volatile *dst, usize v) Atomically replace the value of the variable with the value provided. Overview This operation cannot be interrupted by system thread switching. Parameters dst The pointer to the variable that needs to be changed. v The value that needs to be set to the variable. Return value Returns the value of the variable before this operation took place.","title":"Luna::atom_exchange_usize"},{"location":"api/group___runtime_atomic_1ga7863b3a44ba17280c9e03b50d4e7f70e/#lunaatom_exchange_usize","text":"usize atom_exchange_usize(usize volatile *dst, usize v) Atomically replace the value of the variable with the value provided.","title":"Luna::atom_exchange_usize"},{"location":"api/group___runtime_atomic_1ga7863b3a44ba17280c9e03b50d4e7f70e/#overview","text":"This operation cannot be interrupted by system thread switching.","title":"Overview"},{"location":"api/group___runtime_atomic_1ga7863b3a44ba17280c9e03b50d4e7f70e/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_atomic_1ga7863b3a44ba17280c9e03b50d4e7f70e/#dst","text":"The pointer to the variable that needs to be changed.","title":"dst"},{"location":"api/group___runtime_atomic_1ga7863b3a44ba17280c9e03b50d4e7f70e/#v","text":"The value that needs to be set to the variable.","title":"v"},{"location":"api/group___runtime_atomic_1ga7863b3a44ba17280c9e03b50d4e7f70e/#return-value","text":"Returns the value of the variable before this operation took place.","title":"Return value"},{"location":"api/group___runtime_atomic_1ga81153c02015584994d148c7b52c16ceb/","text":"Luna::atom_compare_exchange_pointer template <typename _Ty> _Ty * atom_compare_exchange_pointer(_Ty *volatile *dst, void *exchange, void *comperand) Atomically compares the value of the variable with the specified comperand, and sets the variable to the specified value if equal. Overview Parameters dst The pointer to the variable that needs to be compared. exchange The value to set to the variable if *dst == comperand . comperand The value to compare with. Return value Returns the value of the variable before this operation took place.","title":"Luna::atom_compare_exchange_pointer"},{"location":"api/group___runtime_atomic_1ga81153c02015584994d148c7b52c16ceb/#lunaatom_compare_exchange_pointer","text":"template <typename _Ty> _Ty * atom_compare_exchange_pointer(_Ty *volatile *dst, void *exchange, void *comperand) Atomically compares the value of the variable with the specified comperand, and sets the variable to the specified value if equal.","title":"Luna::atom_compare_exchange_pointer"},{"location":"api/group___runtime_atomic_1ga81153c02015584994d148c7b52c16ceb/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_atomic_1ga81153c02015584994d148c7b52c16ceb/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_atomic_1ga81153c02015584994d148c7b52c16ceb/#dst","text":"The pointer to the variable that needs to be compared.","title":"dst"},{"location":"api/group___runtime_atomic_1ga81153c02015584994d148c7b52c16ceb/#exchange","text":"The value to set to the variable if *dst == comperand .","title":"exchange"},{"location":"api/group___runtime_atomic_1ga81153c02015584994d148c7b52c16ceb/#comperand","text":"The value to compare with.","title":"comperand"},{"location":"api/group___runtime_atomic_1ga81153c02015584994d148c7b52c16ceb/#return-value","text":"Returns the value of the variable before this operation took place.","title":"Return value"},{"location":"api/group___runtime_atomic_1ga87e1475faf37125af9943c8b57477523/","text":"Luna::atom_add_i32 i32 atom_add_i32(i32 volatile *base, i32 v) Atomically increase the value of the variable by the the value provided. Overview This operation cannot be interrupted by system thread switching. Parameters base The pointer to the variable that needs to be changed. v The value that needs to be added to the variable. Return value Returns the value of the variable before this operation.","title":"Luna::atom_add_i32"},{"location":"api/group___runtime_atomic_1ga87e1475faf37125af9943c8b57477523/#lunaatom_add_i32","text":"i32 atom_add_i32(i32 volatile *base, i32 v) Atomically increase the value of the variable by the the value provided.","title":"Luna::atom_add_i32"},{"location":"api/group___runtime_atomic_1ga87e1475faf37125af9943c8b57477523/#overview","text":"This operation cannot be interrupted by system thread switching.","title":"Overview"},{"location":"api/group___runtime_atomic_1ga87e1475faf37125af9943c8b57477523/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_atomic_1ga87e1475faf37125af9943c8b57477523/#base","text":"The pointer to the variable that needs to be changed.","title":"base"},{"location":"api/group___runtime_atomic_1ga87e1475faf37125af9943c8b57477523/#v","text":"The value that needs to be added to the variable.","title":"v"},{"location":"api/group___runtime_atomic_1ga87e1475faf37125af9943c8b57477523/#return-value","text":"Returns the value of the variable before this operation.","title":"Return value"},{"location":"api/group___runtime_atomic_1ga8983ea053ce60d5d84ab0bed9b62a4fb/","text":"Luna::atom_add_u64 u64 atom_add_u64(u64 volatile *base, i64 v) Atomically increase the value of the variable by the the value provided. Overview This operation cannot be interrupted by system thread switching. Parameters base The pointer to the variable that needs to be changed. v The value that needs to be added to the variable. Return value Returns the value of the variable before this operation.","title":"Luna::atom_add_u64"},{"location":"api/group___runtime_atomic_1ga8983ea053ce60d5d84ab0bed9b62a4fb/#lunaatom_add_u64","text":"u64 atom_add_u64(u64 volatile *base, i64 v) Atomically increase the value of the variable by the the value provided.","title":"Luna::atom_add_u64"},{"location":"api/group___runtime_atomic_1ga8983ea053ce60d5d84ab0bed9b62a4fb/#overview","text":"This operation cannot be interrupted by system thread switching.","title":"Overview"},{"location":"api/group___runtime_atomic_1ga8983ea053ce60d5d84ab0bed9b62a4fb/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_atomic_1ga8983ea053ce60d5d84ab0bed9b62a4fb/#base","text":"The pointer to the variable that needs to be changed.","title":"base"},{"location":"api/group___runtime_atomic_1ga8983ea053ce60d5d84ab0bed9b62a4fb/#v","text":"The value that needs to be added to the variable.","title":"v"},{"location":"api/group___runtime_atomic_1ga8983ea053ce60d5d84ab0bed9b62a4fb/#return-value","text":"Returns the value of the variable before this operation.","title":"Return value"},{"location":"api/group___runtime_atomic_1ga93fd78ec313117f79a24d3417839a990/","text":"Luna::atom_inc_i32 i32 atom_inc_i32(i32 volatile *v) Atomically increase the value of the variable by 1. Overview This operation cannot be interrupted by system thread switching. Parameters v The pointer to the variable that needs to be changed. Return value Returns the value of the variable after this operation.","title":"Luna::atom_inc_i32"},{"location":"api/group___runtime_atomic_1ga93fd78ec313117f79a24d3417839a990/#lunaatom_inc_i32","text":"i32 atom_inc_i32(i32 volatile *v) Atomically increase the value of the variable by 1.","title":"Luna::atom_inc_i32"},{"location":"api/group___runtime_atomic_1ga93fd78ec313117f79a24d3417839a990/#overview","text":"This operation cannot be interrupted by system thread switching.","title":"Overview"},{"location":"api/group___runtime_atomic_1ga93fd78ec313117f79a24d3417839a990/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_atomic_1ga93fd78ec313117f79a24d3417839a990/#v","text":"The pointer to the variable that needs to be changed.","title":"v"},{"location":"api/group___runtime_atomic_1ga93fd78ec313117f79a24d3417839a990/#return-value","text":"Returns the value of the variable after this operation.","title":"Return value"},{"location":"api/group___runtime_atomic_1ga968dc37e8476a93bda283261d818af2a/","text":"Luna::atom_exchange_u64 u64 atom_exchange_u64(u64 volatile *dst, u64 v) Atomically replace the value of the variable with the value provided. Overview This operation cannot be interrupted by system thread switching. Parameters dst The pointer to the variable that needs to be changed. v The value that needs to be set to the variable. Return value Returns the value of the variable before this operation took place.","title":"Luna::atom_exchange_u64"},{"location":"api/group___runtime_atomic_1ga968dc37e8476a93bda283261d818af2a/#lunaatom_exchange_u64","text":"u64 atom_exchange_u64(u64 volatile *dst, u64 v) Atomically replace the value of the variable with the value provided.","title":"Luna::atom_exchange_u64"},{"location":"api/group___runtime_atomic_1ga968dc37e8476a93bda283261d818af2a/#overview","text":"This operation cannot be interrupted by system thread switching.","title":"Overview"},{"location":"api/group___runtime_atomic_1ga968dc37e8476a93bda283261d818af2a/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_atomic_1ga968dc37e8476a93bda283261d818af2a/#dst","text":"The pointer to the variable that needs to be changed.","title":"dst"},{"location":"api/group___runtime_atomic_1ga968dc37e8476a93bda283261d818af2a/#v","text":"The value that needs to be set to the variable.","title":"v"},{"location":"api/group___runtime_atomic_1ga968dc37e8476a93bda283261d818af2a/#return-value","text":"Returns the value of the variable before this operation took place.","title":"Return value"},{"location":"api/group___runtime_atomic_1ga9eab0a468ed18345fd61ca078ff0ad2d/","text":"Luna::atom_dec_u64 u64 atom_dec_u64(u64 volatile *v) Atomically decrease the value of the variable by 1. Overview This operation cannot be interrupted by system thread switching. Parameters v The pointer to the variable that needs to be changed. Return value Returns the value of the variable after this operation.","title":"Luna::atom_dec_u64"},{"location":"api/group___runtime_atomic_1ga9eab0a468ed18345fd61ca078ff0ad2d/#lunaatom_dec_u64","text":"u64 atom_dec_u64(u64 volatile *v) Atomically decrease the value of the variable by 1.","title":"Luna::atom_dec_u64"},{"location":"api/group___runtime_atomic_1ga9eab0a468ed18345fd61ca078ff0ad2d/#overview","text":"This operation cannot be interrupted by system thread switching.","title":"Overview"},{"location":"api/group___runtime_atomic_1ga9eab0a468ed18345fd61ca078ff0ad2d/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_atomic_1ga9eab0a468ed18345fd61ca078ff0ad2d/#v","text":"The pointer to the variable that needs to be changed.","title":"v"},{"location":"api/group___runtime_atomic_1ga9eab0a468ed18345fd61ca078ff0ad2d/#return-value","text":"Returns the value of the variable after this operation.","title":"Return value"},{"location":"api/group___runtime_atomic_1gaa488e7d5ebb05db6c71c3ec64448d4df/","text":"Luna::atom_inc_u64 u64 atom_inc_u64(u64 volatile *v) Atomically increase the value of the variable by 1. Overview This operation cannot be interrupted by system thread switching. Parameters v The pointer to the variable that needs to be changed. Return value Returns the value of the variable after this operation.","title":"Luna::atom_inc_u64"},{"location":"api/group___runtime_atomic_1gaa488e7d5ebb05db6c71c3ec64448d4df/#lunaatom_inc_u64","text":"u64 atom_inc_u64(u64 volatile *v) Atomically increase the value of the variable by 1.","title":"Luna::atom_inc_u64"},{"location":"api/group___runtime_atomic_1gaa488e7d5ebb05db6c71c3ec64448d4df/#overview","text":"This operation cannot be interrupted by system thread switching.","title":"Overview"},{"location":"api/group___runtime_atomic_1gaa488e7d5ebb05db6c71c3ec64448d4df/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_atomic_1gaa488e7d5ebb05db6c71c3ec64448d4df/#v","text":"The pointer to the variable that needs to be changed.","title":"v"},{"location":"api/group___runtime_atomic_1gaa488e7d5ebb05db6c71c3ec64448d4df/#return-value","text":"Returns the value of the variable after this operation.","title":"Return value"},{"location":"api/group___runtime_atomic_1gab6bd5e2b180aad4f2d558a34140bc995/","text":"Luna::atom_add_i64 i64 atom_add_i64(i64 volatile *base, i64 v) Atomically increase the value of the variable by the the value provided. Overview This operation cannot be interrupted by system thread switching. Parameters base The pointer to the variable that needs to be changed. v The value that needs to be added to the variable. Return value Returns the value of the variable before this operation.","title":"Luna::atom_add_i64"},{"location":"api/group___runtime_atomic_1gab6bd5e2b180aad4f2d558a34140bc995/#lunaatom_add_i64","text":"i64 atom_add_i64(i64 volatile *base, i64 v) Atomically increase the value of the variable by the the value provided.","title":"Luna::atom_add_i64"},{"location":"api/group___runtime_atomic_1gab6bd5e2b180aad4f2d558a34140bc995/#overview","text":"This operation cannot be interrupted by system thread switching.","title":"Overview"},{"location":"api/group___runtime_atomic_1gab6bd5e2b180aad4f2d558a34140bc995/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_atomic_1gab6bd5e2b180aad4f2d558a34140bc995/#base","text":"The pointer to the variable that needs to be changed.","title":"base"},{"location":"api/group___runtime_atomic_1gab6bd5e2b180aad4f2d558a34140bc995/#v","text":"The value that needs to be added to the variable.","title":"v"},{"location":"api/group___runtime_atomic_1gab6bd5e2b180aad4f2d558a34140bc995/#return-value","text":"Returns the value of the variable before this operation.","title":"Return value"},{"location":"api/group___runtime_atomic_1gad1ea6147a2eb3dcacaa983ff8ed4ceed/","text":"Luna::atom_dec_usize usize atom_dec_usize(usize volatile *v) Atomically decrease the value of the variable by 1. Overview This operation cannot be interrupted by system thread switching. Parameters v The pointer to the variable that needs to be changed. Return value Returns the value of the variable after this operation.","title":"Luna::atom_dec_usize"},{"location":"api/group___runtime_atomic_1gad1ea6147a2eb3dcacaa983ff8ed4ceed/#lunaatom_dec_usize","text":"usize atom_dec_usize(usize volatile *v) Atomically decrease the value of the variable by 1.","title":"Luna::atom_dec_usize"},{"location":"api/group___runtime_atomic_1gad1ea6147a2eb3dcacaa983ff8ed4ceed/#overview","text":"This operation cannot be interrupted by system thread switching.","title":"Overview"},{"location":"api/group___runtime_atomic_1gad1ea6147a2eb3dcacaa983ff8ed4ceed/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_atomic_1gad1ea6147a2eb3dcacaa983ff8ed4ceed/#v","text":"The pointer to the variable that needs to be changed.","title":"v"},{"location":"api/group___runtime_atomic_1gad1ea6147a2eb3dcacaa983ff8ed4ceed/#return-value","text":"Returns the value of the variable after this operation.","title":"Return value"},{"location":"api/group___runtime_atomic_1gad23be0a05e525acf2b27afc09d89c2ed/","text":"Luna::atom_compare_exchange_usize usize atom_compare_exchange_usize(usize volatile *dst, usize exchange, usize comperand) Atomically compares the value of the variable with the specified comperand, and sets the variable to the specified value if equal. Overview Parameters dst The pointer to the variable that needs to be compared. exchange The value to set to the variable if *dst == comperand . comperand The value to compare with. Return value Returns the value of the variable before this operation took place.","title":"Luna::atom_compare_exchange_usize"},{"location":"api/group___runtime_atomic_1gad23be0a05e525acf2b27afc09d89c2ed/#lunaatom_compare_exchange_usize","text":"usize atom_compare_exchange_usize(usize volatile *dst, usize exchange, usize comperand) Atomically compares the value of the variable with the specified comperand, and sets the variable to the specified value if equal.","title":"Luna::atom_compare_exchange_usize"},{"location":"api/group___runtime_atomic_1gad23be0a05e525acf2b27afc09d89c2ed/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_atomic_1gad23be0a05e525acf2b27afc09d89c2ed/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_atomic_1gad23be0a05e525acf2b27afc09d89c2ed/#dst","text":"The pointer to the variable that needs to be compared.","title":"dst"},{"location":"api/group___runtime_atomic_1gad23be0a05e525acf2b27afc09d89c2ed/#exchange","text":"The value to set to the variable if *dst == comperand .","title":"exchange"},{"location":"api/group___runtime_atomic_1gad23be0a05e525acf2b27afc09d89c2ed/#comperand","text":"The value to compare with.","title":"comperand"},{"location":"api/group___runtime_atomic_1gad23be0a05e525acf2b27afc09d89c2ed/#return-value","text":"Returns the value of the variable before this operation took place.","title":"Return value"},{"location":"api/group___runtime_atomic_1gad90ccf004b120e9777e9d57f55315887/","text":"Luna::atom_exchange_pointer template <typename _Ty> _Ty * atom_exchange_pointer(_Ty *volatile *target, void *value) Atomically replace the value of the variable with the value provided. Overview This operation cannot be interrupted by system thread switching. Parameters dst The pointer to the variable that needs to be changed. v The value that needs to be set to the variable. Return value Returns the value of the variable before this operation took place.","title":"Luna::atom_exchange_pointer"},{"location":"api/group___runtime_atomic_1gad90ccf004b120e9777e9d57f55315887/#lunaatom_exchange_pointer","text":"template <typename _Ty> _Ty * atom_exchange_pointer(_Ty *volatile *target, void *value) Atomically replace the value of the variable with the value provided.","title":"Luna::atom_exchange_pointer"},{"location":"api/group___runtime_atomic_1gad90ccf004b120e9777e9d57f55315887/#overview","text":"This operation cannot be interrupted by system thread switching.","title":"Overview"},{"location":"api/group___runtime_atomic_1gad90ccf004b120e9777e9d57f55315887/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_atomic_1gad90ccf004b120e9777e9d57f55315887/#dst","text":"The pointer to the variable that needs to be changed.","title":"dst"},{"location":"api/group___runtime_atomic_1gad90ccf004b120e9777e9d57f55315887/#v","text":"The value that needs to be set to the variable.","title":"v"},{"location":"api/group___runtime_atomic_1gad90ccf004b120e9777e9d57f55315887/#return-value","text":"Returns the value of the variable before this operation took place.","title":"Return value"},{"location":"api/group___runtime_atomic_1gaded38c04fc62137615098589f994570c/","text":"Luna::atom_add_usize usize atom_add_usize(usize volatile *base, isize v) Atomically increase the value of the variable by the the value provided. Overview This operation cannot be interrupted by system thread switching. Parameters base The pointer to the variable that needs to be changed. v The value that needs to be added to the variable. Return value Returns the value of the variable before this operation.","title":"Luna::atom_add_usize"},{"location":"api/group___runtime_atomic_1gaded38c04fc62137615098589f994570c/#lunaatom_add_usize","text":"usize atom_add_usize(usize volatile *base, isize v) Atomically increase the value of the variable by the the value provided.","title":"Luna::atom_add_usize"},{"location":"api/group___runtime_atomic_1gaded38c04fc62137615098589f994570c/#overview","text":"This operation cannot be interrupted by system thread switching.","title":"Overview"},{"location":"api/group___runtime_atomic_1gaded38c04fc62137615098589f994570c/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_atomic_1gaded38c04fc62137615098589f994570c/#base","text":"The pointer to the variable that needs to be changed.","title":"base"},{"location":"api/group___runtime_atomic_1gaded38c04fc62137615098589f994570c/#v","text":"The value that needs to be added to the variable.","title":"v"},{"location":"api/group___runtime_atomic_1gaded38c04fc62137615098589f994570c/#return-value","text":"Returns the value of the variable before this operation.","title":"Return value"},{"location":"api/group___runtime_atomic_1gadf6d183e6f826c4d6a090edec5a8fdda/","text":"Luna::atom_dec_i32 i32 atom_dec_i32(i32 volatile *v) Atomically decrease the value of the variable by 1. Overview This operation cannot be interrupted by system thread switching. Parameters v The pointer to the variable that needs to be changed. Return value Returns the value of the variable after this operation.","title":"Luna::atom_dec_i32"},{"location":"api/group___runtime_atomic_1gadf6d183e6f826c4d6a090edec5a8fdda/#lunaatom_dec_i32","text":"i32 atom_dec_i32(i32 volatile *v) Atomically decrease the value of the variable by 1.","title":"Luna::atom_dec_i32"},{"location":"api/group___runtime_atomic_1gadf6d183e6f826c4d6a090edec5a8fdda/#overview","text":"This operation cannot be interrupted by system thread switching.","title":"Overview"},{"location":"api/group___runtime_atomic_1gadf6d183e6f826c4d6a090edec5a8fdda/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_atomic_1gadf6d183e6f826c4d6a090edec5a8fdda/#v","text":"The pointer to the variable that needs to be changed.","title":"v"},{"location":"api/group___runtime_atomic_1gadf6d183e6f826c4d6a090edec5a8fdda/#return-value","text":"Returns the value of the variable after this operation.","title":"Return value"},{"location":"api/group___runtime_atomic_1gae708cad0929be90c9168ba2928578b47/","text":"Luna::atom_inc_i64 i64 atom_inc_i64(i64 volatile *v) Atomically increase the value of the variable by 1. Overview This operation cannot be interrupted by system thread switching. Parameters v The pointer to the variable that needs to be changed. Return value Returns the value of the variable after this operation.","title":"Luna::atom_inc_i64"},{"location":"api/group___runtime_atomic_1gae708cad0929be90c9168ba2928578b47/#lunaatom_inc_i64","text":"i64 atom_inc_i64(i64 volatile *v) Atomically increase the value of the variable by 1.","title":"Luna::atom_inc_i64"},{"location":"api/group___runtime_atomic_1gae708cad0929be90c9168ba2928578b47/#overview","text":"This operation cannot be interrupted by system thread switching.","title":"Overview"},{"location":"api/group___runtime_atomic_1gae708cad0929be90c9168ba2928578b47/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_atomic_1gae708cad0929be90c9168ba2928578b47/#v","text":"The pointer to the variable that needs to be changed.","title":"v"},{"location":"api/group___runtime_atomic_1gae708cad0929be90c9168ba2928578b47/#return-value","text":"Returns the value of the variable after this operation.","title":"Return value"},{"location":"api/group___runtime_atomic_1gaecf689ac29ab761332abbdb15ce2b7a2/","text":"Luna::atom_exchange_u32 u32 atom_exchange_u32(u32 volatile *dst, u32 v) Atomically replace the value of the variable with the value provided. Overview This operation cannot be interrupted by system thread switching. Parameters dst The pointer to the variable that needs to be changed. v The value that needs to be set to the variable. Return value Returns the value of the variable before this operation took place.","title":"Luna::atom_exchange_u32"},{"location":"api/group___runtime_atomic_1gaecf689ac29ab761332abbdb15ce2b7a2/#lunaatom_exchange_u32","text":"u32 atom_exchange_u32(u32 volatile *dst, u32 v) Atomically replace the value of the variable with the value provided.","title":"Luna::atom_exchange_u32"},{"location":"api/group___runtime_atomic_1gaecf689ac29ab761332abbdb15ce2b7a2/#overview","text":"This operation cannot be interrupted by system thread switching.","title":"Overview"},{"location":"api/group___runtime_atomic_1gaecf689ac29ab761332abbdb15ce2b7a2/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_atomic_1gaecf689ac29ab761332abbdb15ce2b7a2/#dst","text":"The pointer to the variable that needs to be changed.","title":"dst"},{"location":"api/group___runtime_atomic_1gaecf689ac29ab761332abbdb15ce2b7a2/#v","text":"The value that needs to be set to the variable.","title":"v"},{"location":"api/group___runtime_atomic_1gaecf689ac29ab761332abbdb15ce2b7a2/#return-value","text":"Returns the value of the variable before this operation took place.","title":"Return value"},{"location":"api/group___runtime_atomic_1gaf678d9768b4d454a41fccf2b33eb1f2a/","text":"Luna::atom_compare_exchange_i32 i32 atom_compare_exchange_i32(i32 volatile *dst, i32 exchange, i32 comperand) Atomically compares the value of the variable with the specified comperand, and sets the variable to the specified value if equal. Overview Parameters dst The pointer to the variable that needs to be compared. exchange The value to set to the variable if *dst == comperand . comperand The value to compare with. Return value Returns the value of the variable before this operation took place.","title":"Luna::atom_compare_exchange_i32"},{"location":"api/group___runtime_atomic_1gaf678d9768b4d454a41fccf2b33eb1f2a/#lunaatom_compare_exchange_i32","text":"i32 atom_compare_exchange_i32(i32 volatile *dst, i32 exchange, i32 comperand) Atomically compares the value of the variable with the specified comperand, and sets the variable to the specified value if equal.","title":"Luna::atom_compare_exchange_i32"},{"location":"api/group___runtime_atomic_1gaf678d9768b4d454a41fccf2b33eb1f2a/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_atomic_1gaf678d9768b4d454a41fccf2b33eb1f2a/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_atomic_1gaf678d9768b4d454a41fccf2b33eb1f2a/#dst","text":"The pointer to the variable that needs to be compared.","title":"dst"},{"location":"api/group___runtime_atomic_1gaf678d9768b4d454a41fccf2b33eb1f2a/#exchange","text":"The value to set to the variable if *dst == comperand .","title":"exchange"},{"location":"api/group___runtime_atomic_1gaf678d9768b4d454a41fccf2b33eb1f2a/#comperand","text":"The value to compare with.","title":"comperand"},{"location":"api/group___runtime_atomic_1gaf678d9768b4d454a41fccf2b33eb1f2a/#return-value","text":"Returns the value of the variable before this operation took place.","title":"Return value"},{"location":"api/group___runtime_base64_1ga0e46b91bd3c086745a6704a189fada6f/","text":"Luna::base64_get_decoded_size constexpr usize base64_get_decoded_size(usize encoded_size) Get the decoded binary size from the encoded base64 string size. Overview This value may be greater than the actual data size if the size of raw data is not times of 3. You should use this value to allocate memory, and use the size value returned by the actual decode function as the size information, since that is precise. Parameters encoded_size The size of the encoded string, in bytes, and not including the null terminator. Return value The size of the decoded raw data, in bytes.","title":"Luna::base64_get_decoded_size"},{"location":"api/group___runtime_base64_1ga0e46b91bd3c086745a6704a189fada6f/#lunabase64_get_decoded_size","text":"constexpr usize base64_get_decoded_size(usize encoded_size) Get the decoded binary size from the encoded base64 string size.","title":"Luna::base64_get_decoded_size"},{"location":"api/group___runtime_base64_1ga0e46b91bd3c086745a6704a189fada6f/#overview","text":"This value may be greater than the actual data size if the size of raw data is not times of 3. You should use this value to allocate memory, and use the size value returned by the actual decode function as the size information, since that is precise.","title":"Overview"},{"location":"api/group___runtime_base64_1ga0e46b91bd3c086745a6704a189fada6f/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_base64_1ga0e46b91bd3c086745a6704a189fada6f/#encoded_size","text":"The size of the encoded string, in bytes, and not including the null terminator.","title":"encoded_size"},{"location":"api/group___runtime_base64_1ga0e46b91bd3c086745a6704a189fada6f/#return-value","text":"The size of the decoded raw data, in bytes.","title":"Return value"},{"location":"api/group___runtime_base64_1gaa0d5ab0bffe4d19bffec6e45286e35e4/","text":"Luna::base64_get_encoded_size constexpr usize base64_get_encoded_size(usize raw_size) Get the encoded base64 string size from the raw data size. Overview Parameters raw_size The size of the raw binary data in bytes. Return value The size of the encoded string in bytes. The string size does not include the null-terminator.","title":"Luna::base64_get_encoded_size"},{"location":"api/group___runtime_base64_1gaa0d5ab0bffe4d19bffec6e45286e35e4/#lunabase64_get_encoded_size","text":"constexpr usize base64_get_encoded_size(usize raw_size) Get the encoded base64 string size from the raw data size.","title":"Luna::base64_get_encoded_size"},{"location":"api/group___runtime_base64_1gaa0d5ab0bffe4d19bffec6e45286e35e4/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_base64_1gaa0d5ab0bffe4d19bffec6e45286e35e4/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_base64_1gaa0d5ab0bffe4d19bffec6e45286e35e4/#raw_size","text":"The size of the raw binary data in bytes.","title":"raw_size"},{"location":"api/group___runtime_base64_1gaa0d5ab0bffe4d19bffec6e45286e35e4/#return-value","text":"The size of the encoded string in bytes. The string size does not include the null-terminator.","title":"Return value"},{"location":"api/group___runtime_base64_1gab65c5e01817dfa051460e90392b09b1f/","text":"Luna::base64_decode LUNA_RUNTIME_API usize base64_decode(void *dst, usize dst_max_bytes, const c8 *src, usize src_size_chars=USIZE_MAX) Decode a base64 string to binary data. The system assumes the string passed in is a valid base64 string. Overview Parameters dst The binary buffer used to hold the decoded data. dst_max_bytes The maximum bytes the dst buffer can hold. src The null-terminated base64 source string. src_size_chars The maximum characters to read in the src string. Specify USIZE_MAX to read the full string. Return value Returns the number of bytes decoded into the dst buffer.","title":"Luna::base64_decode"},{"location":"api/group___runtime_base64_1gab65c5e01817dfa051460e90392b09b1f/#lunabase64_decode","text":"LUNA_RUNTIME_API usize base64_decode(void *dst, usize dst_max_bytes, const c8 *src, usize src_size_chars=USIZE_MAX) Decode a base64 string to binary data. The system assumes the string passed in is a valid base64 string.","title":"Luna::base64_decode"},{"location":"api/group___runtime_base64_1gab65c5e01817dfa051460e90392b09b1f/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_base64_1gab65c5e01817dfa051460e90392b09b1f/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_base64_1gab65c5e01817dfa051460e90392b09b1f/#dst","text":"The binary buffer used to hold the decoded data.","title":"dst"},{"location":"api/group___runtime_base64_1gab65c5e01817dfa051460e90392b09b1f/#dst_max_bytes","text":"The maximum bytes the dst buffer can hold.","title":"dst_max_bytes"},{"location":"api/group___runtime_base64_1gab65c5e01817dfa051460e90392b09b1f/#src","text":"The null-terminated base64 source string.","title":"src"},{"location":"api/group___runtime_base64_1gab65c5e01817dfa051460e90392b09b1f/#src_size_chars","text":"The maximum characters to read in the src string. Specify USIZE_MAX to read the full string.","title":"src_size_chars"},{"location":"api/group___runtime_base64_1gab65c5e01817dfa051460e90392b09b1f/#return-value","text":"Returns the number of bytes decoded into the dst buffer.","title":"Return value"},{"location":"api/group___runtime_base64_1gac35704080d8056581fa46d6098112ca1/","text":"Luna::base64_encode LUNA_RUNTIME_API usize base64_encode(c8 *dst, usize dst_max_chars, const void *src, usize src_size_bytes) Encode a binary data to a base64 string. Overview Parameters dst The character buffer used to hold the encoded base64 string. dst_max_chars The maximum characters the dst buffer can hold, including the null-terminator. src The source binary data. src_size_bytes The size of the source binary data in bytes. Return value Returned the number of characters outputted into dst buffer.","title":"Luna::base64_encode"},{"location":"api/group___runtime_base64_1gac35704080d8056581fa46d6098112ca1/#lunabase64_encode","text":"LUNA_RUNTIME_API usize base64_encode(c8 *dst, usize dst_max_chars, const void *src, usize src_size_bytes) Encode a binary data to a base64 string.","title":"Luna::base64_encode"},{"location":"api/group___runtime_base64_1gac35704080d8056581fa46d6098112ca1/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_base64_1gac35704080d8056581fa46d6098112ca1/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_base64_1gac35704080d8056581fa46d6098112ca1/#dst","text":"The character buffer used to hold the encoded base64 string.","title":"dst"},{"location":"api/group___runtime_base64_1gac35704080d8056581fa46d6098112ca1/#dst_max_chars","text":"The maximum characters the dst buffer can hold, including the null-terminator.","title":"dst_max_chars"},{"location":"api/group___runtime_base64_1gac35704080d8056581fa46d6098112ca1/#src","text":"The source binary data.","title":"src"},{"location":"api/group___runtime_base64_1gac35704080d8056581fa46d6098112ca1/#src_size_bytes","text":"The size of the source binary data in bytes.","title":"src_size_bytes"},{"location":"api/group___runtime_base64_1gac35704080d8056581fa46d6098112ca1/#return-value","text":"Returned the number of characters outputted into dst buffer.","title":"Return value"},{"location":"api/group___runtime_base85_1ga06671340e30506df9cc9c7ed35009bdd/","text":"Luna::base85_get_decoded_size constexpr usize base85_get_decoded_size(usize encoded_size) Get the decoded binary size from the encoded base85 string size. Overview Parameters encoded_size The size of the encoded string, in bytes, and not including the null terminator. The size of the string must be times of 5. Return value The size of the decoded raw data, in bytes.","title":"Luna::base85_get_decoded_size"},{"location":"api/group___runtime_base85_1ga06671340e30506df9cc9c7ed35009bdd/#lunabase85_get_decoded_size","text":"constexpr usize base85_get_decoded_size(usize encoded_size) Get the decoded binary size from the encoded base85 string size.","title":"Luna::base85_get_decoded_size"},{"location":"api/group___runtime_base85_1ga06671340e30506df9cc9c7ed35009bdd/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_base85_1ga06671340e30506df9cc9c7ed35009bdd/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_base85_1ga06671340e30506df9cc9c7ed35009bdd/#encoded_size","text":"The size of the encoded string, in bytes, and not including the null terminator. The size of the string must be times of 5.","title":"encoded_size"},{"location":"api/group___runtime_base85_1ga06671340e30506df9cc9c7ed35009bdd/#return-value","text":"The size of the decoded raw data, in bytes.","title":"Return value"},{"location":"api/group___runtime_base85_1ga179de9a75197a8f4081eda479c009543/","text":"Luna::base85_get_encoded_size constexpr usize base85_get_encoded_size(usize raw_size) Get the encoded base85 string size from the raw data size. Overview Parameters raw_size The size of the raw binary data in bytes. This size must be times of 4. Return value The size of the encoded string in bytes. The string size does not include the null-terminator.","title":"Luna::base85_get_encoded_size"},{"location":"api/group___runtime_base85_1ga179de9a75197a8f4081eda479c009543/#lunabase85_get_encoded_size","text":"constexpr usize base85_get_encoded_size(usize raw_size) Get the encoded base85 string size from the raw data size.","title":"Luna::base85_get_encoded_size"},{"location":"api/group___runtime_base85_1ga179de9a75197a8f4081eda479c009543/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_base85_1ga179de9a75197a8f4081eda479c009543/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_base85_1ga179de9a75197a8f4081eda479c009543/#raw_size","text":"The size of the raw binary data in bytes. This size must be times of 4.","title":"raw_size"},{"location":"api/group___runtime_base85_1ga179de9a75197a8f4081eda479c009543/#return-value","text":"The size of the encoded string in bytes. The string size does not include the null-terminator.","title":"Return value"},{"location":"api/group___runtime_base85_1gad78cb4c9aa1e3efed5ba6aa94a26b473/","text":"Luna::base85_encode LUNA_RUNTIME_API usize base85_encode(c8 *dst, usize dst_max_chars, const void *src, usize src_size_bytes) Encode a binary data to a base85 string. Overview Parameters dst The character buffer used to hold the encoded base85 string. dst_max_chars The maximum characters the dst buffer can hold, including the null-terminator. src The source binary data. src_size_bytes The size of the source binary data in bytes. Return value Returned the number of characters outputted into dst buffer. Valid Usage If src_size_bytes is not 0 , src_size_bytes must be times of 4.","title":"Luna::base85_encode"},{"location":"api/group___runtime_base85_1gad78cb4c9aa1e3efed5ba6aa94a26b473/#lunabase85_encode","text":"LUNA_RUNTIME_API usize base85_encode(c8 *dst, usize dst_max_chars, const void *src, usize src_size_bytes) Encode a binary data to a base85 string.","title":"Luna::base85_encode"},{"location":"api/group___runtime_base85_1gad78cb4c9aa1e3efed5ba6aa94a26b473/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_base85_1gad78cb4c9aa1e3efed5ba6aa94a26b473/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_base85_1gad78cb4c9aa1e3efed5ba6aa94a26b473/#dst","text":"The character buffer used to hold the encoded base85 string.","title":"dst"},{"location":"api/group___runtime_base85_1gad78cb4c9aa1e3efed5ba6aa94a26b473/#dst_max_chars","text":"The maximum characters the dst buffer can hold, including the null-terminator.","title":"dst_max_chars"},{"location":"api/group___runtime_base85_1gad78cb4c9aa1e3efed5ba6aa94a26b473/#src","text":"The source binary data.","title":"src"},{"location":"api/group___runtime_base85_1gad78cb4c9aa1e3efed5ba6aa94a26b473/#src_size_bytes","text":"The size of the source binary data in bytes.","title":"src_size_bytes"},{"location":"api/group___runtime_base85_1gad78cb4c9aa1e3efed5ba6aa94a26b473/#return-value","text":"Returned the number of characters outputted into dst buffer.","title":"Return value"},{"location":"api/group___runtime_base85_1gad78cb4c9aa1e3efed5ba6aa94a26b473/#valid-usage","text":"If src_size_bytes is not 0 , src_size_bytes must be times of 4.","title":"Valid Usage"},{"location":"api/group___runtime_base85_1gae83719ffcccb1216cbaf51c6ecd3a302/","text":"Luna::base85_decode LUNA_RUNTIME_API usize base85_decode(void *dst, usize dst_max_bytes, const c8 *src, usize src_size_chars=USIZE_MAX) Decode a base85 string to binary data. The system assumes the string passed in is a valid base85 string. Overview Parameters dst The binary buffer used to hold the decoded data. dst_max_bytes The maximum bytes the dst buffer can hold. src The null-terminated base85 source string. src_size_chars The maximum characters to read in the src string. Specify USIZE_MAX to read the full string. Return value Returns the number of bytes decoded into the dst buffer. Valid Usage If src_size_bytes is neither 0 nor USIZE_MAX , src_size_bytes must be times of 5.","title":"Luna::base85_decode"},{"location":"api/group___runtime_base85_1gae83719ffcccb1216cbaf51c6ecd3a302/#lunabase85_decode","text":"LUNA_RUNTIME_API usize base85_decode(void *dst, usize dst_max_bytes, const c8 *src, usize src_size_chars=USIZE_MAX) Decode a base85 string to binary data. The system assumes the string passed in is a valid base85 string.","title":"Luna::base85_decode"},{"location":"api/group___runtime_base85_1gae83719ffcccb1216cbaf51c6ecd3a302/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_base85_1gae83719ffcccb1216cbaf51c6ecd3a302/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_base85_1gae83719ffcccb1216cbaf51c6ecd3a302/#dst","text":"The binary buffer used to hold the decoded data.","title":"dst"},{"location":"api/group___runtime_base85_1gae83719ffcccb1216cbaf51c6ecd3a302/#dst_max_bytes","text":"The maximum bytes the dst buffer can hold.","title":"dst_max_bytes"},{"location":"api/group___runtime_base85_1gae83719ffcccb1216cbaf51c6ecd3a302/#src","text":"The null-terminated base85 source string.","title":"src"},{"location":"api/group___runtime_base85_1gae83719ffcccb1216cbaf51c6ecd3a302/#src_size_chars","text":"The maximum characters to read in the src string. Specify USIZE_MAX to read the full string.","title":"src_size_chars"},{"location":"api/group___runtime_base85_1gae83719ffcccb1216cbaf51c6ecd3a302/#return-value","text":"Returns the number of bytes decoded into the dst buffer.","title":"Return value"},{"location":"api/group___runtime_base85_1gae83719ffcccb1216cbaf51c6ecd3a302/#valid-usage","text":"If src_size_bytes is neither 0 nor USIZE_MAX , src_size_bytes must be times of 5.","title":"Valid Usage"},{"location":"api/group___runtime_container_1ga0cf0aa58be869778fb6ff9c13854b05d/","text":"Luna::hash_map_type LUNA_RUNTIME_API typeinfo_t hash_map_type() Overview Gets the type object of HashMap . Return value Returns the type object of HashMap . The returned type is a generic type that can be instantiated by providing the key and value type.","title":"Luna::hash_map_type"},{"location":"api/group___runtime_container_1ga0cf0aa58be869778fb6ff9c13854b05d/#lunahash_map_type","text":"LUNA_RUNTIME_API typeinfo_t hash_map_type()","title":"Luna::hash_map_type"},{"location":"api/group___runtime_container_1ga0cf0aa58be869778fb6ff9c13854b05d/#overview","text":"Gets the type object of HashMap .","title":"Overview"},{"location":"api/group___runtime_container_1ga0cf0aa58be869778fb6ff9c13854b05d/#return-value","text":"Returns the type object of HashMap . The returned type is a generic type that can be instantiated by providing the key and value type.","title":"Return value"},{"location":"api/group___runtime_container_1gaab5f974b8c38b7bdfb043aca166ef961/","text":"Luna::hash_set_type LUNA_RUNTIME_API typeinfo_t hash_set_type() Overview Gets the type object of HashSet . Return value Returns the type object of HashSet . The returned type is a generic type that can be instantiated by providing the key and value type.","title":"Luna::hash_set_type"},{"location":"api/group___runtime_container_1gaab5f974b8c38b7bdfb043aca166ef961/#lunahash_set_type","text":"LUNA_RUNTIME_API typeinfo_t hash_set_type()","title":"Luna::hash_set_type"},{"location":"api/group___runtime_container_1gaab5f974b8c38b7bdfb043aca166ef961/#overview","text":"Gets the type object of HashSet .","title":"Overview"},{"location":"api/group___runtime_container_1gaab5f974b8c38b7bdfb043aca166ef961/#return-value","text":"Returns the type object of HashSet . The returned type is a generic type that can be instantiated by providing the key and value type.","title":"Return value"},{"location":"api/group___runtime_d_l_l_1ga142f49325d4d28a71112b9b095c51161/","text":"Luna::get_library_function LUNA_RUNTIME_API R< void * > get_library_function(opaque_t handle, const c8 *symbol) Gets the function address (function pointer) of one function in the library from its symbol name. Overview Parameters handle The library handle returned by load_library. symbol The function's symbol name. Return value Returns the function address of the specified function.","title":"Luna::get_library_function"},{"location":"api/group___runtime_d_l_l_1ga142f49325d4d28a71112b9b095c51161/#lunaget_library_function","text":"LUNA_RUNTIME_API R< void * > get_library_function(opaque_t handle, const c8 *symbol) Gets the function address (function pointer) of one function in the library from its symbol name.","title":"Luna::get_library_function"},{"location":"api/group___runtime_d_l_l_1ga142f49325d4d28a71112b9b095c51161/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_d_l_l_1ga142f49325d4d28a71112b9b095c51161/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_d_l_l_1ga142f49325d4d28a71112b9b095c51161/#handle","text":"The library handle returned by load_library.","title":"handle"},{"location":"api/group___runtime_d_l_l_1ga142f49325d4d28a71112b9b095c51161/#symbol","text":"The function's symbol name.","title":"symbol"},{"location":"api/group___runtime_d_l_l_1ga142f49325d4d28a71112b9b095c51161/#return-value","text":"Returns the function address of the specified function.","title":"Return value"},{"location":"api/group___runtime_d_l_l_1gaeb0bf745d9d2223a5b090a394d686164/","text":"Luna::free_library LUNA_RUNTIME_API void free_library(opaque_t handle) Unloads the specified library. Overview Parameters handle The library handle returned by load_library. When one library is removed from the process's address space, it will decrease reference counters for all its dependent libraries, and removes them as well if their reference counters drop to 0.","title":"Luna::free_library"},{"location":"api/group___runtime_d_l_l_1gaeb0bf745d9d2223a5b090a394d686164/#lunafree_library","text":"LUNA_RUNTIME_API void free_library(opaque_t handle) Unloads the specified library.","title":"Luna::free_library"},{"location":"api/group___runtime_d_l_l_1gaeb0bf745d9d2223a5b090a394d686164/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_d_l_l_1gaeb0bf745d9d2223a5b090a394d686164/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_d_l_l_1gaeb0bf745d9d2223a5b090a394d686164/#handle","text":"The library handle returned by load_library. When one library is removed from the process's address space, it will decrease reference counters for all its dependent libraries, and removes them as well if their reference counters drop to 0.","title":"handle"},{"location":"api/group___runtime_d_l_l_1gaf089b17ba5687b844e5ab7233a65a24e/","text":"Luna::load_library LUNA_RUNTIME_API R< opaque_t > load_library(const c8 *path) Loads the specified library to the process's address space. This call may load additional libraries required by the specified library. Overview Parameters path The path of the library file. It can be one .dll or .exe file on Windows, or one .so file on POSIX systems. Return value Returns one handle that represents the loaded library.","title":"Luna::load_library"},{"location":"api/group___runtime_d_l_l_1gaf089b17ba5687b844e5ab7233a65a24e/#lunaload_library","text":"LUNA_RUNTIME_API R< opaque_t > load_library(const c8 *path) Loads the specified library to the process's address space. This call may load additional libraries required by the specified library.","title":"Luna::load_library"},{"location":"api/group___runtime_d_l_l_1gaf089b17ba5687b844e5ab7233a65a24e/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_d_l_l_1gaf089b17ba5687b844e5ab7233a65a24e/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_d_l_l_1gaf089b17ba5687b844e5ab7233a65a24e/#path","text":"The path of the library file. It can be one .dll or .exe file on Windows, or one .so file on POSIX systems.","title":"path"},{"location":"api/group___runtime_d_l_l_1gaf089b17ba5687b844e5ab7233a65a24e/#return-value","text":"Returns one handle that represents the loaded library.","title":"Return value"},{"location":"api/group___runtime_debug_1ga324df6b7f702c0c036aec3922ab831c3/","text":"Luna::stack_backtrace_symbols LUNA_RUNTIME_API const c8 ** stack_backtrace_symbols(Span< const opaque_t > frames) Gets symbolic names for frames returned by stack_backtrace. Overview Parameters frames One buffer that contains frames to query. Return value Returns one array of strings that store symbolic names for frames. Strings are stored in the same order as frames . If the symbolic name of one frame is not found, nullptr will be written. Valid Usage","title":"Luna::stack_backtrace_symbols"},{"location":"api/group___runtime_debug_1ga324df6b7f702c0c036aec3922ab831c3/#lunastack_backtrace_symbols","text":"LUNA_RUNTIME_API const c8 ** stack_backtrace_symbols(Span< const opaque_t > frames) Gets symbolic names for frames returned by stack_backtrace.","title":"Luna::stack_backtrace_symbols"},{"location":"api/group___runtime_debug_1ga324df6b7f702c0c036aec3922ab831c3/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_debug_1ga324df6b7f702c0c036aec3922ab831c3/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_debug_1ga324df6b7f702c0c036aec3922ab831c3/#frames","text":"One buffer that contains frames to query.","title":"frames"},{"location":"api/group___runtime_debug_1ga324df6b7f702c0c036aec3922ab831c3/#return-value","text":"Returns one array of strings that store symbolic names for frames. Strings are stored in the same order as frames . If the symbolic name of one frame is not found, nullptr will be written.","title":"Return value"},{"location":"api/group___runtime_debug_1ga324df6b7f702c0c036aec3922ab831c3/#valid-usage","text":"","title":"Valid Usage"},{"location":"api/group___runtime_debug_1gacf9a33547a6d81bec8edfb2e23ffd020/","text":"Luna::stack_backtrace LUNA_RUNTIME_API u32 stack_backtrace(Span< opaque_t > frames) Captures function call stack information of the current thread. Overview Parameters frames One buffer that receives captured frames. Every frame is represented by one opaque handle in the buffer. Return value Returns the number of captured frames written to frames .","title":"Luna::stack_backtrace"},{"location":"api/group___runtime_debug_1gacf9a33547a6d81bec8edfb2e23ffd020/#lunastack_backtrace","text":"LUNA_RUNTIME_API u32 stack_backtrace(Span< opaque_t > frames) Captures function call stack information of the current thread.","title":"Luna::stack_backtrace"},{"location":"api/group___runtime_debug_1gacf9a33547a6d81bec8edfb2e23ffd020/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_debug_1gacf9a33547a6d81bec8edfb2e23ffd020/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_debug_1gacf9a33547a6d81bec8edfb2e23ffd020/#frames","text":"One buffer that receives captured frames. Every frame is represented by one opaque handle in the buffer.","title":"frames"},{"location":"api/group___runtime_debug_1gacf9a33547a6d81bec8edfb2e23ffd020/#return-value","text":"Returns the number of captured frames written to frames .","title":"Return value"},{"location":"api/group___runtime_debug_1gaf0ac93c9a55d3c69474a622b0dcf8541/","text":"Luna::free_backtrace_symbols LUNA_RUNTIME_API void free_backtrace_symbols(const c8 **symbols) Overview Frees symbols returned by stack_backtrace_symbols. Parameters symbols The symbol array returned by stack_backtrace_symbols.","title":"Luna::free_backtrace_symbols"},{"location":"api/group___runtime_debug_1gaf0ac93c9a55d3c69474a622b0dcf8541/#lunafree_backtrace_symbols","text":"LUNA_RUNTIME_API void free_backtrace_symbols(const c8 **symbols)","title":"Luna::free_backtrace_symbols"},{"location":"api/group___runtime_debug_1gaf0ac93c9a55d3c69474a622b0dcf8541/#overview","text":"Frees symbols returned by stack_backtrace_symbols.","title":"Overview"},{"location":"api/group___runtime_debug_1gaf0ac93c9a55d3c69474a622b0dcf8541/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_debug_1gaf0ac93c9a55d3c69474a622b0dcf8541/#symbols","text":"The symbol array returned by stack_backtrace_symbols.","title":"symbols"},{"location":"api/group___runtime_error_1ga1f70b7b7d6832c50eca9fcee754738e5/","text":"Luna::get_error_code_by_name LUNA_RUNTIME_API ErrCode get_error_code_by_name(const c8 *errcat_name, const c8 *errcode_name) Gets the error code represented by the error name. Overview Parameters errcat_name The name of the category that holds the error name. Use \"::\" to separate category names if the category is a sub-category. errcode_name The name of the error code. Return value Returns the error code of the corresponding error name. The return value will never be 0, if the error code name is required for the first time, the system creates one new registry for the error code, and returns one valid error code number that represents to the error.","title":"Luna::get_error_code_by_name"},{"location":"api/group___runtime_error_1ga1f70b7b7d6832c50eca9fcee754738e5/#lunaget_error_code_by_name","text":"LUNA_RUNTIME_API ErrCode get_error_code_by_name(const c8 *errcat_name, const c8 *errcode_name) Gets the error code represented by the error name.","title":"Luna::get_error_code_by_name"},{"location":"api/group___runtime_error_1ga1f70b7b7d6832c50eca9fcee754738e5/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_error_1ga1f70b7b7d6832c50eca9fcee754738e5/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_error_1ga1f70b7b7d6832c50eca9fcee754738e5/#errcat_name","text":"The name of the category that holds the error name. Use \"::\" to separate category names if the category is a sub-category.","title":"errcat_name"},{"location":"api/group___runtime_error_1ga1f70b7b7d6832c50eca9fcee754738e5/#errcode_name","text":"The name of the error code.","title":"errcode_name"},{"location":"api/group___runtime_error_1ga1f70b7b7d6832c50eca9fcee754738e5/#return-value","text":"Returns the error code of the corresponding error name. The return value will never be 0, if the error code name is required for the first time, the system creates one new registry for the error code, and returns one valid error code number that represents to the error.","title":"Return value"},{"location":"api/group___runtime_error_1ga1fe2ca7a6a977e75b7922af899b927c9/","text":"Luna::succeeded template <typename _Ty> bool succeeded(const R< _Ty > &r) Tests whether the specified result is successful. Overview Parameters r The result to test. Return value Returns true if the result is successful. Returns false otherwise.","title":"Luna::succeeded"},{"location":"api/group___runtime_error_1ga1fe2ca7a6a977e75b7922af899b927c9/#lunasucceeded","text":"template <typename _Ty> bool succeeded(const R< _Ty > &r) Tests whether the specified result is successful.","title":"Luna::succeeded"},{"location":"api/group___runtime_error_1ga1fe2ca7a6a977e75b7922af899b927c9/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_error_1ga1fe2ca7a6a977e75b7922af899b927c9/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_error_1ga1fe2ca7a6a977e75b7922af899b927c9/#r","text":"The result to test.","title":"r"},{"location":"api/group___runtime_error_1ga1fe2ca7a6a977e75b7922af899b927c9/#return-value","text":"Returns true if the result is successful. Returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_error_1ga282ca73bbf2ecb824b31f111225f452a/","text":"Luna::get_error_code_name LUNA_RUNTIME_API const c8 * get_error_code_name(ErrCode err_code) Fetches the name of the error code. Overview Parameters err_code The error code value. Return value Returns the name of the error code. This string is valid until the runtime is closed. Returns empty string (\"\") if the error code does not exist.","title":"Luna::get_error_code_name"},{"location":"api/group___runtime_error_1ga282ca73bbf2ecb824b31f111225f452a/#lunaget_error_code_name","text":"LUNA_RUNTIME_API const c8 * get_error_code_name(ErrCode err_code) Fetches the name of the error code.","title":"Luna::get_error_code_name"},{"location":"api/group___runtime_error_1ga282ca73bbf2ecb824b31f111225f452a/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_error_1ga282ca73bbf2ecb824b31f111225f452a/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_error_1ga282ca73bbf2ecb824b31f111225f452a/#err_code","text":"The error code value.","title":"err_code"},{"location":"api/group___runtime_error_1ga282ca73bbf2ecb824b31f111225f452a/#return-value","text":"Returns the name of the error code. This string is valid until the runtime is closed. Returns empty string (\"\") if the error code does not exist.","title":"Return value"},{"location":"api/group___runtime_error_1ga2a0b45d4070ca962d1dd9f7a0694e278/","text":"Luna::R::R R(_Ty &&v) Constructs one successful result object with the specified return value. Overview Parameters v The return value.","title":"Luna::R::R"},{"location":"api/group___runtime_error_1ga2a0b45d4070ca962d1dd9f7a0694e278/#lunarr","text":"R(_Ty &&v) Constructs one successful result object with the specified return value.","title":"Luna::R::R"},{"location":"api/group___runtime_error_1ga2a0b45d4070ca962d1dd9f7a0694e278/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_error_1ga2a0b45d4070ca962d1dd9f7a0694e278/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_error_1ga2a0b45d4070ca962d1dd9f7a0694e278/#v","text":"The return value.","title":"v"},{"location":"api/group___runtime_error_1ga2d688464e553307f8a2399935db72da3/","text":"Luna::get_error_code_category LUNA_RUNTIME_API errcat_t get_error_code_category(ErrCode err_code) Fetches the error category that holds the error code. Overview Parameters err_code The error code value. Return value Returns the error category that holds the error code, or 0 if the error code does not exist.","title":"Luna::get_error_code_category"},{"location":"api/group___runtime_error_1ga2d688464e553307f8a2399935db72da3/#lunaget_error_code_category","text":"LUNA_RUNTIME_API errcat_t get_error_code_category(ErrCode err_code) Fetches the error category that holds the error code.","title":"Luna::get_error_code_category"},{"location":"api/group___runtime_error_1ga2d688464e553307f8a2399935db72da3/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_error_1ga2d688464e553307f8a2399935db72da3/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_error_1ga2d688464e553307f8a2399935db72da3/#err_code","text":"The error code value.","title":"err_code"},{"location":"api/group___runtime_error_1ga2d688464e553307f8a2399935db72da3/#return-value","text":"Returns the error category that holds the error code, or 0 if the error code does not exist.","title":"Return value"},{"location":"api/group___runtime_error_1ga2fb0ec3bd79226d7a6357732e810b3d9/","text":"Luna::errcat_t using errcat_t = usize The error category type represents one container that can hold multiple error codes and sub-categories. Overview Like the error code, the category value will be determined when the error category is firstly accessed, and will never be changed. Any valid error type number will not be 0.","title":"Luna::errcat_t"},{"location":"api/group___runtime_error_1ga2fb0ec3bd79226d7a6357732e810b3d9/#lunaerrcat_t","text":"using errcat_t = usize The error category type represents one container that can hold multiple error codes and sub-categories.","title":"Luna::errcat_t"},{"location":"api/group___runtime_error_1ga2fb0ec3bd79226d7a6357732e810b3d9/#overview","text":"Like the error code, the category value will be determined when the error category is firstly accessed, and will never be changed. Any valid error type number will not be 0.","title":"Overview"},{"location":"api/group___runtime_error_1ga315419f26d3c59fa143b49b90a019049/","text":"Luna::R< void >::valid bool valid() const Tests if the result is successful. Overview Return value Returns true if the call is successful. Returns false otherwise.","title":"Luna::R< void >::valid"},{"location":"api/group___runtime_error_1ga315419f26d3c59fa143b49b90a019049/#lunar-void-valid","text":"bool valid() const Tests if the result is successful.","title":"Luna::R&lt; void &gt;::valid"},{"location":"api/group___runtime_error_1ga315419f26d3c59fa143b49b90a019049/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_error_1ga315419f26d3c59fa143b49b90a019049/#return-value","text":"Returns true if the call is successful. Returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_error_1ga3850142d76e161ddbda3ae5558b306e8/","text":"Luna::R::operator= R & operator=(R &&rhs) Assigns the result object by moving from another result object. Overview The return value will be move-assigned if valid. Parameters rhs The object to move from. Return value Returns *this .","title":"Luna::R::operator="},{"location":"api/group___runtime_error_1ga3850142d76e161ddbda3ae5558b306e8/#lunaroperator","text":"R & operator=(R &&rhs) Assigns the result object by moving from another result object.","title":"Luna::R::operator="},{"location":"api/group___runtime_error_1ga3850142d76e161ddbda3ae5558b306e8/#overview","text":"The return value will be move-assigned if valid.","title":"Overview"},{"location":"api/group___runtime_error_1ga3850142d76e161ddbda3ae5558b306e8/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_error_1ga3850142d76e161ddbda3ae5558b306e8/#rhs","text":"The object to move from.","title":"rhs"},{"location":"api/group___runtime_error_1ga3850142d76e161ddbda3ae5558b306e8/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/group___runtime_error_1ga38a9abd57df742d690f2ca0c668abab8/","text":"Luna::R::get _Ty & get() Gets the return value of the result object. Overview Return value Returns one reference of the containing return value. Valid Usage valid() must be true when calling this function.","title":"Luna::R::get"},{"location":"api/group___runtime_error_1ga38a9abd57df742d690f2ca0c668abab8/#lunarget","text":"_Ty & get() Gets the return value of the result object.","title":"Luna::R::get"},{"location":"api/group___runtime_error_1ga38a9abd57df742d690f2ca0c668abab8/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_error_1ga38a9abd57df742d690f2ca0c668abab8/#return-value","text":"Returns one reference of the containing return value.","title":"Return value"},{"location":"api/group___runtime_error_1ga38a9abd57df742d690f2ca0c668abab8/#valid-usage","text":"valid() must be true when calling this function.","title":"Valid Usage"},{"location":"api/group___runtime_error_1ga3b25cc5b71c28d9d8a52f82cc688871f/","text":"Luna::R< void >::operator= R & operator=(const R &rhs) Assigns the result object by coping from another result object. Overview Parameters rhs The object to copy from. Return value Returns *this .","title":"Luna::R< void >::operator="},{"location":"api/group___runtime_error_1ga3b25cc5b71c28d9d8a52f82cc688871f/#lunar-void-operator","text":"R & operator=(const R &rhs) Assigns the result object by coping from another result object.","title":"Luna::R&lt; void &gt;::operator="},{"location":"api/group___runtime_error_1ga3b25cc5b71c28d9d8a52f82cc688871f/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_error_1ga3b25cc5b71c28d9d8a52f82cc688871f/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_error_1ga3b25cc5b71c28d9d8a52f82cc688871f/#rhs","text":"The object to copy from.","title":"rhs"},{"location":"api/group___runtime_error_1ga3b25cc5b71c28d9d8a52f82cc688871f/#return-value","text":"Returns *this .","title":"Return value"},{"location":"api/group___runtime_error_1ga3f9510c74cc3eb31228045014ea1a07c/","text":"Luna::unwrap_errcode ErrCode unwrap_errcode(ErrCode err_code) Gets the real error code if the error code is BasicError::error_object. Overview Parameters err_code The error code to unwrap. Return value If the error code is BasicError::error_object, returns get_error().code . Otherwise, returns err_code directly.","title":"Luna::unwrap_errcode"},{"location":"api/group___runtime_error_1ga3f9510c74cc3eb31228045014ea1a07c/#lunaunwrap_errcode","text":"ErrCode unwrap_errcode(ErrCode err_code) Gets the real error code if the error code is BasicError::error_object.","title":"Luna::unwrap_errcode"},{"location":"api/group___runtime_error_1ga3f9510c74cc3eb31228045014ea1a07c/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_error_1ga3f9510c74cc3eb31228045014ea1a07c/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_error_1ga3f9510c74cc3eb31228045014ea1a07c/#err_code","text":"The error code to unwrap.","title":"err_code"},{"location":"api/group___runtime_error_1ga3f9510c74cc3eb31228045014ea1a07c/#return-value","text":"If the error code is BasicError::error_object, returns get_error().code . Otherwise, returns err_code directly.","title":"Return value"},{"location":"api/group___runtime_error_1ga4c75c58a9d262021f330194d48d5acd2/","text":"Luna::failed template <typename _Ty> bool failed(const R< _Ty > &r) Tests whether the specified result is failed. Overview Parameters r The result to test. Return value Returns true if the result is failed. Returns false otherwise.","title":"Luna::failed"},{"location":"api/group___runtime_error_1ga4c75c58a9d262021f330194d48d5acd2/#lunafailed","text":"template <typename _Ty> bool failed(const R< _Ty > &r) Tests whether the specified result is failed.","title":"Luna::failed"},{"location":"api/group___runtime_error_1ga4c75c58a9d262021f330194d48d5acd2/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_error_1ga4c75c58a9d262021f330194d48d5acd2/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_error_1ga4c75c58a9d262021f330194d48d5acd2/#r","text":"The result to test.","title":"r"},{"location":"api/group___runtime_error_1ga4c75c58a9d262021f330194d48d5acd2/#return-value","text":"Returns true if the result is failed. Returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_error_1ga630a7366db11b0fa684c26aa9736478b/","text":"Luna::R::R R(R &&rhs) Constructs one result object by moving from another result object. Overview The return value will be move-constructed if valid. Parameters rhs The object to move from.","title":"Luna::R::R"},{"location":"api/group___runtime_error_1ga630a7366db11b0fa684c26aa9736478b/#lunarr","text":"R(R &&rhs) Constructs one result object by moving from another result object.","title":"Luna::R::R"},{"location":"api/group___runtime_error_1ga630a7366db11b0fa684c26aa9736478b/#overview","text":"The return value will be move-constructed if valid.","title":"Overview"},{"location":"api/group___runtime_error_1ga630a7366db11b0fa684c26aa9736478b/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_error_1ga630a7366db11b0fa684c26aa9736478b/#rhs","text":"The object to move from.","title":"rhs"},{"location":"api/group___runtime_error_1ga67d5908c99b79c7154f6e1e6e342a72e/","text":"Luna::get_all_error_categories LUNA_RUNTIME_API Vector< errcat_t > get_all_error_categories() Fetches all error categories registered in the system, including all subcategories. Overview Return value Returns all error categories registered in the system.","title":"Luna::get_all_error_categories"},{"location":"api/group___runtime_error_1ga67d5908c99b79c7154f6e1e6e342a72e/#lunaget_all_error_categories","text":"LUNA_RUNTIME_API Vector< errcat_t > get_all_error_categories() Fetches all error categories registered in the system, including all subcategories.","title":"Luna::get_all_error_categories"},{"location":"api/group___runtime_error_1ga67d5908c99b79c7154f6e1e6e342a72e/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_error_1ga67d5908c99b79c7154f6e1e6e342a72e/#return-value","text":"Returns all error categories registered in the system.","title":"Return value"},{"location":"api/group___runtime_error_1ga85a2f3789aeea2a659a102d8399f26c3/","text":"Luna::set_error ErrCode set_error(ErrCode code, const c8 *fmt, VarList args) Sets the error object of this thread. Overview This function is auxiliary and it behaves the same as fetching the error object then setting it. Parameters code The error code to set. fmt The error message formatting syntax. args The arguments for the error message. Return value Returns BasicError::error_object always, so you may chain this function with the return statement like return set_error(...) .","title":"Luna::set_error"},{"location":"api/group___runtime_error_1ga85a2f3789aeea2a659a102d8399f26c3/#lunaset_error","text":"ErrCode set_error(ErrCode code, const c8 *fmt, VarList args) Sets the error object of this thread.","title":"Luna::set_error"},{"location":"api/group___runtime_error_1ga85a2f3789aeea2a659a102d8399f26c3/#overview","text":"This function is auxiliary and it behaves the same as fetching the error object then setting it.","title":"Overview"},{"location":"api/group___runtime_error_1ga85a2f3789aeea2a659a102d8399f26c3/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_error_1ga85a2f3789aeea2a659a102d8399f26c3/#code","text":"The error code to set.","title":"code"},{"location":"api/group___runtime_error_1ga85a2f3789aeea2a659a102d8399f26c3/#fmt","text":"The error message formatting syntax.","title":"fmt"},{"location":"api/group___runtime_error_1ga85a2f3789aeea2a659a102d8399f26c3/#args","text":"The arguments for the error message.","title":"args"},{"location":"api/group___runtime_error_1ga85a2f3789aeea2a659a102d8399f26c3/#return-value","text":"Returns BasicError::error_object always, so you may chain this function with the return statement like return set_error(...) .","title":"Return value"},{"location":"api/group___runtime_error_1ga99f878496613323217993a6b57e6e7f6/","text":"Luna::R::get const _Ty & get() const Gets the return value of the result object. Overview Return value Returns one reference of the containing return value. Valid Usage valid() must be true when calling this function.","title":"Luna::R::get"},{"location":"api/group___runtime_error_1ga99f878496613323217993a6b57e6e7f6/#lunarget","text":"const _Ty & get() const Gets the return value of the result object.","title":"Luna::R::get"},{"location":"api/group___runtime_error_1ga99f878496613323217993a6b57e6e7f6/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_error_1ga99f878496613323217993a6b57e6e7f6/#return-value","text":"Returns one reference of the containing return value.","title":"Return value"},{"location":"api/group___runtime_error_1ga99f878496613323217993a6b57e6e7f6/#valid-usage","text":"valid() must be true when calling this function.","title":"Valid Usage"},{"location":"api/group___runtime_error_1gaab150f9ec3b047217f5c2d2131c54c77/","text":"Luna::set_error ErrCode set_error(ErrCode code, const c8 *fmt,...) Sets the error object of this thread. Overview This function is auxiliary and it behaves the same as fetching the error object then setting it. Parameters code The error code to set. fmt The error message formatting syntax. args The arguments for the error message. Return value Returns BasicError::error_object always, so you may chain this function with the return statement like return set_error(...) .","title":"Luna::set_error"},{"location":"api/group___runtime_error_1gaab150f9ec3b047217f5c2d2131c54c77/#lunaset_error","text":"ErrCode set_error(ErrCode code, const c8 *fmt,...) Sets the error object of this thread.","title":"Luna::set_error"},{"location":"api/group___runtime_error_1gaab150f9ec3b047217f5c2d2131c54c77/#overview","text":"This function is auxiliary and it behaves the same as fetching the error object then setting it.","title":"Overview"},{"location":"api/group___runtime_error_1gaab150f9ec3b047217f5c2d2131c54c77/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_error_1gaab150f9ec3b047217f5c2d2131c54c77/#code","text":"The error code to set.","title":"code"},{"location":"api/group___runtime_error_1gaab150f9ec3b047217f5c2d2131c54c77/#fmt","text":"The error message formatting syntax.","title":"fmt"},{"location":"api/group___runtime_error_1gaab150f9ec3b047217f5c2d2131c54c77/#args","text":"The arguments for the error message.","title":"args"},{"location":"api/group___runtime_error_1gaab150f9ec3b047217f5c2d2131c54c77/#return-value","text":"Returns BasicError::error_object always, so you may chain this function with the return statement like return set_error(...) .","title":"Return value"},{"location":"api/group___runtime_error_1gaae9e733615f31d34d2caacc345f5cfa4/","text":"Luna::get_error_category_name LUNA_RUNTIME_API const c8 * get_error_category_name(errcat_t err_category) Fetches the name of the error category. Overview Parameters err_category The error category value. Return value Returns the name of the error category. This string is valid until the runtime is closed. Returns empty string (\"\") if the error category does not exist.","title":"Luna::get_error_category_name"},{"location":"api/group___runtime_error_1gaae9e733615f31d34d2caacc345f5cfa4/#lunaget_error_category_name","text":"LUNA_RUNTIME_API const c8 * get_error_category_name(errcat_t err_category) Fetches the name of the error category.","title":"Luna::get_error_category_name"},{"location":"api/group___runtime_error_1gaae9e733615f31d34d2caacc345f5cfa4/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_error_1gaae9e733615f31d34d2caacc345f5cfa4/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_error_1gaae9e733615f31d34d2caacc345f5cfa4/#err_category","text":"The error category value.","title":"err_category"},{"location":"api/group___runtime_error_1gaae9e733615f31d34d2caacc345f5cfa4/#return-value","text":"Returns the name of the error category. This string is valid until the runtime is closed. Returns empty string (\"\") if the error category does not exist.","title":"Return value"},{"location":"api/group___runtime_error_1gab6ff284901ba6c715fed0c96f8ee5c74/","text":"Luna::RV using RV = R<void> An alias of [R](struct_luna_1_1_r.md)<void> for representing one throwable function with no return value.","title":"Luna::RV"},{"location":"api/group___runtime_error_1gab6ff284901ba6c715fed0c96f8ee5c74/#lunarv","text":"using RV = R<void> An alias of [R](struct_luna_1_1_r.md)<void> for representing one throwable function with no return value.","title":"Luna::RV"},{"location":"api/group___runtime_error_1gacaa89fc96cb4e21f5274b5a082fdde98/","text":"Luna::R< void >::errcode ErrCode errcode() const Gets the error code of the result object. Overview Return value Returns the error code of the result object. Returns ErrCode(0) if the result object is valid (no error is occured).","title":"Luna::R< void >::errcode"},{"location":"api/group___runtime_error_1gacaa89fc96cb4e21f5274b5a082fdde98/#lunar-void-errcode","text":"ErrCode errcode() const Gets the error code of the result object.","title":"Luna::R&lt; void &gt;::errcode"},{"location":"api/group___runtime_error_1gacaa89fc96cb4e21f5274b5a082fdde98/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_error_1gacaa89fc96cb4e21f5274b5a082fdde98/#return-value","text":"Returns the error code of the result object. Returns ErrCode(0) if the result object is valid (no error is occured).","title":"Return value"},{"location":"api/group___runtime_error_1gad35f7f747a4f2cc86d549a67c090681a/","text":"Luna::unwrap_errcode template <typename _Ty> ErrCode unwrap_errcode(const R< _Ty > &obj) Unwraps the real error code from the result. Overview If the error code of this result object is BasicError::error_object , this function returns the error code stored in the error object of the current thread. If the error code of this object is not BasicError::error_object , this function returns the error code as is. Parameters obj The original result object received from the called function. Return value Returns the real error code from the result.","title":"Luna::unwrap_errcode"},{"location":"api/group___runtime_error_1gad35f7f747a4f2cc86d549a67c090681a/#lunaunwrap_errcode","text":"template <typename _Ty> ErrCode unwrap_errcode(const R< _Ty > &obj) Unwraps the real error code from the result.","title":"Luna::unwrap_errcode"},{"location":"api/group___runtime_error_1gad35f7f747a4f2cc86d549a67c090681a/#overview","text":"If the error code of this result object is BasicError::error_object , this function returns the error code stored in the error object of the current thread. If the error code of this object is not BasicError::error_object , this function returns the error code as is.","title":"Overview"},{"location":"api/group___runtime_error_1gad35f7f747a4f2cc86d549a67c090681a/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_error_1gad35f7f747a4f2cc86d549a67c090681a/#obj","text":"The original result object received from the called function.","title":"obj"},{"location":"api/group___runtime_error_1gad35f7f747a4f2cc86d549a67c090681a/#return-value","text":"Returns the real error code from the result.","title":"Return value"},{"location":"api/group___runtime_error_1gad578dbba7b4f8b2b7fa8bcd956a1efb0/","text":"Luna::explain const c8 * explain(ErrCode err_code) Gets a brief description about the error code. Overview Parameters err_code The error code to fetch. Return value Returns one C string that describes the error code.","title":"Luna::explain"},{"location":"api/group___runtime_error_1gad578dbba7b4f8b2b7fa8bcd956a1efb0/#lunaexplain","text":"const c8 * explain(ErrCode err_code) Gets a brief description about the error code.","title":"Luna::explain"},{"location":"api/group___runtime_error_1gad578dbba7b4f8b2b7fa8bcd956a1efb0/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_error_1gad578dbba7b4f8b2b7fa8bcd956a1efb0/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_error_1gad578dbba7b4f8b2b7fa8bcd956a1efb0/#err_code","text":"The error code to fetch.","title":"err_code"},{"location":"api/group___runtime_error_1gad578dbba7b4f8b2b7fa8bcd956a1efb0/#return-value","text":"Returns one C string that describes the error code.","title":"Return value"},{"location":"api/group___runtime_error_1gad72c3b57b3e6f30877c4d031b641fe68/","text":"Luna::R< void >::R R(const R &rhs) Constructs one result object by coping from another result object. Overview Parameters rhs The object to copy from.","title":"Luna::R< void >::R"},{"location":"api/group___runtime_error_1gad72c3b57b3e6f30877c4d031b641fe68/#lunar-void-r","text":"R(const R &rhs) Constructs one result object by coping from another result object.","title":"Luna::R&lt; void &gt;::R"},{"location":"api/group___runtime_error_1gad72c3b57b3e6f30877c4d031b641fe68/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_error_1gad72c3b57b3e6f30877c4d031b641fe68/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_error_1gad72c3b57b3e6f30877c4d031b641fe68/#rhs","text":"The object to copy from.","title":"rhs"},{"location":"api/group___runtime_error_1gae1aeb6bafa3695ea3c6e6dc1acea72ff/","text":"Luna::get_all_error_codes_of_category LUNA_RUNTIME_API Vector< ErrCode > get_all_error_codes_of_category(errcat_t err_category) Fetches all error codes that belongs to the specified error category. Overview Parameters err_category The error category to look up. Return value Returns all error codes that belongs to the specified category.","title":"Luna::get_all_error_codes_of_category"},{"location":"api/group___runtime_error_1gae1aeb6bafa3695ea3c6e6dc1acea72ff/#lunaget_all_error_codes_of_category","text":"LUNA_RUNTIME_API Vector< ErrCode > get_all_error_codes_of_category(errcat_t err_category) Fetches all error codes that belongs to the specified error category.","title":"Luna::get_all_error_codes_of_category"},{"location":"api/group___runtime_error_1gae1aeb6bafa3695ea3c6e6dc1acea72ff/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_error_1gae1aeb6bafa3695ea3c6e6dc1acea72ff/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_error_1gae1aeb6bafa3695ea3c6e6dc1acea72ff/#err_category","text":"The error category to look up.","title":"err_category"},{"location":"api/group___runtime_error_1gae1aeb6bafa3695ea3c6e6dc1acea72ff/#return-value","text":"Returns all error codes that belongs to the specified category.","title":"Return value"},{"location":"api/group___runtime_error_1gae270572a4f9d80793694a4686a2a0473/","text":"Luna::R::R R(const _Ty &v) Constructs one successful result object with the specified return value. Overview Parameters v The return value.","title":"Luna::R::R"},{"location":"api/group___runtime_error_1gae270572a4f9d80793694a4686a2a0473/#lunarr","text":"R(const _Ty &v) Constructs one successful result object with the specified return value.","title":"Luna::R::R"},{"location":"api/group___runtime_error_1gae270572a4f9d80793694a4686a2a0473/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_error_1gae270572a4f9d80793694a4686a2a0473/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_error_1gae270572a4f9d80793694a4686a2a0473/#v","text":"The return value.","title":"v"},{"location":"api/group___runtime_error_1gae6df6df63f7880dfb63cb8611239bab3/","text":"Luna::R< void >::R R(ErrCode error) Constructs one failed result object with the specified error code. Overview Parameters error The error code to set.","title":"Luna::R< void >::R"},{"location":"api/group___runtime_error_1gae6df6df63f7880dfb63cb8611239bab3/#lunar-void-r","text":"R(ErrCode error) Constructs one failed result object with the specified error code.","title":"Luna::R&lt; void &gt;::R"},{"location":"api/group___runtime_error_1gae6df6df63f7880dfb63cb8611239bab3/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_error_1gae6df6df63f7880dfb63cb8611239bab3/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_error_1gae6df6df63f7880dfb63cb8611239bab3/#error","text":"The error code to set.","title":"error"},{"location":"api/group___runtime_error_1gae87adf00c177c791effe51865404096d/","text":"Luna::R< void >::R constexpr R() Constructs one successful result object.","title":"Luna::R< void >::R"},{"location":"api/group___runtime_error_1gae87adf00c177c791effe51865404096d/#lunar-void-r","text":"constexpr R() Constructs one successful result object.","title":"Luna::R&lt; void &gt;::R"},{"location":"api/group___runtime_error_1gae92623cecc5f4224389fda59a2b46707/","text":"Luna::get_error LUNA_RUNTIME_API Error & get_error() Gets the error object of this thread. Every thread will be assigned with one error object. Overview Return value Returns the error object of this thread.","title":"Luna::get_error"},{"location":"api/group___runtime_error_1gae92623cecc5f4224389fda59a2b46707/#lunaget_error","text":"LUNA_RUNTIME_API Error & get_error() Gets the error object of this thread. Every thread will be assigned with one error object.","title":"Luna::get_error"},{"location":"api/group___runtime_error_1gae92623cecc5f4224389fda59a2b46707/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_error_1gae92623cecc5f4224389fda59a2b46707/#return-value","text":"Returns the error object of this thread.","title":"Return value"},{"location":"api/group___runtime_error_1gafa7d509a05e3f4029e5976bbfd8631f1/","text":"Luna::get_all_error_subcategories_of_category LUNA_RUNTIME_API Vector< errcat_t > get_all_error_subcategories_of_category(errcat_t err_category) Fetches all child error categories that belongs to the specified error category. Overview Parameters err_category The error category to look up. Return value Returns all child error categories that belongs to the specified category.","title":"Luna::get_all_error_subcategories_of_category"},{"location":"api/group___runtime_error_1gafa7d509a05e3f4029e5976bbfd8631f1/#lunaget_all_error_subcategories_of_category","text":"LUNA_RUNTIME_API Vector< errcat_t > get_all_error_subcategories_of_category(errcat_t err_category) Fetches all child error categories that belongs to the specified error category.","title":"Luna::get_all_error_subcategories_of_category"},{"location":"api/group___runtime_error_1gafa7d509a05e3f4029e5976bbfd8631f1/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_error_1gafa7d509a05e3f4029e5976bbfd8631f1/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_error_1gafa7d509a05e3f4029e5976bbfd8631f1/#err_category","text":"The error category to look up.","title":"err_category"},{"location":"api/group___runtime_error_1gafa7d509a05e3f4029e5976bbfd8631f1/#return-value","text":"Returns all child error categories that belongs to the specified category.","title":"Return value"},{"location":"api/group___runtime_error_1gafe222dee1f7cd3d2beb8e32604dddd71/","text":"Luna::get_error_category_by_name LUNA_RUNTIME_API errcat_t get_error_category_by_name(const c8 *errcat_name) Gets the error category represented by the error category name. Overview Parameters errcat_name The full name of the error category. Use \"::\" to separate category names if the category is a sub-category. Return value Returns the error category of the corresponding error name. The return value will never be 0, if the error category name is required for the first time, the system creates one new registry for the error category, and returns one valid error category number that represents to the error category.","title":"Luna::get_error_category_by_name"},{"location":"api/group___runtime_error_1gafe222dee1f7cd3d2beb8e32604dddd71/#lunaget_error_category_by_name","text":"LUNA_RUNTIME_API errcat_t get_error_category_by_name(const c8 *errcat_name) Gets the error category represented by the error category name.","title":"Luna::get_error_category_by_name"},{"location":"api/group___runtime_error_1gafe222dee1f7cd3d2beb8e32604dddd71/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_error_1gafe222dee1f7cd3d2beb8e32604dddd71/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_error_1gafe222dee1f7cd3d2beb8e32604dddd71/#errcat_name","text":"The full name of the error category. Use \"::\" to separate category names if the category is a sub-category.","title":"errcat_name"},{"location":"api/group___runtime_error_1gafe222dee1f7cd3d2beb8e32604dddd71/#return-value","text":"Returns the error category of the corresponding error name. The return value will never be 0, if the error category name is required for the first time, the system creates one new registry for the error category, and returns one valid error category number that represents to the error category.","title":"Return value"},{"location":"api/group___runtime_file_1ga34fd3952c7f15f22c272f9d4e568436d/","text":"Luna::open_dir LUNA_RUNTIME_API R< Ref< IFileIterator > > open_dir(const c8 *path) Creates a file iterator that can be used to iterate all files in the specified directory. Overview Parameters path The directory path to open. Return value Returns a file iterator object. Possible Errors BasicError::not_found BasicError::bad_platform_call for all errors that cannot be identified.","title":"Luna::open_dir"},{"location":"api/group___runtime_file_1ga34fd3952c7f15f22c272f9d4e568436d/#lunaopen_dir","text":"LUNA_RUNTIME_API R< Ref< IFileIterator > > open_dir(const c8 *path) Creates a file iterator that can be used to iterate all files in the specified directory.","title":"Luna::open_dir"},{"location":"api/group___runtime_file_1ga34fd3952c7f15f22c272f9d4e568436d/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_file_1ga34fd3952c7f15f22c272f9d4e568436d/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_file_1ga34fd3952c7f15f22c272f9d4e568436d/#path","text":"The directory path to open.","title":"path"},{"location":"api/group___runtime_file_1ga34fd3952c7f15f22c272f9d4e568436d/#return-value","text":"Returns a file iterator object.","title":"Return value"},{"location":"api/group___runtime_file_1ga34fd3952c7f15f22c272f9d4e568436d/#possible-errors","text":"BasicError::not_found BasicError::bad_platform_call for all errors that cannot be identified.","title":"Possible Errors"},{"location":"api/group___runtime_file_1ga403fdc9a5e3d0192d169112ab09937c3/","text":"Luna::copy_file LUNA_RUNTIME_API RV copy_file(const c8 *from_path, const c8 *to_path, FileCopyFlag flags=FileCopyFlag::none) Copies the file or directory from the source path to the destination path. Overview Parameters from_path Source file or directory path. to_path Destination file or directory path. flags The attributes for one file copy operation. Possible Errors BasicError::bad_arguments BasicError::already_exists BasicError::access_denied BasicError::not_found BasicError::bad_platform_call for all errors that cannot be identified.","title":"Luna::copy_file"},{"location":"api/group___runtime_file_1ga403fdc9a5e3d0192d169112ab09937c3/#lunacopy_file","text":"LUNA_RUNTIME_API RV copy_file(const c8 *from_path, const c8 *to_path, FileCopyFlag flags=FileCopyFlag::none) Copies the file or directory from the source path to the destination path.","title":"Luna::copy_file"},{"location":"api/group___runtime_file_1ga403fdc9a5e3d0192d169112ab09937c3/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_file_1ga403fdc9a5e3d0192d169112ab09937c3/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_file_1ga403fdc9a5e3d0192d169112ab09937c3/#from_path","text":"Source file or directory path.","title":"from_path"},{"location":"api/group___runtime_file_1ga403fdc9a5e3d0192d169112ab09937c3/#to_path","text":"Destination file or directory path.","title":"to_path"},{"location":"api/group___runtime_file_1ga403fdc9a5e3d0192d169112ab09937c3/#flags","text":"The attributes for one file copy operation.","title":"flags"},{"location":"api/group___runtime_file_1ga403fdc9a5e3d0192d169112ab09937c3/#possible-errors","text":"BasicError::bad_arguments BasicError::already_exists BasicError::access_denied BasicError::not_found BasicError::bad_platform_call for all errors that cannot be identified.","title":"Possible Errors"},{"location":"api/group___runtime_file_1ga5db366dac73029877752fb2969d767ec/","text":"Luna::load_file_data LUNA_RUNTIME_API R< Blob > load_file_data(IFile *file) Returns the data in the specified file as a blob object. Overview Parameters file The file to read. Return value Returns the data of the file. Valid Usage file must be opened with FileOpenFlag::read flag.","title":"Luna::load_file_data"},{"location":"api/group___runtime_file_1ga5db366dac73029877752fb2969d767ec/#lunaload_file_data","text":"LUNA_RUNTIME_API R< Blob > load_file_data(IFile *file) Returns the data in the specified file as a blob object.","title":"Luna::load_file_data"},{"location":"api/group___runtime_file_1ga5db366dac73029877752fb2969d767ec/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_file_1ga5db366dac73029877752fb2969d767ec/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_file_1ga5db366dac73029877752fb2969d767ec/#file","text":"The file to read.","title":"file"},{"location":"api/group___runtime_file_1ga5db366dac73029877752fb2969d767ec/#return-value","text":"Returns the data of the file.","title":"Return value"},{"location":"api/group___runtime_file_1ga5db366dac73029877752fb2969d767ec/#valid-usage","text":"file must be opened with FileOpenFlag::read flag.","title":"Valid Usage"},{"location":"api/group___runtime_file_1ga88c4a1aee80b54bcc1c6220f64151028/","text":"Luna::create_dir LUNA_RUNTIME_API RV create_dir(const c8 *path) Creates one empty directory. Overview Parameters path The path of the directory to create. Possible Errors BasicError::already_exists BasicError::not_found BasicError::bad_platform_call for all errors that cannot be identified.","title":"Luna::create_dir"},{"location":"api/group___runtime_file_1ga88c4a1aee80b54bcc1c6220f64151028/#lunacreate_dir","text":"LUNA_RUNTIME_API RV create_dir(const c8 *path) Creates one empty directory.","title":"Luna::create_dir"},{"location":"api/group___runtime_file_1ga88c4a1aee80b54bcc1c6220f64151028/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_file_1ga88c4a1aee80b54bcc1c6220f64151028/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_file_1ga88c4a1aee80b54bcc1c6220f64151028/#path","text":"The path of the directory to create.","title":"path"},{"location":"api/group___runtime_file_1ga88c4a1aee80b54bcc1c6220f64151028/#possible-errors","text":"BasicError::already_exists BasicError::not_found BasicError::bad_platform_call for all errors that cannot be identified.","title":"Possible Errors"},{"location":"api/group___runtime_file_1ga9c6802285bfe5d9b47a067487cfb665c/","text":"Luna::open_file LUNA_RUNTIME_API R< Ref< IFile > > open_file(const c8 *path, FileOpenFlag flags, FileCreationMode creation) Opens one file. Overview Parameters path The path of the file. flags The file open flags. creation The file creation mode. Return value Returns the new opened file object. Possible Errors BasicError::bad_arguments BasicError::access_denied BasicError::not_found BasicError::not_directory BasicError::bad_platform_call for all errors that cannot be identified.","title":"Luna::open_file"},{"location":"api/group___runtime_file_1ga9c6802285bfe5d9b47a067487cfb665c/#lunaopen_file","text":"LUNA_RUNTIME_API R< Ref< IFile > > open_file(const c8 *path, FileOpenFlag flags, FileCreationMode creation) Opens one file.","title":"Luna::open_file"},{"location":"api/group___runtime_file_1ga9c6802285bfe5d9b47a067487cfb665c/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_file_1ga9c6802285bfe5d9b47a067487cfb665c/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_file_1ga9c6802285bfe5d9b47a067487cfb665c/#path","text":"The path of the file.","title":"path"},{"location":"api/group___runtime_file_1ga9c6802285bfe5d9b47a067487cfb665c/#flags","text":"The file open flags.","title":"flags"},{"location":"api/group___runtime_file_1ga9c6802285bfe5d9b47a067487cfb665c/#creation","text":"The file creation mode.","title":"creation"},{"location":"api/group___runtime_file_1ga9c6802285bfe5d9b47a067487cfb665c/#return-value","text":"Returns the new opened file object.","title":"Return value"},{"location":"api/group___runtime_file_1ga9c6802285bfe5d9b47a067487cfb665c/#possible-errors","text":"BasicError::bad_arguments BasicError::access_denied BasicError::not_found BasicError::not_directory BasicError::bad_platform_call for all errors that cannot be identified.","title":"Possible Errors"},{"location":"api/group___runtime_file_1gac78ec88a75597d9ed708a7e53109de15/","text":"Luna::get_process_path LUNA_RUNTIME_API const c8 * get_process_path() Gets the full (absolute) path of the application's executable file. Overview Return value Returns the full (absolute) path of the application's executable file. The returned pointer is valid until Luna SDK is closed.","title":"Luna::get_process_path"},{"location":"api/group___runtime_file_1gac78ec88a75597d9ed708a7e53109de15/#lunaget_process_path","text":"LUNA_RUNTIME_API const c8 * get_process_path() Gets the full (absolute) path of the application's executable file.","title":"Luna::get_process_path"},{"location":"api/group___runtime_file_1gac78ec88a75597d9ed708a7e53109de15/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_file_1gac78ec88a75597d9ed708a7e53109de15/#return-value","text":"Returns the full (absolute) path of the application's executable file. The returned pointer is valid until Luna SDK is closed.","title":"Return value"},{"location":"api/group___runtime_file_1gacd11152f82d27b7d4edaead28e0056c0/","text":"Luna::move_file LUNA_RUNTIME_API RV move_file(const c8 *from_path, const c8 *to_path, FileMoveFlag flags=FileMoveFlag::none) Moves the file or directory from the source path to the destination path. This call can also be used to rename a file. Overview Parameters from_path Source file or directory path. to_path Destination file or directory path. flags The attributes for one file move operation. Possible Errors BasicError::bad_arguments BasicError::already_exists BasicError::access_denied BasicError::not_found BasicError::bad_platform_call for all errors that cannot be identified.","title":"Luna::move_file"},{"location":"api/group___runtime_file_1gacd11152f82d27b7d4edaead28e0056c0/#lunamove_file","text":"LUNA_RUNTIME_API RV move_file(const c8 *from_path, const c8 *to_path, FileMoveFlag flags=FileMoveFlag::none) Moves the file or directory from the source path to the destination path. This call can also be used to rename a file.","title":"Luna::move_file"},{"location":"api/group___runtime_file_1gacd11152f82d27b7d4edaead28e0056c0/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_file_1gacd11152f82d27b7d4edaead28e0056c0/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_file_1gacd11152f82d27b7d4edaead28e0056c0/#from_path","text":"Source file or directory path.","title":"from_path"},{"location":"api/group___runtime_file_1gacd11152f82d27b7d4edaead28e0056c0/#to_path","text":"Destination file or directory path.","title":"to_path"},{"location":"api/group___runtime_file_1gacd11152f82d27b7d4edaead28e0056c0/#flags","text":"The attributes for one file move operation.","title":"flags"},{"location":"api/group___runtime_file_1gacd11152f82d27b7d4edaead28e0056c0/#possible-errors","text":"BasicError::bad_arguments BasicError::already_exists BasicError::access_denied BasicError::not_found BasicError::bad_platform_call for all errors that cannot be identified.","title":"Possible Errors"},{"location":"api/group___runtime_file_1gadf474a92aea43a8fc8d0a494545b4166/","text":"Luna::delete_file LUNA_RUNTIME_API RV delete_file(const c8 *file_path) Deletes the specified file or directory. Overview Parameters file_path The file or directory to delete. If this is a non-empty directory, all its contexts will also be deleted. Possible Errors BasicError::bad_arguments BasicError::not_found BasicError::access_denied BasicError::bad_platform_call for all errors that cannot be identified.","title":"Luna::delete_file"},{"location":"api/group___runtime_file_1gadf474a92aea43a8fc8d0a494545b4166/#lunadelete_file","text":"LUNA_RUNTIME_API RV delete_file(const c8 *file_path) Deletes the specified file or directory.","title":"Luna::delete_file"},{"location":"api/group___runtime_file_1gadf474a92aea43a8fc8d0a494545b4166/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_file_1gadf474a92aea43a8fc8d0a494545b4166/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_file_1gadf474a92aea43a8fc8d0a494545b4166/#file_path","text":"The file or directory to delete. If this is a non-empty directory, all its contexts will also be deleted.","title":"file_path"},{"location":"api/group___runtime_file_1gadf474a92aea43a8fc8d0a494545b4166/#possible-errors","text":"BasicError::bad_arguments BasicError::not_found BasicError::access_denied BasicError::bad_platform_call for all errors that cannot be identified.","title":"Possible Errors"},{"location":"api/group___runtime_file_1gae7531a6ee8352538200ef1502d2dedc2/","text":"Luna::set_current_dir LUNA_RUNTIME_API RV set_current_dir(const c8 *path) Sets the current working directory path for the underlying system. The current directory will be set for the process scope. Overview Parameters path The current working directory path to set.","title":"Luna::set_current_dir"},{"location":"api/group___runtime_file_1gae7531a6ee8352538200ef1502d2dedc2/#lunaset_current_dir","text":"LUNA_RUNTIME_API RV set_current_dir(const c8 *path) Sets the current working directory path for the underlying system. The current directory will be set for the process scope.","title":"Luna::set_current_dir"},{"location":"api/group___runtime_file_1gae7531a6ee8352538200ef1502d2dedc2/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_file_1gae7531a6ee8352538200ef1502d2dedc2/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_file_1gae7531a6ee8352538200ef1502d2dedc2/#path","text":"The current working directory path to set.","title":"path"},{"location":"api/group___runtime_file_1gaf2b20ca5fdbac9bed29388cb94d4a68a/","text":"Luna::get_current_dir LUNA_RUNTIME_API u32 get_current_dir(u32 buffer_length, c8 *buffer) Gets the current working directory path for the underlying system. Overview The default current working directory is set to the path that contains the executable file. Parameters buffer_length The length of the buffer for the current directory string, including the null terminator. buffer A pointer to the buffer that receives the current directory string. To gets the required buffer size, specify buffer to nullptr and buffer_length to 0. Return value Returns the number of characters copied into the buffer, including the null terminator. The copied string is always null-terminated. If buffer_length is 0 and buffer is nullptr , returns the required buffer size to fetch the current directory, including the null terminator.","title":"Luna::get_current_dir"},{"location":"api/group___runtime_file_1gaf2b20ca5fdbac9bed29388cb94d4a68a/#lunaget_current_dir","text":"LUNA_RUNTIME_API u32 get_current_dir(u32 buffer_length, c8 *buffer) Gets the current working directory path for the underlying system.","title":"Luna::get_current_dir"},{"location":"api/group___runtime_file_1gaf2b20ca5fdbac9bed29388cb94d4a68a/#overview","text":"The default current working directory is set to the path that contains the executable file.","title":"Overview"},{"location":"api/group___runtime_file_1gaf2b20ca5fdbac9bed29388cb94d4a68a/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_file_1gaf2b20ca5fdbac9bed29388cb94d4a68a/#buffer_length","text":"The length of the buffer for the current directory string, including the null terminator.","title":"buffer_length"},{"location":"api/group___runtime_file_1gaf2b20ca5fdbac9bed29388cb94d4a68a/#buffer","text":"A pointer to the buffer that receives the current directory string. To gets the required buffer size, specify buffer to nullptr and buffer_length to 0.","title":"buffer"},{"location":"api/group___runtime_file_1gaf2b20ca5fdbac9bed29388cb94d4a68a/#return-value","text":"Returns the number of characters copied into the buffer, including the null terminator. The copied string is always null-terminated. If buffer_length is 0 and buffer is nullptr , returns the required buffer size to fetch the current directory, including the null terminator.","title":"Return value"},{"location":"api/group___runtime_file_1gafc817765c2a5febb456d0d0728685295/","text":"Luna::get_file_attribute LUNA_RUNTIME_API R< FileAttribute > get_file_attribute(const c8 *path) Gets the file attribute. Overview Parameters path The path of the file. Return value Returns the file attribute structure. Possible Errors BasicError::access_denied BasicError::not_found BasicError::not_directory BasicError::bad_platform_call for all errors that cannot be identified.","title":"Luna::get_file_attribute"},{"location":"api/group___runtime_file_1gafc817765c2a5febb456d0d0728685295/#lunaget_file_attribute","text":"LUNA_RUNTIME_API R< FileAttribute > get_file_attribute(const c8 *path) Gets the file attribute.","title":"Luna::get_file_attribute"},{"location":"api/group___runtime_file_1gafc817765c2a5febb456d0d0728685295/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_file_1gafc817765c2a5febb456d0d0728685295/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_file_1gafc817765c2a5febb456d0d0728685295/#path","text":"The path of the file.","title":"path"},{"location":"api/group___runtime_file_1gafc817765c2a5febb456d0d0728685295/#return-value","text":"Returns the file attribute structure.","title":"Return value"},{"location":"api/group___runtime_file_1gafc817765c2a5febb456d0d0728685295/#possible-errors","text":"BasicError::access_denied BasicError::not_found BasicError::not_directory BasicError::bad_platform_call for all errors that cannot be identified.","title":"Possible Errors"},{"location":"api/group___runtime_hash_1ga302c94395148928ddb440d307a618ee8/","text":"Luna::strhash64 constexpr u64 strhash64(const c8 *s, u64 h=0) Overview A specialization of strhash that computes 64-bit hash code. Parameters s A pointer to one null-terminated string to compute. h A initial hash value. See memhash for details. Return value Returns the hash code of the string.","title":"Luna::strhash64"},{"location":"api/group___runtime_hash_1ga302c94395148928ddb440d307a618ee8/#lunastrhash64","text":"constexpr u64 strhash64(const c8 *s, u64 h=0)","title":"Luna::strhash64"},{"location":"api/group___runtime_hash_1ga302c94395148928ddb440d307a618ee8/#overview","text":"A specialization of strhash that computes 64-bit hash code.","title":"Overview"},{"location":"api/group___runtime_hash_1ga302c94395148928ddb440d307a618ee8/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_hash_1ga302c94395148928ddb440d307a618ee8/#s","text":"A pointer to one null-terminated string to compute.","title":"s"},{"location":"api/group___runtime_hash_1ga302c94395148928ddb440d307a618ee8/#h","text":"A initial hash value. See memhash for details.","title":"h"},{"location":"api/group___runtime_hash_1ga302c94395148928ddb440d307a618ee8/#return-value","text":"Returns the hash code of the string.","title":"Return value"},{"location":"api/group___runtime_hash_1ga3793aff714eeea4ceddce8d13cf81ad7/","text":"Luna::memhash8 u8 memhash8(const void *data, usize size, u8 h=0) Overview A specialization of memhash that computes 8-bit hash code. Parameters data A pointer to the data to be hashed. size The length of the data in bytes. h A initial hash value. See memhash for details. Return value Returns the hash code of the data.","title":"Luna::memhash8"},{"location":"api/group___runtime_hash_1ga3793aff714eeea4ceddce8d13cf81ad7/#lunamemhash8","text":"u8 memhash8(const void *data, usize size, u8 h=0)","title":"Luna::memhash8"},{"location":"api/group___runtime_hash_1ga3793aff714eeea4ceddce8d13cf81ad7/#overview","text":"A specialization of memhash that computes 8-bit hash code.","title":"Overview"},{"location":"api/group___runtime_hash_1ga3793aff714eeea4ceddce8d13cf81ad7/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_hash_1ga3793aff714eeea4ceddce8d13cf81ad7/#data","text":"A pointer to the data to be hashed.","title":"data"},{"location":"api/group___runtime_hash_1ga3793aff714eeea4ceddce8d13cf81ad7/#size","text":"The length of the data in bytes.","title":"size"},{"location":"api/group___runtime_hash_1ga3793aff714eeea4ceddce8d13cf81ad7/#h","text":"A initial hash value. See memhash for details.","title":"h"},{"location":"api/group___runtime_hash_1ga3793aff714eeea4ceddce8d13cf81ad7/#return-value","text":"Returns the hash code of the data.","title":"Return value"},{"location":"api/group___runtime_hash_1ga3dcfbc6b59e469e55f1891453cf3fbec/","text":"Luna::strhash8 constexpr u8 strhash8(const c8 *s, u8 h=0) Overview A specialization of strhash that computes 8-bit hash code. Parameters s A pointer to one null-terminated string to compute. h A initial hash value. See memhash for details. Return value Returns the hash code of the string.","title":"Luna::strhash8"},{"location":"api/group___runtime_hash_1ga3dcfbc6b59e469e55f1891453cf3fbec/#lunastrhash8","text":"constexpr u8 strhash8(const c8 *s, u8 h=0)","title":"Luna::strhash8"},{"location":"api/group___runtime_hash_1ga3dcfbc6b59e469e55f1891453cf3fbec/#overview","text":"A specialization of strhash that computes 8-bit hash code.","title":"Overview"},{"location":"api/group___runtime_hash_1ga3dcfbc6b59e469e55f1891453cf3fbec/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_hash_1ga3dcfbc6b59e469e55f1891453cf3fbec/#s","text":"A pointer to one null-terminated string to compute.","title":"s"},{"location":"api/group___runtime_hash_1ga3dcfbc6b59e469e55f1891453cf3fbec/#h","text":"A initial hash value. See memhash for details.","title":"h"},{"location":"api/group___runtime_hash_1ga3dcfbc6b59e469e55f1891453cf3fbec/#return-value","text":"Returns the hash code of the string.","title":"Return value"},{"location":"api/group___runtime_hash_1ga41270084f5199ef980cc4a1127105548/","text":"Luna::memhash16 u16 memhash16(const void *data, usize size, u16 h=0) Overview A specialization of memhash that computes 16-bit hash code. Parameters data A pointer to the data to be hashed. size The length of the data in bytes. h A initial hash value. See memhash for details. Return value Returns the hash code of the data.","title":"Luna::memhash16"},{"location":"api/group___runtime_hash_1ga41270084f5199ef980cc4a1127105548/#lunamemhash16","text":"u16 memhash16(const void *data, usize size, u16 h=0)","title":"Luna::memhash16"},{"location":"api/group___runtime_hash_1ga41270084f5199ef980cc4a1127105548/#overview","text":"A specialization of memhash that computes 16-bit hash code.","title":"Overview"},{"location":"api/group___runtime_hash_1ga41270084f5199ef980cc4a1127105548/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_hash_1ga41270084f5199ef980cc4a1127105548/#data","text":"A pointer to the data to be hashed.","title":"data"},{"location":"api/group___runtime_hash_1ga41270084f5199ef980cc4a1127105548/#size","text":"The length of the data in bytes.","title":"size"},{"location":"api/group___runtime_hash_1ga41270084f5199ef980cc4a1127105548/#h","text":"A initial hash value. See memhash for details.","title":"h"},{"location":"api/group___runtime_hash_1ga41270084f5199ef980cc4a1127105548/#return-value","text":"Returns the hash code of the data.","title":"Return value"},{"location":"api/group___runtime_hash_1ga6afb7f86bb77e6fb15015e072e64d7f5/","text":"Luna::strhash template <typename _HashTy> constexpr _HashTy strhash(const c8 *s, _HashTy h=0) Computes a hash code for the specified string. Overview Parameters s A pointer to one null-terminated string to compute. h A initial hash value. See memhash for details. Return value Returns the hash code of the string.","title":"Luna::strhash"},{"location":"api/group___runtime_hash_1ga6afb7f86bb77e6fb15015e072e64d7f5/#lunastrhash","text":"template <typename _HashTy> constexpr _HashTy strhash(const c8 *s, _HashTy h=0) Computes a hash code for the specified string.","title":"Luna::strhash"},{"location":"api/group___runtime_hash_1ga6afb7f86bb77e6fb15015e072e64d7f5/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_hash_1ga6afb7f86bb77e6fb15015e072e64d7f5/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_hash_1ga6afb7f86bb77e6fb15015e072e64d7f5/#s","text":"A pointer to one null-terminated string to compute.","title":"s"},{"location":"api/group___runtime_hash_1ga6afb7f86bb77e6fb15015e072e64d7f5/#h","text":"A initial hash value. See memhash for details.","title":"h"},{"location":"api/group___runtime_hash_1ga6afb7f86bb77e6fb15015e072e64d7f5/#return-value","text":"Returns the hash code of the string.","title":"Return value"},{"location":"api/group___runtime_hash_1ga6e9ae5cddc3779052db66e27332bcd9f/","text":"Luna::strhash16 constexpr u16 strhash16(const c8 *s, u16 h=0) Overview A specialization of strhash that computes 16-bit hash code. Parameters s A pointer to one null-terminated string to compute. h A initial hash value. See memhash for details. Return value Returns the hash code of the string.","title":"Luna::strhash16"},{"location":"api/group___runtime_hash_1ga6e9ae5cddc3779052db66e27332bcd9f/#lunastrhash16","text":"constexpr u16 strhash16(const c8 *s, u16 h=0)","title":"Luna::strhash16"},{"location":"api/group___runtime_hash_1ga6e9ae5cddc3779052db66e27332bcd9f/#overview","text":"A specialization of strhash that computes 16-bit hash code.","title":"Overview"},{"location":"api/group___runtime_hash_1ga6e9ae5cddc3779052db66e27332bcd9f/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_hash_1ga6e9ae5cddc3779052db66e27332bcd9f/#s","text":"A pointer to one null-terminated string to compute.","title":"s"},{"location":"api/group___runtime_hash_1ga6e9ae5cddc3779052db66e27332bcd9f/#h","text":"A initial hash value. See memhash for details.","title":"h"},{"location":"api/group___runtime_hash_1ga6e9ae5cddc3779052db66e27332bcd9f/#return-value","text":"Returns the hash code of the string.","title":"Return value"},{"location":"api/group___runtime_hash_1ga710a8c2a03ee2ba229645ac590feb208/","text":"Luna::memhash32 u32 memhash32(const void *data, usize size, u32 h=0) Overview A specialization of memhash that computes 32-bit hash code. Parameters data A pointer to the data to be hashed. size The length of the data in bytes. h A initial hash value. See memhash for details. Return value Returns the hash code of the data.","title":"Luna::memhash32"},{"location":"api/group___runtime_hash_1ga710a8c2a03ee2ba229645ac590feb208/#lunamemhash32","text":"u32 memhash32(const void *data, usize size, u32 h=0)","title":"Luna::memhash32"},{"location":"api/group___runtime_hash_1ga710a8c2a03ee2ba229645ac590feb208/#overview","text":"A specialization of memhash that computes 32-bit hash code.","title":"Overview"},{"location":"api/group___runtime_hash_1ga710a8c2a03ee2ba229645ac590feb208/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_hash_1ga710a8c2a03ee2ba229645ac590feb208/#data","text":"A pointer to the data to be hashed.","title":"data"},{"location":"api/group___runtime_hash_1ga710a8c2a03ee2ba229645ac590feb208/#size","text":"The length of the data in bytes.","title":"size"},{"location":"api/group___runtime_hash_1ga710a8c2a03ee2ba229645ac590feb208/#h","text":"A initial hash value. See memhash for details.","title":"h"},{"location":"api/group___runtime_hash_1ga710a8c2a03ee2ba229645ac590feb208/#return-value","text":"Returns the hash code of the data.","title":"Return value"},{"location":"api/group___runtime_hash_1ga999874bc5bc29c6252b27211af951c1f/","text":"Luna::strhash32 constexpr u32 strhash32(const c8 *s, u32 h=0) Overview A specialization of strhash that computes 32-bit hash code. Parameters s A pointer to one null-terminated string to compute. h A initial hash value. See memhash for details. Return value Returns the hash code of the string.","title":"Luna::strhash32"},{"location":"api/group___runtime_hash_1ga999874bc5bc29c6252b27211af951c1f/#lunastrhash32","text":"constexpr u32 strhash32(const c8 *s, u32 h=0)","title":"Luna::strhash32"},{"location":"api/group___runtime_hash_1ga999874bc5bc29c6252b27211af951c1f/#overview","text":"A specialization of strhash that computes 32-bit hash code.","title":"Overview"},{"location":"api/group___runtime_hash_1ga999874bc5bc29c6252b27211af951c1f/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_hash_1ga999874bc5bc29c6252b27211af951c1f/#s","text":"A pointer to one null-terminated string to compute.","title":"s"},{"location":"api/group___runtime_hash_1ga999874bc5bc29c6252b27211af951c1f/#h","text":"A initial hash value. See memhash for details.","title":"h"},{"location":"api/group___runtime_hash_1ga999874bc5bc29c6252b27211af951c1f/#return-value","text":"Returns the hash code of the string.","title":"Return value"},{"location":"api/group___runtime_hash_1gac8b19ae493c9cb188a14f8e343a2da0e/","text":"Luna::memhash64 u64 memhash64(const void *data, usize size, u64 h=0) Overview A specialization of memhash that computes 64-bit hash code. Parameters data A pointer to the data to be hashed. size The length of the data in bytes. h A initial hash value. See memhash for details. Return value Returns the hash code of the data.","title":"Luna::memhash64"},{"location":"api/group___runtime_hash_1gac8b19ae493c9cb188a14f8e343a2da0e/#lunamemhash64","text":"u64 memhash64(const void *data, usize size, u64 h=0)","title":"Luna::memhash64"},{"location":"api/group___runtime_hash_1gac8b19ae493c9cb188a14f8e343a2da0e/#overview","text":"A specialization of memhash that computes 64-bit hash code.","title":"Overview"},{"location":"api/group___runtime_hash_1gac8b19ae493c9cb188a14f8e343a2da0e/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_hash_1gac8b19ae493c9cb188a14f8e343a2da0e/#data","text":"A pointer to the data to be hashed.","title":"data"},{"location":"api/group___runtime_hash_1gac8b19ae493c9cb188a14f8e343a2da0e/#size","text":"The length of the data in bytes.","title":"size"},{"location":"api/group___runtime_hash_1gac8b19ae493c9cb188a14f8e343a2da0e/#h","text":"A initial hash value. See memhash for details.","title":"h"},{"location":"api/group___runtime_hash_1gac8b19ae493c9cb188a14f8e343a2da0e/#return-value","text":"Returns the hash code of the data.","title":"Return value"},{"location":"api/group___runtime_hash_1gae0c40164557e718d6ee7b7c613210075/","text":"Luna::memhash template <typename _HashTy> _HashTy memhash(const void *data, usize size, _HashTy h=0) Computes a hash code for the specified binary data. Overview This is the basic hash function that uses crc32 hash algorithm to hash any kind of binary data stream to a single hash value. Parameters data A pointer to the data to be hashed. size The length of the data in bytes. h A initial hash value. If this is a new hash, set to 0 (which is the default value if not specified). If this is a rehash operation or a second have before another one, you can specify the last hash value to get a different hash value from the same data. Return value Returns the hash code of the data.","title":"Luna::memhash"},{"location":"api/group___runtime_hash_1gae0c40164557e718d6ee7b7c613210075/#lunamemhash","text":"template <typename _HashTy> _HashTy memhash(const void *data, usize size, _HashTy h=0) Computes a hash code for the specified binary data.","title":"Luna::memhash"},{"location":"api/group___runtime_hash_1gae0c40164557e718d6ee7b7c613210075/#overview","text":"This is the basic hash function that uses crc32 hash algorithm to hash any kind of binary data stream to a single hash value.","title":"Overview"},{"location":"api/group___runtime_hash_1gae0c40164557e718d6ee7b7c613210075/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_hash_1gae0c40164557e718d6ee7b7c613210075/#data","text":"A pointer to the data to be hashed.","title":"data"},{"location":"api/group___runtime_hash_1gae0c40164557e718d6ee7b7c613210075/#size","text":"The length of the data in bytes.","title":"size"},{"location":"api/group___runtime_hash_1gae0c40164557e718d6ee7b7c613210075/#h","text":"A initial hash value. If this is a new hash, set to 0 (which is the default value if not specified). If this is a rehash operation or a second have before another one, you can specify the last hash value to get a different hash value from the same data.","title":"h"},{"location":"api/group___runtime_hash_1gae0c40164557e718d6ee7b7c613210075/#return-value","text":"Returns the hash code of the data.","title":"Return value"},{"location":"api/group___runtime_init_1gaa6dc2d75a30d77db0a928371f5965c62/","text":"Luna::init LUNA_RUNTIME_API bool init() Initializes Luna SDK. Overview Call this function to initialize Luna SDK. Most features provided by Luna SDK are only available after Luna SDK is initialized, so always initialize Luna SDK firstly on program startup. Calling this function when Luna SDK is already initialized does nothing and returns true directly. Note that modules registered to Luna SDK will not be initialized by this function, they should be initialized manually using functions like init_modules. Return value Returns true if Luna SDK is succssfully initialized, returns false otherwise.","title":"Luna::init"},{"location":"api/group___runtime_init_1gaa6dc2d75a30d77db0a928371f5965c62/#lunainit","text":"LUNA_RUNTIME_API bool init() Initializes Luna SDK.","title":"Luna::init"},{"location":"api/group___runtime_init_1gaa6dc2d75a30d77db0a928371f5965c62/#overview","text":"Call this function to initialize Luna SDK. Most features provided by Luna SDK are only available after Luna SDK is initialized, so always initialize Luna SDK firstly on program startup. Calling this function when Luna SDK is already initialized does nothing and returns true directly. Note that modules registered to Luna SDK will not be initialized by this function, they should be initialized manually using functions like init_modules.","title":"Overview"},{"location":"api/group___runtime_init_1gaa6dc2d75a30d77db0a928371f5965c62/#return-value","text":"Returns true if Luna SDK is succssfully initialized, returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_init_1gacf6161a418e94e27818495118b330e64/","text":"Luna::close LUNA_RUNTIME_API void close() Closes Luna SDK. Overview Call this function to close Luna SDK. Most features provided by Luna SDK are not available after Luna SDK is closed. Calling this function when Luna SDK is not initialized or already closed does nothing and returns directly. Initialized modules be closed by this function in the reverse order of their initialization order, so they don't need to be closed manually.","title":"Luna::close"},{"location":"api/group___runtime_init_1gacf6161a418e94e27818495118b330e64/#lunaclose","text":"LUNA_RUNTIME_API void close() Closes Luna SDK.","title":"Luna::close"},{"location":"api/group___runtime_init_1gacf6161a418e94e27818495118b330e64/#overview","text":"Call this function to close Luna SDK. Most features provided by Luna SDK are not available after Luna SDK is closed. Calling this function when Luna SDK is not initialized or already closed does nothing and returns directly. Initialized modules be closed by this function in the reverse order of their initialization order, so they don't need to be closed manually.","title":"Overview"},{"location":"api/group___runtime_interface_1ga0136aa0fbf499671735837773bd5276b/","text":"Luna::is_interface_implemented_by_type LUNA_RUNTIME_API bool is_interface_implemented_by_type(typeinfo_t type, const Guid &iid) Checks whether the specified type implements the specified interface. Overview Parameters type The type to query. iid The interface GUID to query. Return value Returns true if the specified type implements the specified interface. Returns false otherwise.","title":"Luna::is_interface_implemented_by_type"},{"location":"api/group___runtime_interface_1ga0136aa0fbf499671735837773bd5276b/#lunais_interface_implemented_by_type","text":"LUNA_RUNTIME_API bool is_interface_implemented_by_type(typeinfo_t type, const Guid &iid) Checks whether the specified type implements the specified interface.","title":"Luna::is_interface_implemented_by_type"},{"location":"api/group___runtime_interface_1ga0136aa0fbf499671735837773bd5276b/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_interface_1ga0136aa0fbf499671735837773bd5276b/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_interface_1ga0136aa0fbf499671735837773bd5276b/#type","text":"The type to query.","title":"type"},{"location":"api/group___runtime_interface_1ga0136aa0fbf499671735837773bd5276b/#iid","text":"The interface GUID to query.","title":"iid"},{"location":"api/group___runtime_interface_1ga0136aa0fbf499671735837773bd5276b/#return-value","text":"Returns true if the specified type implements the specified interface. Returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_interface_1ga44b21a1d55c2f93cc3cb96657f88d690/","text":"Luna::impl_interface_for_type template <typename _Ty, typename _Ity1, typename...> void impl_interface_for_type() Overview Registers one or more interface implementations for one type.","title":"Luna::impl_interface_for_type"},{"location":"api/group___runtime_interface_1ga44b21a1d55c2f93cc3cb96657f88d690/#lunaimpl_interface_for_type","text":"template <typename _Ty, typename _Ity1, typename...> void impl_interface_for_type()","title":"Luna::impl_interface_for_type"},{"location":"api/group___runtime_interface_1ga44b21a1d55c2f93cc3cb96657f88d690/#overview","text":"Registers one or more interface implementations for one type.","title":"Overview"},{"location":"api/group___runtime_interface_1ga74a3711b2b2e58664824d0f3e50c080c/","text":"Luna::query_interface LUNA_RUNTIME_API void * query_interface(object_t object, const Guid &iid) Gets one interface pointer from one pointer to one boxed object that implements the interface. Overview Parameters object The pointer to the boxed object to query interface from. iid The interface GUID to query. Return value Returns one pointer that can be safely reinterpreted to the specified interface pointer. Returns nullptr if the specified interface is not implemented by the specified boxed object.","title":"Luna::query_interface"},{"location":"api/group___runtime_interface_1ga74a3711b2b2e58664824d0f3e50c080c/#lunaquery_interface","text":"LUNA_RUNTIME_API void * query_interface(object_t object, const Guid &iid) Gets one interface pointer from one pointer to one boxed object that implements the interface.","title":"Luna::query_interface"},{"location":"api/group___runtime_interface_1ga74a3711b2b2e58664824d0f3e50c080c/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_interface_1ga74a3711b2b2e58664824d0f3e50c080c/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_interface_1ga74a3711b2b2e58664824d0f3e50c080c/#object","text":"The pointer to the boxed object to query interface from.","title":"object"},{"location":"api/group___runtime_interface_1ga74a3711b2b2e58664824d0f3e50c080c/#iid","text":"The interface GUID to query.","title":"iid"},{"location":"api/group___runtime_interface_1ga74a3711b2b2e58664824d0f3e50c080c/#return-value","text":"Returns one pointer that can be safely reinterpreted to the specified interface pointer. Returns nullptr if the specified interface is not implemented by the specified boxed object.","title":"Return value"},{"location":"api/group___runtime_interface_1gaf6fa36ce4224a745157d50c5c618b32e/","text":"Luna::query_interface template <typename _Ity> _Ity * query_interface(object_t object) Gets one interface pointer from one pointer to one boxed object that implements the interface. Overview Parameters object The pointer to the boxed object to query interface from. Return value Returns the specified interface pointer for the boxed object. Returns nullptr if the specified interface is not implemented by the specified boxed object.","title":"Luna::query_interface"},{"location":"api/group___runtime_interface_1gaf6fa36ce4224a745157d50c5c618b32e/#lunaquery_interface","text":"template <typename _Ity> _Ity * query_interface(object_t object) Gets one interface pointer from one pointer to one boxed object that implements the interface.","title":"Luna::query_interface"},{"location":"api/group___runtime_interface_1gaf6fa36ce4224a745157d50c5c618b32e/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_interface_1gaf6fa36ce4224a745157d50c5c618b32e/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_interface_1gaf6fa36ce4224a745157d50c5c618b32e/#object","text":"The pointer to the boxed object to query interface from.","title":"object"},{"location":"api/group___runtime_interface_1gaf6fa36ce4224a745157d50c5c618b32e/#return-value","text":"Returns the specified interface pointer for the boxed object. Returns nullptr if the specified interface is not implemented by the specified boxed object.","title":"Return value"},{"location":"api/group___runtime_interface_1gafd04b0e1bef5d4a4cb8a6d0b53d35d39/","text":"Luna::impl_interface_for_type LUNA_RUNTIME_API void impl_interface_for_type(const InterfaceImplDesc &desc) Registers one interface implementation. Overview Parameters desc The interface implementation descriptor.","title":"Luna::impl_interface_for_type"},{"location":"api/group___runtime_interface_1gafd04b0e1bef5d4a4cb8a6d0b53d35d39/#lunaimpl_interface_for_type","text":"LUNA_RUNTIME_API void impl_interface_for_type(const InterfaceImplDesc &desc) Registers one interface implementation.","title":"Luna::impl_interface_for_type"},{"location":"api/group___runtime_interface_1gafd04b0e1bef5d4a4cb8a6d0b53d35d39/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_interface_1gafd04b0e1bef5d4a4cb8a6d0b53d35d39/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_interface_1gafd04b0e1bef5d4a4cb8a6d0b53d35d39/#desc","text":"The interface implementation descriptor.","title":"desc"},{"location":"api/group___runtime_log_1ga054dbc82fab4901356fbc8a3644de723/","text":"Luna::logv_error LUNA_RUNTIME_API void logv_error(const c8 *tag, const c8 *format, VarList args) Outputs one log message with LogVerbosity::error verbosity. Overview Parameters tag The log tag. Used by the implementation to filter logs. format The formatting syntax used to format the log message. args Arguments used to format the log message.","title":"Luna::logv_error"},{"location":"api/group___runtime_log_1ga054dbc82fab4901356fbc8a3644de723/#lunalogv_error","text":"LUNA_RUNTIME_API void logv_error(const c8 *tag, const c8 *format, VarList args) Outputs one log message with LogVerbosity::error verbosity.","title":"Luna::logv_error"},{"location":"api/group___runtime_log_1ga054dbc82fab4901356fbc8a3644de723/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_log_1ga054dbc82fab4901356fbc8a3644de723/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_log_1ga054dbc82fab4901356fbc8a3644de723/#tag","text":"The log tag. Used by the implementation to filter logs.","title":"tag"},{"location":"api/group___runtime_log_1ga054dbc82fab4901356fbc8a3644de723/#format","text":"The formatting syntax used to format the log message.","title":"format"},{"location":"api/group___runtime_log_1ga054dbc82fab4901356fbc8a3644de723/#args","text":"Arguments used to format the log message.","title":"args"},{"location":"api/group___runtime_log_1ga05f9c48f4ca84328d6ac59079d85b3c5/","text":"Luna::flush_log_to_file LUNA_RUNTIME_API void flush_log_to_file() Flushes the log-to-file cache and writes all cached logs to the log file.","title":"Luna::flush_log_to_file"},{"location":"api/group___runtime_log_1ga05f9c48f4ca84328d6ac59079d85b3c5/#lunaflush_log_to_file","text":"LUNA_RUNTIME_API void flush_log_to_file() Flushes the log-to-file cache and writes all cached logs to the log file.","title":"Luna::flush_log_to_file"},{"location":"api/group___runtime_log_1ga20e350eaf2b211c77ed8d0a154a68d32/","text":"Luna::logv_info LUNA_RUNTIME_API void logv_info(const c8 *tag, const c8 *format, VarList args) Outputs one log message with LogVerbosity::info verbosity. Overview Parameters tag The log tag. Used by the implementation to filter logs. format The formatting syntax used to format the log message. args Arguments used to format the log message.","title":"Luna::logv_info"},{"location":"api/group___runtime_log_1ga20e350eaf2b211c77ed8d0a154a68d32/#lunalogv_info","text":"LUNA_RUNTIME_API void logv_info(const c8 *tag, const c8 *format, VarList args) Outputs one log message with LogVerbosity::info verbosity.","title":"Luna::logv_info"},{"location":"api/group___runtime_log_1ga20e350eaf2b211c77ed8d0a154a68d32/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_log_1ga20e350eaf2b211c77ed8d0a154a68d32/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_log_1ga20e350eaf2b211c77ed8d0a154a68d32/#tag","text":"The log tag. Used by the implementation to filter logs.","title":"tag"},{"location":"api/group___runtime_log_1ga20e350eaf2b211c77ed8d0a154a68d32/#format","text":"The formatting syntax used to format the log message.","title":"format"},{"location":"api/group___runtime_log_1ga20e350eaf2b211c77ed8d0a154a68d32/#args","text":"Arguments used to format the log message.","title":"args"},{"location":"api/group___runtime_log_1ga26ac527152f3c2e10cb93223d37f00ec/","text":"Luna::set_log_file LUNA_RUNTIME_API void set_log_file(const c8 *file) Sets the file path of the log file. Overview Parameters file The file path of the log file. The file path may be absolute or relative to the current working directory.","title":"Luna::set_log_file"},{"location":"api/group___runtime_log_1ga26ac527152f3c2e10cb93223d37f00ec/#lunaset_log_file","text":"LUNA_RUNTIME_API void set_log_file(const c8 *file) Sets the file path of the log file.","title":"Luna::set_log_file"},{"location":"api/group___runtime_log_1ga26ac527152f3c2e10cb93223d37f00ec/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_log_1ga26ac527152f3c2e10cb93223d37f00ec/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_log_1ga26ac527152f3c2e10cb93223d37f00ec/#file","text":"The file path of the log file. The file path may be absolute or relative to the current working directory.","title":"file"},{"location":"api/group___runtime_log_1ga2d44dc9ca61bd03809cbfa07e2536ae3/","text":"Luna::log_warning LUNA_RUNTIME_API void log_warning(const c8 *tag, const c8 *format,...) Outputs one log message with LogVerbosity::warning verbosity. Overview Parameters tag The log tag. Used by the implementation to filter logs. format The formatting syntax used to format the log message.","title":"Luna::log_warning"},{"location":"api/group___runtime_log_1ga2d44dc9ca61bd03809cbfa07e2536ae3/#lunalog_warning","text":"LUNA_RUNTIME_API void log_warning(const c8 *tag, const c8 *format,...) Outputs one log message with LogVerbosity::warning verbosity.","title":"Luna::log_warning"},{"location":"api/group___runtime_log_1ga2d44dc9ca61bd03809cbfa07e2536ae3/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_log_1ga2d44dc9ca61bd03809cbfa07e2536ae3/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_log_1ga2d44dc9ca61bd03809cbfa07e2536ae3/#tag","text":"The log tag. Used by the implementation to filter logs.","title":"tag"},{"location":"api/group___runtime_log_1ga2d44dc9ca61bd03809cbfa07e2536ae3/#format","text":"The formatting syntax used to format the log message.","title":"format"},{"location":"api/group___runtime_log_1ga350946e90121f9ef51e063e4c5bccc40/","text":"Luna::log LUNA_RUNTIME_API void log(LogVerbosity verbosity, const c8 *tag, const c8 *format,...) Logs one message. Overview Parameters verbosity The log verbosity. tag The log tag. Used by the implementation to filter logs. format The log message format.","title":"Luna::log"},{"location":"api/group___runtime_log_1ga350946e90121f9ef51e063e4c5bccc40/#lunalog","text":"LUNA_RUNTIME_API void log(LogVerbosity verbosity, const c8 *tag, const c8 *format,...) Logs one message.","title":"Luna::log"},{"location":"api/group___runtime_log_1ga350946e90121f9ef51e063e4c5bccc40/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_log_1ga350946e90121f9ef51e063e4c5bccc40/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_log_1ga350946e90121f9ef51e063e4c5bccc40/#verbosity","text":"The log verbosity.","title":"verbosity"},{"location":"api/group___runtime_log_1ga350946e90121f9ef51e063e4c5bccc40/#tag","text":"The log tag. Used by the implementation to filter logs.","title":"tag"},{"location":"api/group___runtime_log_1ga350946e90121f9ef51e063e4c5bccc40/#format","text":"The log message format.","title":"format"},{"location":"api/group___runtime_log_1ga4f5add77207e2a4582c82b8a9c85e4e1/","text":"Luna::log_callback_t using log_callback_t = void(LogVerbosity verbosity, const c8* tag, usize tag_length, const c8* message, usize message_length) Called by the log system when one log is emitted. Overview Parameters verbosity The log verbosity. tag The log tag. Used by the implementation to filter logs. tag_len The length of the tag string. message The log message. message_length The message length.","title":"Luna::log_callback_t"},{"location":"api/group___runtime_log_1ga4f5add77207e2a4582c82b8a9c85e4e1/#lunalog_callback_t","text":"using log_callback_t = void(LogVerbosity verbosity, const c8* tag, usize tag_length, const c8* message, usize message_length) Called by the log system when one log is emitted.","title":"Luna::log_callback_t"},{"location":"api/group___runtime_log_1ga4f5add77207e2a4582c82b8a9c85e4e1/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_log_1ga4f5add77207e2a4582c82b8a9c85e4e1/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_log_1ga4f5add77207e2a4582c82b8a9c85e4e1/#verbosity","text":"The log verbosity.","title":"verbosity"},{"location":"api/group___runtime_log_1ga4f5add77207e2a4582c82b8a9c85e4e1/#tag","text":"The log tag. Used by the implementation to filter logs.","title":"tag"},{"location":"api/group___runtime_log_1ga4f5add77207e2a4582c82b8a9c85e4e1/#tag_len","text":"The length of the tag string.","title":"tag_len"},{"location":"api/group___runtime_log_1ga4f5add77207e2a4582c82b8a9c85e4e1/#message","text":"The log message.","title":"message"},{"location":"api/group___runtime_log_1ga4f5add77207e2a4582c82b8a9c85e4e1/#message_length","text":"The message length.","title":"message_length"},{"location":"api/group___runtime_log_1ga5181d848131182ecd7dfe9ce22129712/","text":"Luna::set_log_to_file_enabled LUNA_RUNTIME_API void set_log_to_file_enabled(bool enabled) Enables or disables outputting log messages to the log file. Overview Parameters enabled Specifies true to enable logging to file. Specify false to disable it.","title":"Luna::set_log_to_file_enabled"},{"location":"api/group___runtime_log_1ga5181d848131182ecd7dfe9ce22129712/#lunaset_log_to_file_enabled","text":"LUNA_RUNTIME_API void set_log_to_file_enabled(bool enabled) Enables or disables outputting log messages to the log file.","title":"Luna::set_log_to_file_enabled"},{"location":"api/group___runtime_log_1ga5181d848131182ecd7dfe9ce22129712/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_log_1ga5181d848131182ecd7dfe9ce22129712/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_log_1ga5181d848131182ecd7dfe9ce22129712/#enabled","text":"Specifies true to enable logging to file. Specify false to disable it.","title":"enabled"},{"location":"api/group___runtime_log_1ga55a28bdf8fba8c2406f1e6c118c29145/","text":"Luna::log_info LUNA_RUNTIME_API void log_info(const c8 *tag, const c8 *format,...) Outputs one log message with LogVerbosity::info verbosity. Overview Parameters tag The log tag. Used by the implementation to filter logs. format The formatting syntax used to format the log message.","title":"Luna::log_info"},{"location":"api/group___runtime_log_1ga55a28bdf8fba8c2406f1e6c118c29145/#lunalog_info","text":"LUNA_RUNTIME_API void log_info(const c8 *tag, const c8 *format,...) Outputs one log message with LogVerbosity::info verbosity.","title":"Luna::log_info"},{"location":"api/group___runtime_log_1ga55a28bdf8fba8c2406f1e6c118c29145/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_log_1ga55a28bdf8fba8c2406f1e6c118c29145/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_log_1ga55a28bdf8fba8c2406f1e6c118c29145/#tag","text":"The log tag. Used by the implementation to filter logs.","title":"tag"},{"location":"api/group___runtime_log_1ga55a28bdf8fba8c2406f1e6c118c29145/#format","text":"The formatting syntax used to format the log message.","title":"format"},{"location":"api/group___runtime_log_1ga7aeedeac2504e537c698bd6a68a9d40d/","text":"Luna::logv_warning LUNA_RUNTIME_API void logv_warning(const c8 *tag, const c8 *format, VarList args) Outputs one log message with LogVerbosity::warning verbosity. Overview Parameters tag The log tag. Used by the implementation to filter logs. format The formatting syntax used to format the log message. args Arguments used to format the log message.","title":"Luna::logv_warning"},{"location":"api/group___runtime_log_1ga7aeedeac2504e537c698bd6a68a9d40d/#lunalogv_warning","text":"LUNA_RUNTIME_API void logv_warning(const c8 *tag, const c8 *format, VarList args) Outputs one log message with LogVerbosity::warning verbosity.","title":"Luna::logv_warning"},{"location":"api/group___runtime_log_1ga7aeedeac2504e537c698bd6a68a9d40d/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_log_1ga7aeedeac2504e537c698bd6a68a9d40d/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_log_1ga7aeedeac2504e537c698bd6a68a9d40d/#tag","text":"The log tag. Used by the implementation to filter logs.","title":"tag"},{"location":"api/group___runtime_log_1ga7aeedeac2504e537c698bd6a68a9d40d/#format","text":"The formatting syntax used to format the log message.","title":"format"},{"location":"api/group___runtime_log_1ga7aeedeac2504e537c698bd6a68a9d40d/#args","text":"Arguments used to format the log message.","title":"args"},{"location":"api/group___runtime_log_1ga89a711cfd618825a7139fed0cb10578f/","text":"Luna::set_log_to_file_verbosity LUNA_RUNTIME_API void set_log_to_file_verbosity(LogVerbosity verbosity) Sets the maximum log verbosity level that will be outputted to the log file. Overview Parameters verbosity Specifies the maximum log verbosity level that will be outputted to the log file.","title":"Luna::set_log_to_file_verbosity"},{"location":"api/group___runtime_log_1ga89a711cfd618825a7139fed0cb10578f/#lunaset_log_to_file_verbosity","text":"LUNA_RUNTIME_API void set_log_to_file_verbosity(LogVerbosity verbosity) Sets the maximum log verbosity level that will be outputted to the log file.","title":"Luna::set_log_to_file_verbosity"},{"location":"api/group___runtime_log_1ga89a711cfd618825a7139fed0cb10578f/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_log_1ga89a711cfd618825a7139fed0cb10578f/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_log_1ga89a711cfd618825a7139fed0cb10578f/#verbosity","text":"Specifies the maximum log verbosity level that will be outputted to the log file.","title":"verbosity"},{"location":"api/group___runtime_log_1ga8ac371f6e8d3004cfee11af8c4a9c792/","text":"Luna::log_debug LUNA_RUNTIME_API void log_debug(const c8 *tag, const c8 *format,...) Outputs one log message with LogVerbosity::debug verbosity. Overview Parameters tag The log tag. Used by the implementation to filter logs. format The formatting syntax used to format the log message.","title":"Luna::log_debug"},{"location":"api/group___runtime_log_1ga8ac371f6e8d3004cfee11af8c4a9c792/#lunalog_debug","text":"LUNA_RUNTIME_API void log_debug(const c8 *tag, const c8 *format,...) Outputs one log message with LogVerbosity::debug verbosity.","title":"Luna::log_debug"},{"location":"api/group___runtime_log_1ga8ac371f6e8d3004cfee11af8c4a9c792/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_log_1ga8ac371f6e8d3004cfee11af8c4a9c792/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_log_1ga8ac371f6e8d3004cfee11af8c4a9c792/#tag","text":"The log tag. Used by the implementation to filter logs.","title":"tag"},{"location":"api/group___runtime_log_1ga8ac371f6e8d3004cfee11af8c4a9c792/#format","text":"The formatting syntax used to format the log message.","title":"format"},{"location":"api/group___runtime_log_1ga8d51f2669af7117b5d2ef04818feb092/","text":"Luna::set_log_to_platform_enabled LUNA_RUNTIME_API void set_log_to_platform_enabled(bool enabled) Enables or disables outputting log messages to platform's default logging device. Overview Parameters enabled Specifies true to enable logging to standard output. Specify false to disable it.","title":"Luna::set_log_to_platform_enabled"},{"location":"api/group___runtime_log_1ga8d51f2669af7117b5d2ef04818feb092/#lunaset_log_to_platform_enabled","text":"LUNA_RUNTIME_API void set_log_to_platform_enabled(bool enabled) Enables or disables outputting log messages to platform's default logging device.","title":"Luna::set_log_to_platform_enabled"},{"location":"api/group___runtime_log_1ga8d51f2669af7117b5d2ef04818feb092/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_log_1ga8d51f2669af7117b5d2ef04818feb092/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_log_1ga8d51f2669af7117b5d2ef04818feb092/#enabled","text":"Specifies true to enable logging to standard output. Specify false to disable it.","title":"enabled"},{"location":"api/group___runtime_log_1ga9cba706488b218d214e0ef4b65c49134/","text":"Luna::set_log_to_platform_verbosity LUNA_RUNTIME_API void set_log_to_platform_verbosity(LogVerbosity verbosity) Sets the maximum log verbosity level that will be outputted to platform's default logging device. Overview Parameters verbosity Specifies the maximum log verbosity level that will be outputted to platform's default logging device.","title":"Luna::set_log_to_platform_verbosity"},{"location":"api/group___runtime_log_1ga9cba706488b218d214e0ef4b65c49134/#lunaset_log_to_platform_verbosity","text":"LUNA_RUNTIME_API void set_log_to_platform_verbosity(LogVerbosity verbosity) Sets the maximum log verbosity level that will be outputted to platform's default logging device.","title":"Luna::set_log_to_platform_verbosity"},{"location":"api/group___runtime_log_1ga9cba706488b218d214e0ef4b65c49134/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_log_1ga9cba706488b218d214e0ef4b65c49134/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_log_1ga9cba706488b218d214e0ef4b65c49134/#verbosity","text":"Specifies the maximum log verbosity level that will be outputted to platform's default logging device.","title":"verbosity"},{"location":"api/group___runtime_log_1gaa223d91f158a47f11806bf2c915dc227/","text":"Luna::unregister_log_handler LUNA_RUNTIME_API void unregister_log_handler(usize handler_id) Unregisters one registered log handler. Overview Parameters handler_id The handler identifier returned by register_log_handler for the handler to be unregistered.","title":"Luna::unregister_log_handler"},{"location":"api/group___runtime_log_1gaa223d91f158a47f11806bf2c915dc227/#lunaunregister_log_handler","text":"LUNA_RUNTIME_API void unregister_log_handler(usize handler_id) Unregisters one registered log handler.","title":"Luna::unregister_log_handler"},{"location":"api/group___runtime_log_1gaa223d91f158a47f11806bf2c915dc227/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_log_1gaa223d91f158a47f11806bf2c915dc227/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_log_1gaa223d91f158a47f11806bf2c915dc227/#handler_id","text":"The handler identifier returned by register_log_handler for the handler to be unregistered.","title":"handler_id"},{"location":"api/group___runtime_log_1gaa970d47c6a13e8a50336d50bb7718766/","text":"Luna::logv_verbose LUNA_RUNTIME_API void logv_verbose(const c8 *tag, const c8 *format, VarList args) Outputs one log message with LogVerbosity::verbose verbosity. Overview Parameters tag The log tag. Used by the implementation to filter logs. format The formatting syntax used to format the log message. args Arguments used to format the log message.","title":"Luna::logv_verbose"},{"location":"api/group___runtime_log_1gaa970d47c6a13e8a50336d50bb7718766/#lunalogv_verbose","text":"LUNA_RUNTIME_API void logv_verbose(const c8 *tag, const c8 *format, VarList args) Outputs one log message with LogVerbosity::verbose verbosity.","title":"Luna::logv_verbose"},{"location":"api/group___runtime_log_1gaa970d47c6a13e8a50336d50bb7718766/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_log_1gaa970d47c6a13e8a50336d50bb7718766/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_log_1gaa970d47c6a13e8a50336d50bb7718766/#tag","text":"The log tag. Used by the implementation to filter logs.","title":"tag"},{"location":"api/group___runtime_log_1gaa970d47c6a13e8a50336d50bb7718766/#format","text":"The formatting syntax used to format the log message.","title":"format"},{"location":"api/group___runtime_log_1gaa970d47c6a13e8a50336d50bb7718766/#args","text":"Arguments used to format the log message.","title":"args"},{"location":"api/group___runtime_log_1gaab0d7bef3078405ab630732e2a267514/","text":"Luna::logv_debug LUNA_RUNTIME_API void logv_debug(const c8 *tag, const c8 *format, VarList args) Outputs one log message with LogVerbosity::debug verbosity. Overview Parameters tag The log tag. Used by the implementation to filter logs. format The formatting syntax used to format the log message. args Arguments used to format the log message.","title":"Luna::logv_debug"},{"location":"api/group___runtime_log_1gaab0d7bef3078405ab630732e2a267514/#lunalogv_debug","text":"LUNA_RUNTIME_API void logv_debug(const c8 *tag, const c8 *format, VarList args) Outputs one log message with LogVerbosity::debug verbosity.","title":"Luna::logv_debug"},{"location":"api/group___runtime_log_1gaab0d7bef3078405ab630732e2a267514/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_log_1gaab0d7bef3078405ab630732e2a267514/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_log_1gaab0d7bef3078405ab630732e2a267514/#tag","text":"The log tag. Used by the implementation to filter logs.","title":"tag"},{"location":"api/group___runtime_log_1gaab0d7bef3078405ab630732e2a267514/#format","text":"The formatting syntax used to format the log message.","title":"format"},{"location":"api/group___runtime_log_1gaab0d7bef3078405ab630732e2a267514/#args","text":"Arguments used to format the log message.","title":"args"},{"location":"api/group___runtime_log_1gab307215773d74f6206e9f160b981e487/","text":"Luna::logv LUNA_RUNTIME_API void logv(LogVerbosity verbosity, const c8 *tag, const c8 *format, VarList args) Logs one message. Overview Parameters verbosity The log verbosity. tag The log tag. Used by the implementation to filter logs. format The log message format. args Arguments used to format the log message.","title":"Luna::logv"},{"location":"api/group___runtime_log_1gab307215773d74f6206e9f160b981e487/#lunalogv","text":"LUNA_RUNTIME_API void logv(LogVerbosity verbosity, const c8 *tag, const c8 *format, VarList args) Logs one message.","title":"Luna::logv"},{"location":"api/group___runtime_log_1gab307215773d74f6206e9f160b981e487/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_log_1gab307215773d74f6206e9f160b981e487/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_log_1gab307215773d74f6206e9f160b981e487/#verbosity","text":"The log verbosity.","title":"verbosity"},{"location":"api/group___runtime_log_1gab307215773d74f6206e9f160b981e487/#tag","text":"The log tag. Used by the implementation to filter logs.","title":"tag"},{"location":"api/group___runtime_log_1gab307215773d74f6206e9f160b981e487/#format","text":"The log message format.","title":"format"},{"location":"api/group___runtime_log_1gab307215773d74f6206e9f160b981e487/#args","text":"Arguments used to format the log message.","title":"args"},{"location":"api/group___runtime_log_1gad29d52073dc0b3f7ec0267c3ba03f360/","text":"Luna::log_error LUNA_RUNTIME_API void log_error(const c8 *tag, const c8 *format,...) Outputs one log message with LogVerbosity::error verbosity. Overview Parameters tag The log tag. Used by the implementation to filter logs. format The formatting syntax used to format the log message.","title":"Luna::log_error"},{"location":"api/group___runtime_log_1gad29d52073dc0b3f7ec0267c3ba03f360/#lunalog_error","text":"LUNA_RUNTIME_API void log_error(const c8 *tag, const c8 *format,...) Outputs one log message with LogVerbosity::error verbosity.","title":"Luna::log_error"},{"location":"api/group___runtime_log_1gad29d52073dc0b3f7ec0267c3ba03f360/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_log_1gad29d52073dc0b3f7ec0267c3ba03f360/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_log_1gad29d52073dc0b3f7ec0267c3ba03f360/#tag","text":"The log tag. Used by the implementation to filter logs.","title":"tag"},{"location":"api/group___runtime_log_1gad29d52073dc0b3f7ec0267c3ba03f360/#format","text":"The formatting syntax used to format the log message.","title":"format"},{"location":"api/group___runtime_log_1gaf6e2aabe6a4e4f1a3146dc30146eacf4/","text":"Luna::register_log_handler LUNA_RUNTIME_API usize register_log_handler(const Function< log_callback_t > &handler) Registers one custom log handler that will be called when a new log message is spawned. Overview Parameters handler The handler to register. Return value Returns one handler identifier that can be used to register the handler.","title":"Luna::register_log_handler"},{"location":"api/group___runtime_log_1gaf6e2aabe6a4e4f1a3146dc30146eacf4/#lunaregister_log_handler","text":"LUNA_RUNTIME_API usize register_log_handler(const Function< log_callback_t > &handler) Registers one custom log handler that will be called when a new log message is spawned.","title":"Luna::register_log_handler"},{"location":"api/group___runtime_log_1gaf6e2aabe6a4e4f1a3146dc30146eacf4/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_log_1gaf6e2aabe6a4e4f1a3146dc30146eacf4/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_log_1gaf6e2aabe6a4e4f1a3146dc30146eacf4/#handler","text":"The handler to register.","title":"handler"},{"location":"api/group___runtime_log_1gaf6e2aabe6a4e4f1a3146dc30146eacf4/#return-value","text":"Returns one handler identifier that can be used to register the handler.","title":"Return value"},{"location":"api/group___runtime_log_1gafab1bbad31b455c6319d599aff292861/","text":"Luna::log_verbose LUNA_RUNTIME_API void log_verbose(const c8 *tag, const c8 *format,...) Outputs one log message with LogVerbosity::verbose verbosity. Overview Parameters tag The log tag. Used by the implementation to filter logs. format The formatting syntax used to format the log message.","title":"Luna::log_verbose"},{"location":"api/group___runtime_log_1gafab1bbad31b455c6319d599aff292861/#lunalog_verbose","text":"LUNA_RUNTIME_API void log_verbose(const c8 *tag, const c8 *format,...) Outputs one log message with LogVerbosity::verbose verbosity.","title":"Luna::log_verbose"},{"location":"api/group___runtime_log_1gafab1bbad31b455c6319d599aff292861/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_log_1gafab1bbad31b455c6319d599aff292861/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_log_1gafab1bbad31b455c6319d599aff292861/#tag","text":"The log tag. Used by the implementation to filter logs.","title":"tag"},{"location":"api/group___runtime_log_1gafab1bbad31b455c6319d599aff292861/#format","text":"The formatting syntax used to format the log message.","title":"format"},{"location":"api/group___runtime_memory_1ga49d8171ef4af8fbe6bbb6e4e6f82d69b/","text":"Luna::memsize LUNA_RUNTIME_API usize memsize(void *ptr, usize alignment=0) Gets the allocated size of one memory block. Overview Parameters ptr The pointer to the memory block. alignment Optional. The alignment requirement of the allocated memory block. Default is 0. Return value Returns the size of bytes of the memory block. Returns 0 if ptr is nullptr . The returned size is the size allocated for the memory block and is available for the user to use. The allocated size may be larger than the required size passed to memalloc or memrealloc to satisfy alignment and padding requirements. Valid Usage If ptr is not nullptr , ptr be allocated by a prior call to memalloc or memrealloc. If ptr is not nullptr , alignment be equal to alignment passed to memalloc or memrealloc which allocates ptr .","title":"Luna::memsize"},{"location":"api/group___runtime_memory_1ga49d8171ef4af8fbe6bbb6e4e6f82d69b/#lunamemsize","text":"LUNA_RUNTIME_API usize memsize(void *ptr, usize alignment=0) Gets the allocated size of one memory block.","title":"Luna::memsize"},{"location":"api/group___runtime_memory_1ga49d8171ef4af8fbe6bbb6e4e6f82d69b/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_1ga49d8171ef4af8fbe6bbb6e4e6f82d69b/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_1ga49d8171ef4af8fbe6bbb6e4e6f82d69b/#ptr","text":"The pointer to the memory block.","title":"ptr"},{"location":"api/group___runtime_memory_1ga49d8171ef4af8fbe6bbb6e4e6f82d69b/#alignment","text":"Optional. The alignment requirement of the allocated memory block. Default is 0.","title":"alignment"},{"location":"api/group___runtime_memory_1ga49d8171ef4af8fbe6bbb6e4e6f82d69b/#return-value","text":"Returns the size of bytes of the memory block. Returns 0 if ptr is nullptr . The returned size is the size allocated for the memory block and is available for the user to use. The allocated size may be larger than the required size passed to memalloc or memrealloc to satisfy alignment and padding requirements.","title":"Return value"},{"location":"api/group___runtime_memory_1ga49d8171ef4af8fbe6bbb6e4e6f82d69b/#valid-usage","text":"If ptr is not nullptr , ptr be allocated by a prior call to memalloc or memrealloc. If ptr is not nullptr , alignment be equal to alignment passed to memalloc or memrealloc which allocates ptr .","title":"Valid Usage"},{"location":"api/group___runtime_memory_1ga4bc8f37f2fe8c9100a8af16de794e3de/","text":"Luna::memfree LUNA_RUNTIME_API void memfree(void *ptr, usize alignment=0) Frees heap memory. Overview Parameters ptr The pointer returned by memalloc or memrealloc. If this is nullptr , this function does nothing. alignment Optional. The alignment requirement specified when allocating the memory block. Default is 0. Valid Usage If ptr is not nullptr , alignment be equal to alignment passed to memalloc or memrealloc which allocates ptr .","title":"Luna::memfree"},{"location":"api/group___runtime_memory_1ga4bc8f37f2fe8c9100a8af16de794e3de/#lunamemfree","text":"LUNA_RUNTIME_API void memfree(void *ptr, usize alignment=0) Frees heap memory.","title":"Luna::memfree"},{"location":"api/group___runtime_memory_1ga4bc8f37f2fe8c9100a8af16de794e3de/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_1ga4bc8f37f2fe8c9100a8af16de794e3de/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_1ga4bc8f37f2fe8c9100a8af16de794e3de/#ptr","text":"The pointer returned by memalloc or memrealloc. If this is nullptr , this function does nothing.","title":"ptr"},{"location":"api/group___runtime_memory_1ga4bc8f37f2fe8c9100a8af16de794e3de/#alignment","text":"Optional. The alignment requirement specified when allocating the memory block. Default is 0.","title":"alignment"},{"location":"api/group___runtime_memory_1ga4bc8f37f2fe8c9100a8af16de794e3de/#valid-usage","text":"If ptr is not nullptr , alignment be equal to alignment passed to memalloc or memrealloc which allocates ptr .","title":"Valid Usage"},{"location":"api/group___runtime_memory_1ga60e9e4772655c0a60fbd5e311010b6d5/","text":"Luna::memrealloc LUNA_RUNTIME_API void * memrealloc(void *ptr, usize size, usize alignment=0) Reallocates heap memory. Overview Parameters ptr The pointer to the former allocated memory block. If this is nullptr , this method behaves the same as memalloc. size The size, in bytes, of the new memory to allocate. If this is 0 and ptr is not nullptr , this function behaves the same as memfree. alignment Optional. The alignment requirement of the allocated memory block. Default is 0. memrealloc cannot change the alignment requirement of the memory block. In other words, if ptr is not nullptr , the alignment requirements of the old and new memory block must be the same. Return value Returns one pointer to the reallocated memory block. Returns nullptr if the allocation is failed. In such case, the old memory block (if have) is not changed. This function allocates a new memory block with the specified size and alignment requirement, copies the data from the old memory block to the new one, and frees the old memory block. Valid Usage If ptr is not nullptr , ptr be allocated by a prior call to memalloc or memrealloc. If ptr is not nullptr , alignment be equal to alignment passed to memalloc or memrealloc which allocates ptr .","title":"Luna::memrealloc"},{"location":"api/group___runtime_memory_1ga60e9e4772655c0a60fbd5e311010b6d5/#lunamemrealloc","text":"LUNA_RUNTIME_API void * memrealloc(void *ptr, usize size, usize alignment=0) Reallocates heap memory.","title":"Luna::memrealloc"},{"location":"api/group___runtime_memory_1ga60e9e4772655c0a60fbd5e311010b6d5/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_1ga60e9e4772655c0a60fbd5e311010b6d5/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_1ga60e9e4772655c0a60fbd5e311010b6d5/#ptr","text":"The pointer to the former allocated memory block. If this is nullptr , this method behaves the same as memalloc.","title":"ptr"},{"location":"api/group___runtime_memory_1ga60e9e4772655c0a60fbd5e311010b6d5/#size","text":"The size, in bytes, of the new memory to allocate. If this is 0 and ptr is not nullptr , this function behaves the same as memfree.","title":"size"},{"location":"api/group___runtime_memory_1ga60e9e4772655c0a60fbd5e311010b6d5/#alignment","text":"Optional. The alignment requirement of the allocated memory block. Default is 0. memrealloc cannot change the alignment requirement of the memory block. In other words, if ptr is not nullptr , the alignment requirements of the old and new memory block must be the same.","title":"alignment"},{"location":"api/group___runtime_memory_1ga60e9e4772655c0a60fbd5e311010b6d5/#return-value","text":"Returns one pointer to the reallocated memory block. Returns nullptr if the allocation is failed. In such case, the old memory block (if have) is not changed. This function allocates a new memory block with the specified size and alignment requirement, copies the data from the old memory block to the new one, and frees the old memory block.","title":"Return value"},{"location":"api/group___runtime_memory_1ga60e9e4772655c0a60fbd5e311010b6d5/#valid-usage","text":"If ptr is not nullptr , ptr be allocated by a prior call to memalloc or memrealloc. If ptr is not nullptr , alignment be equal to alignment passed to memalloc or memrealloc which allocates ptr .","title":"Valid Usage"},{"location":"api/group___runtime_memory_1ga76969916b035a432b54deb6920d3259c/","text":"Luna::memalloc LUNA_RUNTIME_API void * memalloc(usize size, usize alignment=0) Allocates heap memory. Overview Parameters size The size, in bytes, of the memory block to allocate. If this is 0 , no memory will be allocated. alignment Optional. The alignment requirement, in bytes, of the memory block to allocate. Default is 0 . If this is 0 (default), then the memory is allocated with no additional alignment requirement. In such case, the memory address is aligned to 8 bytes in 32-bit platform, and 16 bytes in 64-bit platform. Return value Returns one pointer to the allocated memory block. Returns nullptr if memory allocation failed or if size is 0 . Valid Usage If alignment is not 0 , alignment be powers of 2 (like 32, 64, 128, 256, etc).","title":"Luna::memalloc"},{"location":"api/group___runtime_memory_1ga76969916b035a432b54deb6920d3259c/#lunamemalloc","text":"LUNA_RUNTIME_API void * memalloc(usize size, usize alignment=0) Allocates heap memory.","title":"Luna::memalloc"},{"location":"api/group___runtime_memory_1ga76969916b035a432b54deb6920d3259c/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_1ga76969916b035a432b54deb6920d3259c/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_1ga76969916b035a432b54deb6920d3259c/#size","text":"The size, in bytes, of the memory block to allocate. If this is 0 , no memory will be allocated.","title":"size"},{"location":"api/group___runtime_memory_1ga76969916b035a432b54deb6920d3259c/#alignment","text":"Optional. The alignment requirement, in bytes, of the memory block to allocate. Default is 0 . If this is 0 (default), then the memory is allocated with no additional alignment requirement. In such case, the memory address is aligned to 8 bytes in 32-bit platform, and 16 bytes in 64-bit platform.","title":"alignment"},{"location":"api/group___runtime_memory_1ga76969916b035a432b54deb6920d3259c/#return-value","text":"Returns one pointer to the allocated memory block. Returns nullptr if memory allocation failed or if size is 0 .","title":"Return value"},{"location":"api/group___runtime_memory_1ga76969916b035a432b54deb6920d3259c/#valid-usage","text":"If alignment is not 0 , alignment be powers of 2 (like 32, 64, 128, 256, etc).","title":"Valid Usage"},{"location":"api/group___runtime_memory_1ga81e30b31f5e8a02f54478a634015e720/","text":"Luna::memnew template <typename _Ty, typename...> _Ty * memnew(_Args &&... args) Allocates heap memory for one object and constructs the object. Overview Return value Returns one pointer to the allocated object. Returns nullptr if memory allocation failed.","title":"Luna::memnew"},{"location":"api/group___runtime_memory_1ga81e30b31f5e8a02f54478a634015e720/#lunamemnew","text":"template <typename _Ty, typename...> _Ty * memnew(_Args &&... args) Allocates heap memory for one object and constructs the object.","title":"Luna::memnew"},{"location":"api/group___runtime_memory_1ga81e30b31f5e8a02f54478a634015e720/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_1ga81e30b31f5e8a02f54478a634015e720/#return-value","text":"Returns one pointer to the allocated object. Returns nullptr if memory allocation failed.","title":"Return value"},{"location":"api/group___runtime_memory_1gaf95818ee40a0536baee3f539b019df5d/","text":"Luna::memdelete template <typename _Ty> void memdelete(_Ty *o) Destructs one object and frees its memory. Overview Parameters o The pointer to the object to be deleted. Valid Usage o must point to a object created by memnew .","title":"Luna::memdelete"},{"location":"api/group___runtime_memory_1gaf95818ee40a0536baee3f539b019df5d/#lunamemdelete","text":"template <typename _Ty> void memdelete(_Ty *o) Destructs one object and frees its memory.","title":"Luna::memdelete"},{"location":"api/group___runtime_memory_1gaf95818ee40a0536baee3f539b019df5d/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_1gaf95818ee40a0536baee3f539b019df5d/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_1gaf95818ee40a0536baee3f539b019df5d/#o","text":"The pointer to the object to be deleted.","title":"o"},{"location":"api/group___runtime_memory_1gaf95818ee40a0536baee3f539b019df5d/#valid-usage","text":"o must point to a object created by memnew .","title":"Valid Usage"},{"location":"api/group___runtime_memory_utils_1ga01d4057e7a6026e025cbc30d10d60f89/","text":"Luna::destruct template <typename _Iter> void destruct(_Iter dst) Calls the destructor of the object. Overview Parameters dst An iterator pointing to the object to be destructed.","title":"Luna::destruct"},{"location":"api/group___runtime_memory_utils_1ga01d4057e7a6026e025cbc30d10d60f89/#lunadestruct","text":"template <typename _Iter> void destruct(_Iter dst) Calls the destructor of the object.","title":"Luna::destruct"},{"location":"api/group___runtime_memory_utils_1ga01d4057e7a6026e025cbc30d10d60f89/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1ga01d4057e7a6026e025cbc30d10d60f89/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1ga01d4057e7a6026e025cbc30d10d60f89/#dst","text":"An iterator pointing to the object to be destructed.","title":"dst"},{"location":"api/group___runtime_memory_utils_1ga0fc5695a322734022f1a887933f4f8d6/","text":"Luna::pixel_offset void * pixel_offset(void *base, usize x, usize y, usize z, usize bytes_per_pixel, usize row_pitch, usize slice_pitch) Returns a pointer that offsets the specified pixels in the bitmap. Overview Parameters base The pointer to the first pixel in the bitmap. x The x offset in pixels. y The y offset in pixels. z The z offset in pixels. bytes_per_pixel The number of bytes per pixel. row_pitch The pitch to advance for one row in bytes. slice_pitch The pitch to advance for one slice in bytes. Return value Returns the offseted pointer.","title":"Luna::pixel_offset"},{"location":"api/group___runtime_memory_utils_1ga0fc5695a322734022f1a887933f4f8d6/#lunapixel_offset","text":"void * pixel_offset(void *base, usize x, usize y, usize z, usize bytes_per_pixel, usize row_pitch, usize slice_pitch) Returns a pointer that offsets the specified pixels in the bitmap.","title":"Luna::pixel_offset"},{"location":"api/group___runtime_memory_utils_1ga0fc5695a322734022f1a887933f4f8d6/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1ga0fc5695a322734022f1a887933f4f8d6/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1ga0fc5695a322734022f1a887933f4f8d6/#base","text":"The pointer to the first pixel in the bitmap.","title":"base"},{"location":"api/group___runtime_memory_utils_1ga0fc5695a322734022f1a887933f4f8d6/#x","text":"The x offset in pixels.","title":"x"},{"location":"api/group___runtime_memory_utils_1ga0fc5695a322734022f1a887933f4f8d6/#y","text":"The y offset in pixels.","title":"y"},{"location":"api/group___runtime_memory_utils_1ga0fc5695a322734022f1a887933f4f8d6/#z","text":"The z offset in pixels.","title":"z"},{"location":"api/group___runtime_memory_utils_1ga0fc5695a322734022f1a887933f4f8d6/#bytes_per_pixel","text":"The number of bytes per pixel.","title":"bytes_per_pixel"},{"location":"api/group___runtime_memory_utils_1ga0fc5695a322734022f1a887933f4f8d6/#row_pitch","text":"The pitch to advance for one row in bytes.","title":"row_pitch"},{"location":"api/group___runtime_memory_utils_1ga0fc5695a322734022f1a887933f4f8d6/#slice_pitch","text":"The pitch to advance for one slice in bytes.","title":"slice_pitch"},{"location":"api/group___runtime_memory_utils_1ga0fc5695a322734022f1a887933f4f8d6/#return-value","text":"Returns the offseted pointer.","title":"Return value"},{"location":"api/group___runtime_memory_utils_1ga179f7247b699a3cd0a12ded569cb22db/","text":"Luna::operator\"\"_gb constexpr unsigned long long operator\"\"_gb(unsigned long long v) A integer literal suffix that multiples one number with 1024 * 1024 * 1024. Use it like 3_gb .","title":"Luna::operator\"\"_gb"},{"location":"api/group___runtime_memory_utils_1ga179f7247b699a3cd0a12ded569cb22db/#lunaoperator_gb","text":"constexpr unsigned long long operator\"\"_gb(unsigned long long v) A integer literal suffix that multiples one number with 1024 * 1024 * 1024. Use it like 3_gb .","title":"Luna::operator\"\"_gb"},{"location":"api/group___runtime_memory_utils_1ga20408cbb7d15561150338b30cdad1aa7/","text":"Luna::operator\"\"_kb constexpr unsigned long long operator\"\"_kb(unsigned long long v) A integer literal suffix that multiples one number with 1024. Use it like 3_kb .","title":"Luna::operator\"\"_kb"},{"location":"api/group___runtime_memory_utils_1ga20408cbb7d15561150338b30cdad1aa7/#lunaoperator_kb","text":"constexpr unsigned long long operator\"\"_kb(unsigned long long v) A integer literal suffix that multiples one number with 1024. Use it like 3_kb .","title":"Luna::operator\"\"_kb"},{"location":"api/group___runtime_memory_utils_1ga2084d1865994d1530d4ed36a940cedf5/","text":"Luna::memcpy_bitmap3d void * memcpy_bitmap3d(void *dst, const void *src, usize copy_size_per_row, usize num_rows, usize num_slices, usize dst_row_pitch, usize src_row_pitch, usize dst_slice_pitch, usize src_slice_pitch) Copies the data for a 3D bitmap. Overview Parameters dst A pointer to the first pixel to be copied in destination bitmap. src A pointer to the first pixel to be copied in source bitmap. copy_size_per_row The size of the data to be copied for every row, in bytes. num_rows The number of rows to copy. num_slices The number of slices (layers) to copy. dst_row_pitch The pitch to advance for one row in destination bitmap in bytes. src_row_pitch The pitch to advance for one row in source bitmap in bytes. dst_slice_pitch The pitch to advance for one slice (layer) in destination bitmap in bytes. src_slice_pitch The pitch to advance for one slice (layer) in source bitmap in bytes. Return value Returns the dst pointer.","title":"Luna::memcpy_bitmap3d"},{"location":"api/group___runtime_memory_utils_1ga2084d1865994d1530d4ed36a940cedf5/#lunamemcpy_bitmap3d","text":"void * memcpy_bitmap3d(void *dst, const void *src, usize copy_size_per_row, usize num_rows, usize num_slices, usize dst_row_pitch, usize src_row_pitch, usize dst_slice_pitch, usize src_slice_pitch) Copies the data for a 3D bitmap.","title":"Luna::memcpy_bitmap3d"},{"location":"api/group___runtime_memory_utils_1ga2084d1865994d1530d4ed36a940cedf5/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1ga2084d1865994d1530d4ed36a940cedf5/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1ga2084d1865994d1530d4ed36a940cedf5/#dst","text":"A pointer to the first pixel to be copied in destination bitmap.","title":"dst"},{"location":"api/group___runtime_memory_utils_1ga2084d1865994d1530d4ed36a940cedf5/#src","text":"A pointer to the first pixel to be copied in source bitmap.","title":"src"},{"location":"api/group___runtime_memory_utils_1ga2084d1865994d1530d4ed36a940cedf5/#copy_size_per_row","text":"The size of the data to be copied for every row, in bytes.","title":"copy_size_per_row"},{"location":"api/group___runtime_memory_utils_1ga2084d1865994d1530d4ed36a940cedf5/#num_rows","text":"The number of rows to copy.","title":"num_rows"},{"location":"api/group___runtime_memory_utils_1ga2084d1865994d1530d4ed36a940cedf5/#num_slices","text":"The number of slices (layers) to copy.","title":"num_slices"},{"location":"api/group___runtime_memory_utils_1ga2084d1865994d1530d4ed36a940cedf5/#dst_row_pitch","text":"The pitch to advance for one row in destination bitmap in bytes.","title":"dst_row_pitch"},{"location":"api/group___runtime_memory_utils_1ga2084d1865994d1530d4ed36a940cedf5/#src_row_pitch","text":"The pitch to advance for one row in source bitmap in bytes.","title":"src_row_pitch"},{"location":"api/group___runtime_memory_utils_1ga2084d1865994d1530d4ed36a940cedf5/#dst_slice_pitch","text":"The pitch to advance for one slice (layer) in destination bitmap in bytes.","title":"dst_slice_pitch"},{"location":"api/group___runtime_memory_utils_1ga2084d1865994d1530d4ed36a940cedf5/#src_slice_pitch","text":"The pitch to advance for one slice (layer) in source bitmap in bytes.","title":"src_slice_pitch"},{"location":"api/group___runtime_memory_utils_1ga2084d1865994d1530d4ed36a940cedf5/#return-value","text":"Returns the dst pointer.","title":"Return value"},{"location":"api/group___runtime_memory_utils_1ga21ab8d9fe0fe13c23177a91111cccd65/","text":"Luna::memzero void * memzero(void *dst, usize byte_count) Clears the specified memory region to 0. Overview Parameters dst The start address of memory region to clear. byte_count The size, in bytes, of the memory region to clear. Return value Returns the dst pointer.","title":"Luna::memzero"},{"location":"api/group___runtime_memory_utils_1ga21ab8d9fe0fe13c23177a91111cccd65/#lunamemzero","text":"void * memzero(void *dst, usize byte_count) Clears the specified memory region to 0.","title":"Luna::memzero"},{"location":"api/group___runtime_memory_utils_1ga21ab8d9fe0fe13c23177a91111cccd65/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1ga21ab8d9fe0fe13c23177a91111cccd65/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1ga21ab8d9fe0fe13c23177a91111cccd65/#dst","text":"The start address of memory region to clear.","title":"dst"},{"location":"api/group___runtime_memory_utils_1ga21ab8d9fe0fe13c23177a91111cccd65/#byte_count","text":"The size, in bytes, of the memory region to clear.","title":"byte_count"},{"location":"api/group___runtime_memory_utils_1ga21ab8d9fe0fe13c23177a91111cccd65/#return-value","text":"Returns the dst pointer.","title":"Return value"},{"location":"api/group___runtime_memory_utils_1ga26be5f1c4c2d9fc1735e3b6260426c42/","text":"Luna::calculate_union_memory_layout void calculate_union_memory_layout(Span< MemoryLayoutMember > members, usize &out_size, usize &out_alignment) Calculates the size, alignment and memory layout for one union type. Overview The calculated size, alignment and memory layout is compatible with C standard union layout. Parameters members One span that provides members of the union. out_size The calculated size of the union. out_alignment The calculated alignment of the union.","title":"Luna::calculate_union_memory_layout"},{"location":"api/group___runtime_memory_utils_1ga26be5f1c4c2d9fc1735e3b6260426c42/#lunacalculate_union_memory_layout","text":"void calculate_union_memory_layout(Span< MemoryLayoutMember > members, usize &out_size, usize &out_alignment) Calculates the size, alignment and memory layout for one union type.","title":"Luna::calculate_union_memory_layout"},{"location":"api/group___runtime_memory_utils_1ga26be5f1c4c2d9fc1735e3b6260426c42/#overview","text":"The calculated size, alignment and memory layout is compatible with C standard union layout.","title":"Overview"},{"location":"api/group___runtime_memory_utils_1ga26be5f1c4c2d9fc1735e3b6260426c42/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1ga26be5f1c4c2d9fc1735e3b6260426c42/#members","text":"One span that provides members of the union.","title":"members"},{"location":"api/group___runtime_memory_utils_1ga26be5f1c4c2d9fc1735e3b6260426c42/#out_size","text":"The calculated size of the union.","title":"out_size"},{"location":"api/group___runtime_memory_utils_1ga26be5f1c4c2d9fc1735e3b6260426c42/#out_alignment","text":"The calculated alignment of the union.","title":"out_alignment"},{"location":"api/group___runtime_memory_utils_1ga2922440bc8a0efbe2c479e0b9d710a91/","text":"Luna::move_assign_range template <typename _Iter1, typename _Iter2> auto move_assign_range(_Iter1 first, _Iter1 last, _Iter2 d_first) -> enable_if_t<!Impl::move_assign_range_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Performs move assignment operation on every object in the destination range using the corresponding object in the source range. Overview Parameters first An iterator to the first object to be moved from. last An iterator to one-past-last object to be moved from. d_first An iterator to the first object to be assigned. Return value Returns an iterator to the one-past-last object to be assigned.","title":"Luna::move_assign_range"},{"location":"api/group___runtime_memory_utils_1ga2922440bc8a0efbe2c479e0b9d710a91/#lunamove_assign_range","text":"template <typename _Iter1, typename _Iter2> auto move_assign_range(_Iter1 first, _Iter1 last, _Iter2 d_first) -> enable_if_t<!Impl::move_assign_range_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Performs move assignment operation on every object in the destination range using the corresponding object in the source range.","title":"Luna::move_assign_range"},{"location":"api/group___runtime_memory_utils_1ga2922440bc8a0efbe2c479e0b9d710a91/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1ga2922440bc8a0efbe2c479e0b9d710a91/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1ga2922440bc8a0efbe2c479e0b9d710a91/#first","text":"An iterator to the first object to be moved from.","title":"first"},{"location":"api/group___runtime_memory_utils_1ga2922440bc8a0efbe2c479e0b9d710a91/#last","text":"An iterator to one-past-last object to be moved from.","title":"last"},{"location":"api/group___runtime_memory_utils_1ga2922440bc8a0efbe2c479e0b9d710a91/#d_first","text":"An iterator to the first object to be assigned.","title":"d_first"},{"location":"api/group___runtime_memory_utils_1ga2922440bc8a0efbe2c479e0b9d710a91/#return-value","text":"Returns an iterator to the one-past-last object to be assigned.","title":"Return value"},{"location":"api/group___runtime_memory_utils_1ga34b6950d39deaf037807db6f0804efb8/","text":"Luna::copy_construct_range_n template <typename _Iter1, typename _Iter2> auto copy_construct_range_n(_Iter1 first, usize count, _Iter2 d_first) -> enable_if_t<!Impl::copy_construct_range_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Copy-constructs a range of objects. The range is provided by first object and object count. Overview Parameters first An iterator to the first object to be copied from. count The number of objects to copy-construct. d_first An iterator to the first object to be constructed. Return value Returns an iterator to the one-past-last object to be constructed. This function uses each object in the range [ first , first + count ) to performs copy initialization on corresponding objects beginning with d_first . Valid Usage The source range and the destination range must not overlap.","title":"Luna::copy_construct_range_n"},{"location":"api/group___runtime_memory_utils_1ga34b6950d39deaf037807db6f0804efb8/#lunacopy_construct_range_n","text":"template <typename _Iter1, typename _Iter2> auto copy_construct_range_n(_Iter1 first, usize count, _Iter2 d_first) -> enable_if_t<!Impl::copy_construct_range_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Copy-constructs a range of objects. The range is provided by first object and object count.","title":"Luna::copy_construct_range_n"},{"location":"api/group___runtime_memory_utils_1ga34b6950d39deaf037807db6f0804efb8/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1ga34b6950d39deaf037807db6f0804efb8/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1ga34b6950d39deaf037807db6f0804efb8/#first","text":"An iterator to the first object to be copied from.","title":"first"},{"location":"api/group___runtime_memory_utils_1ga34b6950d39deaf037807db6f0804efb8/#count","text":"The number of objects to copy-construct.","title":"count"},{"location":"api/group___runtime_memory_utils_1ga34b6950d39deaf037807db6f0804efb8/#d_first","text":"An iterator to the first object to be constructed.","title":"d_first"},{"location":"api/group___runtime_memory_utils_1ga34b6950d39deaf037807db6f0804efb8/#return-value","text":"Returns an iterator to the one-past-last object to be constructed. This function uses each object in the range [ first , first + count ) to performs copy initialization on corresponding objects beginning with d_first .","title":"Return value"},{"location":"api/group___runtime_memory_utils_1ga34b6950d39deaf037807db6f0804efb8/#valid-usage","text":"The source range and the destination range must not overlap.","title":"Valid Usage"},{"location":"api/group___runtime_memory_utils_1ga3e53bc2228e4cc4428d755c146893c4c/","text":"Luna::copy_relocate template <typename _Iter1, typename _Iter2> auto copy_relocate(_Iter1 dst, _Iter2 src) -> enable_if_t< Impl::copy_relocate_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter1 > Relocates one object. Overview After this call, the object in the destination memory behaves the same as the object formerly in the source memory, except that the place(memory address) for the object is changed. Parameters dst An iterator to relocation destination. src An iterator to the object to be relocated. Return value Returns dst .","title":"Luna::copy_relocate"},{"location":"api/group___runtime_memory_utils_1ga3e53bc2228e4cc4428d755c146893c4c/#lunacopy_relocate","text":"template <typename _Iter1, typename _Iter2> auto copy_relocate(_Iter1 dst, _Iter2 src) -> enable_if_t< Impl::copy_relocate_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter1 > Relocates one object.","title":"Luna::copy_relocate"},{"location":"api/group___runtime_memory_utils_1ga3e53bc2228e4cc4428d755c146893c4c/#overview","text":"After this call, the object in the destination memory behaves the same as the object formerly in the source memory, except that the place(memory address) for the object is changed.","title":"Overview"},{"location":"api/group___runtime_memory_utils_1ga3e53bc2228e4cc4428d755c146893c4c/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1ga3e53bc2228e4cc4428d755c146893c4c/#dst","text":"An iterator to relocation destination.","title":"dst"},{"location":"api/group___runtime_memory_utils_1ga3e53bc2228e4cc4428d755c146893c4c/#src","text":"An iterator to the object to be relocated.","title":"src"},{"location":"api/group___runtime_memory_utils_1ga3e53bc2228e4cc4428d755c146893c4c/#return-value","text":"Returns dst .","title":"Return value"},{"location":"api/group___runtime_memory_utils_1ga3e9313d372b263d059cb71cb3d65a8a9/","text":"Luna::fill_assign_range template <typename _Iter1, typename _Ty> _Iter1 fill_assign_range(_Iter1 first, _Iter1 last, const _Ty &value) Performs copy assignment on each of the object in the range by taking a copy of the provided object. Overview Parameters first An iterator to the first object to be assigned. last An iterator to one-past-last object to be assigned. value The object to copy from for each object to be assigned. Return value Returns an iterator to one-past-last object to be assigned.","title":"Luna::fill_assign_range"},{"location":"api/group___runtime_memory_utils_1ga3e9313d372b263d059cb71cb3d65a8a9/#lunafill_assign_range","text":"template <typename _Iter1, typename _Ty> _Iter1 fill_assign_range(_Iter1 first, _Iter1 last, const _Ty &value) Performs copy assignment on each of the object in the range by taking a copy of the provided object.","title":"Luna::fill_assign_range"},{"location":"api/group___runtime_memory_utils_1ga3e9313d372b263d059cb71cb3d65a8a9/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1ga3e9313d372b263d059cb71cb3d65a8a9/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1ga3e9313d372b263d059cb71cb3d65a8a9/#first","text":"An iterator to the first object to be assigned.","title":"first"},{"location":"api/group___runtime_memory_utils_1ga3e9313d372b263d059cb71cb3d65a8a9/#last","text":"An iterator to one-past-last object to be assigned.","title":"last"},{"location":"api/group___runtime_memory_utils_1ga3e9313d372b263d059cb71cb3d65a8a9/#value","text":"The object to copy from for each object to be assigned.","title":"value"},{"location":"api/group___runtime_memory_utils_1ga3e9313d372b263d059cb71cb3d65a8a9/#return-value","text":"Returns an iterator to one-past-last object to be assigned.","title":"Return value"},{"location":"api/group___runtime_memory_utils_1ga4fcba1cb4b0fc69fcefdbe51ae92d5d4/","text":"Luna::copy_construct template <typename _Iter1, typename _Iter2> void copy_construct(_Iter1 dst, _Iter2 src) Calls the copy constructor for the object. Overview Parameters dst An iterator pointing to the object to be constructed. src An iterator pointing to the object to copy from.","title":"Luna::copy_construct"},{"location":"api/group___runtime_memory_utils_1ga4fcba1cb4b0fc69fcefdbe51ae92d5d4/#lunacopy_construct","text":"template <typename _Iter1, typename _Iter2> void copy_construct(_Iter1 dst, _Iter2 src) Calls the copy constructor for the object.","title":"Luna::copy_construct"},{"location":"api/group___runtime_memory_utils_1ga4fcba1cb4b0fc69fcefdbe51ae92d5d4/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1ga4fcba1cb4b0fc69fcefdbe51ae92d5d4/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1ga4fcba1cb4b0fc69fcefdbe51ae92d5d4/#dst","text":"An iterator pointing to the object to be constructed.","title":"dst"},{"location":"api/group___runtime_memory_utils_1ga4fcba1cb4b0fc69fcefdbe51ae92d5d4/#src","text":"An iterator pointing to the object to copy from.","title":"src"},{"location":"api/group___runtime_memory_utils_1ga53e63f6749997e37e7f8da11e68a4ce1/","text":"Luna::move_construct template <typename _Iter1, typename _Iter2> void move_construct(_Iter1 dst, _Iter2 src) Calls the move constructor for the object. Overview Parameters dst An iterator pointing to the object to be constructed. src An iterator pointing to the object to move from.","title":"Luna::move_construct"},{"location":"api/group___runtime_memory_utils_1ga53e63f6749997e37e7f8da11e68a4ce1/#lunamove_construct","text":"template <typename _Iter1, typename _Iter2> void move_construct(_Iter1 dst, _Iter2 src) Calls the move constructor for the object.","title":"Luna::move_construct"},{"location":"api/group___runtime_memory_utils_1ga53e63f6749997e37e7f8da11e68a4ce1/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1ga53e63f6749997e37e7f8da11e68a4ce1/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1ga53e63f6749997e37e7f8da11e68a4ce1/#dst","text":"An iterator pointing to the object to be constructed.","title":"dst"},{"location":"api/group___runtime_memory_utils_1ga53e63f6749997e37e7f8da11e68a4ce1/#src","text":"An iterator pointing to the object to move from.","title":"src"},{"location":"api/group___runtime_memory_utils_1ga545f4f89af4c04db356b321ce0711771/","text":"Luna::move_assign_range_backward template <typename _Iter1, typename _Iter2> auto move_assign_range_backward(_Iter1 first, _Iter1 last, _Iter2 d_last) -> enable_if_t<!Impl::move_assign_range_backward_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Same as move_assign_range, but performs the move assign from back to front. Overview Parameters first An iterator to the first object to be moved from. last An iterator to one-past-last object to be moved from. d_last An iterator to the one-past-back object in the range to be assigned. Return value Returns an iterator to the front object in the range to be assigned. The last element in destination range must not in the source range.","title":"Luna::move_assign_range_backward"},{"location":"api/group___runtime_memory_utils_1ga545f4f89af4c04db356b321ce0711771/#lunamove_assign_range_backward","text":"template <typename _Iter1, typename _Iter2> auto move_assign_range_backward(_Iter1 first, _Iter1 last, _Iter2 d_last) -> enable_if_t<!Impl::move_assign_range_backward_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Same as move_assign_range, but performs the move assign from back to front.","title":"Luna::move_assign_range_backward"},{"location":"api/group___runtime_memory_utils_1ga545f4f89af4c04db356b321ce0711771/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1ga545f4f89af4c04db356b321ce0711771/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1ga545f4f89af4c04db356b321ce0711771/#first","text":"An iterator to the first object to be moved from.","title":"first"},{"location":"api/group___runtime_memory_utils_1ga545f4f89af4c04db356b321ce0711771/#last","text":"An iterator to one-past-last object to be moved from.","title":"last"},{"location":"api/group___runtime_memory_utils_1ga545f4f89af4c04db356b321ce0711771/#d_last","text":"An iterator to the one-past-back object in the range to be assigned.","title":"d_last"},{"location":"api/group___runtime_memory_utils_1ga545f4f89af4c04db356b321ce0711771/#return-value","text":"Returns an iterator to the front object in the range to be assigned. The last element in destination range must not in the source range.","title":"Return value"},{"location":"api/group___runtime_memory_utils_1ga63af54bbd0fa7737dc2d6b7a6d16e7fa/","text":"Luna::move_relocate_range template <typename _Iter1, typename _Iter2> auto move_relocate_range(_Iter1 first, _Iter1 last, _Iter2 d_first) -> enable_if_t< Impl::move_relocate_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Relocates objects in the source range to a new range. Overview This function behaves the same as copy_relocate_range, except that it allows the destination range overlaps with the source range, proved that the first object in the destination range does not in the source range. memmove is used instead of memcpy if the whole range can be relocated in one call. Parameters first An iterator to the first object to be relocated from. last An iterator to one-past-last object to be relocated from. d_first An iterator to the first object to be relocated to. Return value Returns an iterator to the one-past-last object to be relocated to.","title":"Luna::move_relocate_range"},{"location":"api/group___runtime_memory_utils_1ga63af54bbd0fa7737dc2d6b7a6d16e7fa/#lunamove_relocate_range","text":"template <typename _Iter1, typename _Iter2> auto move_relocate_range(_Iter1 first, _Iter1 last, _Iter2 d_first) -> enable_if_t< Impl::move_relocate_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Relocates objects in the source range to a new range.","title":"Luna::move_relocate_range"},{"location":"api/group___runtime_memory_utils_1ga63af54bbd0fa7737dc2d6b7a6d16e7fa/#overview","text":"This function behaves the same as copy_relocate_range, except that it allows the destination range overlaps with the source range, proved that the first object in the destination range does not in the source range. memmove is used instead of memcpy if the whole range can be relocated in one call.","title":"Overview"},{"location":"api/group___runtime_memory_utils_1ga63af54bbd0fa7737dc2d6b7a6d16e7fa/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1ga63af54bbd0fa7737dc2d6b7a6d16e7fa/#first","text":"An iterator to the first object to be relocated from.","title":"first"},{"location":"api/group___runtime_memory_utils_1ga63af54bbd0fa7737dc2d6b7a6d16e7fa/#last","text":"An iterator to one-past-last object to be relocated from.","title":"last"},{"location":"api/group___runtime_memory_utils_1ga63af54bbd0fa7737dc2d6b7a6d16e7fa/#d_first","text":"An iterator to the first object to be relocated to.","title":"d_first"},{"location":"api/group___runtime_memory_utils_1ga63af54bbd0fa7737dc2d6b7a6d16e7fa/#return-value","text":"Returns an iterator to the one-past-last object to be relocated to.","title":"Return value"},{"location":"api/group___runtime_memory_utils_1ga64eceb1029aa97297c1eac27df9da0ef/","text":"Luna::destruct_range template <typename _Iter> auto destruct_range(_Iter first, _Iter last) -> enable_if_t< Impl::destruct_range_is_value_type_trivial< _Iter >::value, void > Destructs every object in the range. Overview Parameters first An iterator to the first object to be destructed. last An iterator to one-past-last object to be destructed.","title":"Luna::destruct_range"},{"location":"api/group___runtime_memory_utils_1ga64eceb1029aa97297c1eac27df9da0ef/#lunadestruct_range","text":"template <typename _Iter> auto destruct_range(_Iter first, _Iter last) -> enable_if_t< Impl::destruct_range_is_value_type_trivial< _Iter >::value, void > Destructs every object in the range.","title":"Luna::destruct_range"},{"location":"api/group___runtime_memory_utils_1ga64eceb1029aa97297c1eac27df9da0ef/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1ga64eceb1029aa97297c1eac27df9da0ef/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1ga64eceb1029aa97297c1eac27df9da0ef/#first","text":"An iterator to the first object to be destructed.","title":"first"},{"location":"api/group___runtime_memory_utils_1ga64eceb1029aa97297c1eac27df9da0ef/#last","text":"An iterator to one-past-last object to be destructed.","title":"last"},{"location":"api/group___runtime_memory_utils_1ga78167f1e50bc8e09715866d8c36140f8/","text":"Luna::memcpy_bitmap void * memcpy_bitmap(void *dst, const void *src, usize copy_size_per_row, usize num_rows, usize dst_row_pitch, usize src_row_pitch) Copies the data for a 2D bitmap. Overview Parameters dst A pointer to the first pixel to be copied in destination bitmap. src A pointer to the first pixel to be copied in source bitmap. copy_size_per_row The size of the data to be copied for every row, in bytes. num_rows The number of rows to copy. dst_row_pitch The pitch to advance for one row in destination bitmap in bytes. src_row_pitch The pitch to advance for one row in source bitmap in bytes. Return value Returns the dst pointer.","title":"Luna::memcpy_bitmap"},{"location":"api/group___runtime_memory_utils_1ga78167f1e50bc8e09715866d8c36140f8/#lunamemcpy_bitmap","text":"void * memcpy_bitmap(void *dst, const void *src, usize copy_size_per_row, usize num_rows, usize dst_row_pitch, usize src_row_pitch) Copies the data for a 2D bitmap.","title":"Luna::memcpy_bitmap"},{"location":"api/group___runtime_memory_utils_1ga78167f1e50bc8e09715866d8c36140f8/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1ga78167f1e50bc8e09715866d8c36140f8/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1ga78167f1e50bc8e09715866d8c36140f8/#dst","text":"A pointer to the first pixel to be copied in destination bitmap.","title":"dst"},{"location":"api/group___runtime_memory_utils_1ga78167f1e50bc8e09715866d8c36140f8/#src","text":"A pointer to the first pixel to be copied in source bitmap.","title":"src"},{"location":"api/group___runtime_memory_utils_1ga78167f1e50bc8e09715866d8c36140f8/#copy_size_per_row","text":"The size of the data to be copied for every row, in bytes.","title":"copy_size_per_row"},{"location":"api/group___runtime_memory_utils_1ga78167f1e50bc8e09715866d8c36140f8/#num_rows","text":"The number of rows to copy.","title":"num_rows"},{"location":"api/group___runtime_memory_utils_1ga78167f1e50bc8e09715866d8c36140f8/#dst_row_pitch","text":"The pitch to advance for one row in destination bitmap in bytes.","title":"dst_row_pitch"},{"location":"api/group___runtime_memory_utils_1ga78167f1e50bc8e09715866d8c36140f8/#src_row_pitch","text":"The pitch to advance for one row in source bitmap in bytes.","title":"src_row_pitch"},{"location":"api/group___runtime_memory_utils_1ga78167f1e50bc8e09715866d8c36140f8/#return-value","text":"Returns the dst pointer.","title":"Return value"},{"location":"api/group___runtime_memory_utils_1ga79d1c70e7f2da5dd53b7b58570886bd4/","text":"Luna::move_relocate_range_backward template <typename _Iter1, typename _Iter2> auto move_relocate_range_backward(_Iter1 first, _Iter1 last, _Iter2 d_last) -> enable_if_t< Impl::move_relocate_backward_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Relocates objects in the source range to a new range. Overview This function behaves the same as move_relocate_range, except that it relocates object from last to first, so the last object in the destination range should not in the source range. memmove is used instead of memcpy if the whole range can be relocated in one call. Parameters first An iterator to the first object to be relocated from. last An iterator to one-past-last object to be relocated from. d_last An iterator to the one-past-last object to be relocated to. Return value Returns an iterator to the front object to be relocated to in the destination range.","title":"Luna::move_relocate_range_backward"},{"location":"api/group___runtime_memory_utils_1ga79d1c70e7f2da5dd53b7b58570886bd4/#lunamove_relocate_range_backward","text":"template <typename _Iter1, typename _Iter2> auto move_relocate_range_backward(_Iter1 first, _Iter1 last, _Iter2 d_last) -> enable_if_t< Impl::move_relocate_backward_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Relocates objects in the source range to a new range.","title":"Luna::move_relocate_range_backward"},{"location":"api/group___runtime_memory_utils_1ga79d1c70e7f2da5dd53b7b58570886bd4/#overview","text":"This function behaves the same as move_relocate_range, except that it relocates object from last to first, so the last object in the destination range should not in the source range. memmove is used instead of memcpy if the whole range can be relocated in one call.","title":"Overview"},{"location":"api/group___runtime_memory_utils_1ga79d1c70e7f2da5dd53b7b58570886bd4/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1ga79d1c70e7f2da5dd53b7b58570886bd4/#first","text":"An iterator to the first object to be relocated from.","title":"first"},{"location":"api/group___runtime_memory_utils_1ga79d1c70e7f2da5dd53b7b58570886bd4/#last","text":"An iterator to one-past-last object to be relocated from.","title":"last"},{"location":"api/group___runtime_memory_utils_1ga79d1c70e7f2da5dd53b7b58570886bd4/#d_last","text":"An iterator to the one-past-last object to be relocated to.","title":"d_last"},{"location":"api/group___runtime_memory_utils_1ga79d1c70e7f2da5dd53b7b58570886bd4/#return-value","text":"Returns an iterator to the front object to be relocated to in the destination range.","title":"Return value"},{"location":"api/group___runtime_memory_utils_1ga7cc40d476affed8c5cd975d060e001e9/","text":"Luna::copy_assign template <typename _Iter1, typename _Iter2> void copy_assign(_Iter1 dst, _Iter2 src) Calls the copy assignment operator of the object. Overview Parameters dst An iterator pointing to the object to be assigned. src An iterator pointing to the object to copy from.","title":"Luna::copy_assign"},{"location":"api/group___runtime_memory_utils_1ga7cc40d476affed8c5cd975d060e001e9/#lunacopy_assign","text":"template <typename _Iter1, typename _Iter2> void copy_assign(_Iter1 dst, _Iter2 src) Calls the copy assignment operator of the object.","title":"Luna::copy_assign"},{"location":"api/group___runtime_memory_utils_1ga7cc40d476affed8c5cd975d060e001e9/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1ga7cc40d476affed8c5cd975d060e001e9/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1ga7cc40d476affed8c5cd975d060e001e9/#dst","text":"An iterator pointing to the object to be assigned.","title":"dst"},{"location":"api/group___runtime_memory_utils_1ga7cc40d476affed8c5cd975d060e001e9/#src","text":"An iterator pointing to the object to copy from.","title":"src"},{"location":"api/group___runtime_memory_utils_1ga7f7cc883d2158a3bcce60a804a4f6266/","text":"Luna::value_construct_range template <typename _Iter> auto value_construct_range(_Iter *first, _Iter *last) -> enable_if_t< Impl::value_construct_range_is_value_type_trivial< _Iter >::value, void > Value-constructs a range of objects. Overview Parameters first An iterator to the first object to be constructed. last An iterator to one-past-last object to be constructed. This function performs value initialization on each object in the range [ first , last ).","title":"Luna::value_construct_range"},{"location":"api/group___runtime_memory_utils_1ga7f7cc883d2158a3bcce60a804a4f6266/#lunavalue_construct_range","text":"template <typename _Iter> auto value_construct_range(_Iter *first, _Iter *last) -> enable_if_t< Impl::value_construct_range_is_value_type_trivial< _Iter >::value, void > Value-constructs a range of objects.","title":"Luna::value_construct_range"},{"location":"api/group___runtime_memory_utils_1ga7f7cc883d2158a3bcce60a804a4f6266/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1ga7f7cc883d2158a3bcce60a804a4f6266/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1ga7f7cc883d2158a3bcce60a804a4f6266/#first","text":"An iterator to the first object to be constructed.","title":"first"},{"location":"api/group___runtime_memory_utils_1ga7f7cc883d2158a3bcce60a804a4f6266/#last","text":"An iterator to one-past-last object to be constructed. This function performs value initialization on each object in the range [ first , last ).","title":"last"},{"location":"api/group___runtime_memory_utils_1ga7f83a4d50176950eae166cc199de2929/","text":"Luna::direct_construct template <typename _Iter, typename...> void direct_construct(_Iter dst, _Args &&... args) Calls the direct constructor for the object. Overview Parameters dst An iterator pointing to the object to be constructed. args Arguments that will be passed to the constructor.","title":"Luna::direct_construct"},{"location":"api/group___runtime_memory_utils_1ga7f83a4d50176950eae166cc199de2929/#lunadirect_construct","text":"template <typename _Iter, typename...> void direct_construct(_Iter dst, _Args &&... args) Calls the direct constructor for the object.","title":"Luna::direct_construct"},{"location":"api/group___runtime_memory_utils_1ga7f83a4d50176950eae166cc199de2929/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1ga7f83a4d50176950eae166cc199de2929/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1ga7f83a4d50176950eae166cc199de2929/#dst","text":"An iterator pointing to the object to be constructed.","title":"dst"},{"location":"api/group___runtime_memory_utils_1ga7f83a4d50176950eae166cc199de2929/#args","text":"Arguments that will be passed to the constructor.","title":"args"},{"location":"api/group___runtime_memory_utils_1ga883bca1e3e4c74e7a5518d4efd77f450/","text":"Luna::operator\"\"_tb constexpr unsigned long long operator\"\"_tb(unsigned long long v) A integer literal suffix that multiples one number with 1024 * 1024 * 1024 * 1024. Use it like 3_tb .","title":"Luna::operator\"\"_tb"},{"location":"api/group___runtime_memory_utils_1ga883bca1e3e4c74e7a5518d4efd77f450/#lunaoperator_tb","text":"constexpr unsigned long long operator\"\"_tb(unsigned long long v) A integer literal suffix that multiples one number with 1024 * 1024 * 1024 * 1024. Use it like 3_tb .","title":"Luna::operator\"\"_tb"},{"location":"api/group___runtime_memory_utils_1ga8dd1b61c0dd3d9efdd8c23e0cb42afe4/","text":"Luna::fill_construct_range template <typename _Iter1, typename _Ty> _Iter1 fill_construct_range(_Iter1 first, _Iter1 last, const _Ty &value) Performs copy construct on each of the object in the range by taking a copy of the provided object. Overview Parameters first An iterator to the first object to be constructed. last An iterator to one-past-last object to be constructed. value The object to copy from for each object to be constructed. Return value Returns an iterator to one-past-last object to be constructed.","title":"Luna::fill_construct_range"},{"location":"api/group___runtime_memory_utils_1ga8dd1b61c0dd3d9efdd8c23e0cb42afe4/#lunafill_construct_range","text":"template <typename _Iter1, typename _Ty> _Iter1 fill_construct_range(_Iter1 first, _Iter1 last, const _Ty &value) Performs copy construct on each of the object in the range by taking a copy of the provided object.","title":"Luna::fill_construct_range"},{"location":"api/group___runtime_memory_utils_1ga8dd1b61c0dd3d9efdd8c23e0cb42afe4/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1ga8dd1b61c0dd3d9efdd8c23e0cb42afe4/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1ga8dd1b61c0dd3d9efdd8c23e0cb42afe4/#first","text":"An iterator to the first object to be constructed.","title":"first"},{"location":"api/group___runtime_memory_utils_1ga8dd1b61c0dd3d9efdd8c23e0cb42afe4/#last","text":"An iterator to one-past-last object to be constructed.","title":"last"},{"location":"api/group___runtime_memory_utils_1ga8dd1b61c0dd3d9efdd8c23e0cb42afe4/#value","text":"The object to copy from for each object to be constructed.","title":"value"},{"location":"api/group___runtime_memory_utils_1ga8dd1b61c0dd3d9efdd8c23e0cb42afe4/#return-value","text":"Returns an iterator to one-past-last object to be constructed.","title":"Return value"},{"location":"api/group___runtime_memory_utils_1ga8df6e6633f16f6f0e07dd0e8f065deb8/","text":"Luna::default_construct template <typename _Iter> void default_construct(_Iter dst) Calls the default constructor for the object. Overview Parameters dst An iterator pointing to the object to be constructed.","title":"Luna::default_construct"},{"location":"api/group___runtime_memory_utils_1ga8df6e6633f16f6f0e07dd0e8f065deb8/#lunadefault_construct","text":"template <typename _Iter> void default_construct(_Iter dst) Calls the default constructor for the object.","title":"Luna::default_construct"},{"location":"api/group___runtime_memory_utils_1ga8df6e6633f16f6f0e07dd0e8f065deb8/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1ga8df6e6633f16f6f0e07dd0e8f065deb8/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1ga8df6e6633f16f6f0e07dd0e8f065deb8/#dst","text":"An iterator pointing to the object to be constructed.","title":"dst"},{"location":"api/group___runtime_memory_utils_1ga92aea26ede77acd254d90f668e0250ef/","text":"Luna::bit_set void bit_set(void *addr, usize bit_offset) Sets the specified bit to 1. Overview Parameters base_addr The address of the bit to offset from. bit_offset The number of bits shifted from the base_addr .","title":"Luna::bit_set"},{"location":"api/group___runtime_memory_utils_1ga92aea26ede77acd254d90f668e0250ef/#lunabit_set","text":"void bit_set(void *addr, usize bit_offset) Sets the specified bit to 1.","title":"Luna::bit_set"},{"location":"api/group___runtime_memory_utils_1ga92aea26ede77acd254d90f668e0250ef/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1ga92aea26ede77acd254d90f668e0250ef/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1ga92aea26ede77acd254d90f668e0250ef/#base_addr","text":"The address of the bit to offset from.","title":"base_addr"},{"location":"api/group___runtime_memory_utils_1ga92aea26ede77acd254d90f668e0250ef/#bit_offset","text":"The number of bits shifted from the base_addr .","title":"bit_offset"},{"location":"api/group___runtime_memory_utils_1ga94d2203ccaa43a601091490af58fc272/","text":"Luna::move_construct_range template <typename _Iter1, typename _Iter2> auto move_construct_range(_Iter1 first, _Iter1 last, _Iter2 d_first) -> enable_if_t< Impl::move_construct_range_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Move-constructs a range of objects. Overview Parameters first An iterator to the first object to be moved from. last An iterator to one-past-last object to be moved from. d_first An iterator to the first object to be constructed. Return value Returns an iterator to the one-past-last object to be constructed. This function uses each object in the range [ first , last ) to performs move initialization on corresponding objects beginning with d_first . Valid Usage The source range and the destination range must not overlap.","title":"Luna::move_construct_range"},{"location":"api/group___runtime_memory_utils_1ga94d2203ccaa43a601091490af58fc272/#lunamove_construct_range","text":"template <typename _Iter1, typename _Iter2> auto move_construct_range(_Iter1 first, _Iter1 last, _Iter2 d_first) -> enable_if_t< Impl::move_construct_range_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Move-constructs a range of objects.","title":"Luna::move_construct_range"},{"location":"api/group___runtime_memory_utils_1ga94d2203ccaa43a601091490af58fc272/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1ga94d2203ccaa43a601091490af58fc272/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1ga94d2203ccaa43a601091490af58fc272/#first","text":"An iterator to the first object to be moved from.","title":"first"},{"location":"api/group___runtime_memory_utils_1ga94d2203ccaa43a601091490af58fc272/#last","text":"An iterator to one-past-last object to be moved from.","title":"last"},{"location":"api/group___runtime_memory_utils_1ga94d2203ccaa43a601091490af58fc272/#d_first","text":"An iterator to the first object to be constructed.","title":"d_first"},{"location":"api/group___runtime_memory_utils_1ga94d2203ccaa43a601091490af58fc272/#return-value","text":"Returns an iterator to the one-past-last object to be constructed. This function uses each object in the range [ first , last ) to performs move initialization on corresponding objects beginning with d_first .","title":"Return value"},{"location":"api/group___runtime_memory_utils_1ga94d2203ccaa43a601091490af58fc272/#valid-usage","text":"The source range and the destination range must not overlap.","title":"Valid Usage"},{"location":"api/group___runtime_memory_utils_1ga99a857fef948b5282d2b7a8615aa4f6f/","text":"Luna::operator\"\"_mb constexpr unsigned long long operator\"\"_mb(unsigned long long v) A integer literal suffix that multiples one number with 1024 * 1024. Use it like 3_mb .","title":"Luna::operator\"\"_mb"},{"location":"api/group___runtime_memory_utils_1ga99a857fef948b5282d2b7a8615aa4f6f/#lunaoperator_mb","text":"constexpr unsigned long long operator\"\"_mb(unsigned long long v) A integer literal suffix that multiples one number with 1024 * 1024. Use it like 3_mb .","title":"Luna::operator\"\"_mb"},{"location":"api/group___runtime_memory_utils_1gaa8b289f3d7d9f065c321101ec2ce0ab6/","text":"Luna::move_assign template <typename _Iter1, typename _Iter2> void move_assign(_Iter1 dst, _Iter2 src) Calls the move assignment operator of the object. Overview Parameters dst An iterator pointing to the object to be assigned. src An iterator pointing to the object to move from.","title":"Luna::move_assign"},{"location":"api/group___runtime_memory_utils_1gaa8b289f3d7d9f065c321101ec2ce0ab6/#lunamove_assign","text":"template <typename _Iter1, typename _Iter2> void move_assign(_Iter1 dst, _Iter2 src) Calls the move assignment operator of the object.","title":"Luna::move_assign"},{"location":"api/group___runtime_memory_utils_1gaa8b289f3d7d9f065c321101ec2ce0ab6/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1gaa8b289f3d7d9f065c321101ec2ce0ab6/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1gaa8b289f3d7d9f065c321101ec2ce0ab6/#dst","text":"An iterator pointing to the object to be assigned.","title":"dst"},{"location":"api/group___runtime_memory_utils_1gaa8b289f3d7d9f065c321101ec2ce0ab6/#src","text":"An iterator pointing to the object to move from.","title":"src"},{"location":"api/group___runtime_memory_utils_1gaacaed16341185899ffe0d769237104f2/","text":"Luna::bit_test bool bit_test(const void *base_addr, usize bit_offset) Tests if specified bit is 1. Overview Parameters base_addr The address of the bit to offset from. bit_offset The number of bits shifted from the base_addr . Return value Returns true if the bit is 1, false if the bit is 0. base_addr: 0x1000, bit_offset: 0, *((u8*)0x1000) : 0000 1000b* test result: false. value of *((u8*)0x1000) after set: 0000 1001b value of *((u8*)0x1000) after reset: 0000 1000b. base_addr: 0x1000, bit_offset: 3, *((u8*)0x1000) : 0000 1000b* test result: true. value of *((u8*)0x1000) after set: 0000 1000b value of *((u8*)0x1000) after reset: 0000 0000b. base_addr: 0x1000, bit_offset: 8, *((u8*)0x1001) : 0000 1000b* test result: false. value of *((u8*)0x1001) after set: 0000 1001b value of *((u8*)0x1001) after reset: 0000 1000b. base_addr: 0x1000, bit_offset: 11, *((u8*)0x1001) : 0000 1000b* test result: true. value of *((u8*)0x1001) after set: 0000 1000b value of *((u8*)0x1001) after reset: 0000 0000b.","title":"Luna::bit_test"},{"location":"api/group___runtime_memory_utils_1gaacaed16341185899ffe0d769237104f2/#lunabit_test","text":"bool bit_test(const void *base_addr, usize bit_offset) Tests if specified bit is 1.","title":"Luna::bit_test"},{"location":"api/group___runtime_memory_utils_1gaacaed16341185899ffe0d769237104f2/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1gaacaed16341185899ffe0d769237104f2/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1gaacaed16341185899ffe0d769237104f2/#base_addr","text":"The address of the bit to offset from.","title":"base_addr"},{"location":"api/group___runtime_memory_utils_1gaacaed16341185899ffe0d769237104f2/#bit_offset","text":"The number of bits shifted from the base_addr .","title":"bit_offset"},{"location":"api/group___runtime_memory_utils_1gaacaed16341185899ffe0d769237104f2/#return-value","text":"Returns true if the bit is 1, false if the bit is 0. base_addr: 0x1000, bit_offset: 0, *((u8*)0x1000) : 0000 1000b* test result: false. value of *((u8*)0x1000) after set: 0000 1001b value of *((u8*)0x1000) after reset: 0000 1000b. base_addr: 0x1000, bit_offset: 3, *((u8*)0x1000) : 0000 1000b* test result: true. value of *((u8*)0x1000) after set: 0000 1000b value of *((u8*)0x1000) after reset: 0000 0000b. base_addr: 0x1000, bit_offset: 8, *((u8*)0x1001) : 0000 1000b* test result: false. value of *((u8*)0x1001) after set: 0000 1001b value of *((u8*)0x1001) after reset: 0000 1000b. base_addr: 0x1000, bit_offset: 11, *((u8*)0x1001) : 0000 1000b* test result: true. value of *((u8*)0x1001) after set: 0000 1000b value of *((u8*)0x1001) after reset: 0000 0000b.","title":"Return value"},{"location":"api/group___runtime_memory_utils_1gaad21944619c742f48231d090194ce3b0/","text":"Luna::bit_set void bit_set(void *addr, usize bit_offset, bool value) Sets the specified bit to 1 if value is true , or to 0 if value is false . Overview Parameters base_addr The address of the bit to offset from. bit_offset The number of bits shifted from the base_addr . value The value to set for the bit.","title":"Luna::bit_set"},{"location":"api/group___runtime_memory_utils_1gaad21944619c742f48231d090194ce3b0/#lunabit_set","text":"void bit_set(void *addr, usize bit_offset, bool value) Sets the specified bit to 1 if value is true , or to 0 if value is false .","title":"Luna::bit_set"},{"location":"api/group___runtime_memory_utils_1gaad21944619c742f48231d090194ce3b0/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1gaad21944619c742f48231d090194ce3b0/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1gaad21944619c742f48231d090194ce3b0/#base_addr","text":"The address of the bit to offset from.","title":"base_addr"},{"location":"api/group___runtime_memory_utils_1gaad21944619c742f48231d090194ce3b0/#bit_offset","text":"The number of bits shifted from the base_addr .","title":"bit_offset"},{"location":"api/group___runtime_memory_utils_1gaad21944619c742f48231d090194ce3b0/#value","text":"The value to set for the bit.","title":"value"},{"location":"api/group___runtime_memory_utils_1gaae4bda0b6285b9b4c757534fdf99ea94/","text":"Luna::copy_construct_range template <typename _Iter1, typename _Iter2> auto copy_construct_range(_Iter1 first, _Iter1 last, _Iter2 d_first) -> enable_if_t<!Impl::copy_construct_range_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Copy-constructs a range of objects. Overview Parameters first An iterator to the first object to be copied from. last An iterator to one-past-last object to be copied from. d_first An iterator to the first object to be constructed. Return value Returns an iterator to the one-past-last object to be constructed. This function uses each object in the range [ first , last ) to performs copy initialization on corresponding objects beginning with d_first . Valid Usage The source range and the destination range must not overlap.","title":"Luna::copy_construct_range"},{"location":"api/group___runtime_memory_utils_1gaae4bda0b6285b9b4c757534fdf99ea94/#lunacopy_construct_range","text":"template <typename _Iter1, typename _Iter2> auto copy_construct_range(_Iter1 first, _Iter1 last, _Iter2 d_first) -> enable_if_t<!Impl::copy_construct_range_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Copy-constructs a range of objects.","title":"Luna::copy_construct_range"},{"location":"api/group___runtime_memory_utils_1gaae4bda0b6285b9b4c757534fdf99ea94/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1gaae4bda0b6285b9b4c757534fdf99ea94/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1gaae4bda0b6285b9b4c757534fdf99ea94/#first","text":"An iterator to the first object to be copied from.","title":"first"},{"location":"api/group___runtime_memory_utils_1gaae4bda0b6285b9b4c757534fdf99ea94/#last","text":"An iterator to one-past-last object to be copied from.","title":"last"},{"location":"api/group___runtime_memory_utils_1gaae4bda0b6285b9b4c757534fdf99ea94/#d_first","text":"An iterator to the first object to be constructed.","title":"d_first"},{"location":"api/group___runtime_memory_utils_1gaae4bda0b6285b9b4c757534fdf99ea94/#return-value","text":"Returns an iterator to the one-past-last object to be constructed. This function uses each object in the range [ first , last ) to performs copy initialization on corresponding objects beginning with d_first .","title":"Return value"},{"location":"api/group___runtime_memory_utils_1gaae4bda0b6285b9b4c757534fdf99ea94/#valid-usage","text":"The source range and the destination range must not overlap.","title":"Valid Usage"},{"location":"api/group___runtime_memory_utils_1gab176a0253de8e05b3ff0c9d5c3bb0f04/","text":"Luna::copy_relocate_range template <typename _Iter1, typename _Iter2> auto copy_relocate_range(_Iter1 first, _Iter1 last, _Iter2 d_first) -> enable_if_t< Impl::copy_relocate_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Relocates objects in the source range to a new range that is not overlap with the source range. Overview After this call, the objects in the destination range behaves the same as the corresponding objects formerly in the source range, except that the places(memory addresses) for objects are changed. Parameters first An iterator to the first object to be relocated from. last An iterator to one-past-last object to be relocated from. d_first An iterator to the first object to be relocated to. Return value Returns an iterator to the one-past-last object to be relocated to. Valid Usage The iterator for the source range and destination range must have the same value_type . This call behaves differently in the following different conditions:","title":"Luna::copy_relocate_range"},{"location":"api/group___runtime_memory_utils_1gab176a0253de8e05b3ff0c9d5c3bb0f04/#lunacopy_relocate_range","text":"template <typename _Iter1, typename _Iter2> auto copy_relocate_range(_Iter1 first, _Iter1 last, _Iter2 d_first) -> enable_if_t< Impl::copy_relocate_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Relocates objects in the source range to a new range that is not overlap with the source range.","title":"Luna::copy_relocate_range"},{"location":"api/group___runtime_memory_utils_1gab176a0253de8e05b3ff0c9d5c3bb0f04/#overview","text":"After this call, the objects in the destination range behaves the same as the corresponding objects formerly in the source range, except that the places(memory addresses) for objects are changed.","title":"Overview"},{"location":"api/group___runtime_memory_utils_1gab176a0253de8e05b3ff0c9d5c3bb0f04/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1gab176a0253de8e05b3ff0c9d5c3bb0f04/#first","text":"An iterator to the first object to be relocated from.","title":"first"},{"location":"api/group___runtime_memory_utils_1gab176a0253de8e05b3ff0c9d5c3bb0f04/#last","text":"An iterator to one-past-last object to be relocated from.","title":"last"},{"location":"api/group___runtime_memory_utils_1gab176a0253de8e05b3ff0c9d5c3bb0f04/#d_first","text":"An iterator to the first object to be relocated to.","title":"d_first"},{"location":"api/group___runtime_memory_utils_1gab176a0253de8e05b3ff0c9d5c3bb0f04/#return-value","text":"Returns an iterator to the one-past-last object to be relocated to.","title":"Return value"},{"location":"api/group___runtime_memory_utils_1gab176a0253de8e05b3ff0c9d5c3bb0f04/#valid-usage","text":"The iterator for the source range and destination range must have the same value_type . This call behaves differently in the following different conditions:","title":"Valid Usage"},{"location":"api/group___runtime_memory_utils_1gab54fd1f9efa8c49a3404616ee151d35a/","text":"Luna::value_construct template <typename _Iter> void value_construct(_Iter dst) Calls the value constructor for the object. Overview Parameters dst An iterator pointing to the object to be constructed.","title":"Luna::value_construct"},{"location":"api/group___runtime_memory_utils_1gab54fd1f9efa8c49a3404616ee151d35a/#lunavalue_construct","text":"template <typename _Iter> void value_construct(_Iter dst) Calls the value constructor for the object.","title":"Luna::value_construct"},{"location":"api/group___runtime_memory_utils_1gab54fd1f9efa8c49a3404616ee151d35a/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1gab54fd1f9efa8c49a3404616ee151d35a/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1gab54fd1f9efa8c49a3404616ee151d35a/#dst","text":"An iterator pointing to the object to be constructed.","title":"dst"},{"location":"api/group___runtime_memory_utils_1gac1d215202704b075901d5fdb7a31f27d/","text":"Luna::bit_reset void bit_reset(void *addr, usize bit_offset) Sets the specified bit to 0. Overview Parameters base_addr The address of the bit to offset from. bit_offset The number of bits shifted from the base_addr .","title":"Luna::bit_reset"},{"location":"api/group___runtime_memory_utils_1gac1d215202704b075901d5fdb7a31f27d/#lunabit_reset","text":"void bit_reset(void *addr, usize bit_offset) Sets the specified bit to 0.","title":"Luna::bit_reset"},{"location":"api/group___runtime_memory_utils_1gac1d215202704b075901d5fdb7a31f27d/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1gac1d215202704b075901d5fdb7a31f27d/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1gac1d215202704b075901d5fdb7a31f27d/#base_addr","text":"The address of the bit to offset from.","title":"base_addr"},{"location":"api/group___runtime_memory_utils_1gac1d215202704b075901d5fdb7a31f27d/#bit_offset","text":"The number of bits shifted from the base_addr .","title":"bit_offset"},{"location":"api/group___runtime_memory_utils_1gac90c9d2773f735a70e55915afaf969e4/","text":"Luna::calculate_struct_memory_layout void calculate_struct_memory_layout(Span< MemoryLayoutMember > members, usize &out_size, usize &out_alignment) Calculates the size, alignment and memory layout for one structure type. Overview The calculated size, alignment and memory layout is compatible with C standard structure layout. Parameters members One span that provides members of the structure. out_size The calculated size of the structure. out_alignment The calculated alignment of the structure.","title":"Luna::calculate_struct_memory_layout"},{"location":"api/group___runtime_memory_utils_1gac90c9d2773f735a70e55915afaf969e4/#lunacalculate_struct_memory_layout","text":"void calculate_struct_memory_layout(Span< MemoryLayoutMember > members, usize &out_size, usize &out_alignment) Calculates the size, alignment and memory layout for one structure type.","title":"Luna::calculate_struct_memory_layout"},{"location":"api/group___runtime_memory_utils_1gac90c9d2773f735a70e55915afaf969e4/#overview","text":"The calculated size, alignment and memory layout is compatible with C standard structure layout.","title":"Overview"},{"location":"api/group___runtime_memory_utils_1gac90c9d2773f735a70e55915afaf969e4/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1gac90c9d2773f735a70e55915afaf969e4/#members","text":"One span that provides members of the structure.","title":"members"},{"location":"api/group___runtime_memory_utils_1gac90c9d2773f735a70e55915afaf969e4/#out_size","text":"The calculated size of the structure.","title":"out_size"},{"location":"api/group___runtime_memory_utils_1gac90c9d2773f735a70e55915afaf969e4/#out_alignment","text":"The calculated alignment of the structure.","title":"out_alignment"},{"location":"api/group___runtime_memory_utils_1gadb9e5fb1e9a0d0ba6b3a53c478bc1d25/","text":"Luna::default_construct_range template <typename _Iter> auto default_construct_range(_Iter first, _Iter last) -> enable_if_t< Impl::default_construct_range_is_value_type_class< _Iter >::value, void > Default-constructs a range of objects. Overview Parameters first An iterator to the first object to be constructed. last An iterator to one-past-last object to be constructed. This function performs default initialization on each object in the range [ first , last ).","title":"Luna::default_construct_range"},{"location":"api/group___runtime_memory_utils_1gadb9e5fb1e9a0d0ba6b3a53c478bc1d25/#lunadefault_construct_range","text":"template <typename _Iter> auto default_construct_range(_Iter first, _Iter last) -> enable_if_t< Impl::default_construct_range_is_value_type_class< _Iter >::value, void > Default-constructs a range of objects.","title":"Luna::default_construct_range"},{"location":"api/group___runtime_memory_utils_1gadb9e5fb1e9a0d0ba6b3a53c478bc1d25/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1gadb9e5fb1e9a0d0ba6b3a53c478bc1d25/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1gadb9e5fb1e9a0d0ba6b3a53c478bc1d25/#first","text":"An iterator to the first object to be constructed.","title":"first"},{"location":"api/group___runtime_memory_utils_1gadb9e5fb1e9a0d0ba6b3a53c478bc1d25/#last","text":"An iterator to one-past-last object to be constructed. This function performs default initialization on each object in the range [ first , last ).","title":"last"},{"location":"api/group___runtime_memory_utils_1gae8b5a7ce4c407bbaddac2fa58d7a30ef/","text":"Luna::memzero template <typename _Ty> _Ty * memzero(_Ty *dst) Clears the memory of the specified object to 0. Overview Parameters dst The object to clear. The size of the memory region to clear will be sizeof(_Ty) . Return value Returns the dst pointer.","title":"Luna::memzero"},{"location":"api/group___runtime_memory_utils_1gae8b5a7ce4c407bbaddac2fa58d7a30ef/#lunamemzero","text":"template <typename _Ty> _Ty * memzero(_Ty *dst) Clears the memory of the specified object to 0.","title":"Luna::memzero"},{"location":"api/group___runtime_memory_utils_1gae8b5a7ce4c407bbaddac2fa58d7a30ef/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1gae8b5a7ce4c407bbaddac2fa58d7a30ef/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1gae8b5a7ce4c407bbaddac2fa58d7a30ef/#dst","text":"The object to clear. The size of the memory region to clear will be sizeof(_Ty) .","title":"dst"},{"location":"api/group___runtime_memory_utils_1gae8b5a7ce4c407bbaddac2fa58d7a30ef/#return-value","text":"Returns the dst pointer.","title":"Return value"},{"location":"api/group___runtime_memory_utils_1gaead7e7ca97779e77866f1d76b3e1ae8e/","text":"Luna::addressof template <typename _Ty> _Ty * addressof(_Ty &value) Gets the real address for object or function value , even if the operator& of the object has been overloaded. Overview Parameters value The object to fetch address. Return value Returns one pointer to the object.","title":"Luna::addressof"},{"location":"api/group___runtime_memory_utils_1gaead7e7ca97779e77866f1d76b3e1ae8e/#lunaaddressof","text":"template <typename _Ty> _Ty * addressof(_Ty &value) Gets the real address for object or function value , even if the operator& of the object has been overloaded.","title":"Luna::addressof"},{"location":"api/group___runtime_memory_utils_1gaead7e7ca97779e77866f1d76b3e1ae8e/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1gaead7e7ca97779e77866f1d76b3e1ae8e/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1gaead7e7ca97779e77866f1d76b3e1ae8e/#value","text":"The object to fetch address.","title":"value"},{"location":"api/group___runtime_memory_utils_1gaead7e7ca97779e77866f1d76b3e1ae8e/#return-value","text":"Returns one pointer to the object.","title":"Return value"},{"location":"api/group___runtime_memory_utils_1gaf3a51fa286a5f834344de34d0b3faa29/","text":"Luna::align_upper template <typename _Ty1, typename _Ty2> constexpr _Ty1 align_upper(_Ty1 origin, _Ty2 alignment) Returns the address/size that aligns the origin address/size to the nearest matched aligned address/size that is greater than or equal to the the origin address/size. Overview Parameters origin The unaligned address/size. alignment The alignment boundary. If alignment is 0, origin will be returned as-is. Return value Returns the aligned address/size.","title":"Luna::align_upper"},{"location":"api/group___runtime_memory_utils_1gaf3a51fa286a5f834344de34d0b3faa29/#lunaalign_upper","text":"template <typename _Ty1, typename _Ty2> constexpr _Ty1 align_upper(_Ty1 origin, _Ty2 alignment) Returns the address/size that aligns the origin address/size to the nearest matched aligned address/size that is greater than or equal to the the origin address/size.","title":"Luna::align_upper"},{"location":"api/group___runtime_memory_utils_1gaf3a51fa286a5f834344de34d0b3faa29/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1gaf3a51fa286a5f834344de34d0b3faa29/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1gaf3a51fa286a5f834344de34d0b3faa29/#origin","text":"The unaligned address/size.","title":"origin"},{"location":"api/group___runtime_memory_utils_1gaf3a51fa286a5f834344de34d0b3faa29/#alignment","text":"The alignment boundary. If alignment is 0, origin will be returned as-is.","title":"alignment"},{"location":"api/group___runtime_memory_utils_1gaf3a51fa286a5f834344de34d0b3faa29/#return-value","text":"Returns the aligned address/size.","title":"Return value"},{"location":"api/group___runtime_memory_utils_1gaf3c69cb13eff1f1f10e6a0a4a4b307b8/","text":"Luna::pixel_offset const void * pixel_offset(const void *base, usize x, usize y, usize z, usize bytes_per_pixel, usize row_pitch, usize slice_pitch) Returns a pointer that offsets the specified pixels in the bitmap. Overview Parameters base The pointer to the first pixel in the bitmap. x The x offset in pixels. y The y offset in pixels. z The z offset in pixels. bytes_per_pixel The number of bytes per pixel. row_pitch The pitch to advance for one row in bytes. slice_pitch The pitch to advance for one slice in bytes. Return value Returns the offseted pointer.","title":"Luna::pixel_offset"},{"location":"api/group___runtime_memory_utils_1gaf3c69cb13eff1f1f10e6a0a4a4b307b8/#lunapixel_offset","text":"const void * pixel_offset(const void *base, usize x, usize y, usize z, usize bytes_per_pixel, usize row_pitch, usize slice_pitch) Returns a pointer that offsets the specified pixels in the bitmap.","title":"Luna::pixel_offset"},{"location":"api/group___runtime_memory_utils_1gaf3c69cb13eff1f1f10e6a0a4a4b307b8/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1gaf3c69cb13eff1f1f10e6a0a4a4b307b8/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1gaf3c69cb13eff1f1f10e6a0a4a4b307b8/#base","text":"The pointer to the first pixel in the bitmap.","title":"base"},{"location":"api/group___runtime_memory_utils_1gaf3c69cb13eff1f1f10e6a0a4a4b307b8/#x","text":"The x offset in pixels.","title":"x"},{"location":"api/group___runtime_memory_utils_1gaf3c69cb13eff1f1f10e6a0a4a4b307b8/#y","text":"The y offset in pixels.","title":"y"},{"location":"api/group___runtime_memory_utils_1gaf3c69cb13eff1f1f10e6a0a4a4b307b8/#z","text":"The z offset in pixels.","title":"z"},{"location":"api/group___runtime_memory_utils_1gaf3c69cb13eff1f1f10e6a0a4a4b307b8/#bytes_per_pixel","text":"The number of bytes per pixel.","title":"bytes_per_pixel"},{"location":"api/group___runtime_memory_utils_1gaf3c69cb13eff1f1f10e6a0a4a4b307b8/#row_pitch","text":"The pitch to advance for one row in bytes.","title":"row_pitch"},{"location":"api/group___runtime_memory_utils_1gaf3c69cb13eff1f1f10e6a0a4a4b307b8/#slice_pitch","text":"The pitch to advance for one slice in bytes.","title":"slice_pitch"},{"location":"api/group___runtime_memory_utils_1gaf3c69cb13eff1f1f10e6a0a4a4b307b8/#return-value","text":"Returns the offseted pointer.","title":"Return value"},{"location":"api/group___runtime_memory_utils_1gafa31716cbdd53a44b1ab5bf5289ebd34/","text":"Luna::copy_assign_range template <typename _Iter1, typename _Iter2> auto copy_assign_range(_Iter1 first, _Iter1 last, _Iter2 d_first) -> enable_if_t<!Impl::copy_assign_range_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Performs copy assignment operation on every object in the destination range using the corresponding object in the source range. Overview Parameters first An iterator to the first object to be copied from. last An iterator to one-past-last object to be copied from. d_first An iterator to the first object to be assigned. Return value Returns an iterator to the one-past-last object to be assigned. Valid Usage The source range and the destination range must not overlap.","title":"Luna::copy_assign_range"},{"location":"api/group___runtime_memory_utils_1gafa31716cbdd53a44b1ab5bf5289ebd34/#lunacopy_assign_range","text":"template <typename _Iter1, typename _Iter2> auto copy_assign_range(_Iter1 first, _Iter1 last, _Iter2 d_first) -> enable_if_t<!Impl::copy_assign_range_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Performs copy assignment operation on every object in the destination range using the corresponding object in the source range.","title":"Luna::copy_assign_range"},{"location":"api/group___runtime_memory_utils_1gafa31716cbdd53a44b1ab5bf5289ebd34/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_memory_utils_1gafa31716cbdd53a44b1ab5bf5289ebd34/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_memory_utils_1gafa31716cbdd53a44b1ab5bf5289ebd34/#first","text":"An iterator to the first object to be copied from.","title":"first"},{"location":"api/group___runtime_memory_utils_1gafa31716cbdd53a44b1ab5bf5289ebd34/#last","text":"An iterator to one-past-last object to be copied from.","title":"last"},{"location":"api/group___runtime_memory_utils_1gafa31716cbdd53a44b1ab5bf5289ebd34/#d_first","text":"An iterator to the first object to be assigned.","title":"d_first"},{"location":"api/group___runtime_memory_utils_1gafa31716cbdd53a44b1ab5bf5289ebd34/#return-value","text":"Returns an iterator to the one-past-last object to be assigned.","title":"Return value"},{"location":"api/group___runtime_memory_utils_1gafa31716cbdd53a44b1ab5bf5289ebd34/#valid-usage","text":"The source range and the destination range must not overlap.","title":"Valid Usage"},{"location":"api/group___runtime_name_1ga025e1affb824b441b7da6b1ad7bb14ca/","text":"Luna::name_id_t using name_id_t = u32 The name ID type.","title":"Luna::name_id_t"},{"location":"api/group___runtime_name_1ga025e1affb824b441b7da6b1ad7bb14ca/#lunaname_id_t","text":"using name_id_t = u32 The name ID type.","title":"Luna::name_id_t"},{"location":"api/group___runtime_name_1ga139e86dc82b131fa81bc73a33087cab8/","text":"Luna::get_name_size LUNA_RUNTIME_API usize get_name_size(const c8 *name) Fetches the size of the name string. Overview Parameters name The pointer of the string. Return value Returns the size of the name. Returns 0 if name is nullptr . The size of the name is cached in the system, so this call returns in constant time. Valid Usage If name is not nullptr , it must be a string pointer returned by intern_name.","title":"Luna::get_name_size"},{"location":"api/group___runtime_name_1ga139e86dc82b131fa81bc73a33087cab8/#lunaget_name_size","text":"LUNA_RUNTIME_API usize get_name_size(const c8 *name) Fetches the size of the name string.","title":"Luna::get_name_size"},{"location":"api/group___runtime_name_1ga139e86dc82b131fa81bc73a33087cab8/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_name_1ga139e86dc82b131fa81bc73a33087cab8/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_name_1ga139e86dc82b131fa81bc73a33087cab8/#name","text":"The pointer of the string.","title":"name"},{"location":"api/group___runtime_name_1ga139e86dc82b131fa81bc73a33087cab8/#return-value","text":"Returns the size of the name. Returns 0 if name is nullptr . The size of the name is cached in the system, so this call returns in constant time.","title":"Return value"},{"location":"api/group___runtime_name_1ga139e86dc82b131fa81bc73a33087cab8/#valid-usage","text":"If name is not nullptr , it must be a string pointer returned by intern_name.","title":"Valid Usage"},{"location":"api/group___runtime_name_1ga5556ed51beb79868d1c0f036ea3aa04d/","text":"Luna::release_name LUNA_RUNTIME_API void release_name(const c8 *name) Decreases the reference count of the name string by 1, and eventually frees the name string when the reference count goes to 0. Overview Parameters name The pointer of the string. If this is nullptr , this call does nothing. Valid Usage If name is not nullptr , it must be a string pointer returned by intern_name.","title":"Luna::release_name"},{"location":"api/group___runtime_name_1ga5556ed51beb79868d1c0f036ea3aa04d/#lunarelease_name","text":"LUNA_RUNTIME_API void release_name(const c8 *name) Decreases the reference count of the name string by 1, and eventually frees the name string when the reference count goes to 0.","title":"Luna::release_name"},{"location":"api/group___runtime_name_1ga5556ed51beb79868d1c0f036ea3aa04d/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_name_1ga5556ed51beb79868d1c0f036ea3aa04d/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_name_1ga5556ed51beb79868d1c0f036ea3aa04d/#name","text":"The pointer of the string. If this is nullptr , this call does nothing.","title":"name"},{"location":"api/group___runtime_name_1ga5556ed51beb79868d1c0f036ea3aa04d/#valid-usage","text":"If name is not nullptr , it must be a string pointer returned by intern_name.","title":"Valid Usage"},{"location":"api/group___runtime_name_1ga7ad9785f8cb93e89864efc9507be5d0c/","text":"Luna::retain_name LUNA_RUNTIME_API void retain_name(const c8 *name) Increases the reference count of the name string by 1. Overview Parameters name The pointer of the string. If this is nullptr , this call does nothing. Valid Usage If name is not nullptr , it must be a string pointer returned by intern_name.","title":"Luna::retain_name"},{"location":"api/group___runtime_name_1ga7ad9785f8cb93e89864efc9507be5d0c/#lunaretain_name","text":"LUNA_RUNTIME_API void retain_name(const c8 *name) Increases the reference count of the name string by 1.","title":"Luna::retain_name"},{"location":"api/group___runtime_name_1ga7ad9785f8cb93e89864efc9507be5d0c/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_name_1ga7ad9785f8cb93e89864efc9507be5d0c/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_name_1ga7ad9785f8cb93e89864efc9507be5d0c/#name","text":"The pointer of the string. If this is nullptr , this call does nothing.","title":"name"},{"location":"api/group___runtime_name_1ga7ad9785f8cb93e89864efc9507be5d0c/#valid-usage","text":"If name is not nullptr , it must be a string pointer returned by intern_name.","title":"Valid Usage"},{"location":"api/group___runtime_name_1ga8934afb8e4b840f7082726a1524428b9/","text":"Luna::intern_name LUNA_RUNTIME_API const c8 * intern_name(const c8 *name, usize count) Interns one name string to the runtime and fetches the interned address for it. Overview Parameters name The name string to intern. count The number of characters that should be copied in name , excluding the null terminator if any. Return value Returns the interned address for the name string. If name is nullptr or size is 0 , the returned address is nullptr and the memory block is not interned. For each call to intern_name, one call to release_name is needed to finally release the internal name string block. For end user, prefer using Name objects instead of calling these APIs directly.","title":"Luna::intern_name"},{"location":"api/group___runtime_name_1ga8934afb8e4b840f7082726a1524428b9/#lunaintern_name","text":"LUNA_RUNTIME_API const c8 * intern_name(const c8 *name, usize count) Interns one name string to the runtime and fetches the interned address for it.","title":"Luna::intern_name"},{"location":"api/group___runtime_name_1ga8934afb8e4b840f7082726a1524428b9/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_name_1ga8934afb8e4b840f7082726a1524428b9/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_name_1ga8934afb8e4b840f7082726a1524428b9/#name","text":"The name string to intern.","title":"name"},{"location":"api/group___runtime_name_1ga8934afb8e4b840f7082726a1524428b9/#count","text":"The number of characters that should be copied in name , excluding the null terminator if any.","title":"count"},{"location":"api/group___runtime_name_1ga8934afb8e4b840f7082726a1524428b9/#return-value","text":"Returns the interned address for the name string. If name is nullptr or size is 0 , the returned address is nullptr and the memory block is not interned. For each call to intern_name, one call to release_name is needed to finally release the internal name string block. For end user, prefer using Name objects instead of calling these APIs directly.","title":"Return value"},{"location":"api/group___runtime_name_1ga90645b965adcbec040490dcc08e617aa/","text":"Luna::get_name_id LUNA_RUNTIME_API name_id_t get_name_id(const c8 *name) Gets the ID for the specified name. The ID keeps constant between multiple processes. Overview Since the name ID is hashed from the name string, technically multiple names may have the same ID. The name system handles such confliction, so that different name string will always have different pointer, even they have the same ID. The user should compare the string pointer returned by intern_name rather than the string ID to check whether two strings are equal. Parameters name The pointer of the string. If this is nullptr , this call returns 0 . Valid Usage If name is not nullptr , it must be a string pointer returned by intern_name.","title":"Luna::get_name_id"},{"location":"api/group___runtime_name_1ga90645b965adcbec040490dcc08e617aa/#lunaget_name_id","text":"LUNA_RUNTIME_API name_id_t get_name_id(const c8 *name) Gets the ID for the specified name. The ID keeps constant between multiple processes.","title":"Luna::get_name_id"},{"location":"api/group___runtime_name_1ga90645b965adcbec040490dcc08e617aa/#overview","text":"Since the name ID is hashed from the name string, technically multiple names may have the same ID. The name system handles such confliction, so that different name string will always have different pointer, even they have the same ID. The user should compare the string pointer returned by intern_name rather than the string ID to check whether two strings are equal.","title":"Overview"},{"location":"api/group___runtime_name_1ga90645b965adcbec040490dcc08e617aa/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_name_1ga90645b965adcbec040490dcc08e617aa/#name","text":"The pointer of the string. If this is nullptr , this call returns 0 .","title":"name"},{"location":"api/group___runtime_name_1ga90645b965adcbec040490dcc08e617aa/#valid-usage","text":"If name is not nullptr , it must be a string pointer returned by intern_name.","title":"Valid Usage"},{"location":"api/group___runtime_name_1gaa261ca6305ee4dee587492a004d6f9ee/","text":"Luna::intern_name LUNA_RUNTIME_API const c8 * intern_name(const c8 *name) Interns one name string to the runtime and fetches the interned address for it. Overview Parameters name The name string to intern. Return value Returns the interned address for the name string. If name is nullptr or points to an empty string ( \"\" ), the returned address is nullptr and the memory block is not interned. For each call to intern_name, one call to release_name is needed to finally release the internal name string block. For end user, prefer using Name objects instead of calling these APIs directly. Valid Usage If name is not nullptr , it must be ended with one null terminator.","title":"Luna::intern_name"},{"location":"api/group___runtime_name_1gaa261ca6305ee4dee587492a004d6f9ee/#lunaintern_name","text":"LUNA_RUNTIME_API const c8 * intern_name(const c8 *name) Interns one name string to the runtime and fetches the interned address for it.","title":"Luna::intern_name"},{"location":"api/group___runtime_name_1gaa261ca6305ee4dee587492a004d6f9ee/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_name_1gaa261ca6305ee4dee587492a004d6f9ee/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_name_1gaa261ca6305ee4dee587492a004d6f9ee/#name","text":"The name string to intern.","title":"name"},{"location":"api/group___runtime_name_1gaa261ca6305ee4dee587492a004d6f9ee/#return-value","text":"Returns the interned address for the name string. If name is nullptr or points to an empty string ( \"\" ), the returned address is nullptr and the memory block is not interned. For each call to intern_name, one call to release_name is needed to finally release the internal name string block. For end user, prefer using Name objects instead of calling these APIs directly.","title":"Return value"},{"location":"api/group___runtime_name_1gaa261ca6305ee4dee587492a004d6f9ee/#valid-usage","text":"If name is not nullptr , it must be ended with one null terminator.","title":"Valid Usage"},{"location":"api/group___runtime_name_1gafbf11b1c0e70c85b09db99aa4f786933/","text":"Luna::name_type LUNA_RUNTIME_API typeinfo_t name_type() Gets the type object of Name . Overview Return value Returns the type object of Name .","title":"Luna::name_type"},{"location":"api/group___runtime_name_1gafbf11b1c0e70c85b09db99aa4f786933/#lunaname_type","text":"LUNA_RUNTIME_API typeinfo_t name_type() Gets the type object of Name .","title":"Luna::name_type"},{"location":"api/group___runtime_name_1gafbf11b1c0e70c85b09db99aa4f786933/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_name_1gafbf11b1c0e70c85b09db99aa4f786933/#return-value","text":"Returns the type object of Name .","title":"Return value"},{"location":"api/group___runtime_object_1ga05292c794e05337d2f55793b8a543a3d/","text":"Luna::object_retain LUNA_RUNTIME_API ref_count_t object_retain(object_t object_ptr) Increases the strong refernece counter value by one. Overview Parameters object_ptr The object pointer. Return value Returns the strong reference counter value of the object after the operation. Valid Usage object_ptr must points to one memory returned by object_alloc.","title":"Luna::object_retain"},{"location":"api/group___runtime_object_1ga05292c794e05337d2f55793b8a543a3d/#lunaobject_retain","text":"LUNA_RUNTIME_API ref_count_t object_retain(object_t object_ptr) Increases the strong refernece counter value by one.","title":"Luna::object_retain"},{"location":"api/group___runtime_object_1ga05292c794e05337d2f55793b8a543a3d/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_object_1ga05292c794e05337d2f55793b8a543a3d/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_object_1ga05292c794e05337d2f55793b8a543a3d/#object_ptr","text":"The object pointer.","title":"object_ptr"},{"location":"api/group___runtime_object_1ga05292c794e05337d2f55793b8a543a3d/#return-value","text":"Returns the strong reference counter value of the object after the operation.","title":"Return value"},{"location":"api/group___runtime_object_1ga05292c794e05337d2f55793b8a543a3d/#valid-usage","text":"object_ptr must points to one memory returned by object_alloc.","title":"Valid Usage"},{"location":"api/group___runtime_object_1ga16a414bc273f61c5b494bbfeede47dc8/","text":"Luna::object_retain_weak LUNA_RUNTIME_API ref_count_t object_retain_weak(object_t object_ptr) Increases the weak refernece counter value by one. Overview Parameters object_ptr The object pointer. Return value Returns the weak reference counter value of the object after the operation. Valid Usage object_ptr must points to one memory returned by object_alloc.","title":"Luna::object_retain_weak"},{"location":"api/group___runtime_object_1ga16a414bc273f61c5b494bbfeede47dc8/#lunaobject_retain_weak","text":"LUNA_RUNTIME_API ref_count_t object_retain_weak(object_t object_ptr) Increases the weak refernece counter value by one.","title":"Luna::object_retain_weak"},{"location":"api/group___runtime_object_1ga16a414bc273f61c5b494bbfeede47dc8/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_object_1ga16a414bc273f61c5b494bbfeede47dc8/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_object_1ga16a414bc273f61c5b494bbfeede47dc8/#object_ptr","text":"The object pointer.","title":"object_ptr"},{"location":"api/group___runtime_object_1ga16a414bc273f61c5b494bbfeede47dc8/#return-value","text":"Returns the weak reference counter value of the object after the operation.","title":"Return value"},{"location":"api/group___runtime_object_1ga16a414bc273f61c5b494bbfeede47dc8/#valid-usage","text":"object_ptr must points to one memory returned by object_alloc.","title":"Valid Usage"},{"location":"api/group___runtime_object_1ga316fa5c9dec593e4cab7782fd8e64463/","text":"Luna::register_boxed_type template <typename _Ty> typeinfo_t register_boxed_type() Registers one type so that it can be used for creating boxed objects. Overview This function only registers basic information for one type, it does not register properties, constructors and other information. Use register_struct_type if you want a type with full reflection info.","title":"Luna::register_boxed_type"},{"location":"api/group___runtime_object_1ga316fa5c9dec593e4cab7782fd8e64463/#lunaregister_boxed_type","text":"template <typename _Ty> typeinfo_t register_boxed_type() Registers one type so that it can be used for creating boxed objects.","title":"Luna::register_boxed_type"},{"location":"api/group___runtime_object_1ga316fa5c9dec593e4cab7782fd8e64463/#overview","text":"This function only registers basic information for one type, it does not register properties, constructors and other information. Use register_struct_type if you want a type with full reflection info.","title":"Overview"},{"location":"api/group___runtime_object_1ga4d287a1c3bd0821c2391f4613686e35a/","text":"Luna::object_t using object_t = opaque_t The opaque pointer that points to the boxed object.","title":"Luna::object_t"},{"location":"api/group___runtime_object_1ga4d287a1c3bd0821c2391f4613686e35a/#lunaobject_t","text":"using object_t = opaque_t The opaque pointer that points to the boxed object.","title":"Luna::object_t"},{"location":"api/group___runtime_object_1ga5f1ea1fdc9db2b3f2bc17d22acfda13f/","text":"Luna::object_expired LUNA_RUNTIME_API bool object_expired(object_t object_ptr) Checks if the boxed object is expired, that is, destructed but its memeory is not freed. Overview One object will be expired if its strong reference counter value drops 0, but its weak reference counter value is not 0. Parameters object_ptr The object pointer. Return value Returns true if the object is expired, returns false otherwise. Valid Usage object_ptr must points to one memory returned by object_alloc.","title":"Luna::object_expired"},{"location":"api/group___runtime_object_1ga5f1ea1fdc9db2b3f2bc17d22acfda13f/#lunaobject_expired","text":"LUNA_RUNTIME_API bool object_expired(object_t object_ptr) Checks if the boxed object is expired, that is, destructed but its memeory is not freed.","title":"Luna::object_expired"},{"location":"api/group___runtime_object_1ga5f1ea1fdc9db2b3f2bc17d22acfda13f/#overview","text":"One object will be expired if its strong reference counter value drops 0, but its weak reference counter value is not 0.","title":"Overview"},{"location":"api/group___runtime_object_1ga5f1ea1fdc9db2b3f2bc17d22acfda13f/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_object_1ga5f1ea1fdc9db2b3f2bc17d22acfda13f/#object_ptr","text":"The object pointer.","title":"object_ptr"},{"location":"api/group___runtime_object_1ga5f1ea1fdc9db2b3f2bc17d22acfda13f/#return-value","text":"Returns true if the object is expired, returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_object_1ga5f1ea1fdc9db2b3f2bc17d22acfda13f/#valid-usage","text":"object_ptr must points to one memory returned by object_alloc.","title":"Valid Usage"},{"location":"api/group___runtime_object_1ga68c6d4e3df6b4ac39a9963b13a438a3a/","text":"Luna::object_release_weak LUNA_RUNTIME_API ref_count_t object_release_weak(object_t object_ptr) Decreases the weak refernece counter value by one. Overview Parameters object_ptr The object pointer. Return value Returns the weak reference counter value of the object after the operation. Valid Usage object_ptr must points to one memory returned by object_alloc.","title":"Luna::object_release_weak"},{"location":"api/group___runtime_object_1ga68c6d4e3df6b4ac39a9963b13a438a3a/#lunaobject_release_weak","text":"LUNA_RUNTIME_API ref_count_t object_release_weak(object_t object_ptr) Decreases the weak refernece counter value by one.","title":"Luna::object_release_weak"},{"location":"api/group___runtime_object_1ga68c6d4e3df6b4ac39a9963b13a438a3a/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_object_1ga68c6d4e3df6b4ac39a9963b13a438a3a/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_object_1ga68c6d4e3df6b4ac39a9963b13a438a3a/#object_ptr","text":"The object pointer.","title":"object_ptr"},{"location":"api/group___runtime_object_1ga68c6d4e3df6b4ac39a9963b13a438a3a/#return-value","text":"Returns the weak reference counter value of the object after the operation.","title":"Return value"},{"location":"api/group___runtime_object_1ga68c6d4e3df6b4ac39a9963b13a438a3a/#valid-usage","text":"object_ptr must points to one memory returned by object_alloc.","title":"Valid Usage"},{"location":"api/group___runtime_object_1ga7693a4a4b103ca1bb0fa1e41ea795ce2/","text":"Luna::get_object_type LUNA_RUNTIME_API typeinfo_t get_object_type(object_t object_ptr) Gets the type object of the boxed object. Overview Parameters object_ptr The object pointer. Return value Returns the type object of the boxed object. Valid Usage object_ptr must points to one memory returned by object_alloc.","title":"Luna::get_object_type"},{"location":"api/group___runtime_object_1ga7693a4a4b103ca1bb0fa1e41ea795ce2/#lunaget_object_type","text":"LUNA_RUNTIME_API typeinfo_t get_object_type(object_t object_ptr) Gets the type object of the boxed object.","title":"Luna::get_object_type"},{"location":"api/group___runtime_object_1ga7693a4a4b103ca1bb0fa1e41ea795ce2/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_object_1ga7693a4a4b103ca1bb0fa1e41ea795ce2/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_object_1ga7693a4a4b103ca1bb0fa1e41ea795ce2/#object_ptr","text":"The object pointer.","title":"object_ptr"},{"location":"api/group___runtime_object_1ga7693a4a4b103ca1bb0fa1e41ea795ce2/#return-value","text":"Returns the type object of the boxed object.","title":"Return value"},{"location":"api/group___runtime_object_1ga7693a4a4b103ca1bb0fa1e41ea795ce2/#valid-usage","text":"object_ptr must points to one memory returned by object_alloc.","title":"Valid Usage"},{"location":"api/group___runtime_object_1ga841b0eea4b1450118695a1ea1e323e54/","text":"Luna::object_release LUNA_RUNTIME_API ref_count_t object_release(object_t object_ptr) Decreases the strong refernece counter value by one, and destroys the object if the reference counter drops to 0. Overview Parameters object_ptr The object pointer. Return value Returns the strong reference counter value of the object after the operation. Valid Usage object_ptr must points to one memory returned by object_alloc.","title":"Luna::object_release"},{"location":"api/group___runtime_object_1ga841b0eea4b1450118695a1ea1e323e54/#lunaobject_release","text":"LUNA_RUNTIME_API ref_count_t object_release(object_t object_ptr) Decreases the strong refernece counter value by one, and destroys the object if the reference counter drops to 0.","title":"Luna::object_release"},{"location":"api/group___runtime_object_1ga841b0eea4b1450118695a1ea1e323e54/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_object_1ga841b0eea4b1450118695a1ea1e323e54/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_object_1ga841b0eea4b1450118695a1ea1e323e54/#object_ptr","text":"The object pointer.","title":"object_ptr"},{"location":"api/group___runtime_object_1ga841b0eea4b1450118695a1ea1e323e54/#return-value","text":"Returns the strong reference counter value of the object after the operation.","title":"Return value"},{"location":"api/group___runtime_object_1ga841b0eea4b1450118695a1ea1e323e54/#valid-usage","text":"object_ptr must points to one memory returned by object_alloc.","title":"Valid Usage"},{"location":"api/group___runtime_object_1ga86ba8bb53caec919089287e4b89aa0b0/","text":"Luna::object_retain_if_not_expired LUNA_RUNTIME_API bool object_retain_if_not_expired(object_t object_ptr) Increases the strong refernece counter value by one if the boxed object is not expired. Overview This call is atomic and can be used to create strong references from weak references. Parameters object_ptr The object pointer. Return value Returns true if the object is valid and the strong reference counter value is successfully increased, returns false otherwise. Valid Usage object_ptr must points to one memory returned by object_alloc.","title":"Luna::object_retain_if_not_expired"},{"location":"api/group___runtime_object_1ga86ba8bb53caec919089287e4b89aa0b0/#lunaobject_retain_if_not_expired","text":"LUNA_RUNTIME_API bool object_retain_if_not_expired(object_t object_ptr) Increases the strong refernece counter value by one if the boxed object is not expired.","title":"Luna::object_retain_if_not_expired"},{"location":"api/group___runtime_object_1ga86ba8bb53caec919089287e4b89aa0b0/#overview","text":"This call is atomic and can be used to create strong references from weak references.","title":"Overview"},{"location":"api/group___runtime_object_1ga86ba8bb53caec919089287e4b89aa0b0/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_object_1ga86ba8bb53caec919089287e4b89aa0b0/#object_ptr","text":"The object pointer.","title":"object_ptr"},{"location":"api/group___runtime_object_1ga86ba8bb53caec919089287e4b89aa0b0/#return-value","text":"Returns true if the object is valid and the strong reference counter value is successfully increased, returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_object_1ga86ba8bb53caec919089287e4b89aa0b0/#valid-usage","text":"object_ptr must points to one memory returned by object_alloc.","title":"Valid Usage"},{"location":"api/group___runtime_object_1ga8ba411b5dc3e81b9d5c0283752e22b9e/","text":"Luna::object_alloc LUNA_RUNTIME_API object_t object_alloc(typeinfo_t type) Allocates one boxed object. Overview Parameters type The type of the object to allocate. Return value Returns one pointer to the allocated object. The returned object is not initialized, the user should call constructors of the type manually. The returned object has 1 strong reference and 0 weak reference.","title":"Luna::object_alloc"},{"location":"api/group___runtime_object_1ga8ba411b5dc3e81b9d5c0283752e22b9e/#lunaobject_alloc","text":"LUNA_RUNTIME_API object_t object_alloc(typeinfo_t type) Allocates one boxed object.","title":"Luna::object_alloc"},{"location":"api/group___runtime_object_1ga8ba411b5dc3e81b9d5c0283752e22b9e/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_object_1ga8ba411b5dc3e81b9d5c0283752e22b9e/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_object_1ga8ba411b5dc3e81b9d5c0283752e22b9e/#type","text":"The type of the object to allocate.","title":"type"},{"location":"api/group___runtime_object_1ga8ba411b5dc3e81b9d5c0283752e22b9e/#return-value","text":"Returns one pointer to the allocated object. The returned object is not initialized, the user should call constructors of the type manually. The returned object has 1 strong reference and 0 weak reference.","title":"Return value"},{"location":"api/group___runtime_object_1ga9b42ae46efc0d90e598a95e04187e5d8/","text":"Luna::cast_object template <typename _Rty> _Rty * cast_object(object_t object_ptr) Casts the object to the specified type. Overview Parameters object_ptr The object pointer. Return value Returns object_ptr casted to the specified type if type casting is succeeded, returns nullptr otherwise.","title":"Luna::cast_object"},{"location":"api/group___runtime_object_1ga9b42ae46efc0d90e598a95e04187e5d8/#lunacast_object","text":"template <typename _Rty> _Rty * cast_object(object_t object_ptr) Casts the object to the specified type.","title":"Luna::cast_object"},{"location":"api/group___runtime_object_1ga9b42ae46efc0d90e598a95e04187e5d8/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_object_1ga9b42ae46efc0d90e598a95e04187e5d8/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_object_1ga9b42ae46efc0d90e598a95e04187e5d8/#object_ptr","text":"The object pointer.","title":"object_ptr"},{"location":"api/group___runtime_object_1ga9b42ae46efc0d90e598a95e04187e5d8/#return-value","text":"Returns object_ptr casted to the specified type if type casting is succeeded, returns nullptr otherwise.","title":"Return value"},{"location":"api/group___runtime_object_1gaa7422c517659edae01f5701669e17b26/","text":"Luna::ref_count_t using ref_count_t = i32 The reference counter type for boxed objects.","title":"Luna::ref_count_t"},{"location":"api/group___runtime_object_1gaa7422c517659edae01f5701669e17b26/#lunaref_count_t","text":"using ref_count_t = i32 The reference counter type for boxed objects.","title":"Luna::ref_count_t"},{"location":"api/group___runtime_object_1gab006a9ca608307374757bc7d9bdd8c20/","text":"Luna::object_weak_ref_count LUNA_RUNTIME_API ref_count_t object_weak_ref_count(object_t object_ptr) Fetches the weak refernece counter value of the boxed object. Overview Parameters object_ptr The object pointer. Return value Returns the weak reference counter value of the object. Valid Usage object_ptr must points to one memory returned by object_alloc.","title":"Luna::object_weak_ref_count"},{"location":"api/group___runtime_object_1gab006a9ca608307374757bc7d9bdd8c20/#lunaobject_weak_ref_count","text":"LUNA_RUNTIME_API ref_count_t object_weak_ref_count(object_t object_ptr) Fetches the weak refernece counter value of the boxed object.","title":"Luna::object_weak_ref_count"},{"location":"api/group___runtime_object_1gab006a9ca608307374757bc7d9bdd8c20/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_object_1gab006a9ca608307374757bc7d9bdd8c20/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_object_1gab006a9ca608307374757bc7d9bdd8c20/#object_ptr","text":"The object pointer.","title":"object_ptr"},{"location":"api/group___runtime_object_1gab006a9ca608307374757bc7d9bdd8c20/#return-value","text":"Returns the weak reference counter value of the object.","title":"Return value"},{"location":"api/group___runtime_object_1gab006a9ca608307374757bc7d9bdd8c20/#valid-usage","text":"object_ptr must points to one memory returned by object_alloc.","title":"Valid Usage"},{"location":"api/group___runtime_object_1gabe23034b4be97972a3340bbc70165eb8/","text":"Luna::object_is_type LUNA_RUNTIME_API bool object_is_type(object_t object_ptr, typeinfo_t type) Checks whether the boxed object is the specified type or derived types of the specified type. Overview Parameters object_ptr The object pointer. Return value Returns true if the boxed object is the specified type or derived types of the specified type, returns false otherwise. Valid Usage object_ptr must points to one memory returned by object_alloc.","title":"Luna::object_is_type"},{"location":"api/group___runtime_object_1gabe23034b4be97972a3340bbc70165eb8/#lunaobject_is_type","text":"LUNA_RUNTIME_API bool object_is_type(object_t object_ptr, typeinfo_t type) Checks whether the boxed object is the specified type or derived types of the specified type.","title":"Luna::object_is_type"},{"location":"api/group___runtime_object_1gabe23034b4be97972a3340bbc70165eb8/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_object_1gabe23034b4be97972a3340bbc70165eb8/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_object_1gabe23034b4be97972a3340bbc70165eb8/#object_ptr","text":"The object pointer.","title":"object_ptr"},{"location":"api/group___runtime_object_1gabe23034b4be97972a3340bbc70165eb8/#return-value","text":"Returns true if the boxed object is the specified type or derived types of the specified type, returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_object_1gabe23034b4be97972a3340bbc70165eb8/#valid-usage","text":"object_ptr must points to one memory returned by object_alloc.","title":"Valid Usage"},{"location":"api/group___runtime_object_1gae913d9c4fe24b3ce1bde56cc32f11a26/","text":"Luna::object_ref_count LUNA_RUNTIME_API ref_count_t object_ref_count(object_t object_ptr) Fetches the strong refernece counter value of the boxed object. Overview Parameters object_ptr The object pointer. Return value Returns the strong reference counter value of the object. Valid Usage object_ptr must points to one memory returned by object_alloc.","title":"Luna::object_ref_count"},{"location":"api/group___runtime_object_1gae913d9c4fe24b3ce1bde56cc32f11a26/#lunaobject_ref_count","text":"LUNA_RUNTIME_API ref_count_t object_ref_count(object_t object_ptr) Fetches the strong refernece counter value of the boxed object.","title":"Luna::object_ref_count"},{"location":"api/group___runtime_object_1gae913d9c4fe24b3ce1bde56cc32f11a26/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_object_1gae913d9c4fe24b3ce1bde56cc32f11a26/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_object_1gae913d9c4fe24b3ce1bde56cc32f11a26/#object_ptr","text":"The object pointer.","title":"object_ptr"},{"location":"api/group___runtime_object_1gae913d9c4fe24b3ce1bde56cc32f11a26/#return-value","text":"Returns the strong reference counter value of the object.","title":"Return value"},{"location":"api/group___runtime_object_1gae913d9c4fe24b3ce1bde56cc32f11a26/#valid-usage","text":"object_ptr must points to one memory returned by object_alloc.","title":"Valid Usage"},{"location":"api/group___runtime_path_1ga00a24128882e98b365f16dabb5f847e0/","text":"Luna::path_type LUNA_RUNTIME_API typeinfo_t path_type() Gets the type object of Path . Overview Return value Returns the type object of Path .","title":"Luna::path_type"},{"location":"api/group___runtime_path_1ga00a24128882e98b365f16dabb5f847e0/#lunapath_type","text":"LUNA_RUNTIME_API typeinfo_t path_type() Gets the type object of Path .","title":"Luna::path_type"},{"location":"api/group___runtime_path_1ga00a24128882e98b365f16dabb5f847e0/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_path_1ga00a24128882e98b365f16dabb5f847e0/#return-value","text":"Returns the type object of Path .","title":"Return value"},{"location":"api/group___runtime_profiler_1ga0c06788b2e5c93818d402bae7a237aa6/","text":"Luna::allocate_profiler_event_data LUNA_RUNTIME_API void * allocate_profiler_event_data(usize size, usize alignment, void(*dtor)(void *)=nullptr) Allocates one temporary buffer that can be used to store event data for the next profiler event. Overview Parameters size The size to allocate in bytes. alignment The alignment requirement of the allocated memory in bytes. This can be 0 , indicating that no alignment requirement is specified. dtor The function that will be called when the memory is going to be freed. This can be nullptr , indicating that no operation is performed before freeing memory. Return value Returns the allocated memory. Valid Usage If alignment is not 0 , alignment must be power of 2 (like 4, 8, 16, etc.).","title":"Luna::allocate_profiler_event_data"},{"location":"api/group___runtime_profiler_1ga0c06788b2e5c93818d402bae7a237aa6/#lunaallocate_profiler_event_data","text":"LUNA_RUNTIME_API void * allocate_profiler_event_data(usize size, usize alignment, void(*dtor)(void *)=nullptr) Allocates one temporary buffer that can be used to store event data for the next profiler event.","title":"Luna::allocate_profiler_event_data"},{"location":"api/group___runtime_profiler_1ga0c06788b2e5c93818d402bae7a237aa6/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_profiler_1ga0c06788b2e5c93818d402bae7a237aa6/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_profiler_1ga0c06788b2e5c93818d402bae7a237aa6/#size","text":"The size to allocate in bytes.","title":"size"},{"location":"api/group___runtime_profiler_1ga0c06788b2e5c93818d402bae7a237aa6/#alignment","text":"The alignment requirement of the allocated memory in bytes. This can be 0 , indicating that no alignment requirement is specified.","title":"alignment"},{"location":"api/group___runtime_profiler_1ga0c06788b2e5c93818d402bae7a237aa6/#dtor","text":"The function that will be called when the memory is going to be freed. This can be nullptr , indicating that no operation is performed before freeing memory.","title":"dtor"},{"location":"api/group___runtime_profiler_1ga0c06788b2e5c93818d402bae7a237aa6/#return-value","text":"Returns the allocated memory.","title":"Return value"},{"location":"api/group___runtime_profiler_1ga0c06788b2e5c93818d402bae7a237aa6/#valid-usage","text":"If alignment is not 0 , alignment must be power of 2 (like 4, 8, 16, etc.).","title":"Valid Usage"},{"location":"api/group___runtime_profiler_1ga0cbbf2ad299628457df57c5ab086d1b5/","text":"Luna::register_profiler_callback LUNA_RUNTIME_API usize register_profiler_callback(const Function< on_profiler_event_t > &handler) Registers one profiler callback function. Overview Parameters handler The callback function object to register. Return value Returns one handle that can be used to unregister the callback function.","title":"Luna::register_profiler_callback"},{"location":"api/group___runtime_profiler_1ga0cbbf2ad299628457df57c5ab086d1b5/#lunaregister_profiler_callback","text":"LUNA_RUNTIME_API usize register_profiler_callback(const Function< on_profiler_event_t > &handler) Registers one profiler callback function.","title":"Luna::register_profiler_callback"},{"location":"api/group___runtime_profiler_1ga0cbbf2ad299628457df57c5ab086d1b5/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_profiler_1ga0cbbf2ad299628457df57c5ab086d1b5/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_profiler_1ga0cbbf2ad299628457df57c5ab086d1b5/#handler","text":"The callback function object to register.","title":"handler"},{"location":"api/group___runtime_profiler_1ga0cbbf2ad299628457df57c5ab086d1b5/#return-value","text":"Returns one handle that can be used to unregister the callback function.","title":"Return value"},{"location":"api/group___runtime_profiler_1ga484ebdca3d68138f5bf05b13bc2e67c9/","text":"Luna::memory_profiler_deallocate LUNA_RUNTIME_API void memory_profiler_deallocate(void *ptr) Emits one PROFILER_EVENT_ID_MEMORY_DEALLOCATE profiler event. Overview Parameters ptr The registered memory pointer.","title":"Luna::memory_profiler_deallocate"},{"location":"api/group___runtime_profiler_1ga484ebdca3d68138f5bf05b13bc2e67c9/#lunamemory_profiler_deallocate","text":"LUNA_RUNTIME_API void memory_profiler_deallocate(void *ptr) Emits one PROFILER_EVENT_ID_MEMORY_DEALLOCATE profiler event.","title":"Luna::memory_profiler_deallocate"},{"location":"api/group___runtime_profiler_1ga484ebdca3d68138f5bf05b13bc2e67c9/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_profiler_1ga484ebdca3d68138f5bf05b13bc2e67c9/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_profiler_1ga484ebdca3d68138f5bf05b13bc2e67c9/#ptr","text":"The registered memory pointer.","title":"ptr"},{"location":"api/group___runtime_profiler_1ga48f319dc9914aa2adce844ea385d28f5/","text":"Luna::memory_profiler_set_memory_domain LUNA_RUNTIME_API void memory_profiler_set_memory_domain(void *ptr, const c8 *domain, usize str_size=USIZE_MAX) Sets the memory domain. Overview The memory domain is usually the heap or pool that allocates this memory block. This function emits one PROFILER_EVENT_ID_SET_MEMORY_DOMAIN profiler event. Parameters ptr The memory block pointer. domain The domain name for the memory block. str_size The size of the name, not including the null terminator. If this is USIZE_MAX , the size is determined by the system using strlen.","title":"Luna::memory_profiler_set_memory_domain"},{"location":"api/group___runtime_profiler_1ga48f319dc9914aa2adce844ea385d28f5/#lunamemory_profiler_set_memory_domain","text":"LUNA_RUNTIME_API void memory_profiler_set_memory_domain(void *ptr, const c8 *domain, usize str_size=USIZE_MAX) Sets the memory domain.","title":"Luna::memory_profiler_set_memory_domain"},{"location":"api/group___runtime_profiler_1ga48f319dc9914aa2adce844ea385d28f5/#overview","text":"The memory domain is usually the heap or pool that allocates this memory block. This function emits one PROFILER_EVENT_ID_SET_MEMORY_DOMAIN profiler event.","title":"Overview"},{"location":"api/group___runtime_profiler_1ga48f319dc9914aa2adce844ea385d28f5/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_profiler_1ga48f319dc9914aa2adce844ea385d28f5/#ptr","text":"The memory block pointer.","title":"ptr"},{"location":"api/group___runtime_profiler_1ga48f319dc9914aa2adce844ea385d28f5/#domain","text":"The domain name for the memory block.","title":"domain"},{"location":"api/group___runtime_profiler_1ga48f319dc9914aa2adce844ea385d28f5/#str_size","text":"The size of the name, not including the null terminator. If this is USIZE_MAX , the size is determined by the system using strlen.","title":"str_size"},{"location":"api/group___runtime_profiler_1ga4f66b7d3d7446ab9831db2b85650fed9/","text":"Luna::memory_profiler_allocate LUNA_RUNTIME_API void memory_profiler_allocate(void *ptr, usize size) Emits one PROFILER_EVENT_ID_MEMORY_ALLOCATE profiler event. Overview Parameters ptr The pointer that represents the memory. This pointer is used only for identifing the memory block, it may not be the real memory address of the memory block, but must be unique in the application domain. size The size of the memory block, in bytes.","title":"Luna::memory_profiler_allocate"},{"location":"api/group___runtime_profiler_1ga4f66b7d3d7446ab9831db2b85650fed9/#lunamemory_profiler_allocate","text":"LUNA_RUNTIME_API void memory_profiler_allocate(void *ptr, usize size) Emits one PROFILER_EVENT_ID_MEMORY_ALLOCATE profiler event.","title":"Luna::memory_profiler_allocate"},{"location":"api/group___runtime_profiler_1ga4f66b7d3d7446ab9831db2b85650fed9/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_profiler_1ga4f66b7d3d7446ab9831db2b85650fed9/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_profiler_1ga4f66b7d3d7446ab9831db2b85650fed9/#ptr","text":"The pointer that represents the memory. This pointer is used only for identifing the memory block, it may not be the real memory address of the memory block, but must be unique in the application domain.","title":"ptr"},{"location":"api/group___runtime_profiler_1ga4f66b7d3d7446ab9831db2b85650fed9/#size","text":"The size of the memory block, in bytes.","title":"size"},{"location":"api/group___runtime_profiler_1ga70a0f39db69fda4df489d3f375665d1c/","text":"Luna::memory_profiler_set_memory_name LUNA_RUNTIME_API void memory_profiler_set_memory_name(void *ptr, const c8 *name, usize str_size=USIZE_MAX) Sets a debug name for the memory block, for example, the name of the resource file this memory block is allocated for. This function emits one PROFILER_EVENT_ID_SET_MEMORY_NAME profiler event. Overview Parameters ptr The memory block pointer. name The debug name for the memory block. str_size The size of the name, not including the null terminator. If this is USIZE_MAX , the size is determined by the system using strlen.","title":"Luna::memory_profiler_set_memory_name"},{"location":"api/group___runtime_profiler_1ga70a0f39db69fda4df489d3f375665d1c/#lunamemory_profiler_set_memory_name","text":"LUNA_RUNTIME_API void memory_profiler_set_memory_name(void *ptr, const c8 *name, usize str_size=USIZE_MAX) Sets a debug name for the memory block, for example, the name of the resource file this memory block is allocated for. This function emits one PROFILER_EVENT_ID_SET_MEMORY_NAME profiler event.","title":"Luna::memory_profiler_set_memory_name"},{"location":"api/group___runtime_profiler_1ga70a0f39db69fda4df489d3f375665d1c/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_profiler_1ga70a0f39db69fda4df489d3f375665d1c/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_profiler_1ga70a0f39db69fda4df489d3f375665d1c/#ptr","text":"The memory block pointer.","title":"ptr"},{"location":"api/group___runtime_profiler_1ga70a0f39db69fda4df489d3f375665d1c/#name","text":"The debug name for the memory block.","title":"name"},{"location":"api/group___runtime_profiler_1ga70a0f39db69fda4df489d3f375665d1c/#str_size","text":"The size of the name, not including the null terminator. If this is USIZE_MAX , the size is determined by the system using strlen.","title":"str_size"},{"location":"api/group___runtime_profiler_1ga96c6c6b48e4693f93f9a032c8e8bf24d/","text":"Luna::unregister_profiler_callback LUNA_RUNTIME_API void unregister_profiler_callback(usize handler_id) Unregisters one profiler callback function. Overview Parameters handler_id The handler that returned by register_profiler_callback for the callback function to unregister.","title":"Luna::unregister_profiler_callback"},{"location":"api/group___runtime_profiler_1ga96c6c6b48e4693f93f9a032c8e8bf24d/#lunaunregister_profiler_callback","text":"LUNA_RUNTIME_API void unregister_profiler_callback(usize handler_id) Unregisters one profiler callback function.","title":"Luna::unregister_profiler_callback"},{"location":"api/group___runtime_profiler_1ga96c6c6b48e4693f93f9a032c8e8bf24d/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_profiler_1ga96c6c6b48e4693f93f9a032c8e8bf24d/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_profiler_1ga96c6c6b48e4693f93f9a032c8e8bf24d/#handler_id","text":"The handler that returned by register_profiler_callback for the callback function to unregister.","title":"handler_id"},{"location":"api/group___runtime_profiler_1gaacde50ed0a5efd0e07c4cbb079ee9cf0/","text":"Luna::profiler_event_data_dtor template <typename _Ty> void profiler_event_data_dtor(void *data) One helper function that calls the destructor of the specified type on the pointer. Overview Parameters data The pointer to the object to be destructed.","title":"Luna::profiler_event_data_dtor"},{"location":"api/group___runtime_profiler_1gaacde50ed0a5efd0e07c4cbb079ee9cf0/#lunaprofiler_event_data_dtor","text":"template <typename _Ty> void profiler_event_data_dtor(void *data) One helper function that calls the destructor of the specified type on the pointer.","title":"Luna::profiler_event_data_dtor"},{"location":"api/group___runtime_profiler_1gaacde50ed0a5efd0e07c4cbb079ee9cf0/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_profiler_1gaacde50ed0a5efd0e07c4cbb079ee9cf0/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_profiler_1gaacde50ed0a5efd0e07c4cbb079ee9cf0/#data","text":"The pointer to the object to be destructed.","title":"data"},{"location":"api/group___runtime_profiler_1gac1c18a61488c579ee7e57689a00066f6/","text":"Luna::submit_profiler_event LUNA_RUNTIME_API void submit_profiler_event(u64 event_id) Submits one profiler event. Overview Parameters event_id The ID of the event to set.","title":"Luna::submit_profiler_event"},{"location":"api/group___runtime_profiler_1gac1c18a61488c579ee7e57689a00066f6/#lunasubmit_profiler_event","text":"LUNA_RUNTIME_API void submit_profiler_event(u64 event_id) Submits one profiler event.","title":"Luna::submit_profiler_event"},{"location":"api/group___runtime_profiler_1gac1c18a61488c579ee7e57689a00066f6/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_profiler_1gac1c18a61488c579ee7e57689a00066f6/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_profiler_1gac1c18a61488c579ee7e57689a00066f6/#event_id","text":"The ID of the event to set.","title":"event_id"},{"location":"api/group___runtime_profiler_1gae66e344319da2dbb8550975d289d5d08/","text":"Luna::memory_profiler_set_memory_type LUNA_RUNTIME_API void memory_profiler_set_memory_type(void *ptr, const c8 *type, usize str_size=USIZE_MAX) Sets the type of the object this memory block. Overview Parameters ptr The memory block pointer. domain The type name for the memory block. str_size The size of the name, not including the null terminator. If this is USIZE_MAX , the size is determined by the system using strlen.","title":"Luna::memory_profiler_set_memory_type"},{"location":"api/group___runtime_profiler_1gae66e344319da2dbb8550975d289d5d08/#lunamemory_profiler_set_memory_type","text":"LUNA_RUNTIME_API void memory_profiler_set_memory_type(void *ptr, const c8 *type, usize str_size=USIZE_MAX) Sets the type of the object this memory block.","title":"Luna::memory_profiler_set_memory_type"},{"location":"api/group___runtime_profiler_1gae66e344319da2dbb8550975d289d5d08/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_profiler_1gae66e344319da2dbb8550975d289d5d08/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_profiler_1gae66e344319da2dbb8550975d289d5d08/#ptr","text":"The memory block pointer.","title":"ptr"},{"location":"api/group___runtime_profiler_1gae66e344319da2dbb8550975d289d5d08/#domain","text":"The type name for the memory block.","title":"domain"},{"location":"api/group___runtime_profiler_1gae66e344319da2dbb8550975d289d5d08/#str_size","text":"The size of the name, not including the null terminator. If this is USIZE_MAX , the size is determined by the system using strlen.","title":"str_size"},{"location":"api/group___runtime_profiler_1gaef867b156feb1c7ad417885ee9bc0a76/","text":"Luna::allocate_profiler_event_data template <typename _Ty> _Ty * allocate_profiler_event_data() Allocates one temporary object that can be used to store event data for the next profiler event. Overview This function uses the specified type to provide size, alignment and destructor for the memory. Return value Returns the allocated object. The returned object is not initialized, the user should call new (ptr) _Ty(...) to initialize the object manually.","title":"Luna::allocate_profiler_event_data"},{"location":"api/group___runtime_profiler_1gaef867b156feb1c7ad417885ee9bc0a76/#lunaallocate_profiler_event_data","text":"template <typename _Ty> _Ty * allocate_profiler_event_data() Allocates one temporary object that can be used to store event data for the next profiler event.","title":"Luna::allocate_profiler_event_data"},{"location":"api/group___runtime_profiler_1gaef867b156feb1c7ad417885ee9bc0a76/#overview","text":"This function uses the specified type to provide size, alignment and destructor for the memory.","title":"Overview"},{"location":"api/group___runtime_profiler_1gaef867b156feb1c7ad417885ee9bc0a76/#return-value","text":"Returns the allocated object. The returned object is not initialized, the user should call new (ptr) _Ty(...) to initialize the object manually.","title":"Return value"},{"location":"api/group___runtime_random_1ga07d57e0ba5cd801af251cf05d959b8dc/","text":"Luna::random_f32 LUNA_RUNTIME_API f32 random_f32(f32 range_begin, f32 range_end) Generates one random 32-bit floating-point number. Overview Parameters range_begin The minimum number that will be generated. range_end The maximum number that will be generated. Return value Returns the generated number in range [ range_begin , range_end ].","title":"Luna::random_f32"},{"location":"api/group___runtime_random_1ga07d57e0ba5cd801af251cf05d959b8dc/#lunarandom_f32","text":"LUNA_RUNTIME_API f32 random_f32(f32 range_begin, f32 range_end) Generates one random 32-bit floating-point number.","title":"Luna::random_f32"},{"location":"api/group___runtime_random_1ga07d57e0ba5cd801af251cf05d959b8dc/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_random_1ga07d57e0ba5cd801af251cf05d959b8dc/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_random_1ga07d57e0ba5cd801af251cf05d959b8dc/#range_begin","text":"The minimum number that will be generated.","title":"range_begin"},{"location":"api/group___runtime_random_1ga07d57e0ba5cd801af251cf05d959b8dc/#range_end","text":"The maximum number that will be generated.","title":"range_end"},{"location":"api/group___runtime_random_1ga07d57e0ba5cd801af251cf05d959b8dc/#return-value","text":"Returns the generated number in range [ range_begin , range_end ].","title":"Return value"},{"location":"api/group___runtime_random_1ga12bb86126a98fb8e8dc04bde9bf95d8e/","text":"Luna::random_f64 LUNA_RUNTIME_API f64 random_f64(f64 range_begin, f64 range_end) Generates one random 64-bit floating-point number. Overview Parameters range_begin The minimum number that will be generated. range_end The maximum number that will be generated. Return value Returns the generated number in range [ range_begin , range_end ].","title":"Luna::random_f64"},{"location":"api/group___runtime_random_1ga12bb86126a98fb8e8dc04bde9bf95d8e/#lunarandom_f64","text":"LUNA_RUNTIME_API f64 random_f64(f64 range_begin, f64 range_end) Generates one random 64-bit floating-point number.","title":"Luna::random_f64"},{"location":"api/group___runtime_random_1ga12bb86126a98fb8e8dc04bde9bf95d8e/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_random_1ga12bb86126a98fb8e8dc04bde9bf95d8e/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_random_1ga12bb86126a98fb8e8dc04bde9bf95d8e/#range_begin","text":"The minimum number that will be generated.","title":"range_begin"},{"location":"api/group___runtime_random_1ga12bb86126a98fb8e8dc04bde9bf95d8e/#range_end","text":"The maximum number that will be generated.","title":"range_end"},{"location":"api/group___runtime_random_1ga12bb86126a98fb8e8dc04bde9bf95d8e/#return-value","text":"Returns the generated number in range [ range_begin , range_end ].","title":"Return value"},{"location":"api/group___runtime_random_1ga5a3e2c7c5d4754828dcd69803d678c6f/","text":"Luna::random_i32 LUNA_RUNTIME_API i32 random_i32() Generates one random 32-bit signed integer. Overview Return value Returns the generated number.","title":"Luna::random_i32"},{"location":"api/group___runtime_random_1ga5a3e2c7c5d4754828dcd69803d678c6f/#lunarandom_i32","text":"LUNA_RUNTIME_API i32 random_i32() Generates one random 32-bit signed integer.","title":"Luna::random_i32"},{"location":"api/group___runtime_random_1ga5a3e2c7c5d4754828dcd69803d678c6f/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_random_1ga5a3e2c7c5d4754828dcd69803d678c6f/#return-value","text":"Returns the generated number.","title":"Return value"},{"location":"api/group___runtime_random_1ga67e0bcc2efe657e1b7ffa27e55efc9f0/","text":"Luna::random_u32 LUNA_RUNTIME_API u32 random_u32() Generates one random 32-bit unsigned integer. Overview Return value Returns the generated number.","title":"Luna::random_u32"},{"location":"api/group___runtime_random_1ga67e0bcc2efe657e1b7ffa27e55efc9f0/#lunarandom_u32","text":"LUNA_RUNTIME_API u32 random_u32() Generates one random 32-bit unsigned integer.","title":"Luna::random_u32"},{"location":"api/group___runtime_random_1ga67e0bcc2efe657e1b7ffa27e55efc9f0/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_random_1ga67e0bcc2efe657e1b7ffa27e55efc9f0/#return-value","text":"Returns the generated number.","title":"Return value"},{"location":"api/group___runtime_random_1ga7606d672c0477b082073992a18f45f58/","text":"Luna::random_guid LUNA_RUNTIME_API Guid random_guid() Generates one random GUID (Globally Unique Identifier). Overview Return value Returns the generated GUID.","title":"Luna::random_guid"},{"location":"api/group___runtime_random_1ga7606d672c0477b082073992a18f45f58/#lunarandom_guid","text":"LUNA_RUNTIME_API Guid random_guid() Generates one random GUID (Globally Unique Identifier).","title":"Luna::random_guid"},{"location":"api/group___runtime_random_1ga7606d672c0477b082073992a18f45f58/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_random_1ga7606d672c0477b082073992a18f45f58/#return-value","text":"Returns the generated GUID.","title":"Return value"},{"location":"api/group___runtime_random_1ga9a7d9d45aff083affc98b9e960ed4617/","text":"Luna::random_i64 LUNA_RUNTIME_API i64 random_i64() Generates one random 64-bit signed integer. Overview Return value Returns the generated number.","title":"Luna::random_i64"},{"location":"api/group___runtime_random_1ga9a7d9d45aff083affc98b9e960ed4617/#lunarandom_i64","text":"LUNA_RUNTIME_API i64 random_i64() Generates one random 64-bit signed integer.","title":"Luna::random_i64"},{"location":"api/group___runtime_random_1ga9a7d9d45aff083affc98b9e960ed4617/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_random_1ga9a7d9d45aff083affc98b9e960ed4617/#return-value","text":"Returns the generated number.","title":"Return value"},{"location":"api/group___runtime_random_1ga9ef63fee76504d9ec1c31b5a042e5a43/","text":"Luna::new_random_number_generator LUNA_RUNTIME_API Ref< IRandom > new_random_number_generator(u32 initial_seed) Creates one new random number generator. Overview Parameters initial_seed The initial seed for the generator. Return value Returns the created random number generator.","title":"Luna::new_random_number_generator"},{"location":"api/group___runtime_random_1ga9ef63fee76504d9ec1c31b5a042e5a43/#lunanew_random_number_generator","text":"LUNA_RUNTIME_API Ref< IRandom > new_random_number_generator(u32 initial_seed) Creates one new random number generator.","title":"Luna::new_random_number_generator"},{"location":"api/group___runtime_random_1ga9ef63fee76504d9ec1c31b5a042e5a43/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_random_1ga9ef63fee76504d9ec1c31b5a042e5a43/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_random_1ga9ef63fee76504d9ec1c31b5a042e5a43/#initial_seed","text":"The initial seed for the generator.","title":"initial_seed"},{"location":"api/group___runtime_random_1ga9ef63fee76504d9ec1c31b5a042e5a43/#return-value","text":"Returns the created random number generator.","title":"Return value"},{"location":"api/group___runtime_random_1gae9f4c4338b72774b2db57a40e4583dd5/","text":"Luna::random_u64 LUNA_RUNTIME_API u64 random_u64() Generates one random 64-bit unsigned integer. Overview Return value Returns the generated number.","title":"Luna::random_u64"},{"location":"api/group___runtime_random_1gae9f4c4338b72774b2db57a40e4583dd5/#lunarandom_u64","text":"LUNA_RUNTIME_API u64 random_u64() Generates one random 64-bit unsigned integer.","title":"Luna::random_u64"},{"location":"api/group___runtime_random_1gae9f4c4338b72774b2db57a40e4583dd5/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_random_1gae9f4c4338b72774b2db57a40e4583dd5/#return-value","text":"Returns the generated number.","title":"Return value"},{"location":"api/group___runtime_thread_1ga03c08e87246f2dc76f18f1645c9e734d/","text":"Luna::new_read_write_lock LUNA_RUNTIME_API Ref< IReadWriteLock > new_read_write_lock() Creates one new read write lock. Overview Return value Returns the created read write lock.","title":"Luna::new_read_write_lock"},{"location":"api/group___runtime_thread_1ga03c08e87246f2dc76f18f1645c9e734d/#lunanew_read_write_lock","text":"LUNA_RUNTIME_API Ref< IReadWriteLock > new_read_write_lock() Creates one new read write lock.","title":"Luna::new_read_write_lock"},{"location":"api/group___runtime_thread_1ga03c08e87246f2dc76f18f1645c9e734d/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_thread_1ga03c08e87246f2dc76f18f1645c9e734d/#return-value","text":"Returns the created read write lock.","title":"Return value"},{"location":"api/group___runtime_thread_1ga11420d821a7729b18412dae6d9e7152b/","text":"Luna::fast_sleep LUNA_RUNTIME_API void fast_sleep(u32 time_microseconds) Delays the execution of this thread for a very shout time by yielding this thread several times. Overview This is more accurate to sleep method and will not suspend current thread unless the specified time is larger than several milliseconds. Parameters time_microseconds The time, in microseconds, that this thread needs to delay.","title":"Luna::fast_sleep"},{"location":"api/group___runtime_thread_1ga11420d821a7729b18412dae6d9e7152b/#lunafast_sleep","text":"LUNA_RUNTIME_API void fast_sleep(u32 time_microseconds) Delays the execution of this thread for a very shout time by yielding this thread several times.","title":"Luna::fast_sleep"},{"location":"api/group___runtime_thread_1ga11420d821a7729b18412dae6d9e7152b/#overview","text":"This is more accurate to sleep method and will not suspend current thread unless the specified time is larger than several milliseconds.","title":"Overview"},{"location":"api/group___runtime_thread_1ga11420d821a7729b18412dae6d9e7152b/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_thread_1ga11420d821a7729b18412dae6d9e7152b/#time_microseconds","text":"The time, in microseconds, that this thread needs to delay.","title":"time_microseconds"},{"location":"api/group___runtime_thread_1ga1437d8723b57ea809873c0c575eb3bc2/","text":"Luna::get_processors_count LUNA_RUNTIME_API u32 get_processors_count() Gets the number of logical processors on the platform. Overview Return value Returns the number of logical processors on the platform. On hyper-thread machines (Intel/AMD), the number of processors returned will be two times of the physical cores of the CPU.","title":"Luna::get_processors_count"},{"location":"api/group___runtime_thread_1ga1437d8723b57ea809873c0c575eb3bc2/#lunaget_processors_count","text":"LUNA_RUNTIME_API u32 get_processors_count() Gets the number of logical processors on the platform.","title":"Luna::get_processors_count"},{"location":"api/group___runtime_thread_1ga1437d8723b57ea809873c0c575eb3bc2/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_thread_1ga1437d8723b57ea809873c0c575eb3bc2/#return-value","text":"Returns the number of logical processors on the platform. On hyper-thread machines (Intel/AMD), the number of processors returned will be two times of the physical cores of the CPU.","title":"Return value"},{"location":"api/group___runtime_thread_1ga18a1eaf3fc4ff341726a06d62c2d1eb5/","text":"Luna::get_current_thread LUNA_RUNTIME_API IThread * get_current_thread() Gets the thread object of current running thread. Overview Return value The thread object of the current thread.","title":"Luna::get_current_thread"},{"location":"api/group___runtime_thread_1ga18a1eaf3fc4ff341726a06d62c2d1eb5/#lunaget_current_thread","text":"LUNA_RUNTIME_API IThread * get_current_thread() Gets the thread object of current running thread.","title":"Luna::get_current_thread"},{"location":"api/group___runtime_thread_1ga18a1eaf3fc4ff341726a06d62c2d1eb5/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_thread_1ga18a1eaf3fc4ff341726a06d62c2d1eb5/#return-value","text":"The thread object of the current thread.","title":"Return value"},{"location":"api/group___runtime_thread_1ga381ac43407ca733426c3a3ce19640900/","text":"Luna::tls_set LUNA_RUNTIME_API void tls_set(opaque_t handle, void *ptr) Set the data bound to the current thread's TLS slot specified by handle . Overview Parameters handle The handle of the slot specified. The handle must be allocated first by tls_alloc . ptr The pointer value to set to this slot.","title":"Luna::tls_set"},{"location":"api/group___runtime_thread_1ga381ac43407ca733426c3a3ce19640900/#lunatls_set","text":"LUNA_RUNTIME_API void tls_set(opaque_t handle, void *ptr) Set the data bound to the current thread's TLS slot specified by handle .","title":"Luna::tls_set"},{"location":"api/group___runtime_thread_1ga381ac43407ca733426c3a3ce19640900/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_thread_1ga381ac43407ca733426c3a3ce19640900/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_thread_1ga381ac43407ca733426c3a3ce19640900/#handle","text":"The handle of the slot specified. The handle must be allocated first by tls_alloc .","title":"handle"},{"location":"api/group___runtime_thread_1ga381ac43407ca733426c3a3ce19640900/#ptr","text":"The pointer value to set to this slot.","title":"ptr"},{"location":"api/group___runtime_thread_1ga587d506e50d89f1dbd3eb50a1d9823b8/","text":"Luna::new_thread LUNA_RUNTIME_API Ref< IThread > new_thread(void(*entry_func)(void *params), void *params, const c8 *name=nullptr, u32 stack_size=0) Create a new system thread and make it run the callback function. The thread will be closed when the callback function returns. Overview Parameters entry_func The function to invoke by the new thread. params The additional parameter passed to the callback. name The name of the thread. This is usually for debug purpose. stack_size The stack size for new thread's call stack. Return value Returns an interface representing the new created thread.","title":"Luna::new_thread"},{"location":"api/group___runtime_thread_1ga587d506e50d89f1dbd3eb50a1d9823b8/#lunanew_thread","text":"LUNA_RUNTIME_API Ref< IThread > new_thread(void(*entry_func)(void *params), void *params, const c8 *name=nullptr, u32 stack_size=0) Create a new system thread and make it run the callback function. The thread will be closed when the callback function returns.","title":"Luna::new_thread"},{"location":"api/group___runtime_thread_1ga587d506e50d89f1dbd3eb50a1d9823b8/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_thread_1ga587d506e50d89f1dbd3eb50a1d9823b8/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_thread_1ga587d506e50d89f1dbd3eb50a1d9823b8/#entry_func","text":"The function to invoke by the new thread.","title":"entry_func"},{"location":"api/group___runtime_thread_1ga587d506e50d89f1dbd3eb50a1d9823b8/#params","text":"The additional parameter passed to the callback.","title":"params"},{"location":"api/group___runtime_thread_1ga587d506e50d89f1dbd3eb50a1d9823b8/#name","text":"The name of the thread. This is usually for debug purpose.","title":"name"},{"location":"api/group___runtime_thread_1ga587d506e50d89f1dbd3eb50a1d9823b8/#stack_size","text":"The stack size for new thread's call stack.","title":"stack_size"},{"location":"api/group___runtime_thread_1ga587d506e50d89f1dbd3eb50a1d9823b8/#return-value","text":"Returns an interface representing the new created thread.","title":"Return value"},{"location":"api/group___runtime_thread_1ga6597acf90d9ec80a6195bf673e994174/","text":"Luna::tls_get LUNA_RUNTIME_API void * tls_get(opaque_t handle) Get the value bound to the TLS slot of current thread. Overview Parameters handle The handle of the slot to query. Return value Returns the pointer set, or nullptr if no pointer is set to this slot.","title":"Luna::tls_get"},{"location":"api/group___runtime_thread_1ga6597acf90d9ec80a6195bf673e994174/#lunatls_get","text":"LUNA_RUNTIME_API void * tls_get(opaque_t handle) Get the value bound to the TLS slot of current thread.","title":"Luna::tls_get"},{"location":"api/group___runtime_thread_1ga6597acf90d9ec80a6195bf673e994174/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_thread_1ga6597acf90d9ec80a6195bf673e994174/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_thread_1ga6597acf90d9ec80a6195bf673e994174/#handle","text":"The handle of the slot to query.","title":"handle"},{"location":"api/group___runtime_thread_1ga6597acf90d9ec80a6195bf673e994174/#return-value","text":"Returns the pointer set, or nullptr if no pointer is set to this slot.","title":"Return value"},{"location":"api/group___runtime_thread_1ga6b6c4e321ee1494761c429fbcb34ecc5/","text":"Luna::tls_free LUNA_RUNTIME_API void tls_free(opaque_t handle) Frees the TLS slot allocated by tls_alloc . Overview The handle will be invalid after this call and the pointer stored for every thread will be discarded. Make sure to free all resources bound to the specified slot manually before calling this, or they will never be freed. Parameters handle The handle returned by tls_alloc .","title":"Luna::tls_free"},{"location":"api/group___runtime_thread_1ga6b6c4e321ee1494761c429fbcb34ecc5/#lunatls_free","text":"LUNA_RUNTIME_API void tls_free(opaque_t handle) Frees the TLS slot allocated by tls_alloc .","title":"Luna::tls_free"},{"location":"api/group___runtime_thread_1ga6b6c4e321ee1494761c429fbcb34ecc5/#overview","text":"The handle will be invalid after this call and the pointer stored for every thread will be discarded. Make sure to free all resources bound to the specified slot manually before calling this, or they will never be freed.","title":"Overview"},{"location":"api/group___runtime_thread_1ga6b6c4e321ee1494761c429fbcb34ecc5/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_thread_1ga6b6c4e321ee1494761c429fbcb34ecc5/#handle","text":"The handle returned by tls_alloc .","title":"handle"},{"location":"api/group___runtime_thread_1ga89646b80a87875a1678378af7041450f/","text":"Luna::new_signal LUNA_RUNTIME_API Ref< ISignal > new_signal(bool manual_reset) Create a new signal object. Overview Parameters manual_reset If we need to manually reset the trigger state of the signal object. If set to false , the signal will be automatically reset to not triggered state when a single thread that waiting for this signal is passed. If set to true , user needs to manually reset the state by calling ISignal::reset. Return value Returns the new created signal object.","title":"Luna::new_signal"},{"location":"api/group___runtime_thread_1ga89646b80a87875a1678378af7041450f/#lunanew_signal","text":"LUNA_RUNTIME_API Ref< ISignal > new_signal(bool manual_reset) Create a new signal object.","title":"Luna::new_signal"},{"location":"api/group___runtime_thread_1ga89646b80a87875a1678378af7041450f/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_thread_1ga89646b80a87875a1678378af7041450f/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_thread_1ga89646b80a87875a1678378af7041450f/#manual_reset","text":"If we need to manually reset the trigger state of the signal object. If set to false , the signal will be automatically reset to not triggered state when a single thread that waiting for this signal is passed. If set to true , user needs to manually reset the state by calling ISignal::reset.","title":"manual_reset"},{"location":"api/group___runtime_thread_1ga89646b80a87875a1678378af7041450f/#return-value","text":"Returns the new created signal object.","title":"Return value"},{"location":"api/group___runtime_thread_1ga8f5fe21392376f0cb63e03e62a49d73b/","text":"Luna::new_semaphore LUNA_RUNTIME_API Ref< ISemaphore > new_semaphore(i32 initial_count, i32 max_count) Overview Create a new semaphore object. Parameters initial_count The initial count of the semaphore. max_count The max count the specified semaphore can reach to. Return value Returns the new created semaphore object.","title":"Luna::new_semaphore"},{"location":"api/group___runtime_thread_1ga8f5fe21392376f0cb63e03e62a49d73b/#lunanew_semaphore","text":"LUNA_RUNTIME_API Ref< ISemaphore > new_semaphore(i32 initial_count, i32 max_count)","title":"Luna::new_semaphore"},{"location":"api/group___runtime_thread_1ga8f5fe21392376f0cb63e03e62a49d73b/#overview","text":"Create a new semaphore object.","title":"Overview"},{"location":"api/group___runtime_thread_1ga8f5fe21392376f0cb63e03e62a49d73b/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_thread_1ga8f5fe21392376f0cb63e03e62a49d73b/#initial_count","text":"The initial count of the semaphore.","title":"initial_count"},{"location":"api/group___runtime_thread_1ga8f5fe21392376f0cb63e03e62a49d73b/#max_count","text":"The max count the specified semaphore can reach to.","title":"max_count"},{"location":"api/group___runtime_thread_1ga8f5fe21392376f0cb63e03e62a49d73b/#return-value","text":"Returns the new created semaphore object.","title":"Return value"},{"location":"api/group___runtime_thread_1gaa95d9cec0a8b41b8247d32e3d86a52f9/","text":"Luna::sleep LUNA_RUNTIME_API void sleep(u32 time_milliseconds) Suspends current thread for a specific period of time. Overview The actual suspended time may be longer than required. Parameters timeMillisecounds The time, in milliseconds, that this thread needs to suspend.","title":"Luna::sleep"},{"location":"api/group___runtime_thread_1gaa95d9cec0a8b41b8247d32e3d86a52f9/#lunasleep","text":"LUNA_RUNTIME_API void sleep(u32 time_milliseconds) Suspends current thread for a specific period of time.","title":"Luna::sleep"},{"location":"api/group___runtime_thread_1gaa95d9cec0a8b41b8247d32e3d86a52f9/#overview","text":"The actual suspended time may be longer than required.","title":"Overview"},{"location":"api/group___runtime_thread_1gaa95d9cec0a8b41b8247d32e3d86a52f9/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_thread_1gaa95d9cec0a8b41b8247d32e3d86a52f9/#timemillisecounds","text":"The time, in milliseconds, that this thread needs to suspend.","title":"timeMillisecounds"},{"location":"api/group___runtime_thread_1gad33a876fa281df87180c9f54902f4a6a/","text":"Luna::get_main_thread LUNA_RUNTIME_API IThread * get_main_thread() Gets the thread object of the main thread. Overview Return value The thread object of the main thread.","title":"Luna::get_main_thread"},{"location":"api/group___runtime_thread_1gad33a876fa281df87180c9f54902f4a6a/#lunaget_main_thread","text":"LUNA_RUNTIME_API IThread * get_main_thread() Gets the thread object of the main thread.","title":"Luna::get_main_thread"},{"location":"api/group___runtime_thread_1gad33a876fa281df87180c9f54902f4a6a/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_thread_1gad33a876fa281df87180c9f54902f4a6a/#return-value","text":"The thread object of the main thread.","title":"Return value"},{"location":"api/group___runtime_thread_1gae5db165e70e5e860edb44d4fcfae8125/","text":"Luna::yield_current_thread LUNA_RUNTIME_API void yield_current_thread() Yields the remain time slice of the current thread and let OS to schedule other threads. Overview There is no way to resume a thread from user mode, since threads are scheduled by OS automatically.","title":"Luna::yield_current_thread"},{"location":"api/group___runtime_thread_1gae5db165e70e5e860edb44d4fcfae8125/#lunayield_current_thread","text":"LUNA_RUNTIME_API void yield_current_thread() Yields the remain time slice of the current thread and let OS to schedule other threads.","title":"Luna::yield_current_thread"},{"location":"api/group___runtime_thread_1gae5db165e70e5e860edb44d4fcfae8125/#overview","text":"There is no way to resume a thread from user mode, since threads are scheduled by OS automatically.","title":"Overview"},{"location":"api/group___runtime_thread_1gaed1656336d293f6fdbce19481fef2916/","text":"Luna::tls_alloc LUNA_RUNTIME_API opaque_t tls_alloc(tls_destructor *destructor=nullptr) Allocates one thread local storage (TLS) slot. Overview The TLS slot is allocated for every thread running in this process, including the thread that is currently not being created yet. After the handle is returned, every thread can set a thread-local value to this slot using this handle. The allocated slot is large enough to store one pointer to the real thread-local data. The pointer is nullptr for every thread before it is firstly modified by that thread. Parameters destructor The optional destructor to use for this TLS slot. If this is not nullptr , this destructor will be called on one thread when that thread exits and the TLS pointer value of this slot for that thread is not nullptr . When the destructor is called, the system resets the TLS value to nullptr and passes the original TLS value to the destructor. This process may be repeated several times until the TLS value is nullptr after the destructor returns. Return value Returns the handle to the TLS slot.","title":"Luna::tls_alloc"},{"location":"api/group___runtime_thread_1gaed1656336d293f6fdbce19481fef2916/#lunatls_alloc","text":"LUNA_RUNTIME_API opaque_t tls_alloc(tls_destructor *destructor=nullptr) Allocates one thread local storage (TLS) slot.","title":"Luna::tls_alloc"},{"location":"api/group___runtime_thread_1gaed1656336d293f6fdbce19481fef2916/#overview","text":"The TLS slot is allocated for every thread running in this process, including the thread that is currently not being created yet. After the handle is returned, every thread can set a thread-local value to this slot using this handle. The allocated slot is large enough to store one pointer to the real thread-local data. The pointer is nullptr for every thread before it is firstly modified by that thread.","title":"Overview"},{"location":"api/group___runtime_thread_1gaed1656336d293f6fdbce19481fef2916/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_thread_1gaed1656336d293f6fdbce19481fef2916/#destructor","text":"The optional destructor to use for this TLS slot. If this is not nullptr , this destructor will be called on one thread when that thread exits and the TLS pointer value of this slot for that thread is not nullptr . When the destructor is called, the system resets the TLS value to nullptr and passes the original TLS value to the destructor. This process may be repeated several times until the TLS value is nullptr after the destructor returns.","title":"destructor"},{"location":"api/group___runtime_thread_1gaed1656336d293f6fdbce19481fef2916/#return-value","text":"Returns the handle to the TLS slot.","title":"Return value"},{"location":"api/group___runtime_thread_1gaee1e0f158ed71c7afce1527e76c4efaf/","text":"Luna::new_mutex LUNA_RUNTIME_API Ref< IMutex > new_mutex() Overview Creates a new mutex object. Return value Returns the new created mutex object.","title":"Luna::new_mutex"},{"location":"api/group___runtime_thread_1gaee1e0f158ed71c7afce1527e76c4efaf/#lunanew_mutex","text":"LUNA_RUNTIME_API Ref< IMutex > new_mutex()","title":"Luna::new_mutex"},{"location":"api/group___runtime_thread_1gaee1e0f158ed71c7afce1527e76c4efaf/#overview","text":"Creates a new mutex object.","title":"Overview"},{"location":"api/group___runtime_thread_1gaee1e0f158ed71c7afce1527e76c4efaf/#return-value","text":"Returns the new created mutex object.","title":"Return value"},{"location":"api/group___runtime_type_1ga075204ab589bdd65c9b1e8e47e76f083/","text":"Luna::is_enum_type LUNA_RUNTIME_API bool is_enum_type(typeinfo_t type) Checks whether one type is an enumeration type. Overview Parameters type The type object to check. Return value Returns true if the specified type is an enumeration type. Returns false otherwise. Valid Usage type must specify one valid type object.","title":"Luna::is_enum_type"},{"location":"api/group___runtime_type_1ga075204ab589bdd65c9b1e8e47e76f083/#lunais_enum_type","text":"LUNA_RUNTIME_API bool is_enum_type(typeinfo_t type) Checks whether one type is an enumeration type.","title":"Luna::is_enum_type"},{"location":"api/group___runtime_type_1ga075204ab589bdd65c9b1e8e47e76f083/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga075204ab589bdd65c9b1e8e47e76f083/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga075204ab589bdd65c9b1e8e47e76f083/#type","text":"The type object to check.","title":"type"},{"location":"api/group___runtime_type_1ga075204ab589bdd65c9b1e8e47e76f083/#return-value","text":"Returns true if the specified type is an enumeration type. Returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_type_1ga075204ab589bdd65c9b1e8e47e76f083/#valid-usage","text":"type must specify one valid type object.","title":"Valid Usage"},{"location":"api/group___runtime_type_1ga07d873387008577c8e5a372b40d96ae8/","text":"Luna::usize_type LUNA_RUNTIME_API typeinfo_t usize_type() Gets the type object of usize type. Overview Return value Returns the type object of usize type.","title":"Luna::usize_type"},{"location":"api/group___runtime_type_1ga07d873387008577c8e5a372b40d96ae8/#lunausize_type","text":"LUNA_RUNTIME_API typeinfo_t usize_type() Gets the type object of usize type.","title":"Luna::usize_type"},{"location":"api/group___runtime_type_1ga07d873387008577c8e5a372b40d96ae8/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga07d873387008577c8e5a372b40d96ae8/#return-value","text":"Returns the type object of usize type.","title":"Return value"},{"location":"api/group___runtime_type_1ga081417a084d865b5b3195ce53fb1ca71/","text":"Luna::boolean_type LUNA_RUNTIME_API typeinfo_t boolean_type() Gets the type object of bool type. Overview Return value Returns the type object of bool type.","title":"Luna::boolean_type"},{"location":"api/group___runtime_type_1ga081417a084d865b5b3195ce53fb1ca71/#lunaboolean_type","text":"LUNA_RUNTIME_API typeinfo_t boolean_type() Gets the type object of bool type.","title":"Luna::boolean_type"},{"location":"api/group___runtime_type_1ga081417a084d865b5b3195ce53fb1ca71/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga081417a084d865b5b3195ce53fb1ca71/#return-value","text":"Returns the type object of bool type.","title":"Return value"},{"location":"api/group___runtime_type_1ga0fb5c36a4a8544d9bc1cf5f66af6d36e/","text":"Luna::i32_type LUNA_RUNTIME_API typeinfo_t i32_type() Gets the type object of i32 type. Overview Return value Returns the type object of i32 type.","title":"Luna::i32_type"},{"location":"api/group___runtime_type_1ga0fb5c36a4a8544d9bc1cf5f66af6d36e/#lunai32_type","text":"LUNA_RUNTIME_API typeinfo_t i32_type() Gets the type object of i32 type.","title":"Luna::i32_type"},{"location":"api/group___runtime_type_1ga0fb5c36a4a8544d9bc1cf5f66af6d36e/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga0fb5c36a4a8544d9bc1cf5f66af6d36e/#return-value","text":"Returns the type object of i32 type.","title":"Return value"},{"location":"api/group___runtime_type_1ga100c23d7c000bc0c5f14d87f172425f2/","text":"Luna::typeinfo_t using typeinfo_t = opaque_t The opaque pointer that points to one type object.","title":"Luna::typeinfo_t"},{"location":"api/group___runtime_type_1ga100c23d7c000bc0c5f14d87f172425f2/#lunatypeinfo_t","text":"using typeinfo_t = opaque_t The opaque pointer that points to one type object.","title":"Luna::typeinfo_t"},{"location":"api/group___runtime_type_1ga101ae16d63173d8244de7d6d40f8341f/","text":"Luna::default_move_assign template <typename _Ty> void default_move_assign(typeinfo_t type, void *dst, void *src) The default move assignment function used by the reflection system.","title":"Luna::default_move_assign"},{"location":"api/group___runtime_type_1ga101ae16d63173d8244de7d6d40f8341f/#lunadefault_move_assign","text":"template <typename _Ty> void default_move_assign(typeinfo_t type, void *dst, void *src) The default move assignment function used by the reflection system.","title":"Luna::default_move_assign"},{"location":"api/group___runtime_type_1ga10bd67f89151dedb1233dc37b32a5f66/","text":"Luna::equal_to_type LUNA_RUNTIME_API bool equal_to_type(typeinfo_t type, const void *lhs, const void *rhs) Checks whether two instances of one type are equal. Overview Parameters type The type object. lhs The pointer to the first instance to be compared. rhs The pointer to the second instance to be compared. Return value Returns true if two instances are equal. Returns false otherwise. Returns false if the type does not support equality testing. Valid Usage type must specify one valid type object and cannot be a generic structure type.","title":"Luna::equal_to_type"},{"location":"api/group___runtime_type_1ga10bd67f89151dedb1233dc37b32a5f66/#lunaequal_to_type","text":"LUNA_RUNTIME_API bool equal_to_type(typeinfo_t type, const void *lhs, const void *rhs) Checks whether two instances of one type are equal.","title":"Luna::equal_to_type"},{"location":"api/group___runtime_type_1ga10bd67f89151dedb1233dc37b32a5f66/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga10bd67f89151dedb1233dc37b32a5f66/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga10bd67f89151dedb1233dc37b32a5f66/#type","text":"The type object.","title":"type"},{"location":"api/group___runtime_type_1ga10bd67f89151dedb1233dc37b32a5f66/#lhs","text":"The pointer to the first instance to be compared.","title":"lhs"},{"location":"api/group___runtime_type_1ga10bd67f89151dedb1233dc37b32a5f66/#rhs","text":"The pointer to the second instance to be compared.","title":"rhs"},{"location":"api/group___runtime_type_1ga10bd67f89151dedb1233dc37b32a5f66/#return-value","text":"Returns true if two instances are equal. Returns false otherwise. Returns false if the type does not support equality testing.","title":"Return value"},{"location":"api/group___runtime_type_1ga10bd67f89151dedb1233dc37b32a5f66/#valid-usage","text":"type must specify one valid type object and cannot be a generic structure type.","title":"Valid Usage"},{"location":"api/group___runtime_type_1ga10cefa8483a22b6c92284e28b4eb14fa/","text":"Luna::get_type_by_guid LUNA_RUNTIME_API typeinfo_t get_type_by_guid(const Guid &guid) Gets the type object from one type GUID. Overview Parameters guid The GUID of the type. Return value Returns the type object for the GUID. Returns nullptr if the specified type is not found.","title":"Luna::get_type_by_guid"},{"location":"api/group___runtime_type_1ga10cefa8483a22b6c92284e28b4eb14fa/#lunaget_type_by_guid","text":"LUNA_RUNTIME_API typeinfo_t get_type_by_guid(const Guid &guid) Gets the type object from one type GUID.","title":"Luna::get_type_by_guid"},{"location":"api/group___runtime_type_1ga10cefa8483a22b6c92284e28b4eb14fa/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga10cefa8483a22b6c92284e28b4eb14fa/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga10cefa8483a22b6c92284e28b4eb14fa/#guid","text":"The GUID of the type.","title":"guid"},{"location":"api/group___runtime_type_1ga10cefa8483a22b6c92284e28b4eb14fa/#return-value","text":"Returns the type object for the GUID. Returns nullptr if the specified type is not found.","title":"Return value"},{"location":"api/group___runtime_type_1ga1233abc31d9f29e0a34815768863c867/","text":"Luna::get_struct_generic_arguments LUNA_RUNTIME_API Span< const typeinfo_t > get_struct_generic_arguments(typeinfo_t type) Gets the generic arguments used to instantiate one generic structure instanced type. Overview Parameters type The type to query. Return value Returns the generic arguments of the type. Returns one empty span if type is not a generic structure instanced type. Valid Usage type must specify one valid type object.","title":"Luna::get_struct_generic_arguments"},{"location":"api/group___runtime_type_1ga1233abc31d9f29e0a34815768863c867/#lunaget_struct_generic_arguments","text":"LUNA_RUNTIME_API Span< const typeinfo_t > get_struct_generic_arguments(typeinfo_t type) Gets the generic arguments used to instantiate one generic structure instanced type.","title":"Luna::get_struct_generic_arguments"},{"location":"api/group___runtime_type_1ga1233abc31d9f29e0a34815768863c867/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga1233abc31d9f29e0a34815768863c867/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga1233abc31d9f29e0a34815768863c867/#type","text":"The type to query.","title":"type"},{"location":"api/group___runtime_type_1ga1233abc31d9f29e0a34815768863c867/#return-value","text":"Returns the generic arguments of the type. Returns one empty span if type is not a generic structure instanced type.","title":"Return value"},{"location":"api/group___runtime_type_1ga1233abc31d9f29e0a34815768863c867/#valid-usage","text":"type must specify one valid type object.","title":"Valid Usage"},{"location":"api/group___runtime_type_1ga13a36b97bddb354ee6046139b9d92f32/","text":"Luna::typeof template <typename _Ty> typeinfo_t typeof() Gets the type object of the specified type. Overview Return value Returns the type object of the specified type. Returns nullptr if the type is not registered.","title":"Luna::typeof"},{"location":"api/group___runtime_type_1ga13a36b97bddb354ee6046139b9d92f32/#lunatypeof","text":"template <typename _Ty> typeinfo_t typeof() Gets the type object of the specified type.","title":"Luna::typeof"},{"location":"api/group___runtime_type_1ga13a36b97bddb354ee6046139b9d92f32/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga13a36b97bddb354ee6046139b9d92f32/#return-value","text":"Returns the type object of the specified type. Returns nullptr if the type is not registered.","title":"Return value"},{"location":"api/group___runtime_type_1ga1d4937912d2740c1e3ff9f1e1a8a92b1/","text":"Luna::f32_type LUNA_RUNTIME_API typeinfo_t f32_type() Gets the type object of f32 type. Overview Return value Returns the type object of f32 type.","title":"Luna::f32_type"},{"location":"api/group___runtime_type_1ga1d4937912d2740c1e3ff9f1e1a8a92b1/#lunaf32_type","text":"LUNA_RUNTIME_API typeinfo_t f32_type() Gets the type object of f32 type.","title":"Luna::f32_type"},{"location":"api/group___runtime_type_1ga1d4937912d2740c1e3ff9f1e1a8a92b1/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga1d4937912d2740c1e3ff9f1e1a8a92b1/#return-value","text":"Returns the type object of f32 type.","title":"Return value"},{"location":"api/group___runtime_type_1ga1e396c156aebdad0b1781db91cf3b81a/","text":"Luna::check_type_attribute LUNA_RUNTIME_API bool check_type_attribute(typeinfo_t type, const Name &name) Checks whether the attribute of the specified type exists. Overview Parameters type The type object. name The name of the attribute to check. Return value Returns true if the attribute exists. Returns false otherwise. Valid Usage type must specify one valid type object. name must not be empty.","title":"Luna::check_type_attribute"},{"location":"api/group___runtime_type_1ga1e396c156aebdad0b1781db91cf3b81a/#lunacheck_type_attribute","text":"LUNA_RUNTIME_API bool check_type_attribute(typeinfo_t type, const Name &name) Checks whether the attribute of the specified type exists.","title":"Luna::check_type_attribute"},{"location":"api/group___runtime_type_1ga1e396c156aebdad0b1781db91cf3b81a/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga1e396c156aebdad0b1781db91cf3b81a/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga1e396c156aebdad0b1781db91cf3b81a/#type","text":"The type object.","title":"type"},{"location":"api/group___runtime_type_1ga1e396c156aebdad0b1781db91cf3b81a/#name","text":"The name of the attribute to check.","title":"name"},{"location":"api/group___runtime_type_1ga1e396c156aebdad0b1781db91cf3b81a/#return-value","text":"Returns true if the attribute exists. Returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_type_1ga1e396c156aebdad0b1781db91cf3b81a/#valid-usage","text":"type must specify one valid type object. name must not be empty.","title":"Valid Usage"},{"location":"api/group___runtime_type_1ga2291b986578001ab1974906279718f79/","text":"Luna::is_type_trivially_copy_constructable LUNA_RUNTIME_API bool is_type_trivially_copy_constructable(typeinfo_t type) Checks whether one type is a trivially copy constructable type. Overview One type is trivially copy constructable if:* type must specify one valid type object.","title":"Luna::is_type_trivially_copy_constructable"},{"location":"api/group___runtime_type_1ga2291b986578001ab1974906279718f79/#lunais_type_trivially_copy_constructable","text":"LUNA_RUNTIME_API bool is_type_trivially_copy_constructable(typeinfo_t type) Checks whether one type is a trivially copy constructable type.","title":"Luna::is_type_trivially_copy_constructable"},{"location":"api/group___runtime_type_1ga2291b986578001ab1974906279718f79/#overview","text":"One type is trivially copy constructable if:* type must specify one valid type object.","title":"Overview"},{"location":"api/group___runtime_type_1ga2462e671631244c9db0536b5305d0d45/","text":"Luna::version_type LUNA_RUNTIME_API typeinfo_t version_type() Gets the type object of Version type. Overview Return value Returns the type object of Version type.","title":"Luna::version_type"},{"location":"api/group___runtime_type_1ga2462e671631244c9db0536b5305d0d45/#lunaversion_type","text":"LUNA_RUNTIME_API typeinfo_t version_type() Gets the type object of Version type.","title":"Luna::version_type"},{"location":"api/group___runtime_type_1ga2462e671631244c9db0536b5305d0d45/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga2462e671631244c9db0536b5305d0d45/#return-value","text":"Returns the type object of Version type.","title":"Return value"},{"location":"api/group___runtime_type_1ga24a09db5f8cad2409ba7de8a2822dc93/","text":"Luna::get_generic_instanced_type LUNA_RUNTIME_API typeinfo_t get_generic_instanced_type(typeinfo_t generic_type, Span< const typeinfo_t > generic_arguments) Gets one instanced type of one generic type. Overview Parameters generic_type The generic type. generic_arguments The type arguments that are used to query the instanced type. Return value Returns the instanced type requested.","title":"Luna::get_generic_instanced_type"},{"location":"api/group___runtime_type_1ga24a09db5f8cad2409ba7de8a2822dc93/#lunaget_generic_instanced_type","text":"LUNA_RUNTIME_API typeinfo_t get_generic_instanced_type(typeinfo_t generic_type, Span< const typeinfo_t > generic_arguments) Gets one instanced type of one generic type.","title":"Luna::get_generic_instanced_type"},{"location":"api/group___runtime_type_1ga24a09db5f8cad2409ba7de8a2822dc93/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga24a09db5f8cad2409ba7de8a2822dc93/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga24a09db5f8cad2409ba7de8a2822dc93/#generic_type","text":"The generic type.","title":"generic_type"},{"location":"api/group___runtime_type_1ga24a09db5f8cad2409ba7de8a2822dc93/#generic_arguments","text":"The type arguments that are used to query the instanced type.","title":"generic_arguments"},{"location":"api/group___runtime_type_1ga24a09db5f8cad2409ba7de8a2822dc93/#return-value","text":"Returns the instanced type requested.","title":"Return value"},{"location":"api/group___runtime_type_1ga24af7db55ebbcf0f04b6a7052efb6e97/","text":"Luna::register_enum_type LUNA_RUNTIME_API typeinfo_t register_enum_type(const EnumerationTypeDesc &desc) Registers one enumeration type. Overview If one type with the same name or GUID already exists, the new type will not be registered. Parameters desc The enumeration type descriptor. Return value Returns the type object of the new enumeration type if the type is successfully registered. Returns the type object of the existing type if one type with the same name or GUID already exists.","title":"Luna::register_enum_type"},{"location":"api/group___runtime_type_1ga24af7db55ebbcf0f04b6a7052efb6e97/#lunaregister_enum_type","text":"LUNA_RUNTIME_API typeinfo_t register_enum_type(const EnumerationTypeDesc &desc) Registers one enumeration type.","title":"Luna::register_enum_type"},{"location":"api/group___runtime_type_1ga24af7db55ebbcf0f04b6a7052efb6e97/#overview","text":"If one type with the same name or GUID already exists, the new type will not be registered.","title":"Overview"},{"location":"api/group___runtime_type_1ga24af7db55ebbcf0f04b6a7052efb6e97/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga24af7db55ebbcf0f04b6a7052efb6e97/#desc","text":"The enumeration type descriptor.","title":"desc"},{"location":"api/group___runtime_type_1ga24af7db55ebbcf0f04b6a7052efb6e97/#return-value","text":"Returns the type object of the new enumeration type if the type is successfully registered. Returns the type object of the existing type if one type with the same name or GUID already exists.","title":"Return value"},{"location":"api/group___runtime_type_1ga256cca8cf9ddc308d88ca53577c400f6/","text":"Luna::get_type_size LUNA_RUNTIME_API usize get_type_size(typeinfo_t type) Gets the size of the specified type. Overview Parameters type The type object. Return value Returns the size of the specified type in bytes. Valid Usage type must specify one valid type object.","title":"Luna::get_type_size"},{"location":"api/group___runtime_type_1ga256cca8cf9ddc308d88ca53577c400f6/#lunaget_type_size","text":"LUNA_RUNTIME_API usize get_type_size(typeinfo_t type) Gets the size of the specified type.","title":"Luna::get_type_size"},{"location":"api/group___runtime_type_1ga256cca8cf9ddc308d88ca53577c400f6/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga256cca8cf9ddc308d88ca53577c400f6/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga256cca8cf9ddc308d88ca53577c400f6/#type","text":"The type object.","title":"type"},{"location":"api/group___runtime_type_1ga256cca8cf9ddc308d88ca53577c400f6/#return-value","text":"Returns the size of the specified type in bytes.","title":"Return value"},{"location":"api/group___runtime_type_1ga256cca8cf9ddc308d88ca53577c400f6/#valid-usage","text":"type must specify one valid type object.","title":"Valid Usage"},{"location":"api/group___runtime_type_1ga28e99ca7018d62261c58f4f8fa83102a/","text":"Luna::get_type_attributes LUNA_RUNTIME_API Vector< Name > get_type_attributes(typeinfo_t type) Gets all attributes of the specified type. Overview Parameters type The type object. Return value Returns one vector that contains attribute names of all attributes of the specified type. Valid Usage type must specify one valid type object.","title":"Luna::get_type_attributes"},{"location":"api/group___runtime_type_1ga28e99ca7018d62261c58f4f8fa83102a/#lunaget_type_attributes","text":"LUNA_RUNTIME_API Vector< Name > get_type_attributes(typeinfo_t type) Gets all attributes of the specified type.","title":"Luna::get_type_attributes"},{"location":"api/group___runtime_type_1ga28e99ca7018d62261c58f4f8fa83102a/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga28e99ca7018d62261c58f4f8fa83102a/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga28e99ca7018d62261c58f4f8fa83102a/#type","text":"The type object.","title":"type"},{"location":"api/group___runtime_type_1ga28e99ca7018d62261c58f4f8fa83102a/#return-value","text":"Returns one vector that contains attribute names of all attributes of the specified type.","title":"Return value"},{"location":"api/group___runtime_type_1ga28e99ca7018d62261c58f4f8fa83102a/#valid-usage","text":"type must specify one valid type object.","title":"Valid Usage"},{"location":"api/group___runtime_type_1ga28f229f2a3b27cce947cc16b3ad503d5/","text":"Luna::get_type_alignment LUNA_RUNTIME_API usize get_type_alignment(typeinfo_t type) Gets the alignment requirement of the specified type. Overview Parameters type The type object. Return value Returns the alignment requirement of the specified type in bytes. Valid Usage type must specify one valid type object.","title":"Luna::get_type_alignment"},{"location":"api/group___runtime_type_1ga28f229f2a3b27cce947cc16b3ad503d5/#lunaget_type_alignment","text":"LUNA_RUNTIME_API usize get_type_alignment(typeinfo_t type) Gets the alignment requirement of the specified type.","title":"Luna::get_type_alignment"},{"location":"api/group___runtime_type_1ga28f229f2a3b27cce947cc16b3ad503d5/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga28f229f2a3b27cce947cc16b3ad503d5/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga28f229f2a3b27cce947cc16b3ad503d5/#type","text":"The type object.","title":"type"},{"location":"api/group___runtime_type_1ga28f229f2a3b27cce947cc16b3ad503d5/#return-value","text":"Returns the alignment requirement of the specified type in bytes.","title":"Return value"},{"location":"api/group___runtime_type_1ga28f229f2a3b27cce947cc16b3ad503d5/#valid-usage","text":"type must specify one valid type object.","title":"Valid Usage"},{"location":"api/group___runtime_type_1ga2fed0c2819a727130c18322aef9e8381/","text":"Luna::generic_structure_instantiate_t using generic_structure_instantiate_t = GenericStructureInstantiateInfo(typeinfo_t generic_type, Span<const typeinfo_t> generic_arguments) The generic structure instantiation function called by the reflection system when one new generic structure instanced type is required. Overview Parameters generic_type The generic type to instantiate. generic_arguments Types that are used as arguments to instantiate one generic structure instanced type.","title":"Luna::generic_structure_instantiate_t"},{"location":"api/group___runtime_type_1ga2fed0c2819a727130c18322aef9e8381/#lunageneric_structure_instantiate_t","text":"using generic_structure_instantiate_t = GenericStructureInstantiateInfo(typeinfo_t generic_type, Span<const typeinfo_t> generic_arguments) The generic structure instantiation function called by the reflection system when one new generic structure instanced type is required.","title":"Luna::generic_structure_instantiate_t"},{"location":"api/group___runtime_type_1ga2fed0c2819a727130c18322aef9e8381/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga2fed0c2819a727130c18322aef9e8381/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga2fed0c2819a727130c18322aef9e8381/#generic_type","text":"The generic type to instantiate.","title":"generic_type"},{"location":"api/group___runtime_type_1ga2fed0c2819a727130c18322aef9e8381/#generic_arguments","text":"Types that are used as arguments to instantiate one generic structure instanced type.","title":"generic_arguments"},{"location":"api/group___runtime_type_1ga30fdab15e426d873fca3b5c56582ac01/","text":"Luna::structure_move_ctor_t using structure_move_ctor_t = void(typeinfo_t type, void* dst, void* src) The structure move constructor used by the reflection system. Overview Parameters type The type of the instance. dst The instance data to construct. src The instance data to move data from.","title":"Luna::structure_move_ctor_t"},{"location":"api/group___runtime_type_1ga30fdab15e426d873fca3b5c56582ac01/#lunastructure_move_ctor_t","text":"using structure_move_ctor_t = void(typeinfo_t type, void* dst, void* src) The structure move constructor used by the reflection system.","title":"Luna::structure_move_ctor_t"},{"location":"api/group___runtime_type_1ga30fdab15e426d873fca3b5c56582ac01/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga30fdab15e426d873fca3b5c56582ac01/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga30fdab15e426d873fca3b5c56582ac01/#type","text":"The type of the instance.","title":"type"},{"location":"api/group___runtime_type_1ga30fdab15e426d873fca3b5c56582ac01/#dst","text":"The instance data to construct.","title":"dst"},{"location":"api/group___runtime_type_1ga30fdab15e426d873fca3b5c56582ac01/#src","text":"The instance data to move data from.","title":"src"},{"location":"api/group___runtime_type_1ga31dcafde1f1f260367f617b28bd5221d/","text":"Luna::is_type_trivially_destructable LUNA_RUNTIME_API bool is_type_trivially_destructable(typeinfo_t type) Checks whether one type is a trivially destructable type. Overview One type is trivially destructable if:* type must specify one valid type object.","title":"Luna::is_type_trivially_destructable"},{"location":"api/group___runtime_type_1ga31dcafde1f1f260367f617b28bd5221d/#lunais_type_trivially_destructable","text":"LUNA_RUNTIME_API bool is_type_trivially_destructable(typeinfo_t type) Checks whether one type is a trivially destructable type.","title":"Luna::is_type_trivially_destructable"},{"location":"api/group___runtime_type_1ga31dcafde1f1f260367f617b28bd5221d/#overview","text":"One type is trivially destructable if:* type must specify one valid type object.","title":"Overview"},{"location":"api/group___runtime_type_1ga3470c125e48b7e0aeeb4f7896cb1e000/","text":"Luna::get_struct_generic_parameter_names LUNA_RUNTIME_API Span< const Name > get_struct_generic_parameter_names(typeinfo_t type) Gets the generic parameter names of the specified type. Overview Parameters type The type to query. Return value Returns the generic arguments of the type. Returns one empty span if type is not a generic structure type or a generic structure instanced type. Valid Usage type must specify one valid type object.","title":"Luna::get_struct_generic_parameter_names"},{"location":"api/group___runtime_type_1ga3470c125e48b7e0aeeb4f7896cb1e000/#lunaget_struct_generic_parameter_names","text":"LUNA_RUNTIME_API Span< const Name > get_struct_generic_parameter_names(typeinfo_t type) Gets the generic parameter names of the specified type.","title":"Luna::get_struct_generic_parameter_names"},{"location":"api/group___runtime_type_1ga3470c125e48b7e0aeeb4f7896cb1e000/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga3470c125e48b7e0aeeb4f7896cb1e000/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga3470c125e48b7e0aeeb4f7896cb1e000/#type","text":"The type to query.","title":"type"},{"location":"api/group___runtime_type_1ga3470c125e48b7e0aeeb4f7896cb1e000/#return-value","text":"Returns the generic arguments of the type. Returns one empty span if type is not a generic structure type or a generic structure instanced type.","title":"Return value"},{"location":"api/group___runtime_type_1ga3470c125e48b7e0aeeb4f7896cb1e000/#valid-usage","text":"type must specify one valid type object.","title":"Valid Usage"},{"location":"api/group___runtime_type_1ga3bb128d9c6929bd3c112ccf5b4677eb4/","text":"Luna::move_assign_type_range LUNA_RUNTIME_API void move_assign_type_range(typeinfo_t type, void *dst, void *src, usize count) Move assigns one array of instances of the specified type. Overview The assignment is performed as follows:* type must specify one valid type object and cannot be a generic structure type. dst and src must specify one valid memory address.","title":"Luna::move_assign_type_range"},{"location":"api/group___runtime_type_1ga3bb128d9c6929bd3c112ccf5b4677eb4/#lunamove_assign_type_range","text":"LUNA_RUNTIME_API void move_assign_type_range(typeinfo_t type, void *dst, void *src, usize count) Move assigns one array of instances of the specified type.","title":"Luna::move_assign_type_range"},{"location":"api/group___runtime_type_1ga3bb128d9c6929bd3c112ccf5b4677eb4/#overview","text":"The assignment is performed as follows:* type must specify one valid type object and cannot be a generic structure type. dst and src must specify one valid memory address.","title":"Overview"},{"location":"api/group___runtime_type_1ga3c04bc45c180b05227a377a99517a1b4/","text":"Luna::move_construct_type_range LUNA_RUNTIME_API void move_construct_type_range(typeinfo_t type, void *dst, void *src, usize count) Move constructs one array of instances of the specified type. Overview The construction is performed as follows:* type must specify one valid type object and cannot be a generic structure type. dst and src must specify one valid memory address.","title":"Luna::move_construct_type_range"},{"location":"api/group___runtime_type_1ga3c04bc45c180b05227a377a99517a1b4/#lunamove_construct_type_range","text":"LUNA_RUNTIME_API void move_construct_type_range(typeinfo_t type, void *dst, void *src, usize count) Move constructs one array of instances of the specified type.","title":"Luna::move_construct_type_range"},{"location":"api/group___runtime_type_1ga3c04bc45c180b05227a377a99517a1b4/#overview","text":"The construction is performed as follows:* type must specify one valid type object and cannot be a generic structure type. dst and src must specify one valid memory address.","title":"Overview"},{"location":"api/group___runtime_type_1ga421a9b78990b1995d7444af3ef0d4101/","text":"Luna::get_type_name LUNA_RUNTIME_API Name get_type_name(typeinfo_t type, Name *alias=nullptr) Gets the name of the specified type. Overview Parameters type The type object. alias If not nullptr , returns the alias of the type. Return value Returns the name of the specified type. Valid Usage type must specify one valid type object.","title":"Luna::get_type_name"},{"location":"api/group___runtime_type_1ga421a9b78990b1995d7444af3ef0d4101/#lunaget_type_name","text":"LUNA_RUNTIME_API Name get_type_name(typeinfo_t type, Name *alias=nullptr) Gets the name of the specified type.","title":"Luna::get_type_name"},{"location":"api/group___runtime_type_1ga421a9b78990b1995d7444af3ef0d4101/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga421a9b78990b1995d7444af3ef0d4101/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga421a9b78990b1995d7444af3ef0d4101/#type","text":"The type object.","title":"type"},{"location":"api/group___runtime_type_1ga421a9b78990b1995d7444af3ef0d4101/#alias","text":"If not nullptr , returns the alias of the type.","title":"alias"},{"location":"api/group___runtime_type_1ga421a9b78990b1995d7444af3ef0d4101/#return-value","text":"Returns the name of the specified type.","title":"Return value"},{"location":"api/group___runtime_type_1ga421a9b78990b1995d7444af3ef0d4101/#valid-usage","text":"type must specify one valid type object.","title":"Valid Usage"},{"location":"api/group___runtime_type_1ga4374647f277ac89886417a4f547fde87/","text":"Luna::u64_type LUNA_RUNTIME_API typeinfo_t u64_type() Gets the type object of u64 type. Overview Return value Returns the type object of u64 type.","title":"Luna::u64_type"},{"location":"api/group___runtime_type_1ga4374647f277ac89886417a4f547fde87/#lunau64_type","text":"LUNA_RUNTIME_API typeinfo_t u64_type() Gets the type object of u64 type.","title":"Luna::u64_type"},{"location":"api/group___runtime_type_1ga4374647f277ac89886417a4f547fde87/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga4374647f277ac89886417a4f547fde87/#return-value","text":"Returns the type object of u64 type.","title":"Return value"},{"location":"api/group___runtime_type_1ga449f9f7a0ee098e3d913b13d4bb982b9/","text":"Luna::hash_type LUNA_RUNTIME_API usize hash_type(typeinfo_t type, const void *inst) Computes the hash code of one instance of the specified type. Overview Parameters type The type of the instance. inst The pointer to the instance. Return value Returns the computed hash code. Returns 0 if the type does not support hash code computing. Valid Usage type must specify one valid type object and cannot be a generic structure type.","title":"Luna::hash_type"},{"location":"api/group___runtime_type_1ga449f9f7a0ee098e3d913b13d4bb982b9/#lunahash_type","text":"LUNA_RUNTIME_API usize hash_type(typeinfo_t type, const void *inst) Computes the hash code of one instance of the specified type.","title":"Luna::hash_type"},{"location":"api/group___runtime_type_1ga449f9f7a0ee098e3d913b13d4bb982b9/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga449f9f7a0ee098e3d913b13d4bb982b9/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga449f9f7a0ee098e3d913b13d4bb982b9/#type","text":"The type of the instance.","title":"type"},{"location":"api/group___runtime_type_1ga449f9f7a0ee098e3d913b13d4bb982b9/#inst","text":"The pointer to the instance.","title":"inst"},{"location":"api/group___runtime_type_1ga449f9f7a0ee098e3d913b13d4bb982b9/#return-value","text":"Returns the computed hash code. Returns 0 if the type does not support hash code computing.","title":"Return value"},{"location":"api/group___runtime_type_1ga449f9f7a0ee098e3d913b13d4bb982b9/#valid-usage","text":"type must specify one valid type object and cannot be a generic structure type.","title":"Valid Usage"},{"location":"api/group___runtime_type_1ga450f57469632c799c022ac46a3050ffc/","text":"Luna::c32_type LUNA_RUNTIME_API typeinfo_t c32_type() Gets the type object of c32 type. Overview Return value Returns the type object of c32 type.","title":"Luna::c32_type"},{"location":"api/group___runtime_type_1ga450f57469632c799c022ac46a3050ffc/#lunac32_type","text":"LUNA_RUNTIME_API typeinfo_t c32_type() Gets the type object of c32 type.","title":"Luna::c32_type"},{"location":"api/group___runtime_type_1ga450f57469632c799c022ac46a3050ffc/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga450f57469632c799c022ac46a3050ffc/#return-value","text":"Returns the type object of c32 type.","title":"Return value"},{"location":"api/group___runtime_type_1ga473fe0c9cb061c008707fb35992e00c6/","text":"Luna::i64_type LUNA_RUNTIME_API typeinfo_t i64_type() Gets the type object of i64 type. Overview Return value Returns the type object of i64 type.","title":"Luna::i64_type"},{"location":"api/group___runtime_type_1ga473fe0c9cb061c008707fb35992e00c6/#lunai64_type","text":"LUNA_RUNTIME_API typeinfo_t i64_type() Gets the type object of i64 type.","title":"Luna::i64_type"},{"location":"api/group___runtime_type_1ga473fe0c9cb061c008707fb35992e00c6/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga473fe0c9cb061c008707fb35992e00c6/#return-value","text":"Returns the type object of i64 type.","title":"Return value"},{"location":"api/group___runtime_type_1ga4990fdcdd72f56377d386e7b4a126e2b/","text":"Luna::relocate_type_range LUNA_RUNTIME_API void relocate_type_range(typeinfo_t type, void *dst, void *src, usize count) Relocates one array of instances of the specified type. Overview The relocation is performed as follows:* type must specify one valid type object and cannot be a generic structure type. dst and src must specify one valid memory address.","title":"Luna::relocate_type_range"},{"location":"api/group___runtime_type_1ga4990fdcdd72f56377d386e7b4a126e2b/#lunarelocate_type_range","text":"LUNA_RUNTIME_API void relocate_type_range(typeinfo_t type, void *dst, void *src, usize count) Relocates one array of instances of the specified type.","title":"Luna::relocate_type_range"},{"location":"api/group___runtime_type_1ga4990fdcdd72f56377d386e7b4a126e2b/#overview","text":"The relocation is performed as follows:* type must specify one valid type object and cannot be a generic structure type. dst and src must specify one valid memory address.","title":"Overview"},{"location":"api/group___runtime_type_1ga53307266b96df44991adce722416b13b/","text":"Luna::u32_type LUNA_RUNTIME_API typeinfo_t u32_type() Gets the type object of u32 type. Overview Return value Returns the type object of u32 type.","title":"Luna::u32_type"},{"location":"api/group___runtime_type_1ga53307266b96df44991adce722416b13b/#lunau32_type","text":"LUNA_RUNTIME_API typeinfo_t u32_type() Gets the type object of u32 type.","title":"Luna::u32_type"},{"location":"api/group___runtime_type_1ga53307266b96df44991adce722416b13b/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga53307266b96df44991adce722416b13b/#return-value","text":"Returns the type object of u32 type.","title":"Return value"},{"location":"api/group___runtime_type_1ga53f50da16c89f016e6cb55776e898de5/","text":"Luna::get_type_guid LUNA_RUNTIME_API Guid get_type_guid(typeinfo_t type) Gets the GUID of the specified type. Overview Parameters type The type object. Return value Returns the GUID of the specified type. Valid Usage type must specify one valid type object.","title":"Luna::get_type_guid"},{"location":"api/group___runtime_type_1ga53f50da16c89f016e6cb55776e898de5/#lunaget_type_guid","text":"LUNA_RUNTIME_API Guid get_type_guid(typeinfo_t type) Gets the GUID of the specified type.","title":"Luna::get_type_guid"},{"location":"api/group___runtime_type_1ga53f50da16c89f016e6cb55776e898de5/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga53f50da16c89f016e6cb55776e898de5/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga53f50da16c89f016e6cb55776e898de5/#type","text":"The type object.","title":"type"},{"location":"api/group___runtime_type_1ga53f50da16c89f016e6cb55776e898de5/#return-value","text":"Returns the GUID of the specified type.","title":"Return value"},{"location":"api/group___runtime_type_1ga53f50da16c89f016e6cb55776e898de5/#valid-usage","text":"type must specify one valid type object.","title":"Valid Usage"},{"location":"api/group___runtime_type_1ga5701d323cc28da06fd13293a73d9e56d/","text":"Luna::u16_type LUNA_RUNTIME_API typeinfo_t u16_type() Gets the type object of u16 type. Overview Return value Returns the type object of u16 type.","title":"Luna::u16_type"},{"location":"api/group___runtime_type_1ga5701d323cc28da06fd13293a73d9e56d/#lunau16_type","text":"LUNA_RUNTIME_API typeinfo_t u16_type() Gets the type object of u16 type.","title":"Luna::u16_type"},{"location":"api/group___runtime_type_1ga5701d323cc28da06fd13293a73d9e56d/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga5701d323cc28da06fd13293a73d9e56d/#return-value","text":"Returns the type object of u16 type.","title":"Return value"},{"location":"api/group___runtime_type_1ga5721a87baeb22e940c68ecbce2132278/","text":"Luna::copy_construct_type LUNA_RUNTIME_API void copy_construct_type(typeinfo_t type, void *dst, void *src) Copy constructs one instance of the specified type. Overview The construction is performed as follows:* type must specify one valid type object and cannot be a generic structure type. dst and src must specify one valid memory address.","title":"Luna::copy_construct_type"},{"location":"api/group___runtime_type_1ga5721a87baeb22e940c68ecbce2132278/#lunacopy_construct_type","text":"LUNA_RUNTIME_API void copy_construct_type(typeinfo_t type, void *dst, void *src) Copy constructs one instance of the specified type.","title":"Luna::copy_construct_type"},{"location":"api/group___runtime_type_1ga5721a87baeb22e940c68ecbce2132278/#overview","text":"The construction is performed as follows:* type must specify one valid type object and cannot be a generic structure type. dst and src must specify one valid memory address.","title":"Overview"},{"location":"api/group___runtime_type_1ga5aa5b57403b26df69146f732a663fe3b/","text":"Luna::default_move_ctor template <typename _Ty> void default_move_ctor(typeinfo_t type, void *dst, void *src) The default move constructor used by the reflection system.","title":"Luna::default_move_ctor"},{"location":"api/group___runtime_type_1ga5aa5b57403b26df69146f732a663fe3b/#lunadefault_move_ctor","text":"template <typename _Ty> void default_move_ctor(typeinfo_t type, void *dst, void *src) The default move constructor used by the reflection system.","title":"Luna::default_move_ctor"},{"location":"api/group___runtime_type_1ga5fe6cc28e7279ede8cd8a12fd4925946/","text":"Luna::void_type LUNA_RUNTIME_API typeinfo_t void_type() Gets the type object of void type. Overview Return value Returns the type object of void type.","title":"Luna::void_type"},{"location":"api/group___runtime_type_1ga5fe6cc28e7279ede8cd8a12fd4925946/#lunavoid_type","text":"LUNA_RUNTIME_API typeinfo_t void_type() Gets the type object of void type.","title":"Luna::void_type"},{"location":"api/group___runtime_type_1ga5fe6cc28e7279ede8cd8a12fd4925946/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga5fe6cc28e7279ede8cd8a12fd4925946/#return-value","text":"Returns the type object of void type.","title":"Return value"},{"location":"api/group___runtime_type_1ga601f7a22febe9a72e0f719a62db734e3/","text":"Luna::is_type_trivially_move_constructable LUNA_RUNTIME_API bool is_type_trivially_move_constructable(typeinfo_t type) Checks whether one type is a trivially move constructable type. Overview One type is trivially move constructable if:* type must specify one valid type object.","title":"Luna::is_type_trivially_move_constructable"},{"location":"api/group___runtime_type_1ga601f7a22febe9a72e0f719a62db734e3/#lunais_type_trivially_move_constructable","text":"LUNA_RUNTIME_API bool is_type_trivially_move_constructable(typeinfo_t type) Checks whether one type is a trivially move constructable type.","title":"Luna::is_type_trivially_move_constructable"},{"location":"api/group___runtime_type_1ga601f7a22febe9a72e0f719a62db734e3/#overview","text":"One type is trivially move constructable if:* type must specify one valid type object.","title":"Overview"},{"location":"api/group___runtime_type_1ga60e7625667f4239110c5f637d439de22/","text":"Luna::set_equatable LUNA_RUNTIME_API void set_equatable(typeinfo_t type, equal_to_func_t *func) Sets one type to support equality testing. Overview Parameters type The type object. func The equality testing function to use. Valid Usage type must specify one valid type object and cannot be a generic structure type. func must specify one valid function.","title":"Luna::set_equatable"},{"location":"api/group___runtime_type_1ga60e7625667f4239110c5f637d439de22/#lunaset_equatable","text":"LUNA_RUNTIME_API void set_equatable(typeinfo_t type, equal_to_func_t *func) Sets one type to support equality testing.","title":"Luna::set_equatable"},{"location":"api/group___runtime_type_1ga60e7625667f4239110c5f637d439de22/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga60e7625667f4239110c5f637d439de22/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga60e7625667f4239110c5f637d439de22/#type","text":"The type object.","title":"type"},{"location":"api/group___runtime_type_1ga60e7625667f4239110c5f637d439de22/#func","text":"The equality testing function to use.","title":"func"},{"location":"api/group___runtime_type_1ga60e7625667f4239110c5f637d439de22/#valid-usage","text":"type must specify one valid type object and cannot be a generic structure type. func must specify one valid function.","title":"Valid Usage"},{"location":"api/group___runtime_type_1ga60f4ae65d88e08c4e2e5b6d72dff97d5/","text":"Luna::c8_type LUNA_RUNTIME_API typeinfo_t c8_type() Gets the type object of c8 type. Overview Return value Returns the type object of c8 type.","title":"Luna::c8_type"},{"location":"api/group___runtime_type_1ga60f4ae65d88e08c4e2e5b6d72dff97d5/#lunac8_type","text":"LUNA_RUNTIME_API typeinfo_t c8_type() Gets the type object of c8 type.","title":"Luna::c8_type"},{"location":"api/group___runtime_type_1ga60f4ae65d88e08c4e2e5b6d72dff97d5/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga60f4ae65d88e08c4e2e5b6d72dff97d5/#return-value","text":"Returns the type object of c8 type.","title":"Return value"},{"location":"api/group___runtime_type_1ga61541a6cfa370e9428ef8a7c44a37654/","text":"Luna::pair_type LUNA_RUNTIME_API typeinfo_t pair_type() Gets the type object of [Pair](struct_luna_1_1_pair.md) generic type. Overview Return value Returns the type object of [Pair](struct_luna_1_1_pair.md) generic type.","title":"Luna::pair_type"},{"location":"api/group___runtime_type_1ga61541a6cfa370e9428ef8a7c44a37654/#lunapair_type","text":"LUNA_RUNTIME_API typeinfo_t pair_type() Gets the type object of [Pair](struct_luna_1_1_pair.md) generic type.","title":"Luna::pair_type"},{"location":"api/group___runtime_type_1ga61541a6cfa370e9428ef8a7c44a37654/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga61541a6cfa370e9428ef8a7c44a37654/#return-value","text":"Returns the type object of [Pair](struct_luna_1_1_pair.md) generic type.","title":"Return value"},{"location":"api/group___runtime_type_1ga618765ed95035e04b42690b1133a9f4b/","text":"Luna::default_hash template <typename _Ty> usize default_hash(typeinfo_t type, const void *inst) The default hashing function used by the reflection system.","title":"Luna::default_hash"},{"location":"api/group___runtime_type_1ga618765ed95035e04b42690b1133a9f4b/#lunadefault_hash","text":"template <typename _Ty> usize default_hash(typeinfo_t type, const void *inst) The default hashing function used by the reflection system.","title":"Luna::default_hash"},{"location":"api/group___runtime_type_1ga62226fa66d8019e672ad85dc4ba0af56/","text":"Luna::is_type_equatable LUNA_RUNTIME_API bool is_type_equatable(typeinfo_t type) Checks whether the specified type supports equality testing. Overview Parameters type The type object. Return value Returns true if the specified type supports equality testing. Returns false otherwise. Valid Usage type must specify one valid type object and cannot be a generic structure type.","title":"Luna::is_type_equatable"},{"location":"api/group___runtime_type_1ga62226fa66d8019e672ad85dc4ba0af56/#lunais_type_equatable","text":"LUNA_RUNTIME_API bool is_type_equatable(typeinfo_t type) Checks whether the specified type supports equality testing.","title":"Luna::is_type_equatable"},{"location":"api/group___runtime_type_1ga62226fa66d8019e672ad85dc4ba0af56/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga62226fa66d8019e672ad85dc4ba0af56/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga62226fa66d8019e672ad85dc4ba0af56/#type","text":"The type object.","title":"type"},{"location":"api/group___runtime_type_1ga62226fa66d8019e672ad85dc4ba0af56/#return-value","text":"Returns true if the specified type supports equality testing. Returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_type_1ga62226fa66d8019e672ad85dc4ba0af56/#valid-usage","text":"type must specify one valid type object and cannot be a generic structure type.","title":"Valid Usage"},{"location":"api/group___runtime_type_1ga66233335688fb3b011425703194e25a0/","text":"Luna::get_enum_underlying_type LUNA_RUNTIME_API typeinfo_t get_enum_underlying_type(typeinfo_t type) Gets the underlying type of the specified enumeration. Overview Parameters type The type to query. Return value Returns the underlying type of the specified enumeration. Returns nullptr if type is not an enumeration type. Valid Usage type must specify one valid type object.","title":"Luna::get_enum_underlying_type"},{"location":"api/group___runtime_type_1ga66233335688fb3b011425703194e25a0/#lunaget_enum_underlying_type","text":"LUNA_RUNTIME_API typeinfo_t get_enum_underlying_type(typeinfo_t type) Gets the underlying type of the specified enumeration.","title":"Luna::get_enum_underlying_type"},{"location":"api/group___runtime_type_1ga66233335688fb3b011425703194e25a0/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga66233335688fb3b011425703194e25a0/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga66233335688fb3b011425703194e25a0/#type","text":"The type to query.","title":"type"},{"location":"api/group___runtime_type_1ga66233335688fb3b011425703194e25a0/#return-value","text":"Returns the underlying type of the specified enumeration. Returns nullptr if type is not an enumeration type.","title":"Return value"},{"location":"api/group___runtime_type_1ga66233335688fb3b011425703194e25a0/#valid-usage","text":"type must specify one valid type object.","title":"Valid Usage"},{"location":"api/group___runtime_type_1ga6a69b76cea1f8092be19f8a2205465d1/","text":"Luna::construct_type LUNA_RUNTIME_API void construct_type(typeinfo_t type, void *data) Constructs one instance of the specified type. Overview The construction is performed as follows:* type must specify one valid type object and cannot be a generic structure type. data must specify one valid memory address.","title":"Luna::construct_type"},{"location":"api/group___runtime_type_1ga6a69b76cea1f8092be19f8a2205465d1/#lunaconstruct_type","text":"LUNA_RUNTIME_API void construct_type(typeinfo_t type, void *data) Constructs one instance of the specified type.","title":"Luna::construct_type"},{"location":"api/group___runtime_type_1ga6a69b76cea1f8092be19f8a2205465d1/#overview","text":"The construction is performed as follows:* type must specify one valid type object and cannot be a generic structure type. data must specify one valid memory address.","title":"Overview"},{"location":"api/group___runtime_type_1ga6c48e43cb9e673c260952a2ecedcec68/","text":"Luna::register_enum_type template <typename _Ty> typeinfo_t register_enum_type(Span< const EnumerationOptionDesc > options, bool multienum=false) Registers one enumeration type to the type system. The enumeration type must have one luenum macro defined directly in Luna namespace. Overview Parameters options A list of options that should be tracked by the type system. The user can use luoption macro to declare options conveniently. multienum Whether this enumeration type is a multi-value enumeration. See remarks of EnumerationTypeDesc for details. Return value Returns the registered structure type.","title":"Luna::register_enum_type"},{"location":"api/group___runtime_type_1ga6c48e43cb9e673c260952a2ecedcec68/#lunaregister_enum_type","text":"template <typename _Ty> typeinfo_t register_enum_type(Span< const EnumerationOptionDesc > options, bool multienum=false) Registers one enumeration type to the type system. The enumeration type must have one luenum macro defined directly in Luna namespace.","title":"Luna::register_enum_type"},{"location":"api/group___runtime_type_1ga6c48e43cb9e673c260952a2ecedcec68/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga6c48e43cb9e673c260952a2ecedcec68/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga6c48e43cb9e673c260952a2ecedcec68/#options","text":"A list of options that should be tracked by the type system. The user can use luoption macro to declare options conveniently.","title":"options"},{"location":"api/group___runtime_type_1ga6c48e43cb9e673c260952a2ecedcec68/#multienum","text":"Whether this enumeration type is a multi-value enumeration. See remarks of EnumerationTypeDesc for details.","title":"multienum"},{"location":"api/group___runtime_type_1ga6c48e43cb9e673c260952a2ecedcec68/#return-value","text":"Returns the registered structure type.","title":"Return value"},{"location":"api/group___runtime_type_1ga6d917da49e3e129c8aa54e756969d145/","text":"Luna::copy_assign_type_range LUNA_RUNTIME_API void copy_assign_type_range(typeinfo_t type, void *dst, void *src, usize count) Copy assigns one array of instances of the specified type. Overview The assignment is performed as follows:* type must specify one valid type object and cannot be a generic structure type. dst and src must specify one valid memory address.","title":"Luna::copy_assign_type_range"},{"location":"api/group___runtime_type_1ga6d917da49e3e129c8aa54e756969d145/#lunacopy_assign_type_range","text":"LUNA_RUNTIME_API void copy_assign_type_range(typeinfo_t type, void *dst, void *src, usize count) Copy assigns one array of instances of the specified type.","title":"Luna::copy_assign_type_range"},{"location":"api/group___runtime_type_1ga6d917da49e3e129c8aa54e756969d145/#overview","text":"The assignment is performed as follows:* type must specify one valid type object and cannot be a generic structure type. dst and src must specify one valid memory address.","title":"Overview"},{"location":"api/group___runtime_type_1ga6f2fd705b78706afba74ee787a7d4f90/","text":"Luna::relocate_type LUNA_RUNTIME_API void relocate_type(typeinfo_t type, void *dst, void *src) Relocates one instance of the specified type. Overview The relocation is performed as follows:","title":"Luna::relocate_type"},{"location":"api/group___runtime_type_1ga6f2fd705b78706afba74ee787a7d4f90/#lunarelocate_type","text":"LUNA_RUNTIME_API void relocate_type(typeinfo_t type, void *dst, void *src) Relocates one instance of the specified type.","title":"Luna::relocate_type"},{"location":"api/group___runtime_type_1ga6f2fd705b78706afba74ee787a7d4f90/#overview","text":"The relocation is performed as follows:","title":"Overview"},{"location":"api/group___runtime_type_1ga71c6c50c5adcab8d3f8640bad32ce061/","text":"Luna::default_copy_assign template <typename _Ty> void default_copy_assign(typeinfo_t type, void *dst, void *src) The default copy assignment function used by the reflection system.","title":"Luna::default_copy_assign"},{"location":"api/group___runtime_type_1ga71c6c50c5adcab8d3f8640bad32ce061/#lunadefault_copy_assign","text":"template <typename _Ty> void default_copy_assign(typeinfo_t type, void *dst, void *src) The default copy assignment function used by the reflection system.","title":"Luna::default_copy_assign"},{"location":"api/group___runtime_type_1ga768ca9e582a3c0b845ace5631983cd71/","text":"Luna::structure_ctor_t using structure_ctor_t = void(typeinfo_t type, void* inst) The structure constructor used by the reflection system. Overview Parameters type The type of the instance. inst The instance data.","title":"Luna::structure_ctor_t"},{"location":"api/group___runtime_type_1ga768ca9e582a3c0b845ace5631983cd71/#lunastructure_ctor_t","text":"using structure_ctor_t = void(typeinfo_t type, void* inst) The structure constructor used by the reflection system.","title":"Luna::structure_ctor_t"},{"location":"api/group___runtime_type_1ga768ca9e582a3c0b845ace5631983cd71/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga768ca9e582a3c0b845ace5631983cd71/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga768ca9e582a3c0b845ace5631983cd71/#type","text":"The type of the instance.","title":"type"},{"location":"api/group___runtime_type_1ga768ca9e582a3c0b845ace5631983cd71/#inst","text":"The instance data.","title":"inst"},{"location":"api/group___runtime_type_1ga78831c040d8a8c9ab74622826ff16987/","text":"Luna::is_type_hashable LUNA_RUNTIME_API bool is_type_hashable(typeinfo_t type) Checks whether the specified type supports hash code computing. Overview Parameters type The type object. Return value Returns true if the specified type supports hash code computing. Returns false otherwise. Valid Usage type must specify one valid type object and cannot be a generic structure type.","title":"Luna::is_type_hashable"},{"location":"api/group___runtime_type_1ga78831c040d8a8c9ab74622826ff16987/#lunais_type_hashable","text":"LUNA_RUNTIME_API bool is_type_hashable(typeinfo_t type) Checks whether the specified type supports hash code computing.","title":"Luna::is_type_hashable"},{"location":"api/group___runtime_type_1ga78831c040d8a8c9ab74622826ff16987/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga78831c040d8a8c9ab74622826ff16987/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga78831c040d8a8c9ab74622826ff16987/#type","text":"The type object.","title":"type"},{"location":"api/group___runtime_type_1ga78831c040d8a8c9ab74622826ff16987/#return-value","text":"Returns true if the specified type supports hash code computing. Returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_type_1ga78831c040d8a8c9ab74622826ff16987/#valid-usage","text":"type must specify one valid type object and cannot be a generic structure type.","title":"Valid Usage"},{"location":"api/group___runtime_type_1ga7a2013219b4087802ed59f166b4817d8/","text":"Luna::set_enum_instance_value LUNA_RUNTIME_API void set_enum_instance_value(typeinfo_t type, void *data, i64 value) Sets the enumeration value to the specified mapped value. Overview The value is converted to the underlying type of the enumeration before set. Parameters type The type of the instance. data The instance data. value The value to set. Valid Usage type must specify one valid enumeration type object. data must specify one valid instance whose type is type .","title":"Luna::set_enum_instance_value"},{"location":"api/group___runtime_type_1ga7a2013219b4087802ed59f166b4817d8/#lunaset_enum_instance_value","text":"LUNA_RUNTIME_API void set_enum_instance_value(typeinfo_t type, void *data, i64 value) Sets the enumeration value to the specified mapped value.","title":"Luna::set_enum_instance_value"},{"location":"api/group___runtime_type_1ga7a2013219b4087802ed59f166b4817d8/#overview","text":"The value is converted to the underlying type of the enumeration before set.","title":"Overview"},{"location":"api/group___runtime_type_1ga7a2013219b4087802ed59f166b4817d8/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga7a2013219b4087802ed59f166b4817d8/#type","text":"The type of the instance.","title":"type"},{"location":"api/group___runtime_type_1ga7a2013219b4087802ed59f166b4817d8/#data","text":"The instance data.","title":"data"},{"location":"api/group___runtime_type_1ga7a2013219b4087802ed59f166b4817d8/#value","text":"The value to set.","title":"value"},{"location":"api/group___runtime_type_1ga7a2013219b4087802ed59f166b4817d8/#valid-usage","text":"type must specify one valid enumeration type object. data must specify one valid instance whose type is type .","title":"Valid Usage"},{"location":"api/group___runtime_type_1ga7c158aa5c1cce13d8180b8042e2012d1/","text":"Luna::is_type_trivially_constructable LUNA_RUNTIME_API bool is_type_trivially_constructable(typeinfo_t type) Checks whether one type is a trivially constructable type. Overview One type is trivially constructable if:* type must specify one valid type object.","title":"Luna::is_type_trivially_constructable"},{"location":"api/group___runtime_type_1ga7c158aa5c1cce13d8180b8042e2012d1/#lunais_type_trivially_constructable","text":"LUNA_RUNTIME_API bool is_type_trivially_constructable(typeinfo_t type) Checks whether one type is a trivially constructable type.","title":"Luna::is_type_trivially_constructable"},{"location":"api/group___runtime_type_1ga7c158aa5c1cce13d8180b8042e2012d1/#overview","text":"One type is trivially constructable if:* type must specify one valid type object.","title":"Overview"},{"location":"api/group___runtime_type_1ga7e173d3716124b458d3cab6b996b1d33/","text":"Luna::structure_copy_assign_t using structure_copy_assign_t = void(typeinfo_t type, void* dst, void* src) The structure copy assignment operator used by the reflection system. Overview Parameters type The type of the instance. dst The instance data to assign. src The instance data to copy data from.","title":"Luna::structure_copy_assign_t"},{"location":"api/group___runtime_type_1ga7e173d3716124b458d3cab6b996b1d33/#lunastructure_copy_assign_t","text":"using structure_copy_assign_t = void(typeinfo_t type, void* dst, void* src) The structure copy assignment operator used by the reflection system.","title":"Luna::structure_copy_assign_t"},{"location":"api/group___runtime_type_1ga7e173d3716124b458d3cab6b996b1d33/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga7e173d3716124b458d3cab6b996b1d33/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga7e173d3716124b458d3cab6b996b1d33/#type","text":"The type of the instance.","title":"type"},{"location":"api/group___runtime_type_1ga7e173d3716124b458d3cab6b996b1d33/#dst","text":"The instance data to assign.","title":"dst"},{"location":"api/group___runtime_type_1ga7e173d3716124b458d3cab6b996b1d33/#src","text":"The instance data to copy data from.","title":"src"},{"location":"api/group___runtime_type_1ga7fc0735f26fc99cb3939654c5062f5bf/","text":"Luna::check_property_attribute LUNA_RUNTIME_API bool check_property_attribute(typeinfo_t type, const Name &property, const Name &name) Checks whether the attribute of the specified property exists. Overview Parameters type The type object. property The property name. name The name of the attribute to check. Return value Returns true if the attribute exists. Returns false otherwise. Valid Usage type must specify one valid type object and cannot be a generic structure type. property must not be empty. name must not be empty.","title":"Luna::check_property_attribute"},{"location":"api/group___runtime_type_1ga7fc0735f26fc99cb3939654c5062f5bf/#lunacheck_property_attribute","text":"LUNA_RUNTIME_API bool check_property_attribute(typeinfo_t type, const Name &property, const Name &name) Checks whether the attribute of the specified property exists.","title":"Luna::check_property_attribute"},{"location":"api/group___runtime_type_1ga7fc0735f26fc99cb3939654c5062f5bf/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga7fc0735f26fc99cb3939654c5062f5bf/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga7fc0735f26fc99cb3939654c5062f5bf/#type","text":"The type object.","title":"type"},{"location":"api/group___runtime_type_1ga7fc0735f26fc99cb3939654c5062f5bf/#property","text":"The property name.","title":"property"},{"location":"api/group___runtime_type_1ga7fc0735f26fc99cb3939654c5062f5bf/#name","text":"The name of the attribute to check.","title":"name"},{"location":"api/group___runtime_type_1ga7fc0735f26fc99cb3939654c5062f5bf/#return-value","text":"Returns true if the attribute exists. Returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_type_1ga7fc0735f26fc99cb3939654c5062f5bf/#valid-usage","text":"type must specify one valid type object and cannot be a generic structure type. property must not be empty. name must not be empty.","title":"Valid Usage"},{"location":"api/group___runtime_type_1ga8278384e54d76a31006942100c3e7842/","text":"Luna::remove_type_attribute LUNA_RUNTIME_API void remove_type_attribute(typeinfo_t type, const Name &name) Removes one attribute of the specified type. Overview Parameters type The type object. name The name of the attribute to remove. Valid Usage type must specify one valid type object. name must not be empty.","title":"Luna::remove_type_attribute"},{"location":"api/group___runtime_type_1ga8278384e54d76a31006942100c3e7842/#lunaremove_type_attribute","text":"LUNA_RUNTIME_API void remove_type_attribute(typeinfo_t type, const Name &name) Removes one attribute of the specified type.","title":"Luna::remove_type_attribute"},{"location":"api/group___runtime_type_1ga8278384e54d76a31006942100c3e7842/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga8278384e54d76a31006942100c3e7842/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga8278384e54d76a31006942100c3e7842/#type","text":"The type object.","title":"type"},{"location":"api/group___runtime_type_1ga8278384e54d76a31006942100c3e7842/#name","text":"The name of the attribute to remove.","title":"name"},{"location":"api/group___runtime_type_1ga8278384e54d76a31006942100c3e7842/#valid-usage","text":"type must specify one valid type object. name must not be empty.","title":"Valid Usage"},{"location":"api/group___runtime_type_1ga89512f37edb473f255611970ac49d7d4/","text":"Luna::destruct_type LUNA_RUNTIME_API void destruct_type(typeinfo_t type, void *data) Destructs one instance of the specified type. Overview The destruction is performed as follows:* type must specify one valid type object and cannot be a generic structure type. data must specify one valid memory address.","title":"Luna::destruct_type"},{"location":"api/group___runtime_type_1ga89512f37edb473f255611970ac49d7d4/#lunadestruct_type","text":"LUNA_RUNTIME_API void destruct_type(typeinfo_t type, void *data) Destructs one instance of the specified type.","title":"Luna::destruct_type"},{"location":"api/group___runtime_type_1ga89512f37edb473f255611970ac49d7d4/#overview","text":"The destruction is performed as follows:* type must specify one valid type object and cannot be a generic structure type. data must specify one valid memory address.","title":"Overview"},{"location":"api/group___runtime_type_1ga8b1f041ba85ca0a99ed545f814988f0a/","text":"Luna::get_type_private_data LUNA_RUNTIME_API void * get_type_private_data(typeinfo_t type, const Guid &data_guid) Gets user defined private data for the specified type. Overview Parameters type The type object. data_guid The GUID of the private data to check. Return value Returns one pointer to the private data. Returns nullptr if such data does not exist. Valid Usage type must specify one valid type object.","title":"Luna::get_type_private_data"},{"location":"api/group___runtime_type_1ga8b1f041ba85ca0a99ed545f814988f0a/#lunaget_type_private_data","text":"LUNA_RUNTIME_API void * get_type_private_data(typeinfo_t type, const Guid &data_guid) Gets user defined private data for the specified type.","title":"Luna::get_type_private_data"},{"location":"api/group___runtime_type_1ga8b1f041ba85ca0a99ed545f814988f0a/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga8b1f041ba85ca0a99ed545f814988f0a/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga8b1f041ba85ca0a99ed545f814988f0a/#type","text":"The type object.","title":"type"},{"location":"api/group___runtime_type_1ga8b1f041ba85ca0a99ed545f814988f0a/#data_guid","text":"The GUID of the private data to check.","title":"data_guid"},{"location":"api/group___runtime_type_1ga8b1f041ba85ca0a99ed545f814988f0a/#return-value","text":"Returns one pointer to the private data. Returns nullptr if such data does not exist.","title":"Return value"},{"location":"api/group___runtime_type_1ga8b1f041ba85ca0a99ed545f814988f0a/#valid-usage","text":"type must specify one valid type object.","title":"Valid Usage"},{"location":"api/group___runtime_type_1ga8eef2bb85d162fa168724baccc5950b2/","text":"Luna::set_type_private_data LUNA_RUNTIME_API void * set_type_private_data(typeinfo_t type, const Guid &data_guid, usize data_size, usize data_alignment=0, void(*data_dtor)(void *)=nullptr) Sets user defined private data for the specified type. Overview Parameters type The type object. data_guid The GUID of the private data. If one data with this GUID already exists, the original data will be deleted and replaced by one new data. data_size The size of the data in bytes. data_alignment The alignment requirement of the data in bytes. Specify 0 to use the default alignment, which is MAX_ALIGN. data_dtor One optional callback function that will be called when the data is going to be freed if specified. Valid Usage type must specify one valid type object.","title":"Luna::set_type_private_data"},{"location":"api/group___runtime_type_1ga8eef2bb85d162fa168724baccc5950b2/#lunaset_type_private_data","text":"LUNA_RUNTIME_API void * set_type_private_data(typeinfo_t type, const Guid &data_guid, usize data_size, usize data_alignment=0, void(*data_dtor)(void *)=nullptr) Sets user defined private data for the specified type.","title":"Luna::set_type_private_data"},{"location":"api/group___runtime_type_1ga8eef2bb85d162fa168724baccc5950b2/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga8eef2bb85d162fa168724baccc5950b2/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga8eef2bb85d162fa168724baccc5950b2/#type","text":"The type object.","title":"type"},{"location":"api/group___runtime_type_1ga8eef2bb85d162fa168724baccc5950b2/#data_guid","text":"The GUID of the private data. If one data with this GUID already exists, the original data will be deleted and replaced by one new data.","title":"data_guid"},{"location":"api/group___runtime_type_1ga8eef2bb85d162fa168724baccc5950b2/#data_size","text":"The size of the data in bytes.","title":"data_size"},{"location":"api/group___runtime_type_1ga8eef2bb85d162fa168724baccc5950b2/#data_alignment","text":"The alignment requirement of the data in bytes. Specify 0 to use the default alignment, which is MAX_ALIGN.","title":"data_alignment"},{"location":"api/group___runtime_type_1ga8eef2bb85d162fa168724baccc5950b2/#data_dtor","text":"One optional callback function that will be called when the data is going to be freed if specified.","title":"data_dtor"},{"location":"api/group___runtime_type_1ga8eef2bb85d162fa168724baccc5950b2/#valid-usage","text":"type must specify one valid type object.","title":"Valid Usage"},{"location":"api/group___runtime_type_1ga8fc8a7fac5d7599464ea5e3084a0475e/","text":"Luna::isize_type LUNA_RUNTIME_API typeinfo_t isize_type() Gets the type object of isize type. Overview Return value Returns the type object of isize type.","title":"Luna::isize_type"},{"location":"api/group___runtime_type_1ga8fc8a7fac5d7599464ea5e3084a0475e/#lunaisize_type","text":"LUNA_RUNTIME_API typeinfo_t isize_type() Gets the type object of isize type.","title":"Luna::isize_type"},{"location":"api/group___runtime_type_1ga8fc8a7fac5d7599464ea5e3084a0475e/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga8fc8a7fac5d7599464ea5e3084a0475e/#return-value","text":"Returns the type object of isize type.","title":"Return value"},{"location":"api/group___runtime_type_1ga90857089e684fcde426c43234d75eba4/","text":"Luna::u8_type LUNA_RUNTIME_API typeinfo_t u8_type() Gets the type object of u8 type. Overview Return value Returns the type object of u8 type.","title":"Luna::u8_type"},{"location":"api/group___runtime_type_1ga90857089e684fcde426c43234d75eba4/#lunau8_type","text":"LUNA_RUNTIME_API typeinfo_t u8_type() Gets the type object of u8 type.","title":"Luna::u8_type"},{"location":"api/group___runtime_type_1ga90857089e684fcde426c43234d75eba4/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga90857089e684fcde426c43234d75eba4/#return-value","text":"Returns the type object of u8 type.","title":"Return value"},{"location":"api/group___runtime_type_1ga909db1d9ee83e74969fc1fa2886e5e6e/","text":"Luna::hash_func_t using hash_func_t = usize(typeinfo_t type, const void* inst) The hash code computing function used by the reflection system. Overview Parameters type The type of the instance. inst The pointer to the instance. Return value Returns the computed hash code.","title":"Luna::hash_func_t"},{"location":"api/group___runtime_type_1ga909db1d9ee83e74969fc1fa2886e5e6e/#lunahash_func_t","text":"using hash_func_t = usize(typeinfo_t type, const void* inst) The hash code computing function used by the reflection system.","title":"Luna::hash_func_t"},{"location":"api/group___runtime_type_1ga909db1d9ee83e74969fc1fa2886e5e6e/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga909db1d9ee83e74969fc1fa2886e5e6e/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga909db1d9ee83e74969fc1fa2886e5e6e/#type","text":"The type of the instance.","title":"type"},{"location":"api/group___runtime_type_1ga909db1d9ee83e74969fc1fa2886e5e6e/#inst","text":"The pointer to the instance.","title":"inst"},{"location":"api/group___runtime_type_1ga909db1d9ee83e74969fc1fa2886e5e6e/#return-value","text":"Returns the computed hash code.","title":"Return value"},{"location":"api/group___runtime_type_1ga90c85568f4936b27f83a9292e56e16fb/","text":"Luna::default_dtor template <typename _Ty> void default_dtor(typeinfo_t type, void *inst) The default destructor used by the reflection system.","title":"Luna::default_dtor"},{"location":"api/group___runtime_type_1ga90c85568f4936b27f83a9292e56e16fb/#lunadefault_dtor","text":"template <typename _Ty> void default_dtor(typeinfo_t type, void *inst) The default destructor used by the reflection system.","title":"Luna::default_dtor"},{"location":"api/group___runtime_type_1ga9187115510c764871db92f2277882337/","text":"Luna::set_type_attribute LUNA_RUNTIME_API void set_type_attribute(typeinfo_t type, const Name &name, const Variant &value=Variant()) Sets one attribute of the specified type. Overview Parameters type The type object. name The name of the attribute to set. value The value of the attribute. Valid Usage type must specify one valid type object. name must not be empty.","title":"Luna::set_type_attribute"},{"location":"api/group___runtime_type_1ga9187115510c764871db92f2277882337/#lunaset_type_attribute","text":"LUNA_RUNTIME_API void set_type_attribute(typeinfo_t type, const Name &name, const Variant &value=Variant()) Sets one attribute of the specified type.","title":"Luna::set_type_attribute"},{"location":"api/group___runtime_type_1ga9187115510c764871db92f2277882337/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga9187115510c764871db92f2277882337/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga9187115510c764871db92f2277882337/#type","text":"The type object.","title":"type"},{"location":"api/group___runtime_type_1ga9187115510c764871db92f2277882337/#name","text":"The name of the attribute to set.","title":"name"},{"location":"api/group___runtime_type_1ga9187115510c764871db92f2277882337/#value","text":"The value of the attribute.","title":"value"},{"location":"api/group___runtime_type_1ga9187115510c764871db92f2277882337/#valid-usage","text":"type must specify one valid type object. name must not be empty.","title":"Valid Usage"},{"location":"api/group___runtime_type_1ga93cf43c9254f6baddc7052eefa0b566b/","text":"Luna::get_type_attribute LUNA_RUNTIME_API Variant get_type_attribute(typeinfo_t type, const Name &name) Gets the attribute of the specified type. Overview Parameters type The type object. name The name of the attribute to get. Return value Returns the requested attribute. Returns one null variant if the attribute does not exist. Valid Usage type must specify one valid type object. name must not be empty.","title":"Luna::get_type_attribute"},{"location":"api/group___runtime_type_1ga93cf43c9254f6baddc7052eefa0b566b/#lunaget_type_attribute","text":"LUNA_RUNTIME_API Variant get_type_attribute(typeinfo_t type, const Name &name) Gets the attribute of the specified type.","title":"Luna::get_type_attribute"},{"location":"api/group___runtime_type_1ga93cf43c9254f6baddc7052eefa0b566b/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga93cf43c9254f6baddc7052eefa0b566b/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga93cf43c9254f6baddc7052eefa0b566b/#type","text":"The type object.","title":"type"},{"location":"api/group___runtime_type_1ga93cf43c9254f6baddc7052eefa0b566b/#name","text":"The name of the attribute to get.","title":"name"},{"location":"api/group___runtime_type_1ga93cf43c9254f6baddc7052eefa0b566b/#return-value","text":"Returns the requested attribute. Returns one null variant if the attribute does not exist.","title":"Return value"},{"location":"api/group___runtime_type_1ga93cf43c9254f6baddc7052eefa0b566b/#valid-usage","text":"type must specify one valid type object. name must not be empty.","title":"Valid Usage"},{"location":"api/group___runtime_type_1ga94511b2e9b30763064ccb2de035e9f37/","text":"Luna::guid_type LUNA_RUNTIME_API typeinfo_t guid_type() Gets the type object of [Guid](struct_luna_1_1_guid.md) type. Overview Return value Returns the type object of [Guid](struct_luna_1_1_guid.md) type.","title":"Luna::guid_type"},{"location":"api/group___runtime_type_1ga94511b2e9b30763064ccb2de035e9f37/#lunaguid_type","text":"LUNA_RUNTIME_API typeinfo_t guid_type() Gets the type object of [Guid](struct_luna_1_1_guid.md) type.","title":"Luna::guid_type"},{"location":"api/group___runtime_type_1ga94511b2e9b30763064ccb2de035e9f37/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga94511b2e9b30763064ccb2de035e9f37/#return-value","text":"Returns the type object of [Guid](struct_luna_1_1_guid.md) type.","title":"Return value"},{"location":"api/group___runtime_type_1ga949f118650021d610e817a18b0066f1e/","text":"Luna::register_struct_type LUNA_RUNTIME_API typeinfo_t register_struct_type(const StructureTypeDesc &desc) Registers one structure type. Overview If one type with the same name or GUID already exists, the new type will not be registered. Parameters desc The structure type descriptor. Return value Returns the type object of the new structure type if the type is successfully registered. Returns the type object of the existing type if one type with the same name or GUID already exists.","title":"Luna::register_struct_type"},{"location":"api/group___runtime_type_1ga949f118650021d610e817a18b0066f1e/#lunaregister_struct_type","text":"LUNA_RUNTIME_API typeinfo_t register_struct_type(const StructureTypeDesc &desc) Registers one structure type.","title":"Luna::register_struct_type"},{"location":"api/group___runtime_type_1ga949f118650021d610e817a18b0066f1e/#overview","text":"If one type with the same name or GUID already exists, the new type will not be registered.","title":"Overview"},{"location":"api/group___runtime_type_1ga949f118650021d610e817a18b0066f1e/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga949f118650021d610e817a18b0066f1e/#desc","text":"The structure type descriptor.","title":"desc"},{"location":"api/group___runtime_type_1ga949f118650021d610e817a18b0066f1e/#return-value","text":"Returns the type object of the new structure type if the type is successfully registered. Returns the type object of the existing type if one type with the same name or GUID already exists.","title":"Return value"},{"location":"api/group___runtime_type_1ga95dd21bb12c6ba99ba17a4199b250861/","text":"Luna::structure_copy_ctor_t using structure_copy_ctor_t = void(typeinfo_t type, void* dst, void* src) The structure copy constructor used by the reflection system. Overview Parameters type The type of the instance. dst The instance data to construct. src The instance data to copy data from.","title":"Luna::structure_copy_ctor_t"},{"location":"api/group___runtime_type_1ga95dd21bb12c6ba99ba17a4199b250861/#lunastructure_copy_ctor_t","text":"using structure_copy_ctor_t = void(typeinfo_t type, void* dst, void* src) The structure copy constructor used by the reflection system.","title":"Luna::structure_copy_ctor_t"},{"location":"api/group___runtime_type_1ga95dd21bb12c6ba99ba17a4199b250861/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga95dd21bb12c6ba99ba17a4199b250861/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga95dd21bb12c6ba99ba17a4199b250861/#type","text":"The type of the instance.","title":"type"},{"location":"api/group___runtime_type_1ga95dd21bb12c6ba99ba17a4199b250861/#dst","text":"The instance data to construct.","title":"dst"},{"location":"api/group___runtime_type_1ga95dd21bb12c6ba99ba17a4199b250861/#src","text":"The instance data to copy data from.","title":"src"},{"location":"api/group___runtime_type_1ga96250fce1e1c1c525229305336cf53f8/","text":"Luna::is_generic_struct_instanced_type LUNA_RUNTIME_API bool is_generic_struct_instanced_type(typeinfo_t type) Checks whether one type is a generic instanced structure type. Overview Parameters type The type object to check. Return value Returns true if the specified type is a generic instanced structure type. Returns false otherwise. Valid Usage type must specify one valid type object.","title":"Luna::is_generic_struct_instanced_type"},{"location":"api/group___runtime_type_1ga96250fce1e1c1c525229305336cf53f8/#lunais_generic_struct_instanced_type","text":"LUNA_RUNTIME_API bool is_generic_struct_instanced_type(typeinfo_t type) Checks whether one type is a generic instanced structure type.","title":"Luna::is_generic_struct_instanced_type"},{"location":"api/group___runtime_type_1ga96250fce1e1c1c525229305336cf53f8/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1ga96250fce1e1c1c525229305336cf53f8/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1ga96250fce1e1c1c525229305336cf53f8/#type","text":"The type object to check.","title":"type"},{"location":"api/group___runtime_type_1ga96250fce1e1c1c525229305336cf53f8/#return-value","text":"Returns true if the specified type is a generic instanced structure type. Returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_type_1ga96250fce1e1c1c525229305336cf53f8/#valid-usage","text":"type must specify one valid type object.","title":"Valid Usage"},{"location":"api/group___runtime_type_1gaa25ce33574555d8be053cd84f12d64a6/","text":"Luna::equal_to_func_t using equal_to_func_t = bool(typeinfo_t type, const void* lhs, const void* rhs) The equality testing function used by the reflection system. Overview Parameters type The type object. lhs The pointer to the first instance to be compared. rhs The pointer to the second instance to be compared. Return value Returns true if two instances are equal. Returns false otherwise.","title":"Luna::equal_to_func_t"},{"location":"api/group___runtime_type_1gaa25ce33574555d8be053cd84f12d64a6/#lunaequal_to_func_t","text":"using equal_to_func_t = bool(typeinfo_t type, const void* lhs, const void* rhs) The equality testing function used by the reflection system.","title":"Luna::equal_to_func_t"},{"location":"api/group___runtime_type_1gaa25ce33574555d8be053cd84f12d64a6/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1gaa25ce33574555d8be053cd84f12d64a6/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1gaa25ce33574555d8be053cd84f12d64a6/#type","text":"The type object.","title":"type"},{"location":"api/group___runtime_type_1gaa25ce33574555d8be053cd84f12d64a6/#lhs","text":"The pointer to the first instance to be compared.","title":"lhs"},{"location":"api/group___runtime_type_1gaa25ce33574555d8be053cd84f12d64a6/#rhs","text":"The pointer to the second instance to be compared.","title":"rhs"},{"location":"api/group___runtime_type_1gaa25ce33574555d8be053cd84f12d64a6/#return-value","text":"Returns true if two instances are equal. Returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_type_1gaa3ff6510d8913db109a24fe7b584821e/","text":"Luna::is_type_trivially_copy_assignable LUNA_RUNTIME_API bool is_type_trivially_copy_assignable(typeinfo_t type) Checks whether one type is a trivially copy assignable type. Overview One type is trivially copy assignable if:* type must specify one valid type object.","title":"Luna::is_type_trivially_copy_assignable"},{"location":"api/group___runtime_type_1gaa3ff6510d8913db109a24fe7b584821e/#lunais_type_trivially_copy_assignable","text":"LUNA_RUNTIME_API bool is_type_trivially_copy_assignable(typeinfo_t type) Checks whether one type is a trivially copy assignable type.","title":"Luna::is_type_trivially_copy_assignable"},{"location":"api/group___runtime_type_1gaa3ff6510d8913db109a24fe7b584821e/#overview","text":"One type is trivially copy assignable if:* type must specify one valid type object.","title":"Overview"},{"location":"api/group___runtime_type_1gaa419dcaa7089913911cfb31cee11d59c/","text":"Luna::remove_property_attribute LUNA_RUNTIME_API void remove_property_attribute(typeinfo_t type, const Name &property, const Name &name) Removes one attribute of the specified property. Overview Parameters type The type object. property The property name. name The name of the attribute to remove. Valid Usage type must specify one valid type object and cannot be a generic structure type. property must not be empty. name must not be empty.","title":"Luna::remove_property_attribute"},{"location":"api/group___runtime_type_1gaa419dcaa7089913911cfb31cee11d59c/#lunaremove_property_attribute","text":"LUNA_RUNTIME_API void remove_property_attribute(typeinfo_t type, const Name &property, const Name &name) Removes one attribute of the specified property.","title":"Luna::remove_property_attribute"},{"location":"api/group___runtime_type_1gaa419dcaa7089913911cfb31cee11d59c/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1gaa419dcaa7089913911cfb31cee11d59c/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1gaa419dcaa7089913911cfb31cee11d59c/#type","text":"The type object.","title":"type"},{"location":"api/group___runtime_type_1gaa419dcaa7089913911cfb31cee11d59c/#property","text":"The property name.","title":"property"},{"location":"api/group___runtime_type_1gaa419dcaa7089913911cfb31cee11d59c/#name","text":"The name of the attribute to remove.","title":"name"},{"location":"api/group___runtime_type_1gaa419dcaa7089913911cfb31cee11d59c/#valid-usage","text":"type must specify one valid type object and cannot be a generic structure type. property must not be empty. name must not be empty.","title":"Valid Usage"},{"location":"api/group___runtime_type_1gaae3393f0bc6ecd65157c1071c0363fc5/","text":"Luna::set_hashable LUNA_RUNTIME_API void set_hashable(typeinfo_t type, hash_func_t *func) Sets one type to support hash code computing. Overview Parameters type The type object. func The hash code computing function to use. Valid Usage type must specify one valid type object and cannot be a generic structure type. func must specify one valid function.","title":"Luna::set_hashable"},{"location":"api/group___runtime_type_1gaae3393f0bc6ecd65157c1071c0363fc5/#lunaset_hashable","text":"LUNA_RUNTIME_API void set_hashable(typeinfo_t type, hash_func_t *func) Sets one type to support hash code computing.","title":"Luna::set_hashable"},{"location":"api/group___runtime_type_1gaae3393f0bc6ecd65157c1071c0363fc5/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1gaae3393f0bc6ecd65157c1071c0363fc5/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1gaae3393f0bc6ecd65157c1071c0363fc5/#type","text":"The type object.","title":"type"},{"location":"api/group___runtime_type_1gaae3393f0bc6ecd65157c1071c0363fc5/#func","text":"The hash code computing function to use.","title":"func"},{"location":"api/group___runtime_type_1gaae3393f0bc6ecd65157c1071c0363fc5/#valid-usage","text":"type must specify one valid type object and cannot be a generic structure type. func must specify one valid function.","title":"Valid Usage"},{"location":"api/group___runtime_type_1gaaeb4e0b057ba3b169bf1abcb22b3afe1/","text":"Luna::get_enum_instance_value LUNA_RUNTIME_API i64 get_enum_instance_value(typeinfo_t type, const void *data) Extracts the mapped value of the enumeration, regardless of the underlying type of the enumeration. Overview Parameters type The type of the instance. data The instance data. Return value Returns the mapped value of the enumeration converted to signed 64-bit integer. Valid Usage type must specify one valid enumeration type object. data must specify one valid instance whose type is type .","title":"Luna::get_enum_instance_value"},{"location":"api/group___runtime_type_1gaaeb4e0b057ba3b169bf1abcb22b3afe1/#lunaget_enum_instance_value","text":"LUNA_RUNTIME_API i64 get_enum_instance_value(typeinfo_t type, const void *data) Extracts the mapped value of the enumeration, regardless of the underlying type of the enumeration.","title":"Luna::get_enum_instance_value"},{"location":"api/group___runtime_type_1gaaeb4e0b057ba3b169bf1abcb22b3afe1/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1gaaeb4e0b057ba3b169bf1abcb22b3afe1/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1gaaeb4e0b057ba3b169bf1abcb22b3afe1/#type","text":"The type of the instance.","title":"type"},{"location":"api/group___runtime_type_1gaaeb4e0b057ba3b169bf1abcb22b3afe1/#data","text":"The instance data.","title":"data"},{"location":"api/group___runtime_type_1gaaeb4e0b057ba3b169bf1abcb22b3afe1/#return-value","text":"Returns the mapped value of the enumeration converted to signed 64-bit integer.","title":"Return value"},{"location":"api/group___runtime_type_1gaaeb4e0b057ba3b169bf1abcb22b3afe1/#valid-usage","text":"type must specify one valid enumeration type object. data must specify one valid instance whose type is type .","title":"Valid Usage"},{"location":"api/group___runtime_type_1gaaf4e28efc7b6a91e436bdefa98ff2f5b/","text":"Luna::get_property_attributes LUNA_RUNTIME_API Vector< Name > get_property_attributes(typeinfo_t type, const Name &property) Gets all attributes of the specified property. Overview Parameters type The type object. property The property name. Return value Returns one vector that contains attribute names of all attributes of the specified property. Valid Usage type must specify one valid type object and cannot be a generic structure type. property must not be empty.","title":"Luna::get_property_attributes"},{"location":"api/group___runtime_type_1gaaf4e28efc7b6a91e436bdefa98ff2f5b/#lunaget_property_attributes","text":"LUNA_RUNTIME_API Vector< Name > get_property_attributes(typeinfo_t type, const Name &property) Gets all attributes of the specified property.","title":"Luna::get_property_attributes"},{"location":"api/group___runtime_type_1gaaf4e28efc7b6a91e436bdefa98ff2f5b/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1gaaf4e28efc7b6a91e436bdefa98ff2f5b/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1gaaf4e28efc7b6a91e436bdefa98ff2f5b/#type","text":"The type object.","title":"type"},{"location":"api/group___runtime_type_1gaaf4e28efc7b6a91e436bdefa98ff2f5b/#property","text":"The property name.","title":"property"},{"location":"api/group___runtime_type_1gaaf4e28efc7b6a91e436bdefa98ff2f5b/#return-value","text":"Returns one vector that contains attribute names of all attributes of the specified property.","title":"Return value"},{"location":"api/group___runtime_type_1gaaf4e28efc7b6a91e436bdefa98ff2f5b/#valid-usage","text":"type must specify one valid type object and cannot be a generic structure type. property must not be empty.","title":"Valid Usage"},{"location":"api/group___runtime_type_1gaafacc048375e4353604b39ce2a114390/","text":"Luna::is_type_trivially_relocatable LUNA_RUNTIME_API bool is_type_trivially_relocatable(typeinfo_t type) Checks whether one type is a trivially relocatable type. Overview One type is trivially relocatable if:* type must specify one valid type object.","title":"Luna::is_type_trivially_relocatable"},{"location":"api/group___runtime_type_1gaafacc048375e4353604b39ce2a114390/#lunais_type_trivially_relocatable","text":"LUNA_RUNTIME_API bool is_type_trivially_relocatable(typeinfo_t type) Checks whether one type is a trivially relocatable type.","title":"Luna::is_type_trivially_relocatable"},{"location":"api/group___runtime_type_1gaafacc048375e4353604b39ce2a114390/#overview","text":"One type is trivially relocatable if:* type must specify one valid type object.","title":"Overview"},{"location":"api/group___runtime_type_1gab59255ba7d0106421370d19ceb2c9132/","text":"Luna::construct_type_range LUNA_RUNTIME_API void construct_type_range(typeinfo_t type, void *data, usize count) Constructs one array of instances of the specified type. Overview The construction is performed as follows:* type must specify one valid type object and cannot be a generic structure type. data must specify one valid memory address.","title":"Luna::construct_type_range"},{"location":"api/group___runtime_type_1gab59255ba7d0106421370d19ceb2c9132/#lunaconstruct_type_range","text":"LUNA_RUNTIME_API void construct_type_range(typeinfo_t type, void *data, usize count) Constructs one array of instances of the specified type.","title":"Luna::construct_type_range"},{"location":"api/group___runtime_type_1gab59255ba7d0106421370d19ceb2c9132/#overview","text":"The construction is performed as follows:* type must specify one valid type object and cannot be a generic structure type. data must specify one valid memory address.","title":"Overview"},{"location":"api/group___runtime_type_1gab7ce802a4f7f33f2abf66bdc24042031/","text":"Luna::i16_type LUNA_RUNTIME_API typeinfo_t i16_type() Gets the type object of i16 type. Overview Return value Returns the type object of i16 type.","title":"Luna::i16_type"},{"location":"api/group___runtime_type_1gab7ce802a4f7f33f2abf66bdc24042031/#lunai16_type","text":"LUNA_RUNTIME_API typeinfo_t i16_type() Gets the type object of i16 type.","title":"Luna::i16_type"},{"location":"api/group___runtime_type_1gab7ce802a4f7f33f2abf66bdc24042031/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1gab7ce802a4f7f33f2abf66bdc24042031/#return-value","text":"Returns the type object of i16 type.","title":"Return value"},{"location":"api/group___runtime_type_1gab8c3f4867cb9674acad87d4eb69ddd9b/","text":"Luna::is_type_trivially_move_assignable LUNA_RUNTIME_API bool is_type_trivially_move_assignable(typeinfo_t type) Checks whether one type is a trivially move assignable type. Overview One type is trivially move assignable if:* type must specify one valid type object.","title":"Luna::is_type_trivially_move_assignable"},{"location":"api/group___runtime_type_1gab8c3f4867cb9674acad87d4eb69ddd9b/#lunais_type_trivially_move_assignable","text":"LUNA_RUNTIME_API bool is_type_trivially_move_assignable(typeinfo_t type) Checks whether one type is a trivially move assignable type.","title":"Luna::is_type_trivially_move_assignable"},{"location":"api/group___runtime_type_1gab8c3f4867cb9674acad87d4eb69ddd9b/#overview","text":"One type is trivially move assignable if:* type must specify one valid type object.","title":"Overview"},{"location":"api/group___runtime_type_1gab8ed39307af0f42f486aa05ed104c4fb/","text":"Luna::is_struct_type LUNA_RUNTIME_API bool is_struct_type(typeinfo_t type) Checks whether one type is a structure type. Overview Parameters type The type object to check. Return value Returns true if the specified type is a structure type. Returns false otherwise. Valid Usage type must specify one valid type object.","title":"Luna::is_struct_type"},{"location":"api/group___runtime_type_1gab8ed39307af0f42f486aa05ed104c4fb/#lunais_struct_type","text":"LUNA_RUNTIME_API bool is_struct_type(typeinfo_t type) Checks whether one type is a structure type.","title":"Luna::is_struct_type"},{"location":"api/group___runtime_type_1gab8ed39307af0f42f486aa05ed104c4fb/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1gab8ed39307af0f42f486aa05ed104c4fb/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1gab8ed39307af0f42f486aa05ed104c4fb/#type","text":"The type object to check.","title":"type"},{"location":"api/group___runtime_type_1gab8ed39307af0f42f486aa05ed104c4fb/#return-value","text":"Returns true if the specified type is a structure type. Returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_type_1gab8ed39307af0f42f486aa05ed104c4fb/#valid-usage","text":"type must specify one valid type object.","title":"Valid Usage"},{"location":"api/group___runtime_type_1gaba0b3d24063eba33f57dbfb077bb4531/","text":"Luna::default_equal_to template <typename _Ty> bool default_equal_to(typeinfo_t type, const void *lhs, const void *rhs) The default equality comparison function used by the reflection system.","title":"Luna::default_equal_to"},{"location":"api/group___runtime_type_1gaba0b3d24063eba33f57dbfb077bb4531/#lunadefault_equal_to","text":"template <typename _Ty> bool default_equal_to(typeinfo_t type, const void *lhs, const void *rhs) The default equality comparison function used by the reflection system.","title":"Luna::default_equal_to"},{"location":"api/group___runtime_type_1gaba5ba232325b69268d9338520b941588/","text":"Luna::set_property_attribute LUNA_RUNTIME_API void set_property_attribute(typeinfo_t type, const Name &property, const Name &name, const Variant &value=Variant()) Sets one attribute of the specified property. Overview Parameters type The type object. property The property name. name The name of the attribute to set. value The value of the attribute. Valid Usage type must specify one valid type object and cannot be a generic structure type. property must not be empty. name must not be empty.","title":"Luna::set_property_attribute"},{"location":"api/group___runtime_type_1gaba5ba232325b69268d9338520b941588/#lunaset_property_attribute","text":"LUNA_RUNTIME_API void set_property_attribute(typeinfo_t type, const Name &property, const Name &name, const Variant &value=Variant()) Sets one attribute of the specified property.","title":"Luna::set_property_attribute"},{"location":"api/group___runtime_type_1gaba5ba232325b69268d9338520b941588/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1gaba5ba232325b69268d9338520b941588/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1gaba5ba232325b69268d9338520b941588/#type","text":"The type object.","title":"type"},{"location":"api/group___runtime_type_1gaba5ba232325b69268d9338520b941588/#property","text":"The property name.","title":"property"},{"location":"api/group___runtime_type_1gaba5ba232325b69268d9338520b941588/#name","text":"The name of the attribute to set.","title":"name"},{"location":"api/group___runtime_type_1gaba5ba232325b69268d9338520b941588/#value","text":"The value of the attribute.","title":"value"},{"location":"api/group___runtime_type_1gaba5ba232325b69268d9338520b941588/#valid-usage","text":"type must specify one valid type object and cannot be a generic structure type. property must not be empty. name must not be empty.","title":"Valid Usage"},{"location":"api/group___runtime_type_1gaba8a582259d93bbe88797de0adc53096/","text":"Luna::copy_assign_type LUNA_RUNTIME_API void copy_assign_type(typeinfo_t type, void *dst, void *src) Copy assigns one instance of the specified type. Overview The assignment is performed as follows:* type must specify one valid type object and cannot be a generic structure type. dst and src must specify one valid memory address.","title":"Luna::copy_assign_type"},{"location":"api/group___runtime_type_1gaba8a582259d93bbe88797de0adc53096/#lunacopy_assign_type","text":"LUNA_RUNTIME_API void copy_assign_type(typeinfo_t type, void *dst, void *src) Copy assigns one instance of the specified type.","title":"Luna::copy_assign_type"},{"location":"api/group___runtime_type_1gaba8a582259d93bbe88797de0adc53096/#overview","text":"The assignment is performed as follows:* type must specify one valid type object and cannot be a generic structure type. dst and src must specify one valid memory address.","title":"Overview"},{"location":"api/group___runtime_type_1gabba17bf49390f1000f392d85bee0c0e4/","text":"Luna::get_base_type LUNA_RUNTIME_API typeinfo_t get_base_type(typeinfo_t type) Gets the base type of the specified type. Overview Parameters type The type to query. Return value Returns the base type of the specified type. Returns nullptr if the specified type is not a structure type, or if the type does not have a base type. Valid Usage type must specify one valid type object.","title":"Luna::get_base_type"},{"location":"api/group___runtime_type_1gabba17bf49390f1000f392d85bee0c0e4/#lunaget_base_type","text":"LUNA_RUNTIME_API typeinfo_t get_base_type(typeinfo_t type) Gets the base type of the specified type.","title":"Luna::get_base_type"},{"location":"api/group___runtime_type_1gabba17bf49390f1000f392d85bee0c0e4/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1gabba17bf49390f1000f392d85bee0c0e4/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1gabba17bf49390f1000f392d85bee0c0e4/#type","text":"The type to query.","title":"type"},{"location":"api/group___runtime_type_1gabba17bf49390f1000f392d85bee0c0e4/#return-value","text":"Returns the base type of the specified type. Returns nullptr if the specified type is not a structure type, or if the type does not have a base type.","title":"Return value"},{"location":"api/group___runtime_type_1gabba17bf49390f1000f392d85bee0c0e4/#valid-usage","text":"type must specify one valid type object.","title":"Valid Usage"},{"location":"api/group___runtime_type_1gac4c7a83d083ad87e8fcd53be7aa06b3b/","text":"Luna::get_type_by_name LUNA_RUNTIME_API typeinfo_t get_type_by_name(const Name &name, const Name &alias=Name()) Gets one type by its name. Overview Parameters name The name of the type. alias The alias name of the type. Return value Returns the type object that matches the name. Returns nullptr if no such type is found.","title":"Luna::get_type_by_name"},{"location":"api/group___runtime_type_1gac4c7a83d083ad87e8fcd53be7aa06b3b/#lunaget_type_by_name","text":"LUNA_RUNTIME_API typeinfo_t get_type_by_name(const Name &name, const Name &alias=Name()) Gets one type by its name.","title":"Luna::get_type_by_name"},{"location":"api/group___runtime_type_1gac4c7a83d083ad87e8fcd53be7aa06b3b/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1gac4c7a83d083ad87e8fcd53be7aa06b3b/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1gac4c7a83d083ad87e8fcd53be7aa06b3b/#name","text":"The name of the type.","title":"name"},{"location":"api/group___runtime_type_1gac4c7a83d083ad87e8fcd53be7aa06b3b/#alias","text":"The alias name of the type.","title":"alias"},{"location":"api/group___runtime_type_1gac4c7a83d083ad87e8fcd53be7aa06b3b/#return-value","text":"Returns the type object that matches the name. Returns nullptr if no such type is found.","title":"Return value"},{"location":"api/group___runtime_type_1gac70c6be78b5040fd413a1d5401608f0c/","text":"Luna::copy_construct_type_range LUNA_RUNTIME_API void copy_construct_type_range(typeinfo_t type, void *dst, void *src, usize count) Copy constructs one array of instances of the specified type. Overview The construction is performed as follows:* type must specify one valid type object and cannot be a generic structure type. dst and src must specify one valid memory address.","title":"Luna::copy_construct_type_range"},{"location":"api/group___runtime_type_1gac70c6be78b5040fd413a1d5401608f0c/#lunacopy_construct_type_range","text":"LUNA_RUNTIME_API void copy_construct_type_range(typeinfo_t type, void *dst, void *src, usize count) Copy constructs one array of instances of the specified type.","title":"Luna::copy_construct_type_range"},{"location":"api/group___runtime_type_1gac70c6be78b5040fd413a1d5401608f0c/#overview","text":"The construction is performed as follows:* type must specify one valid type object and cannot be a generic structure type. dst and src must specify one valid memory address.","title":"Overview"},{"location":"api/group___runtime_type_1gacae380004370aab716f828f6a1aab8b2/","text":"Luna::register_generic_struct_type LUNA_RUNTIME_API typeinfo_t register_generic_struct_type(const GenericStructureTypeDesc &desc) Registers one generic structure type. Overview If one type with the same name or GUID already exists, the new type will not be registered. Parameters desc The generic structure type descriptor. Return value Returns the type object of the new generic structure type if the type is successfully registered. Returns the type object of the existing type if one type with the same name or GUID already exists.","title":"Luna::register_generic_struct_type"},{"location":"api/group___runtime_type_1gacae380004370aab716f828f6a1aab8b2/#lunaregister_generic_struct_type","text":"LUNA_RUNTIME_API typeinfo_t register_generic_struct_type(const GenericStructureTypeDesc &desc) Registers one generic structure type.","title":"Luna::register_generic_struct_type"},{"location":"api/group___runtime_type_1gacae380004370aab716f828f6a1aab8b2/#overview","text":"If one type with the same name or GUID already exists, the new type will not be registered.","title":"Overview"},{"location":"api/group___runtime_type_1gacae380004370aab716f828f6a1aab8b2/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1gacae380004370aab716f828f6a1aab8b2/#desc","text":"The generic structure type descriptor.","title":"desc"},{"location":"api/group___runtime_type_1gacae380004370aab716f828f6a1aab8b2/#return-value","text":"Returns the type object of the new generic structure type if the type is successfully registered. Returns the type object of the existing type if one type with the same name or GUID already exists.","title":"Return value"},{"location":"api/group___runtime_type_1gacb925e99451f18cdc4755041484bc58f/","text":"Luna::is_primitive_type LUNA_RUNTIME_API bool is_primitive_type(typeinfo_t type) Checks whether one type is a primitive type. Overview Parameters type The type object to check. Return value Returns true if the specified type is a primitive type. Returns false otherwise. Valid Usage type must specify one valid type object.","title":"Luna::is_primitive_type"},{"location":"api/group___runtime_type_1gacb925e99451f18cdc4755041484bc58f/#lunais_primitive_type","text":"LUNA_RUNTIME_API bool is_primitive_type(typeinfo_t type) Checks whether one type is a primitive type.","title":"Luna::is_primitive_type"},{"location":"api/group___runtime_type_1gacb925e99451f18cdc4755041484bc58f/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1gacb925e99451f18cdc4755041484bc58f/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1gacb925e99451f18cdc4755041484bc58f/#type","text":"The type object to check.","title":"type"},{"location":"api/group___runtime_type_1gacb925e99451f18cdc4755041484bc58f/#return-value","text":"Returns true if the specified type is a primitive type. Returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_type_1gacb925e99451f18cdc4755041484bc58f/#valid-usage","text":"type must specify one valid type object.","title":"Valid Usage"},{"location":"api/group___runtime_type_1gacca2301b7b3699c1da3e644a26da55a8/","text":"Luna::default_ctor template <typename _Ty> void default_ctor(typeinfo_t type, void *inst) The default constructor used by the reflection system.","title":"Luna::default_ctor"},{"location":"api/group___runtime_type_1gacca2301b7b3699c1da3e644a26da55a8/#lunadefault_ctor","text":"template <typename _Ty> void default_ctor(typeinfo_t type, void *inst) The default constructor used by the reflection system.","title":"Luna::default_ctor"},{"location":"api/group___runtime_type_1gacd2a1c1fbbbbfb12380928e96a243cc6/","text":"Luna::is_multienum_type LUNA_RUNTIME_API bool is_multienum_type(typeinfo_t type) Checks if the specified type is a multi-value enumeration type. Overview Parameters type The type to query. Return value Returns true if the specified type is a multi-value enumeration type. Returns false otherwise. Valid Usage type must specify one valid type object.","title":"Luna::is_multienum_type"},{"location":"api/group___runtime_type_1gacd2a1c1fbbbbfb12380928e96a243cc6/#lunais_multienum_type","text":"LUNA_RUNTIME_API bool is_multienum_type(typeinfo_t type) Checks if the specified type is a multi-value enumeration type.","title":"Luna::is_multienum_type"},{"location":"api/group___runtime_type_1gacd2a1c1fbbbbfb12380928e96a243cc6/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1gacd2a1c1fbbbbfb12380928e96a243cc6/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1gacd2a1c1fbbbbfb12380928e96a243cc6/#type","text":"The type to query.","title":"type"},{"location":"api/group___runtime_type_1gacd2a1c1fbbbbfb12380928e96a243cc6/#return-value","text":"Returns true if the specified type is a multi-value enumeration type. Returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_type_1gacd2a1c1fbbbbfb12380928e96a243cc6/#valid-usage","text":"type must specify one valid type object.","title":"Valid Usage"},{"location":"api/group___runtime_type_1gace6238035e555ee85eb9d8c046541209/","text":"Luna::move_assign_type LUNA_RUNTIME_API void move_assign_type(typeinfo_t type, void *dst, void *src) Move assigns one instance of the specified type. Overview The assignment is performed as follows:* type must specify one valid type object and cannot be a generic structure type. dst and src must specify one valid memory address.","title":"Luna::move_assign_type"},{"location":"api/group___runtime_type_1gace6238035e555ee85eb9d8c046541209/#lunamove_assign_type","text":"LUNA_RUNTIME_API void move_assign_type(typeinfo_t type, void *dst, void *src) Move assigns one instance of the specified type.","title":"Luna::move_assign_type"},{"location":"api/group___runtime_type_1gace6238035e555ee85eb9d8c046541209/#overview","text":"The assignment is performed as follows:* type must specify one valid type object and cannot be a generic structure type. dst and src must specify one valid memory address.","title":"Overview"},{"location":"api/group___runtime_type_1gadb4a3944d98aeeb7e4880545a4eadd62/","text":"Luna::get_struct_generic_type LUNA_RUNTIME_API typeinfo_t get_struct_generic_type(typeinfo_t type) Gets the generic structure type from one generic structure instanced type. Overview Parameters type The type of the generic structure instanced type to query. Return value Returns the generic structure type that instantiated the generic structure instanced type. Returns nullptr if type is not a generic structure instanced type. Valid Usage type must specify one valid type object.","title":"Luna::get_struct_generic_type"},{"location":"api/group___runtime_type_1gadb4a3944d98aeeb7e4880545a4eadd62/#lunaget_struct_generic_type","text":"LUNA_RUNTIME_API typeinfo_t get_struct_generic_type(typeinfo_t type) Gets the generic structure type from one generic structure instanced type.","title":"Luna::get_struct_generic_type"},{"location":"api/group___runtime_type_1gadb4a3944d98aeeb7e4880545a4eadd62/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1gadb4a3944d98aeeb7e4880545a4eadd62/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1gadb4a3944d98aeeb7e4880545a4eadd62/#type","text":"The type of the generic structure instanced type to query.","title":"type"},{"location":"api/group___runtime_type_1gadb4a3944d98aeeb7e4880545a4eadd62/#return-value","text":"Returns the generic structure type that instantiated the generic structure instanced type. Returns nullptr if type is not a generic structure instanced type.","title":"Return value"},{"location":"api/group___runtime_type_1gadb4a3944d98aeeb7e4880545a4eadd62/#valid-usage","text":"type must specify one valid type object.","title":"Valid Usage"},{"location":"api/group___runtime_type_1gadbb171090cd4af279f2dace82cd28978/","text":"Luna::is_generic_struct_type LUNA_RUNTIME_API bool is_generic_struct_type(typeinfo_t type) Checks whether one type is a generic structure type. Overview Parameters type The type object to check. Return value Returns true if the specified type is a generic structure type. Returns false otherwise. Valid Usage type must specify one valid type object.","title":"Luna::is_generic_struct_type"},{"location":"api/group___runtime_type_1gadbb171090cd4af279f2dace82cd28978/#lunais_generic_struct_type","text":"LUNA_RUNTIME_API bool is_generic_struct_type(typeinfo_t type) Checks whether one type is a generic structure type.","title":"Luna::is_generic_struct_type"},{"location":"api/group___runtime_type_1gadbb171090cd4af279f2dace82cd28978/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1gadbb171090cd4af279f2dace82cd28978/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1gadbb171090cd4af279f2dace82cd28978/#type","text":"The type object to check.","title":"type"},{"location":"api/group___runtime_type_1gadbb171090cd4af279f2dace82cd28978/#return-value","text":"Returns true if the specified type is a generic structure type. Returns false otherwise.","title":"Return value"},{"location":"api/group___runtime_type_1gadbb171090cd4af279f2dace82cd28978/#valid-usage","text":"type must specify one valid type object.","title":"Valid Usage"},{"location":"api/group___runtime_type_1gadc1da372b065ba9a1527bb41efada5ab/","text":"Luna::get_property_attribute LUNA_RUNTIME_API Variant get_property_attribute(typeinfo_t type, const Name &property, const Name &name) Gets the attribute of the specified property. Overview Parameters type The type object. property The property name. name The name of the attribute to get. Return value Returns the requested attribute. Returns one null variant if the attribute does not exist. Valid Usage type must specify one valid type object and cannot be a generic structure type. property must not be empty. name must not be empty.","title":"Luna::get_property_attribute"},{"location":"api/group___runtime_type_1gadc1da372b065ba9a1527bb41efada5ab/#lunaget_property_attribute","text":"LUNA_RUNTIME_API Variant get_property_attribute(typeinfo_t type, const Name &property, const Name &name) Gets the attribute of the specified property.","title":"Luna::get_property_attribute"},{"location":"api/group___runtime_type_1gadc1da372b065ba9a1527bb41efada5ab/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1gadc1da372b065ba9a1527bb41efada5ab/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1gadc1da372b065ba9a1527bb41efada5ab/#type","text":"The type object.","title":"type"},{"location":"api/group___runtime_type_1gadc1da372b065ba9a1527bb41efada5ab/#property","text":"The property name.","title":"property"},{"location":"api/group___runtime_type_1gadc1da372b065ba9a1527bb41efada5ab/#name","text":"The name of the attribute to get.","title":"name"},{"location":"api/group___runtime_type_1gadc1da372b065ba9a1527bb41efada5ab/#return-value","text":"Returns the requested attribute. Returns one null variant if the attribute does not exist.","title":"Return value"},{"location":"api/group___runtime_type_1gadc1da372b065ba9a1527bb41efada5ab/#valid-usage","text":"type must specify one valid type object and cannot be a generic structure type. property must not be empty. name must not be empty.","title":"Valid Usage"},{"location":"api/group___runtime_type_1gae1c35ba7724a2de8c23e85b744bdf955/","text":"Luna::c16_type LUNA_RUNTIME_API typeinfo_t c16_type() Gets the type object of c16 type. Overview Return value Returns the type object of c16 type.","title":"Luna::c16_type"},{"location":"api/group___runtime_type_1gae1c35ba7724a2de8c23e85b744bdf955/#lunac16_type","text":"LUNA_RUNTIME_API typeinfo_t c16_type() Gets the type object of c16 type.","title":"Luna::c16_type"},{"location":"api/group___runtime_type_1gae1c35ba7724a2de8c23e85b744bdf955/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1gae1c35ba7724a2de8c23e85b744bdf955/#return-value","text":"Returns the type object of c16 type.","title":"Return value"},{"location":"api/group___runtime_type_1gae3195fc4508a440ef12ebaca7895adcb/","text":"Luna::default_copy_ctor template <typename _Ty> void default_copy_ctor(typeinfo_t type, void *dst, void *src) The default copy constructor used by the reflection system.","title":"Luna::default_copy_ctor"},{"location":"api/group___runtime_type_1gae3195fc4508a440ef12ebaca7895adcb/#lunadefault_copy_ctor","text":"template <typename _Ty> void default_copy_ctor(typeinfo_t type, void *dst, void *src) The default copy constructor used by the reflection system.","title":"Luna::default_copy_ctor"},{"location":"api/group___runtime_type_1gaedb52c18aad27367293256207fa535f0/","text":"Luna::move_construct_type LUNA_RUNTIME_API void move_construct_type(typeinfo_t type, void *dst, void *src) Move constructs one instance of the specified type. Overview The construction is performed as follows:* type must specify one valid type object and cannot be a generic structure type. dst and src must specify one valid memory address.","title":"Luna::move_construct_type"},{"location":"api/group___runtime_type_1gaedb52c18aad27367293256207fa535f0/#lunamove_construct_type","text":"LUNA_RUNTIME_API void move_construct_type(typeinfo_t type, void *dst, void *src) Move constructs one instance of the specified type.","title":"Luna::move_construct_type"},{"location":"api/group___runtime_type_1gaedb52c18aad27367293256207fa535f0/#overview","text":"The construction is performed as follows:* type must specify one valid type object and cannot be a generic structure type. dst and src must specify one valid memory address.","title":"Overview"},{"location":"api/group___runtime_type_1gaee80e769dd7fa525e7947ff532f4b88b/","text":"Luna::f64_type LUNA_RUNTIME_API typeinfo_t f64_type() Gets the type object of f64 type. Overview Return value Returns the type object of f64 type.","title":"Luna::f64_type"},{"location":"api/group___runtime_type_1gaee80e769dd7fa525e7947ff532f4b88b/#lunaf64_type","text":"LUNA_RUNTIME_API typeinfo_t f64_type() Gets the type object of f64 type.","title":"Luna::f64_type"},{"location":"api/group___runtime_type_1gaee80e769dd7fa525e7947ff532f4b88b/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1gaee80e769dd7fa525e7947ff532f4b88b/#return-value","text":"Returns the type object of f64 type.","title":"Return value"},{"location":"api/group___runtime_type_1gaeee4991fbe3240a564266b083ae20350/","text":"Luna::structure_dtor_t using structure_dtor_t = void(typeinfo_t type, void* inst) The structure destructor used by the reflection system. Overview Parameters type The type of the instance. inst The instance data.","title":"Luna::structure_dtor_t"},{"location":"api/group___runtime_type_1gaeee4991fbe3240a564266b083ae20350/#lunastructure_dtor_t","text":"using structure_dtor_t = void(typeinfo_t type, void* inst) The structure destructor used by the reflection system.","title":"Luna::structure_dtor_t"},{"location":"api/group___runtime_type_1gaeee4991fbe3240a564266b083ae20350/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1gaeee4991fbe3240a564266b083ae20350/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1gaeee4991fbe3240a564266b083ae20350/#type","text":"The type of the instance.","title":"type"},{"location":"api/group___runtime_type_1gaeee4991fbe3240a564266b083ae20350/#inst","text":"The instance data.","title":"inst"},{"location":"api/group___runtime_type_1gaef020b7b9d42e098afb57ed8676a863b/","text":"Luna::register_struct_type template <typename _Ty> typeinfo_t register_struct_type(Span< const StructurePropertyDesc > properties, typeinfo_t base_type=nullptr) Registers one structure type to the type system. The structure type must have one lustruct macro defined in the structure body. Overview Parameters properties A list of properties that should be tracked by the type system. The user can use luproperty macro to declare properties conveniently. base_type The base type of the type to register. This can be nullptr . Return value Returns the registered structure type.","title":"Luna::register_struct_type"},{"location":"api/group___runtime_type_1gaef020b7b9d42e098afb57ed8676a863b/#lunaregister_struct_type","text":"template <typename _Ty> typeinfo_t register_struct_type(Span< const StructurePropertyDesc > properties, typeinfo_t base_type=nullptr) Registers one structure type to the type system. The structure type must have one lustruct macro defined in the structure body.","title":"Luna::register_struct_type"},{"location":"api/group___runtime_type_1gaef020b7b9d42e098afb57ed8676a863b/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1gaef020b7b9d42e098afb57ed8676a863b/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1gaef020b7b9d42e098afb57ed8676a863b/#properties","text":"A list of properties that should be tracked by the type system. The user can use luproperty macro to declare properties conveniently.","title":"properties"},{"location":"api/group___runtime_type_1gaef020b7b9d42e098afb57ed8676a863b/#base_type","text":"The base type of the type to register. This can be nullptr .","title":"base_type"},{"location":"api/group___runtime_type_1gaef020b7b9d42e098afb57ed8676a863b/#return-value","text":"Returns the registered structure type.","title":"Return value"},{"location":"api/group___runtime_type_1gaf2aa1b4875899673e912f966ba7ae33d/","text":"Luna::destruct_type_range LUNA_RUNTIME_API void destruct_type_range(typeinfo_t type, void *data, usize count) Destructs one array of instances of the specified type. Overview The destruction is performed as follows:* type must specify one valid type object and cannot be a generic structure type. data must specify one valid memory address.","title":"Luna::destruct_type_range"},{"location":"api/group___runtime_type_1gaf2aa1b4875899673e912f966ba7ae33d/#lunadestruct_type_range","text":"LUNA_RUNTIME_API void destruct_type_range(typeinfo_t type, void *data, usize count) Destructs one array of instances of the specified type.","title":"Luna::destruct_type_range"},{"location":"api/group___runtime_type_1gaf2aa1b4875899673e912f966ba7ae33d/#overview","text":"The destruction is performed as follows:* type must specify one valid type object and cannot be a generic structure type. data must specify one valid memory address.","title":"Overview"},{"location":"api/group___runtime_type_1gaf74e0adfe66962ba2d88c715ce6d6e4f/","text":"Luna::i8_type LUNA_RUNTIME_API typeinfo_t i8_type() Gets the type object of i8 type. Overview Return value Returns the type object of i8 type.","title":"Luna::i8_type"},{"location":"api/group___runtime_type_1gaf74e0adfe66962ba2d88c715ce6d6e4f/#lunai8_type","text":"LUNA_RUNTIME_API typeinfo_t i8_type() Gets the type object of i8 type.","title":"Luna::i8_type"},{"location":"api/group___runtime_type_1gaf74e0adfe66962ba2d88c715ce6d6e4f/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1gaf74e0adfe66962ba2d88c715ce6d6e4f/#return-value","text":"Returns the type object of i8 type.","title":"Return value"},{"location":"api/group___runtime_type_1gaf8b43f55564bdc0df9aa4e2ff26e0166/","text":"Luna::structure_move_assign_t using structure_move_assign_t = void(typeinfo_t type, void* dst, void* src) The structure move assignment operator used by the reflection system. Overview Parameters type The type of the instance. dst The instance data to assign. src The instance data to move data from.","title":"Luna::structure_move_assign_t"},{"location":"api/group___runtime_type_1gaf8b43f55564bdc0df9aa4e2ff26e0166/#lunastructure_move_assign_t","text":"using structure_move_assign_t = void(typeinfo_t type, void* dst, void* src) The structure move assignment operator used by the reflection system.","title":"Luna::structure_move_assign_t"},{"location":"api/group___runtime_type_1gaf8b43f55564bdc0df9aa4e2ff26e0166/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1gaf8b43f55564bdc0df9aa4e2ff26e0166/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1gaf8b43f55564bdc0df9aa4e2ff26e0166/#type","text":"The type of the instance.","title":"type"},{"location":"api/group___runtime_type_1gaf8b43f55564bdc0df9aa4e2ff26e0166/#dst","text":"The instance data to assign.","title":"dst"},{"location":"api/group___runtime_type_1gaf8b43f55564bdc0df9aa4e2ff26e0166/#src","text":"The instance data to move data from.","title":"src"},{"location":"api/group___runtime_type_1gaf9d725af0b56a9ced503460f4d3fcc5d/","text":"Luna::get_struct_properties LUNA_RUNTIME_API Span< const StructurePropertyDesc > get_struct_properties(typeinfo_t type) Gets properties of the specified structure. Overview Parameters type The type to query. Return value Returns properties of the specified structure. The returned buffer is valid until SDK shutdown. Returns one empty range if type is not a structure or generic structure instanced type. Valid Usage type must specify one valid type object.","title":"Luna::get_struct_properties"},{"location":"api/group___runtime_type_1gaf9d725af0b56a9ced503460f4d3fcc5d/#lunaget_struct_properties","text":"LUNA_RUNTIME_API Span< const StructurePropertyDesc > get_struct_properties(typeinfo_t type) Gets properties of the specified structure.","title":"Luna::get_struct_properties"},{"location":"api/group___runtime_type_1gaf9d725af0b56a9ced503460f4d3fcc5d/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1gaf9d725af0b56a9ced503460f4d3fcc5d/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1gaf9d725af0b56a9ced503460f4d3fcc5d/#type","text":"The type to query.","title":"type"},{"location":"api/group___runtime_type_1gaf9d725af0b56a9ced503460f4d3fcc5d/#return-value","text":"Returns properties of the specified structure. The returned buffer is valid until SDK shutdown. Returns one empty range if type is not a structure or generic structure instanced type.","title":"Return value"},{"location":"api/group___runtime_type_1gaf9d725af0b56a9ced503460f4d3fcc5d/#valid-usage","text":"type must specify one valid type object.","title":"Valid Usage"},{"location":"api/group___runtime_type_1gafabfa3fe8f78913a9c3e59c3345718cd/","text":"Luna::get_enum_options LUNA_RUNTIME_API Span< const EnumerationOptionDesc > get_enum_options(typeinfo_t type) Gets options of the specified enumeration. Overview Parameters type The type to query. Return value Returns options of the specified enumeration. The returned buffer is valid until SDK shutdown. Returns one empty range if type is not an enumeration type. Valid Usage type must specify one valid type object.","title":"Luna::get_enum_options"},{"location":"api/group___runtime_type_1gafabfa3fe8f78913a9c3e59c3345718cd/#lunaget_enum_options","text":"LUNA_RUNTIME_API Span< const EnumerationOptionDesc > get_enum_options(typeinfo_t type) Gets options of the specified enumeration.","title":"Luna::get_enum_options"},{"location":"api/group___runtime_type_1gafabfa3fe8f78913a9c3e59c3345718cd/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_type_1gafabfa3fe8f78913a9c3e59c3345718cd/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_type_1gafabfa3fe8f78913a9c3e59c3345718cd/#type","text":"The type to query.","title":"type"},{"location":"api/group___runtime_type_1gafabfa3fe8f78913a9c3e59c3345718cd/#return-value","text":"Returns options of the specified enumeration. The returned buffer is valid until SDK shutdown. Returns one empty range if type is not an enumeration type.","title":"Return value"},{"location":"api/group___runtime_type_1gafabfa3fe8f78913a9c3e59c3345718cd/#valid-usage","text":"type must specify one valid type object.","title":"Valid Usage"},{"location":"api/group___runtime_unicode_1ga13fea59faaaf664847775a46c6ee809b/","text":"Luna::utf8_charlen constexpr usize utf8_charlen(const c8 *src) Gets the number of UTF-8 characters the Unicode character takes from the first UTF-8 character. Overview Parameters src The pointer that points to the first UTF-8 character of the Unicode character. Return value Returns the number of UTF-8 characters the Unicode character takes.","title":"Luna::utf8_charlen"},{"location":"api/group___runtime_unicode_1ga13fea59faaaf664847775a46c6ee809b/#lunautf8_charlen","text":"constexpr usize utf8_charlen(const c8 *src) Gets the number of UTF-8 characters the Unicode character takes from the first UTF-8 character.","title":"Luna::utf8_charlen"},{"location":"api/group___runtime_unicode_1ga13fea59faaaf664847775a46c6ee809b/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_unicode_1ga13fea59faaaf664847775a46c6ee809b/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_unicode_1ga13fea59faaaf664847775a46c6ee809b/#src","text":"The pointer that points to the first UTF-8 character of the Unicode character.","title":"src"},{"location":"api/group___runtime_unicode_1ga13fea59faaaf664847775a46c6ee809b/#return-value","text":"Returns the number of UTF-8 characters the Unicode character takes.","title":"Return value"},{"location":"api/group___runtime_unicode_1ga184a995230697b71cc1a4ea646f1c3f7/","text":"Luna::utf8_index constexpr usize utf8_index(const c8 *str, usize n) Gets the index of the first UTF-8 character for the specified Unicode character. Overview Parameters str The UTF-8 string to check. n The index of the Unicode character to check. Return value Returns the index of the first UTF-8 character for the specified Unicode character. Valid Usage src must points to a valid UTF-8 string. n must be smaller than the number of Unicode characters in the string.","title":"Luna::utf8_index"},{"location":"api/group___runtime_unicode_1ga184a995230697b71cc1a4ea646f1c3f7/#lunautf8_index","text":"constexpr usize utf8_index(const c8 *str, usize n) Gets the index of the first UTF-8 character for the specified Unicode character.","title":"Luna::utf8_index"},{"location":"api/group___runtime_unicode_1ga184a995230697b71cc1a4ea646f1c3f7/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_unicode_1ga184a995230697b71cc1a4ea646f1c3f7/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_unicode_1ga184a995230697b71cc1a4ea646f1c3f7/#str","text":"The UTF-8 string to check.","title":"str"},{"location":"api/group___runtime_unicode_1ga184a995230697b71cc1a4ea646f1c3f7/#n","text":"The index of the Unicode character to check.","title":"n"},{"location":"api/group___runtime_unicode_1ga184a995230697b71cc1a4ea646f1c3f7/#return-value","text":"Returns the index of the first UTF-8 character for the specified Unicode character.","title":"Return value"},{"location":"api/group___runtime_unicode_1ga184a995230697b71cc1a4ea646f1c3f7/#valid-usage","text":"src must points to a valid UTF-8 string. n must be smaller than the number of Unicode characters in the string.","title":"Valid Usage"},{"location":"api/group___runtime_unicode_1ga197d55a887c6b28c409a2e08a8262fce/","text":"Luna::utf16_to_utf8_len LUNA_RUNTIME_API usize utf16_to_utf8_len(const c16 *src, usize src_chars=USIZE_MAX) Determines the length of the corresponding UTF-8 string for a UTF-16 string, not include the null-terminator. Overview Parameters src The UTF-16 string to check. src_chars The maximum characters to read. Specify USIZE_MAX to read till the end of the string. The checking process will stop on first null terminator, or when src_chars is reached. Return value Returns the length of the corresponding UTF-8 string for a UTF-16 string, not include the null-terminator.","title":"Luna::utf16_to_utf8_len"},{"location":"api/group___runtime_unicode_1ga197d55a887c6b28c409a2e08a8262fce/#lunautf16_to_utf8_len","text":"LUNA_RUNTIME_API usize utf16_to_utf8_len(const c16 *src, usize src_chars=USIZE_MAX) Determines the length of the corresponding UTF-8 string for a UTF-16 string, not include the null-terminator.","title":"Luna::utf16_to_utf8_len"},{"location":"api/group___runtime_unicode_1ga197d55a887c6b28c409a2e08a8262fce/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_unicode_1ga197d55a887c6b28c409a2e08a8262fce/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_unicode_1ga197d55a887c6b28c409a2e08a8262fce/#src","text":"The UTF-16 string to check.","title":"src"},{"location":"api/group___runtime_unicode_1ga197d55a887c6b28c409a2e08a8262fce/#src_chars","text":"The maximum characters to read. Specify USIZE_MAX to read till the end of the string. The checking process will stop on first null terminator, or when src_chars is reached.","title":"src_chars"},{"location":"api/group___runtime_unicode_1ga197d55a887c6b28c409a2e08a8262fce/#return-value","text":"Returns the length of the corresponding UTF-8 string for a UTF-16 string, not include the null-terminator.","title":"Return value"},{"location":"api/group___runtime_unicode_1ga2767a0d4543162786755f0378f95b353/","text":"Luna::utf8_strlen constexpr usize utf8_strlen(const c8 *src) Gets the number of Unicode characters in a null-terminated UTF-8 string, not including the null terminator. Overview Parameters src The UTF-8 string to check. Return value Returns the number of Unicode characters in the UTF-8 string. Valid Usage src must points to a valid, null-terminated UTF-8 string.","title":"Luna::utf8_strlen"},{"location":"api/group___runtime_unicode_1ga2767a0d4543162786755f0378f95b353/#lunautf8_strlen","text":"constexpr usize utf8_strlen(const c8 *src) Gets the number of Unicode characters in a null-terminated UTF-8 string, not including the null terminator.","title":"Luna::utf8_strlen"},{"location":"api/group___runtime_unicode_1ga2767a0d4543162786755f0378f95b353/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_unicode_1ga2767a0d4543162786755f0378f95b353/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_unicode_1ga2767a0d4543162786755f0378f95b353/#src","text":"The UTF-8 string to check.","title":"src"},{"location":"api/group___runtime_unicode_1ga2767a0d4543162786755f0378f95b353/#return-value","text":"Returns the number of Unicode characters in the UTF-8 string.","title":"Return value"},{"location":"api/group___runtime_unicode_1ga2767a0d4543162786755f0378f95b353/#valid-usage","text":"src must points to a valid, null-terminated UTF-8 string.","title":"Valid Usage"},{"location":"api/group___runtime_unicode_1ga38233992601290b6a3bd0fa9699269b4/","text":"Luna::utf8_charspan constexpr usize utf8_charspan(c32 ch) Gets the number of UTF-8 characters needed to store the Unicode char in UTF-8 encoding. Overview Parameters ch The Unicode codepoint of the character. Return value Returns the number of UTF-8 characters needed to store the Unicode char in UTF-8 encoding.","title":"Luna::utf8_charspan"},{"location":"api/group___runtime_unicode_1ga38233992601290b6a3bd0fa9699269b4/#lunautf8_charspan","text":"constexpr usize utf8_charspan(c32 ch) Gets the number of UTF-8 characters needed to store the Unicode char in UTF-8 encoding.","title":"Luna::utf8_charspan"},{"location":"api/group___runtime_unicode_1ga38233992601290b6a3bd0fa9699269b4/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_unicode_1ga38233992601290b6a3bd0fa9699269b4/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_unicode_1ga38233992601290b6a3bd0fa9699269b4/#ch","text":"The Unicode codepoint of the character.","title":"ch"},{"location":"api/group___runtime_unicode_1ga38233992601290b6a3bd0fa9699269b4/#return-value","text":"Returns the number of UTF-8 characters needed to store the Unicode char in UTF-8 encoding.","title":"Return value"},{"location":"api/group___runtime_unicode_1ga3a868c509b45614efc6f67a97c45ebac/","text":"Luna::utf8_encode_char LUNA_RUNTIME_API usize utf8_encode_char(c8 *dst, c32 ch) Encodes the Unicode character into 1~6 UTF-8 characters. Overview Parameters dst The buffer for writing encoded UTF-8 characters. ch The Unicode character to encode. Return value Returns the number of UTF-8 characters written to dst . Valid Usage dst must be large enough to hold all UTF-8 characters written. The user can use utf8_charspan to check the required space in advance.","title":"Luna::utf8_encode_char"},{"location":"api/group___runtime_unicode_1ga3a868c509b45614efc6f67a97c45ebac/#lunautf8_encode_char","text":"LUNA_RUNTIME_API usize utf8_encode_char(c8 *dst, c32 ch) Encodes the Unicode character into 1~6 UTF-8 characters.","title":"Luna::utf8_encode_char"},{"location":"api/group___runtime_unicode_1ga3a868c509b45614efc6f67a97c45ebac/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_unicode_1ga3a868c509b45614efc6f67a97c45ebac/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_unicode_1ga3a868c509b45614efc6f67a97c45ebac/#dst","text":"The buffer for writing encoded UTF-8 characters.","title":"dst"},{"location":"api/group___runtime_unicode_1ga3a868c509b45614efc6f67a97c45ebac/#ch","text":"The Unicode character to encode.","title":"ch"},{"location":"api/group___runtime_unicode_1ga3a868c509b45614efc6f67a97c45ebac/#return-value","text":"Returns the number of UTF-8 characters written to dst .","title":"Return value"},{"location":"api/group___runtime_unicode_1ga3a868c509b45614efc6f67a97c45ebac/#valid-usage","text":"dst must be large enough to hold all UTF-8 characters written. The user can use utf8_charspan to check the required space in advance.","title":"Valid Usage"},{"location":"api/group___runtime_unicode_1ga616fd70f9d2086579bc2a1a911c60989/","text":"Luna::utf16_to_utf8 LUNA_RUNTIME_API usize utf16_to_utf8(c8 *dst, usize dst_max_chars, const c16 *src, usize src_chars=USIZE_MAX) Converts a UTF-16 string to UTF-8 string. Overview Parameters dst The buffer to hold the output string. dst_max_chars The maximum characters the dst buffer can hold, including the null-terminator. src The buffer holding the source string. src_chars The maximum characters to read. Specify USIZE_MAX to read till the end of the string. The conversion process will stop on first null terminator, or when src_chars is reached. Return value Returns the number of characters outputted to the dst buffer, not including the null-terminator. Valid Usage src must be a valid UTF-16 string.","title":"Luna::utf16_to_utf8"},{"location":"api/group___runtime_unicode_1ga616fd70f9d2086579bc2a1a911c60989/#lunautf16_to_utf8","text":"LUNA_RUNTIME_API usize utf16_to_utf8(c8 *dst, usize dst_max_chars, const c16 *src, usize src_chars=USIZE_MAX) Converts a UTF-16 string to UTF-8 string.","title":"Luna::utf16_to_utf8"},{"location":"api/group___runtime_unicode_1ga616fd70f9d2086579bc2a1a911c60989/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_unicode_1ga616fd70f9d2086579bc2a1a911c60989/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_unicode_1ga616fd70f9d2086579bc2a1a911c60989/#dst","text":"The buffer to hold the output string.","title":"dst"},{"location":"api/group___runtime_unicode_1ga616fd70f9d2086579bc2a1a911c60989/#dst_max_chars","text":"The maximum characters the dst buffer can hold, including the null-terminator.","title":"dst_max_chars"},{"location":"api/group___runtime_unicode_1ga616fd70f9d2086579bc2a1a911c60989/#src","text":"The buffer holding the source string.","title":"src"},{"location":"api/group___runtime_unicode_1ga616fd70f9d2086579bc2a1a911c60989/#src_chars","text":"The maximum characters to read. Specify USIZE_MAX to read till the end of the string. The conversion process will stop on first null terminator, or when src_chars is reached.","title":"src_chars"},{"location":"api/group___runtime_unicode_1ga616fd70f9d2086579bc2a1a911c60989/#return-value","text":"Returns the number of characters outputted to the dst buffer, not including the null-terminator.","title":"Return value"},{"location":"api/group___runtime_unicode_1ga616fd70f9d2086579bc2a1a911c60989/#valid-usage","text":"src must be a valid UTF-16 string.","title":"Valid Usage"},{"location":"api/group___runtime_unicode_1ga69ed8657938fe5dd902db0ca43a7ffac/","text":"Luna::utf8_to_utf16 LUNA_RUNTIME_API usize utf8_to_utf16(c16 *dst, usize dst_max_chars, const c8 *src, usize src_chars=USIZE_MAX) Converts a UTF-8 string to UTF-16 string. Overview Parameters dst The buffer to hold the output string. dst_max_chars The maximum characters the dst buffer can hold, including the null-terminator. src The holding the source string. src_chars The maximum characters to read. Specify USIZE_MAX to read till the end of the string. The conversion process will stop on first null terminator, or when src_chars is reached. Return value Returns the number of characters outputted to the dst buffer, not including the null-terminator. Valid Usage src must be a valid UTF-8 string.","title":"Luna::utf8_to_utf16"},{"location":"api/group___runtime_unicode_1ga69ed8657938fe5dd902db0ca43a7ffac/#lunautf8_to_utf16","text":"LUNA_RUNTIME_API usize utf8_to_utf16(c16 *dst, usize dst_max_chars, const c8 *src, usize src_chars=USIZE_MAX) Converts a UTF-8 string to UTF-16 string.","title":"Luna::utf8_to_utf16"},{"location":"api/group___runtime_unicode_1ga69ed8657938fe5dd902db0ca43a7ffac/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_unicode_1ga69ed8657938fe5dd902db0ca43a7ffac/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_unicode_1ga69ed8657938fe5dd902db0ca43a7ffac/#dst","text":"The buffer to hold the output string.","title":"dst"},{"location":"api/group___runtime_unicode_1ga69ed8657938fe5dd902db0ca43a7ffac/#dst_max_chars","text":"The maximum characters the dst buffer can hold, including the null-terminator.","title":"dst_max_chars"},{"location":"api/group___runtime_unicode_1ga69ed8657938fe5dd902db0ca43a7ffac/#src","text":"The holding the source string.","title":"src"},{"location":"api/group___runtime_unicode_1ga69ed8657938fe5dd902db0ca43a7ffac/#src_chars","text":"The maximum characters to read. Specify USIZE_MAX to read till the end of the string. The conversion process will stop on first null terminator, or when src_chars is reached.","title":"src_chars"},{"location":"api/group___runtime_unicode_1ga69ed8657938fe5dd902db0ca43a7ffac/#return-value","text":"Returns the number of characters outputted to the dst buffer, not including the null-terminator.","title":"Return value"},{"location":"api/group___runtime_unicode_1ga69ed8657938fe5dd902db0ca43a7ffac/#valid-usage","text":"src must be a valid UTF-8 string.","title":"Valid Usage"},{"location":"api/group___runtime_unicode_1ga8ebc9e15201060e9e6765ac7d8fd63dc/","text":"Luna::utf8_decode_char LUNA_RUNTIME_API c32 utf8_decode_char(const c8 *str) Decodes one Unicode character from 1~6 UTF-8 characters. Overview Parameters str The pointer that points to UTF-8 characters to decode. Return value Returns the decoded Unicode character. Valid Usage str must points to a valid UTF-8 character string.","title":"Luna::utf8_decode_char"},{"location":"api/group___runtime_unicode_1ga8ebc9e15201060e9e6765ac7d8fd63dc/#lunautf8_decode_char","text":"LUNA_RUNTIME_API c32 utf8_decode_char(const c8 *str) Decodes one Unicode character from 1~6 UTF-8 characters.","title":"Luna::utf8_decode_char"},{"location":"api/group___runtime_unicode_1ga8ebc9e15201060e9e6765ac7d8fd63dc/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_unicode_1ga8ebc9e15201060e9e6765ac7d8fd63dc/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_unicode_1ga8ebc9e15201060e9e6765ac7d8fd63dc/#str","text":"The pointer that points to UTF-8 characters to decode.","title":"str"},{"location":"api/group___runtime_unicode_1ga8ebc9e15201060e9e6765ac7d8fd63dc/#return-value","text":"Returns the decoded Unicode character.","title":"Return value"},{"location":"api/group___runtime_unicode_1ga8ebc9e15201060e9e6765ac7d8fd63dc/#valid-usage","text":"str must points to a valid UTF-8 character string.","title":"Valid Usage"},{"location":"api/group___runtime_unicode_1ga9ef08852bd4d8cc262fd7d7865647c45/","text":"Luna::utf16_index constexpr usize utf16_index(const c16 *str, usize n) Gets the index of the first UTF-16 character for the specified Unicode character. Overview Parameters str The UTF-16 string to check. n The index of the Unicode character to check. Return value Returns the index of the first UTF-16 character for the specified Unicode character. Valid Usage src must points to a valid UTF-16 string. n must be smaller than the number of Unicode characters in the string.","title":"Luna::utf16_index"},{"location":"api/group___runtime_unicode_1ga9ef08852bd4d8cc262fd7d7865647c45/#lunautf16_index","text":"constexpr usize utf16_index(const c16 *str, usize n) Gets the index of the first UTF-16 character for the specified Unicode character.","title":"Luna::utf16_index"},{"location":"api/group___runtime_unicode_1ga9ef08852bd4d8cc262fd7d7865647c45/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_unicode_1ga9ef08852bd4d8cc262fd7d7865647c45/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_unicode_1ga9ef08852bd4d8cc262fd7d7865647c45/#str","text":"The UTF-16 string to check.","title":"str"},{"location":"api/group___runtime_unicode_1ga9ef08852bd4d8cc262fd7d7865647c45/#n","text":"The index of the Unicode character to check.","title":"n"},{"location":"api/group___runtime_unicode_1ga9ef08852bd4d8cc262fd7d7865647c45/#return-value","text":"Returns the index of the first UTF-16 character for the specified Unicode character.","title":"Return value"},{"location":"api/group___runtime_unicode_1ga9ef08852bd4d8cc262fd7d7865647c45/#valid-usage","text":"src must points to a valid UTF-16 string. n must be smaller than the number of Unicode characters in the string.","title":"Valid Usage"},{"location":"api/group___runtime_unicode_1gac45920bcbff42da3af21f2ef279e535f/","text":"Luna::utf8_charlen constexpr usize utf8_charlen(c8 ch) Gets the number of UTF-8 characters the Unicode character takes from the first UTF-8 character. Overview Parameters ch The first UTF-8 character of the Unicode character. Return value Returns the number of UTF-8 characters the Unicode character takes.","title":"Luna::utf8_charlen"},{"location":"api/group___runtime_unicode_1gac45920bcbff42da3af21f2ef279e535f/#lunautf8_charlen","text":"constexpr usize utf8_charlen(c8 ch) Gets the number of UTF-8 characters the Unicode character takes from the first UTF-8 character.","title":"Luna::utf8_charlen"},{"location":"api/group___runtime_unicode_1gac45920bcbff42da3af21f2ef279e535f/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_unicode_1gac45920bcbff42da3af21f2ef279e535f/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_unicode_1gac45920bcbff42da3af21f2ef279e535f/#ch","text":"The first UTF-8 character of the Unicode character.","title":"ch"},{"location":"api/group___runtime_unicode_1gac45920bcbff42da3af21f2ef279e535f/#return-value","text":"Returns the number of UTF-8 characters the Unicode character takes.","title":"Return value"},{"location":"api/group___runtime_unicode_1gad7b880d245c8ede588b4d269600fb469/","text":"Luna::utf16_charlen constexpr usize utf16_charlen(c16 ch) Gets the number of UTF-16 characters the Unicode character takes from the first UTF-16 character. Overview Parameters ch The first UTF-16 character of the Unicode character. Return value Returns the number of UTF-16 characters the Unicode character takes.","title":"Luna::utf16_charlen"},{"location":"api/group___runtime_unicode_1gad7b880d245c8ede588b4d269600fb469/#lunautf16_charlen","text":"constexpr usize utf16_charlen(c16 ch) Gets the number of UTF-16 characters the Unicode character takes from the first UTF-16 character.","title":"Luna::utf16_charlen"},{"location":"api/group___runtime_unicode_1gad7b880d245c8ede588b4d269600fb469/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_unicode_1gad7b880d245c8ede588b4d269600fb469/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_unicode_1gad7b880d245c8ede588b4d269600fb469/#ch","text":"The first UTF-16 character of the Unicode character.","title":"ch"},{"location":"api/group___runtime_unicode_1gad7b880d245c8ede588b4d269600fb469/#return-value","text":"Returns the number of UTF-16 characters the Unicode character takes.","title":"Return value"},{"location":"api/group___runtime_unicode_1gae1e4b93bea300345a4c9a39d104c956a/","text":"Luna::utf16_encode_char LUNA_RUNTIME_API usize utf16_encode_char(c16 *dst, c32 ch) Encodes the Unicode character into 1~2 UTF-16 characters using platform-native endian. Overview Parameters dst The buffer for writing encoded UTF-16 characters. ch The Unicode character to encode. Return value Returns the number of UTF-16 characters written to dst . Valid Usage dst must be large enough to hold all UTF-16 characters written. The user can use utf16_charspan to check the required space in advance.","title":"Luna::utf16_encode_char"},{"location":"api/group___runtime_unicode_1gae1e4b93bea300345a4c9a39d104c956a/#lunautf16_encode_char","text":"LUNA_RUNTIME_API usize utf16_encode_char(c16 *dst, c32 ch) Encodes the Unicode character into 1~2 UTF-16 characters using platform-native endian.","title":"Luna::utf16_encode_char"},{"location":"api/group___runtime_unicode_1gae1e4b93bea300345a4c9a39d104c956a/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_unicode_1gae1e4b93bea300345a4c9a39d104c956a/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_unicode_1gae1e4b93bea300345a4c9a39d104c956a/#dst","text":"The buffer for writing encoded UTF-16 characters.","title":"dst"},{"location":"api/group___runtime_unicode_1gae1e4b93bea300345a4c9a39d104c956a/#ch","text":"The Unicode character to encode.","title":"ch"},{"location":"api/group___runtime_unicode_1gae1e4b93bea300345a4c9a39d104c956a/#return-value","text":"Returns the number of UTF-16 characters written to dst .","title":"Return value"},{"location":"api/group___runtime_unicode_1gae1e4b93bea300345a4c9a39d104c956a/#valid-usage","text":"dst must be large enough to hold all UTF-16 characters written. The user can use utf16_charspan to check the required space in advance.","title":"Valid Usage"},{"location":"api/group___runtime_unicode_1gae4f4c1fac6e2e3e24b751816fbe2c492/","text":"Luna::utf16_strlen constexpr usize utf16_strlen(const c16 *src) Gets the number of Unicode characters in a null-terminated UTF-16 string, not including the null terminator. Overview Parameters src The UTF-16 string to check. Return value Returns the number of Unicode characters in the UTF-16 string. Valid Usage src must points to a valid, null-terminated UTF-16 string.","title":"Luna::utf16_strlen"},{"location":"api/group___runtime_unicode_1gae4f4c1fac6e2e3e24b751816fbe2c492/#lunautf16_strlen","text":"constexpr usize utf16_strlen(const c16 *src) Gets the number of Unicode characters in a null-terminated UTF-16 string, not including the null terminator.","title":"Luna::utf16_strlen"},{"location":"api/group___runtime_unicode_1gae4f4c1fac6e2e3e24b751816fbe2c492/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_unicode_1gae4f4c1fac6e2e3e24b751816fbe2c492/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_unicode_1gae4f4c1fac6e2e3e24b751816fbe2c492/#src","text":"The UTF-16 string to check.","title":"src"},{"location":"api/group___runtime_unicode_1gae4f4c1fac6e2e3e24b751816fbe2c492/#return-value","text":"Returns the number of Unicode characters in the UTF-16 string.","title":"Return value"},{"location":"api/group___runtime_unicode_1gae4f4c1fac6e2e3e24b751816fbe2c492/#valid-usage","text":"src must points to a valid, null-terminated UTF-16 string.","title":"Valid Usage"},{"location":"api/group___runtime_unicode_1gaeb3a0408fb00d9e81297c1596b8f5205/","text":"Luna::utf16_decode_char LUNA_RUNTIME_API c32 utf16_decode_char(const c16 *str) Decodes one Unicode character from 1~2 UTF-16 characters. Overview Parameters str The pointer that points to UTF-16 characters to decode. Return value Returns the decoded Unicode character. Valid Usage str must points to a valid UTF-16 character string in platform-native endian.","title":"Luna::utf16_decode_char"},{"location":"api/group___runtime_unicode_1gaeb3a0408fb00d9e81297c1596b8f5205/#lunautf16_decode_char","text":"LUNA_RUNTIME_API c32 utf16_decode_char(const c16 *str) Decodes one Unicode character from 1~2 UTF-16 characters.","title":"Luna::utf16_decode_char"},{"location":"api/group___runtime_unicode_1gaeb3a0408fb00d9e81297c1596b8f5205/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_unicode_1gaeb3a0408fb00d9e81297c1596b8f5205/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_unicode_1gaeb3a0408fb00d9e81297c1596b8f5205/#str","text":"The pointer that points to UTF-16 characters to decode.","title":"str"},{"location":"api/group___runtime_unicode_1gaeb3a0408fb00d9e81297c1596b8f5205/#return-value","text":"Returns the decoded Unicode character.","title":"Return value"},{"location":"api/group___runtime_unicode_1gaeb3a0408fb00d9e81297c1596b8f5205/#valid-usage","text":"str must points to a valid UTF-16 character string in platform-native endian.","title":"Valid Usage"},{"location":"api/group___runtime_unicode_1gaee1dfeafcf1e5b2e0abfded74899f3c6/","text":"Luna::utf16_charspan constexpr usize utf16_charspan(c32 ch) Gets the number of UTF-16 characters needed to store the Unicode char in UTF-16 encoding. Overview Parameters ch The Unicode codepoint of the character. Return value Returns the number of UTF-16 characters needed to store the Unicode char in UTF-16 encoding.","title":"Luna::utf16_charspan"},{"location":"api/group___runtime_unicode_1gaee1dfeafcf1e5b2e0abfded74899f3c6/#lunautf16_charspan","text":"constexpr usize utf16_charspan(c32 ch) Gets the number of UTF-16 characters needed to store the Unicode char in UTF-16 encoding.","title":"Luna::utf16_charspan"},{"location":"api/group___runtime_unicode_1gaee1dfeafcf1e5b2e0abfded74899f3c6/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_unicode_1gaee1dfeafcf1e5b2e0abfded74899f3c6/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_unicode_1gaee1dfeafcf1e5b2e0abfded74899f3c6/#ch","text":"The Unicode codepoint of the character.","title":"ch"},{"location":"api/group___runtime_unicode_1gaee1dfeafcf1e5b2e0abfded74899f3c6/#return-value","text":"Returns the number of UTF-16 characters needed to store the Unicode char in UTF-16 encoding.","title":"Return value"},{"location":"api/group___runtime_unicode_1gaef6da72d8bc9ff2351b9ecd5745f746d/","text":"Luna::utf8_to_utf16_len LUNA_RUNTIME_API usize utf8_to_utf16_len(const c8 *src, usize src_chars=USIZE_MAX) Determines the length of the corresponding UTF-16 string for a UTF-8 string, not include the null-terminator. Overview Parameters src The UTF-8 string to check. src_chars The maximum characters to read. Specify USIZE_MAX to read till the end of the string. The checking process will stop on first null terminator, or when src_chars is reached. Return value Returns the length of the corresponding UTF-16 string for a UTF-8 string, not include the null-terminator.","title":"Luna::utf8_to_utf16_len"},{"location":"api/group___runtime_unicode_1gaef6da72d8bc9ff2351b9ecd5745f746d/#lunautf8_to_utf16_len","text":"LUNA_RUNTIME_API usize utf8_to_utf16_len(const c8 *src, usize src_chars=USIZE_MAX) Determines the length of the corresponding UTF-16 string for a UTF-8 string, not include the null-terminator.","title":"Luna::utf8_to_utf16_len"},{"location":"api/group___runtime_unicode_1gaef6da72d8bc9ff2351b9ecd5745f746d/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_unicode_1gaef6da72d8bc9ff2351b9ecd5745f746d/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_unicode_1gaef6da72d8bc9ff2351b9ecd5745f746d/#src","text":"The UTF-8 string to check.","title":"src"},{"location":"api/group___runtime_unicode_1gaef6da72d8bc9ff2351b9ecd5745f746d/#src_chars","text":"The maximum characters to read. Specify USIZE_MAX to read till the end of the string. The checking process will stop on first null terminator, or when src_chars is reached.","title":"src_chars"},{"location":"api/group___runtime_unicode_1gaef6da72d8bc9ff2351b9ecd5745f746d/#return-value","text":"Returns the length of the corresponding UTF-16 string for a UTF-8 string, not include the null-terminator.","title":"Return value"},{"location":"api/group___runtime_unicode_1gafd1e1a65de12a167979bb87b2ed098c6/","text":"Luna::utf16_charlen constexpr usize utf16_charlen(const c16 *src) Gets the number of UTF-16 characters the Unicode character takes from the first UTF-16 character. Overview Parameters src The pointer that points to the first UTF-16 character of the Unicode character. Return value Returns the number of UTF-16 characters the Unicode character takes.","title":"Luna::utf16_charlen"},{"location":"api/group___runtime_unicode_1gafd1e1a65de12a167979bb87b2ed098c6/#lunautf16_charlen","text":"constexpr usize utf16_charlen(const c16 *src) Gets the number of UTF-16 characters the Unicode character takes from the first UTF-16 character.","title":"Luna::utf16_charlen"},{"location":"api/group___runtime_unicode_1gafd1e1a65de12a167979bb87b2ed098c6/#overview","text":"","title":"Overview"},{"location":"api/group___runtime_unicode_1gafd1e1a65de12a167979bb87b2ed098c6/#parameters","text":"","title":"Parameters"},{"location":"api/group___runtime_unicode_1gafd1e1a65de12a167979bb87b2ed098c6/#src","text":"The pointer that points to the first UTF-16 character of the Unicode character.","title":"src"},{"location":"api/group___runtime_unicode_1gafd1e1a65de12a167979bb87b2ed098c6/#return-value","text":"Returns the number of UTF-16 characters the Unicode character takes.","title":"Return value"},{"location":"api/runtime/","text":"Runtime Represents a waitable object used for multi-thread synchronization. The Runtime module provides the runtime environment of Luna SDK and defines core functionalities that will be used by almost all modules. Objects that implements IWaitable cannot be used cross process boundary. Topics Algorithms Containers Assertions Atomic Operations Base64 encoding/decoding Base85 encoding/decoding Debugging DLL loading Error handling Files Hashing functions Interfaces Logging Memory allocation and deallocation Memory utility library Module system Name strings Boxed objects Path Debugging Generating random numbers SDK initialization and shutdown Thread management and synchronization methods Type reflection Unicode encoding/decoding Classes Luna::Allocator Luna::is_over_aligned Luna::is_trivially_relocatable Luna::Guid Luna::Pair Luna::OptionalPair Luna::Blob Luna::Event Luna::equal_to Luna::less Luna::hash Luna::ReferenceWrapper Luna::Function< _R(_Args...)> Luna::ReverseIterator Luna::ObjRef Luna::Ref Luna::WeakObjRef Luna::WeakRef Luna::IStream Luna::ISeekableStream Luna::Variant Luna::Vector Aliasing types using u8 = std::uint8_t Unsigned 8-bit integer (0~255). using u16 = std::uint16_t Unsigned 16-bit integer (0~65535). using u32 = std::uint32_t Unsigned 32-bit integer (0~4294967295). using u64 = std::uint64_t Unsigned 64-bit integer (0~18446744073709551615). using i8 = std::int8_t Signed 8-bit integer (-128~127). using i16 = std::int16_t Signed 16-bit integer (-32768~32767). using i32 = std::int32_t Signed 32-bit integer (-2147482648~2147483647). using i64 = std::int64_t Signed 64-bit integer (-9223372036854775808~9223372036854775807). using f32 = float 32-bit (single precision) floating point number. using f64 = double 64-bit (double precision) floating point number. using byte_t = u8 using nullptr_t = std::nullptr_t using opaque_t = void* using c8 = char 8-bit character. Signed/unsigned is unspecified, cast this to u8/i8 for fetching number. using c16 = char16_t 16-bit character. Signed/unsigned is unspecified, cast this to u16/i16 for fetching number. using c32 = char32_t 32-bit character. Signed/unsigned is unspecified, cast this to u32/i32 for fetching number. Functions constexpr auto test_flags(_Ty flags, _Ty options) -> enable_if_t< is_enum_v< _Ty >, bool > Tests if the provided enumeration contains the specified enumeration option. constexpr auto set_flags(_Ty &flags, _Ty options) -> enable_if_t< is_enum_v< _Ty >, void > Sets the provided enumeration options to 1. constexpr auto reset_flags(_Ty &flags, _Ty options) -> enable_if_t< is_enum_v< _Ty >, void > Resets the provided enumeration options to 0. constexpr auto set_flags(_Ty flags, _Ty options, bool value) -> enable_if_t< is_enum_v< _Ty >, _Ty > Sets the provided enumeration options to 1 or 0 based on the value provided. auto invoke(_Func &&f) -> decltype(static_cast< _Func && >(f)()) Invokes the specified callable object. auto invoke(_Func &&f, _Ty &&arg1, _Args &&... args) -> invoke_result_t< _Func, _Ty, _Args... > Invokes the specified callable object. _Return invoke_r(_Func &&f, _Args &&... args) Invokes the specified callable object. constexpr ReverseIterator< _Iter > make_reverse_iterator(_Iter i) Creates one reverse iterator from one iterator. void advance(_Iter &it, _Distance n) Advances the given iterator by n positions respectively. isize distance(_It first, _It last) Gets the number of elements between two iterators. _Iter next(_Iter it, isize n=1) Gets one iterator pointing to the next n th element of the element pointed by the input iterator. _BidirIt prev(_BidirIt it, isize n=1) Gets one iterator pointing to the last n th element of the element pointed by the input iterator. Ref< _Ty > box_ptr(_Ty *obj) Creates a strong reference from one raw pointer without modifing its reference count. Ref< _Ty > new_object(_Args &&... args) Creates one new boxed object.","title":"Runtime"},{"location":"api/runtime/#runtime","text":"Represents a waitable object used for multi-thread synchronization. The Runtime module provides the runtime environment of Luna SDK and defines core functionalities that will be used by almost all modules. Objects that implements IWaitable cannot be used cross process boundary.","title":"Runtime"},{"location":"api/runtime/#topics","text":"Algorithms Containers Assertions Atomic Operations Base64 encoding/decoding Base85 encoding/decoding Debugging DLL loading Error handling Files Hashing functions Interfaces Logging Memory allocation and deallocation Memory utility library Module system Name strings Boxed objects Path Debugging Generating random numbers SDK initialization and shutdown Thread management and synchronization methods Type reflection Unicode encoding/decoding","title":"Topics"},{"location":"api/runtime/#classes","text":"Luna::Allocator Luna::is_over_aligned Luna::is_trivially_relocatable Luna::Guid Luna::Pair Luna::OptionalPair Luna::Blob Luna::Event Luna::equal_to Luna::less Luna::hash Luna::ReferenceWrapper Luna::Function< _R(_Args...)> Luna::ReverseIterator Luna::ObjRef Luna::Ref Luna::WeakObjRef Luna::WeakRef Luna::IStream Luna::ISeekableStream Luna::Variant Luna::Vector","title":"Classes"},{"location":"api/runtime/#aliasing-types","text":"using u8 = std::uint8_t Unsigned 8-bit integer (0~255). using u16 = std::uint16_t Unsigned 16-bit integer (0~65535). using u32 = std::uint32_t Unsigned 32-bit integer (0~4294967295). using u64 = std::uint64_t Unsigned 64-bit integer (0~18446744073709551615). using i8 = std::int8_t Signed 8-bit integer (-128~127). using i16 = std::int16_t Signed 16-bit integer (-32768~32767). using i32 = std::int32_t Signed 32-bit integer (-2147482648~2147483647). using i64 = std::int64_t Signed 64-bit integer (-9223372036854775808~9223372036854775807). using f32 = float 32-bit (single precision) floating point number. using f64 = double 64-bit (double precision) floating point number. using byte_t = u8 using nullptr_t = std::nullptr_t using opaque_t = void* using c8 = char 8-bit character. Signed/unsigned is unspecified, cast this to u8/i8 for fetching number. using c16 = char16_t 16-bit character. Signed/unsigned is unspecified, cast this to u16/i16 for fetching number. using c32 = char32_t 32-bit character. Signed/unsigned is unspecified, cast this to u32/i32 for fetching number.","title":"Aliasing types"},{"location":"api/runtime/#functions","text":"constexpr auto test_flags(_Ty flags, _Ty options) -> enable_if_t< is_enum_v< _Ty >, bool > Tests if the provided enumeration contains the specified enumeration option. constexpr auto set_flags(_Ty &flags, _Ty options) -> enable_if_t< is_enum_v< _Ty >, void > Sets the provided enumeration options to 1. constexpr auto reset_flags(_Ty &flags, _Ty options) -> enable_if_t< is_enum_v< _Ty >, void > Resets the provided enumeration options to 0. constexpr auto set_flags(_Ty flags, _Ty options, bool value) -> enable_if_t< is_enum_v< _Ty >, _Ty > Sets the provided enumeration options to 1 or 0 based on the value provided. auto invoke(_Func &&f) -> decltype(static_cast< _Func && >(f)()) Invokes the specified callable object. auto invoke(_Func &&f, _Ty &&arg1, _Args &&... args) -> invoke_result_t< _Func, _Ty, _Args... > Invokes the specified callable object. _Return invoke_r(_Func &&f, _Args &&... args) Invokes the specified callable object. constexpr ReverseIterator< _Iter > make_reverse_iterator(_Iter i) Creates one reverse iterator from one iterator. void advance(_Iter &it, _Distance n) Advances the given iterator by n positions respectively. isize distance(_It first, _It last) Gets the number of elements between two iterators. _Iter next(_Iter it, isize n=1) Gets one iterator pointing to the next n th element of the element pointed by the input iterator. _BidirIt prev(_BidirIt it, isize n=1) Gets one iterator pointing to the last n th element of the element pointed by the input iterator. Ref< _Ty > box_ptr(_Ty *obj) Creates a strong reference from one raw pointer without modifing its reference count. Ref< _Ty > new_object(_Args &&... args) Creates one new boxed object.","title":"Functions"},{"location":"api/runtime_algorithm/","text":"Algorithms Functions constexpr const _Ty & min(const _Ty &a, const _Ty &b) Returns the smaller of the given values. constexpr const _Ty & min(const _Ty &a, const _Ty &b, _LessComp less_comp) Returns the smaller of the given values. constexpr const _Ty & max(const _Ty &a, const _Ty &b) Returns the greater of the given values. constexpr const _Ty & max(const _Ty &a, const _Ty &b, _LessComp less_comp) Returns the greater of the given values. void swap(_Ty &a, _Ty &b) Swaps two values. bool equal(_Iter1 first1, _Iter1 last1, _Iter2 first2) Tests the equality of two ranges. bool equal(_Iter1 first1, _Iter1 last1, _Iter2 first2, _EqualComp equal_compare) Tests the equality of two ranges. auto search(_ForwardIt first, _ForwardIt last, _ForwardIt pattern_first, _ForwardIt pattern_last) -> enable_if_t< is_pointer_v< _ForwardIt >, _ForwardIt > Searches for the first occurrence of the sequence of elements in the specified range. auto find_end(_ForwardIt first, _ForwardIt last, _ForwardIt pattern_first, _ForwardIt pattern_last) -> enable_if_t< is_pointer_v< _ForwardIt >, _ForwardIt > Searches for the last occurrence of the sequence of elements in the specified range. constexpr _InputIt find(_InputIt first, _InputIt last, const _Ty &value) Searches for the first element in the range that is equal to (==) the specified value. constexpr _InputIt find_if(_InputIt first, _InputIt last, _UnaryPredicate p) Searches for the first element in the range that passes the user-provided unary predicate. constexpr _InputIt find_if_not(_InputIt first, _InputIt last, _UnaryPredicate q) Searches for the first element in the range that fails the user-provided unary predicate. constexpr bool all_of(_InputIt first, _InputIt last, _UnaryPredicate p) Checks if the unary predicate returns true for all elements in the range. constexpr bool any_of(_InputIt first, _InputIt last, _UnaryPredicate p) Checks if the unary predicate returns true for at least one element in the range. constexpr bool none_of(_InputIt first, _InputIt last, _UnaryPredicate p) Checks if the unary predicate returns false for all elements in the range. constexpr _UnaryFunction for_each(_InputIt first, _InputIt last, _UnaryFunction f) Applies the given function object to every element in the range, in order. void sort(_RandomIt first, _RandomIt last) Sorts the elements in the range in non-descending order. The order of equal elements is not guaranteed to be preserved. void sort(_RandomIt first, _RandomIt last, _Compare comp) Sorts the elements in the range in non-descending order. The order of equal elements is not guaranteed to be preserved. _ForwardIt upper_bound(_ForwardIt first, _ForwardIt last, const _Ty &value) Finds the first element in the range such that value < element is true . _ForwardIt upper_bound(_ForwardIt first, _ForwardIt last, const _Ty &value, _Compare comp) Finds the first element in the range such that comp(value, element) is true . _ForwardIt lower_bound(_ForwardIt first, _ForwardIt last, const _Ty &value) Finds the first element in the range such that element < value is false . _ForwardIt lower_bound(_ForwardIt first, _ForwardIt last, const _Ty &value, _Compare comp) Finds the first element in the range such that comp(element, value) is false . bool binary_search(_ForwardIt first, _ForwardIt last, const _Ty &value) Checks if an element equivalent to the specified value appears within the range. bool binary_search(_ForwardIt first, _ForwardIt last, const _Ty &value, _Compare comp) Checks if an element equivalent to the specified value appears within the range. _ForwardIt binary_search_iter(_ForwardIt first, _ForwardIt last, const _Ty &value) Finds an element equivalent to the specified value in the range. _ForwardIt binary_search_iter(_ForwardIt first, _ForwardIt last, const _Ty &value, _Compare comp) Finds an element equivalent to the specified value in the range. Pair< _ForwardIt, _ForwardIt > equal_range(_ForwardIt first, _ForwardIt last, const _Ty &value) Gets a range containing all elements equivalent to the specified value in the range. Pair< _ForwardIt, _ForwardIt > equal_range(_ForwardIt first, _ForwardIt last, const _Ty &value, _Compare comp) Gets a range containing all elements equivalent to the specified value in the range. bool includes(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2) Checks if the sorted range [ first2 , last2 ) is a subsequence of the sorted range [ first1 , last1 ). (A subsequence need not be contiguous.) bool includes(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _Compare comp) Checks if the sorted range [ first2 , last2 ) is a subsequence of the sorted range [ first1 , last1 ). (A subsequence need not be contiguous.) _OutputIt copy(_InputIt first, _InputIt last, _OutputIt d_first) Copies elements from one range to another range. _OutputIt copy_if(_InputIt first, _InputIt last, _OutputIt d_first, UnaryPredicate pred) Copies elements that pass user-defined function from one range to another range. The relative order of elements that are copied is preserved. _OutputIt set_difference(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first) Copies elements that appear in the first sorted range and do not appear in the second sorted range to the destination range. The destination range is also sorted. _OutputIt set_difference(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first, _Compare comp) Copies elements that appear in the first sorted range and do not appear in the second sorted range to the destination range. The destination range is also sorted. _OutputIt set_intersection(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first) Constructs a sorted range consisting of elements that are found in both sorted ranges. _OutputIt set_intersection(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first, _Compare comp) Constructs a sorted range consisting of elements that are found in both sorted ranges. _OutputIt set_symmetric_difference(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first) Computes symmetric difference of two sorted ranges: elements that are found in either of the ranges, but not in both of them are copied to the destination range. The destination range is also sorted. _OutputIt set_symmetric_difference(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first, _Compare comp) Computes symmetric difference of two sorted ranges: elements that are found in either of the ranges, but not in both of them are copied to the destination range. The destination range is also sorted. _OutputIt set_union(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first) Constructs a sorted union beginning at the destination range consisting of the set of elements present in one or both sorted ranges. _OutputIt set_union(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first, _Compare comp) Constructs a sorted union beginning at the destination range consisting of the set of elements present in one or both sorted ranges.","title":"Algorithms"},{"location":"api/runtime_algorithm/#algorithms","text":"","title":"Algorithms"},{"location":"api/runtime_algorithm/#functions","text":"constexpr const _Ty & min(const _Ty &a, const _Ty &b) Returns the smaller of the given values. constexpr const _Ty & min(const _Ty &a, const _Ty &b, _LessComp less_comp) Returns the smaller of the given values. constexpr const _Ty & max(const _Ty &a, const _Ty &b) Returns the greater of the given values. constexpr const _Ty & max(const _Ty &a, const _Ty &b, _LessComp less_comp) Returns the greater of the given values. void swap(_Ty &a, _Ty &b) Swaps two values. bool equal(_Iter1 first1, _Iter1 last1, _Iter2 first2) Tests the equality of two ranges. bool equal(_Iter1 first1, _Iter1 last1, _Iter2 first2, _EqualComp equal_compare) Tests the equality of two ranges. auto search(_ForwardIt first, _ForwardIt last, _ForwardIt pattern_first, _ForwardIt pattern_last) -> enable_if_t< is_pointer_v< _ForwardIt >, _ForwardIt > Searches for the first occurrence of the sequence of elements in the specified range. auto find_end(_ForwardIt first, _ForwardIt last, _ForwardIt pattern_first, _ForwardIt pattern_last) -> enable_if_t< is_pointer_v< _ForwardIt >, _ForwardIt > Searches for the last occurrence of the sequence of elements in the specified range. constexpr _InputIt find(_InputIt first, _InputIt last, const _Ty &value) Searches for the first element in the range that is equal to (==) the specified value. constexpr _InputIt find_if(_InputIt first, _InputIt last, _UnaryPredicate p) Searches for the first element in the range that passes the user-provided unary predicate. constexpr _InputIt find_if_not(_InputIt first, _InputIt last, _UnaryPredicate q) Searches for the first element in the range that fails the user-provided unary predicate. constexpr bool all_of(_InputIt first, _InputIt last, _UnaryPredicate p) Checks if the unary predicate returns true for all elements in the range. constexpr bool any_of(_InputIt first, _InputIt last, _UnaryPredicate p) Checks if the unary predicate returns true for at least one element in the range. constexpr bool none_of(_InputIt first, _InputIt last, _UnaryPredicate p) Checks if the unary predicate returns false for all elements in the range. constexpr _UnaryFunction for_each(_InputIt first, _InputIt last, _UnaryFunction f) Applies the given function object to every element in the range, in order. void sort(_RandomIt first, _RandomIt last) Sorts the elements in the range in non-descending order. The order of equal elements is not guaranteed to be preserved. void sort(_RandomIt first, _RandomIt last, _Compare comp) Sorts the elements in the range in non-descending order. The order of equal elements is not guaranteed to be preserved. _ForwardIt upper_bound(_ForwardIt first, _ForwardIt last, const _Ty &value) Finds the first element in the range such that value < element is true . _ForwardIt upper_bound(_ForwardIt first, _ForwardIt last, const _Ty &value, _Compare comp) Finds the first element in the range such that comp(value, element) is true . _ForwardIt lower_bound(_ForwardIt first, _ForwardIt last, const _Ty &value) Finds the first element in the range such that element < value is false . _ForwardIt lower_bound(_ForwardIt first, _ForwardIt last, const _Ty &value, _Compare comp) Finds the first element in the range such that comp(element, value) is false . bool binary_search(_ForwardIt first, _ForwardIt last, const _Ty &value) Checks if an element equivalent to the specified value appears within the range. bool binary_search(_ForwardIt first, _ForwardIt last, const _Ty &value, _Compare comp) Checks if an element equivalent to the specified value appears within the range. _ForwardIt binary_search_iter(_ForwardIt first, _ForwardIt last, const _Ty &value) Finds an element equivalent to the specified value in the range. _ForwardIt binary_search_iter(_ForwardIt first, _ForwardIt last, const _Ty &value, _Compare comp) Finds an element equivalent to the specified value in the range. Pair< _ForwardIt, _ForwardIt > equal_range(_ForwardIt first, _ForwardIt last, const _Ty &value) Gets a range containing all elements equivalent to the specified value in the range. Pair< _ForwardIt, _ForwardIt > equal_range(_ForwardIt first, _ForwardIt last, const _Ty &value, _Compare comp) Gets a range containing all elements equivalent to the specified value in the range. bool includes(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2) Checks if the sorted range [ first2 , last2 ) is a subsequence of the sorted range [ first1 , last1 ). (A subsequence need not be contiguous.) bool includes(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _Compare comp) Checks if the sorted range [ first2 , last2 ) is a subsequence of the sorted range [ first1 , last1 ). (A subsequence need not be contiguous.) _OutputIt copy(_InputIt first, _InputIt last, _OutputIt d_first) Copies elements from one range to another range. _OutputIt copy_if(_InputIt first, _InputIt last, _OutputIt d_first, UnaryPredicate pred) Copies elements that pass user-defined function from one range to another range. The relative order of elements that are copied is preserved. _OutputIt set_difference(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first) Copies elements that appear in the first sorted range and do not appear in the second sorted range to the destination range. The destination range is also sorted. _OutputIt set_difference(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first, _Compare comp) Copies elements that appear in the first sorted range and do not appear in the second sorted range to the destination range. The destination range is also sorted. _OutputIt set_intersection(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first) Constructs a sorted range consisting of elements that are found in both sorted ranges. _OutputIt set_intersection(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first, _Compare comp) Constructs a sorted range consisting of elements that are found in both sorted ranges. _OutputIt set_symmetric_difference(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first) Computes symmetric difference of two sorted ranges: elements that are found in either of the ranges, but not in both of them are copied to the destination range. The destination range is also sorted. _OutputIt set_symmetric_difference(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first, _Compare comp) Computes symmetric difference of two sorted ranges: elements that are found in either of the ranges, but not in both of them are copied to the destination range. The destination range is also sorted. _OutputIt set_union(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first) Constructs a sorted union beginning at the destination range consisting of the set of elements present in one or both sorted ranges. _OutputIt set_union(_InputIt1 first1, _InputIt1 last1, _InputIt2 first2, _InputIt2 last2, _OutputIt d_first, _Compare comp) Constructs a sorted union beginning at the destination range consisting of the set of elements present in one or both sorted ranges.","title":"Functions"},{"location":"api/runtime_assert/","text":"Assertions","title":"Assertions"},{"location":"api/runtime_assert/#assertions","text":"","title":"Assertions"},{"location":"api/runtime_atomic/","text":"Atomic Operations Functions i32 atom_inc_i32(i32 volatile *v) Atomically increase the value of the variable by 1. u32 atom_inc_u32(u32 volatile *v) Atomically increase the value of the variable by 1. i64 atom_inc_i64(i64 volatile *v) Atomically increase the value of the variable by 1. u64 atom_inc_u64(u64 volatile *v) Atomically increase the value of the variable by 1. usize atom_inc_usize(usize volatile *v) Atomically increase the value of the variable by 1. i32 atom_dec_i32(i32 volatile *v) Atomically decrease the value of the variable by 1. u32 atom_dec_u32(u32 volatile *v) Atomically decrease the value of the variable by 1. i64 atom_dec_i64(i64 volatile *v) Atomically decrease the value of the variable by 1. u64 atom_dec_u64(u64 volatile *v) Atomically decrease the value of the variable by 1. usize atom_dec_usize(usize volatile *v) Atomically decrease the value of the variable by 1. i32 atom_add_i32(i32 volatile *base, i32 v) Atomically increase the value of the variable by the the value provided. u32 atom_add_u32(u32 volatile *base, i32 v) Atomically increase the value of the variable by the the value provided. i64 atom_add_i64(i64 volatile *base, i64 v) Atomically increase the value of the variable by the the value provided. u64 atom_add_u64(u64 volatile *base, i64 v) Atomically increase the value of the variable by the the value provided. usize atom_add_usize(usize volatile *base, isize v) Atomically increase the value of the variable by the the value provided. i32 atom_exchange_i32(i32 volatile *dst, i32 v) Atomically replace the value of the variable with the value provided. u32 atom_exchange_u32(u32 volatile *dst, u32 v) Atomically replace the value of the variable with the value provided. i64 atom_exchange_i64(i64 volatile *dst, i64 v) Atomically replace the value of the variable with the value provided. u64 atom_exchange_u64(u64 volatile *dst, u64 v) Atomically replace the value of the variable with the value provided. _Ty * atom_exchange_pointer(_Ty volatile target, void *value) Atomically replace the value of the variable with the value provided. usize atom_exchange_usize(usize volatile *dst, usize v) Atomically replace the value of the variable with the value provided. i32 atom_compare_exchange_i32(i32 volatile *dst, i32 exchange, i32 comperand) Atomically compares the value of the variable with the specified comperand, and sets the variable to the specified value if equal. u32 atom_compare_exchange_u32(u32 volatile *dst, u32 exchange, u32 comperand) Atomically compares the value of the variable with the specified comperand, and sets the variable to the specified value if equal. _Ty * atom_compare_exchange_pointer(_Ty volatile dst, void exchange, void comperand) Atomically compares the value of the variable with the specified comperand, and sets the variable to the specified value if equal. usize atom_compare_exchange_usize(usize volatile *dst, usize exchange, usize comperand) Atomically compares the value of the variable with the specified comperand, and sets the variable to the specified value if equal.","title":"Atomic Operations"},{"location":"api/runtime_atomic/#atomic-operations","text":"","title":"Atomic Operations"},{"location":"api/runtime_atomic/#functions","text":"i32 atom_inc_i32(i32 volatile *v) Atomically increase the value of the variable by 1. u32 atom_inc_u32(u32 volatile *v) Atomically increase the value of the variable by 1. i64 atom_inc_i64(i64 volatile *v) Atomically increase the value of the variable by 1. u64 atom_inc_u64(u64 volatile *v) Atomically increase the value of the variable by 1. usize atom_inc_usize(usize volatile *v) Atomically increase the value of the variable by 1. i32 atom_dec_i32(i32 volatile *v) Atomically decrease the value of the variable by 1. u32 atom_dec_u32(u32 volatile *v) Atomically decrease the value of the variable by 1. i64 atom_dec_i64(i64 volatile *v) Atomically decrease the value of the variable by 1. u64 atom_dec_u64(u64 volatile *v) Atomically decrease the value of the variable by 1. usize atom_dec_usize(usize volatile *v) Atomically decrease the value of the variable by 1. i32 atom_add_i32(i32 volatile *base, i32 v) Atomically increase the value of the variable by the the value provided. u32 atom_add_u32(u32 volatile *base, i32 v) Atomically increase the value of the variable by the the value provided. i64 atom_add_i64(i64 volatile *base, i64 v) Atomically increase the value of the variable by the the value provided. u64 atom_add_u64(u64 volatile *base, i64 v) Atomically increase the value of the variable by the the value provided. usize atom_add_usize(usize volatile *base, isize v) Atomically increase the value of the variable by the the value provided. i32 atom_exchange_i32(i32 volatile *dst, i32 v) Atomically replace the value of the variable with the value provided. u32 atom_exchange_u32(u32 volatile *dst, u32 v) Atomically replace the value of the variable with the value provided. i64 atom_exchange_i64(i64 volatile *dst, i64 v) Atomically replace the value of the variable with the value provided. u64 atom_exchange_u64(u64 volatile *dst, u64 v) Atomically replace the value of the variable with the value provided. _Ty * atom_exchange_pointer(_Ty volatile target, void *value) Atomically replace the value of the variable with the value provided. usize atom_exchange_usize(usize volatile *dst, usize v) Atomically replace the value of the variable with the value provided. i32 atom_compare_exchange_i32(i32 volatile *dst, i32 exchange, i32 comperand) Atomically compares the value of the variable with the specified comperand, and sets the variable to the specified value if equal. u32 atom_compare_exchange_u32(u32 volatile *dst, u32 exchange, u32 comperand) Atomically compares the value of the variable with the specified comperand, and sets the variable to the specified value if equal. _Ty * atom_compare_exchange_pointer(_Ty volatile dst, void exchange, void comperand) Atomically compares the value of the variable with the specified comperand, and sets the variable to the specified value if equal. usize atom_compare_exchange_usize(usize volatile *dst, usize exchange, usize comperand) Atomically compares the value of the variable with the specified comperand, and sets the variable to the specified value if equal.","title":"Functions"},{"location":"api/runtime_base64/","text":"Base64 encoding/decoding Functions constexpr usize base64_get_encoded_size(usize raw_size) Get the encoded base64 string size from the raw data size. constexpr usize base64_get_decoded_size(usize encoded_size) Get the decoded binary size from the encoded base64 string size. LUNA_RUNTIME_API usize base64_encode(c8 dst, usize dst_max_chars, const void src, usize src_size_bytes) Encode a binary data to a base64 string. LUNA_RUNTIME_API usize base64_decode(void dst, usize dst_max_bytes, const c8 src, usize src_size_chars=USIZE_MAX) Decode a base64 string to binary data. The system assumes the string passed in is a valid base64 string.","title":"Base64 encoding/decoding"},{"location":"api/runtime_base64/#base64-encodingdecoding","text":"","title":"Base64 encoding/decoding"},{"location":"api/runtime_base64/#functions","text":"constexpr usize base64_get_encoded_size(usize raw_size) Get the encoded base64 string size from the raw data size. constexpr usize base64_get_decoded_size(usize encoded_size) Get the decoded binary size from the encoded base64 string size. LUNA_RUNTIME_API usize base64_encode(c8 dst, usize dst_max_chars, const void src, usize src_size_bytes) Encode a binary data to a base64 string. LUNA_RUNTIME_API usize base64_decode(void dst, usize dst_max_bytes, const c8 src, usize src_size_chars=USIZE_MAX) Decode a base64 string to binary data. The system assumes the string passed in is a valid base64 string.","title":"Functions"},{"location":"api/runtime_base85/","text":"Base85 encoding/decoding Functions constexpr usize base85_get_encoded_size(usize raw_size) Get the encoded base85 string size from the raw data size. constexpr usize base85_get_decoded_size(usize encoded_size) Get the decoded binary size from the encoded base85 string size. LUNA_RUNTIME_API usize base85_encode(c8 dst, usize dst_max_chars, const void src, usize src_size_bytes) Encode a binary data to a base85 string. LUNA_RUNTIME_API usize base85_decode(void dst, usize dst_max_bytes, const c8 src, usize src_size_chars=USIZE_MAX) Decode a base85 string to binary data. The system assumes the string passed in is a valid base85 string.","title":"Base85 encoding/decoding"},{"location":"api/runtime_base85/#base85-encodingdecoding","text":"","title":"Base85 encoding/decoding"},{"location":"api/runtime_base85/#functions","text":"constexpr usize base85_get_encoded_size(usize raw_size) Get the encoded base85 string size from the raw data size. constexpr usize base85_get_decoded_size(usize encoded_size) Get the decoded binary size from the encoded base85 string size. LUNA_RUNTIME_API usize base85_encode(c8 dst, usize dst_max_chars, const void src, usize src_size_bytes) Encode a binary data to a base85 string. LUNA_RUNTIME_API usize base85_decode(void dst, usize dst_max_bytes, const c8 src, usize src_size_chars=USIZE_MAX) Decode a base85 string to binary data. The system assumes the string passed in is a valid base85 string.","title":"Functions"},{"location":"api/runtime_container/","text":"Containers Classes Luna::Array Luna::HashMap Luna::HashSet Luna::List Luna::RingDeque Functions LUNA_RUNTIME_API typeinfo_t hash_map_type() LUNA_RUNTIME_API typeinfo_t hash_set_type()","title":"Containers"},{"location":"api/runtime_container/#containers","text":"","title":"Containers"},{"location":"api/runtime_container/#classes","text":"Luna::Array Luna::HashMap Luna::HashSet Luna::List Luna::RingDeque","title":"Classes"},{"location":"api/runtime_container/#functions","text":"LUNA_RUNTIME_API typeinfo_t hash_map_type() LUNA_RUNTIME_API typeinfo_t hash_set_type()","title":"Functions"},{"location":"api/runtime_d_l_l/","text":"DLL loading Functions LUNA_RUNTIME_API R< opaque_t > load_library(const c8 *path) Loads the specified library to the process's address space. This call may load additional libraries required by the specified library. LUNA_RUNTIME_API void free_library(opaque_t handle) Unloads the specified library. LUNA_RUNTIME_API R< void * > get_library_function(opaque_t handle, const c8 *symbol) Gets the function address (function pointer) of one function in the library from its symbol name.","title":"DLL loading"},{"location":"api/runtime_d_l_l/#dll-loading","text":"","title":"DLL loading"},{"location":"api/runtime_d_l_l/#functions","text":"LUNA_RUNTIME_API R< opaque_t > load_library(const c8 *path) Loads the specified library to the process's address space. This call may load additional libraries required by the specified library. LUNA_RUNTIME_API void free_library(opaque_t handle) Unloads the specified library. LUNA_RUNTIME_API R< void * > get_library_function(opaque_t handle, const c8 *symbol) Gets the function address (function pointer) of one function in the library from its symbol name.","title":"Functions"},{"location":"api/runtime_debug/","text":"Debugging Functions LUNA_RUNTIME_API u32 stack_backtrace(Span< opaque_t > frames) Captures function call stack information of the current thread. LUNA_RUNTIME_API const c8 ** stack_backtrace_symbols(Span< const opaque_t > frames) Gets symbolic names for frames returned by stack_backtrace. LUNA_RUNTIME_API void free_backtrace_symbols(const c8 **symbols)","title":"Debugging"},{"location":"api/runtime_debug/#debugging","text":"","title":"Debugging"},{"location":"api/runtime_debug/#functions","text":"LUNA_RUNTIME_API u32 stack_backtrace(Span< opaque_t > frames) Captures function call stack information of the current thread. LUNA_RUNTIME_API const c8 ** stack_backtrace_symbols(Span< const opaque_t > frames) Gets symbolic names for frames returned by stack_backtrace. LUNA_RUNTIME_API void free_backtrace_symbols(const c8 **symbols)","title":"Functions"},{"location":"api/runtime_error/","text":"Error handling Classes Luna::ErrCode Luna::Error Luna::R Luna::R< void > Aliasing types using errcat_t = usize The error category type represents one container that can hold multiple error codes and sub-categories. using RV = R An alias of [R](struct_luna_1_1_r.md)<void> for representing one throwable function with no return value. Functions LUNA_RUNTIME_API ErrCode get_error_code_by_name(const c8 errcat_name, const c8 errcode_name) Gets the error code represented by the error name. LUNA_RUNTIME_API errcat_t get_error_category_by_name(const c8 *errcat_name) Gets the error category represented by the error category name. LUNA_RUNTIME_API const c8 * get_error_code_name(ErrCode err_code) Fetches the name of the error code. LUNA_RUNTIME_API const c8 * get_error_category_name(errcat_t err_category) Fetches the name of the error category. LUNA_RUNTIME_API errcat_t get_error_code_category(ErrCode err_code) Fetches the error category that holds the error code. LUNA_RUNTIME_API Vector< errcat_t > get_all_error_categories() Fetches all error categories registered in the system, including all subcategories. LUNA_RUNTIME_API Vector< ErrCode > get_all_error_codes_of_category(errcat_t err_category) Fetches all error codes that belongs to the specified error category. LUNA_RUNTIME_API Vector< errcat_t > get_all_error_subcategories_of_category(errcat_t err_category) Fetches all child error categories that belongs to the specified error category. LUNA_RUNTIME_API Error & get_error() Gets the error object of this thread. Every thread will be assigned with one error object. ErrCode set_error(ErrCode code, const c8 *fmt, VarList args) Sets the error object of this thread. ErrCode set_error(ErrCode code, const c8 *fmt,...) Sets the error object of this thread. const c8 * explain(ErrCode err_code) Gets a brief description about the error code. ErrCode unwrap_errcode(ErrCode err_code) Gets the real error code if the error code is BasicError::error_object. bool valid() const Tests if the result is successful and the return value is valid. R(const _Ty &v) Constructs one successful result object with the specified return value. R(_Ty &&v) Constructs one successful result object with the specified return value. R(ErrCode error) Constructs one failed result object with the specified error code. R(const R &rhs) Constructs one result object by coping from another result object. R(R &&rhs) Constructs one result object by moving from another result object. R & operator=(const R &rhs) Assigns the result object by coping from another result object. R & operator=(R &&rhs) Assigns the result object by moving from another result object. const _Ty & get() const Gets the return value of the result object. _Ty & get() Gets the return value of the result object. ErrCode errcode() const Gets the error code of the result object. bool valid() const Tests if the result is successful. constexpr R() Constructs one successful result object. R(ErrCode error) Constructs one failed result object with the specified error code. R(const R &rhs) Constructs one result object by coping from another result object. R & operator=(const R &rhs) Assigns the result object by coping from another result object. ErrCode errcode() const Gets the error code of the result object. bool succeeded(const R< _Ty > &r) Tests whether the specified result is successful. bool failed(const R< _Ty > &r) Tests whether the specified result is failed. ErrCode unwrap_errcode(const R< _Ty > &obj) Unwraps the real error code from the result.","title":"Error handling"},{"location":"api/runtime_error/#error-handling","text":"","title":"Error handling"},{"location":"api/runtime_error/#classes","text":"Luna::ErrCode Luna::Error Luna::R Luna::R< void >","title":"Classes"},{"location":"api/runtime_error/#aliasing-types","text":"using errcat_t = usize The error category type represents one container that can hold multiple error codes and sub-categories. using RV = R An alias of [R](struct_luna_1_1_r.md)<void> for representing one throwable function with no return value.","title":"Aliasing types"},{"location":"api/runtime_error/#functions","text":"LUNA_RUNTIME_API ErrCode get_error_code_by_name(const c8 errcat_name, const c8 errcode_name) Gets the error code represented by the error name. LUNA_RUNTIME_API errcat_t get_error_category_by_name(const c8 *errcat_name) Gets the error category represented by the error category name. LUNA_RUNTIME_API const c8 * get_error_code_name(ErrCode err_code) Fetches the name of the error code. LUNA_RUNTIME_API const c8 * get_error_category_name(errcat_t err_category) Fetches the name of the error category. LUNA_RUNTIME_API errcat_t get_error_code_category(ErrCode err_code) Fetches the error category that holds the error code. LUNA_RUNTIME_API Vector< errcat_t > get_all_error_categories() Fetches all error categories registered in the system, including all subcategories. LUNA_RUNTIME_API Vector< ErrCode > get_all_error_codes_of_category(errcat_t err_category) Fetches all error codes that belongs to the specified error category. LUNA_RUNTIME_API Vector< errcat_t > get_all_error_subcategories_of_category(errcat_t err_category) Fetches all child error categories that belongs to the specified error category. LUNA_RUNTIME_API Error & get_error() Gets the error object of this thread. Every thread will be assigned with one error object. ErrCode set_error(ErrCode code, const c8 *fmt, VarList args) Sets the error object of this thread. ErrCode set_error(ErrCode code, const c8 *fmt,...) Sets the error object of this thread. const c8 * explain(ErrCode err_code) Gets a brief description about the error code. ErrCode unwrap_errcode(ErrCode err_code) Gets the real error code if the error code is BasicError::error_object. bool valid() const Tests if the result is successful and the return value is valid. R(const _Ty &v) Constructs one successful result object with the specified return value. R(_Ty &&v) Constructs one successful result object with the specified return value. R(ErrCode error) Constructs one failed result object with the specified error code. R(const R &rhs) Constructs one result object by coping from another result object. R(R &&rhs) Constructs one result object by moving from another result object. R & operator=(const R &rhs) Assigns the result object by coping from another result object. R & operator=(R &&rhs) Assigns the result object by moving from another result object. const _Ty & get() const Gets the return value of the result object. _Ty & get() Gets the return value of the result object. ErrCode errcode() const Gets the error code of the result object. bool valid() const Tests if the result is successful. constexpr R() Constructs one successful result object. R(ErrCode error) Constructs one failed result object with the specified error code. R(const R &rhs) Constructs one result object by coping from another result object. R & operator=(const R &rhs) Assigns the result object by coping from another result object. ErrCode errcode() const Gets the error code of the result object. bool succeeded(const R< _Ty > &r) Tests whether the specified result is successful. bool failed(const R< _Ty > &r) Tests whether the specified result is failed. ErrCode unwrap_errcode(const R< _Ty > &obj) Unwraps the real error code from the result.","title":"Functions"},{"location":"api/runtime_file/","text":"Files Classes Luna::FileAttribute Luna::IFile Luna::IFileIterator Functions LUNA_RUNTIME_API R< Ref< IFile > > open_file(const c8 *path, FileOpenFlag flags, FileCreationMode creation) Opens one file. LUNA_RUNTIME_API R< Blob > load_file_data(IFile *file) Returns the data in the specified file as a blob object. LUNA_RUNTIME_API R< FileAttribute > get_file_attribute(const c8 *path) Gets the file attribute. LUNA_RUNTIME_API RV copy_file(const c8 from_path, const c8 to_path, FileCopyFlag flags=FileCopyFlag::none) Copies the file or directory from the source path to the destination path. LUNA_RUNTIME_API RV move_file(const c8 from_path, const c8 to_path, FileMoveFlag flags=FileMoveFlag::none) Moves the file or directory from the source path to the destination path. This call can also be used to rename a file. LUNA_RUNTIME_API RV delete_file(const c8 *file_path) Deletes the specified file or directory. LUNA_RUNTIME_API R< Ref< IFileIterator > > open_dir(const c8 *path) Creates a file iterator that can be used to iterate all files in the specified directory. LUNA_RUNTIME_API RV create_dir(const c8 *path) Creates one empty directory. LUNA_RUNTIME_API u32 get_current_dir(u32 buffer_length, c8 *buffer) Gets the current working directory path for the underlying system. LUNA_RUNTIME_API RV set_current_dir(const c8 *path) Sets the current working directory path for the underlying system. The current directory will be set for the process scope. LUNA_RUNTIME_API const c8 * get_process_path() Gets the full (absolute) path of the application's executable file.","title":"Files"},{"location":"api/runtime_file/#files","text":"","title":"Files"},{"location":"api/runtime_file/#classes","text":"Luna::FileAttribute Luna::IFile Luna::IFileIterator","title":"Classes"},{"location":"api/runtime_file/#functions","text":"LUNA_RUNTIME_API R< Ref< IFile > > open_file(const c8 *path, FileOpenFlag flags, FileCreationMode creation) Opens one file. LUNA_RUNTIME_API R< Blob > load_file_data(IFile *file) Returns the data in the specified file as a blob object. LUNA_RUNTIME_API R< FileAttribute > get_file_attribute(const c8 *path) Gets the file attribute. LUNA_RUNTIME_API RV copy_file(const c8 from_path, const c8 to_path, FileCopyFlag flags=FileCopyFlag::none) Copies the file or directory from the source path to the destination path. LUNA_RUNTIME_API RV move_file(const c8 from_path, const c8 to_path, FileMoveFlag flags=FileMoveFlag::none) Moves the file or directory from the source path to the destination path. This call can also be used to rename a file. LUNA_RUNTIME_API RV delete_file(const c8 *file_path) Deletes the specified file or directory. LUNA_RUNTIME_API R< Ref< IFileIterator > > open_dir(const c8 *path) Creates a file iterator that can be used to iterate all files in the specified directory. LUNA_RUNTIME_API RV create_dir(const c8 *path) Creates one empty directory. LUNA_RUNTIME_API u32 get_current_dir(u32 buffer_length, c8 *buffer) Gets the current working directory path for the underlying system. LUNA_RUNTIME_API RV set_current_dir(const c8 *path) Sets the current working directory path for the underlying system. The current directory will be set for the process scope. LUNA_RUNTIME_API const c8 * get_process_path() Gets the full (absolute) path of the application's executable file.","title":"Functions"},{"location":"api/runtime_hash/","text":"Hashing functions Functions _HashTy memhash(const void *data, usize size, _HashTy h=0) Computes a hash code for the specified binary data. u8 memhash8(const void *data, usize size, u8 h=0) u16 memhash16(const void *data, usize size, u16 h=0) u32 memhash32(const void *data, usize size, u32 h=0) u64 memhash64(const void *data, usize size, u64 h=0) constexpr _HashTy strhash(const c8 *s, _HashTy h=0) Computes a hash code for the specified string. constexpr u8 strhash8(const c8 *s, u8 h=0) constexpr u16 strhash16(const c8 *s, u16 h=0) constexpr u32 strhash32(const c8 *s, u32 h=0) constexpr u64 strhash64(const c8 *s, u64 h=0)","title":"Hashing functions"},{"location":"api/runtime_hash/#hashing-functions","text":"","title":"Hashing functions"},{"location":"api/runtime_hash/#functions","text":"_HashTy memhash(const void *data, usize size, _HashTy h=0) Computes a hash code for the specified binary data. u8 memhash8(const void *data, usize size, u8 h=0) u16 memhash16(const void *data, usize size, u16 h=0) u32 memhash32(const void *data, usize size, u32 h=0) u64 memhash64(const void *data, usize size, u64 h=0) constexpr _HashTy strhash(const c8 *s, _HashTy h=0) Computes a hash code for the specified string. constexpr u8 strhash8(const c8 *s, u8 h=0) constexpr u16 strhash16(const c8 *s, u16 h=0) constexpr u32 strhash32(const c8 *s, u32 h=0) constexpr u64 strhash64(const c8 *s, u64 h=0)","title":"Functions"},{"location":"api/runtime_init/","text":"SDK initialization and shutdown Functions LUNA_RUNTIME_API bool init() Initializes Luna SDK. LUNA_RUNTIME_API void close() Closes Luna SDK.","title":"SDK initialization and shutdown"},{"location":"api/runtime_init/#sdk-initialization-and-shutdown","text":"","title":"SDK initialization and shutdown"},{"location":"api/runtime_init/#functions","text":"LUNA_RUNTIME_API bool init() Initializes Luna SDK. LUNA_RUNTIME_API void close() Closes Luna SDK.","title":"Functions"},{"location":"api/runtime_interface/","text":"Interfaces Classes Luna::InterfaceImplDesc Luna::Interface Functions LUNA_RUNTIME_API void impl_interface_for_type(const InterfaceImplDesc &desc) Registers one interface implementation. void impl_interface_for_type() LUNA_RUNTIME_API bool is_interface_implemented_by_type(typeinfo_t type, const Guid &iid) Checks whether the specified type implements the specified interface. LUNA_RUNTIME_API void * query_interface(object_t object, const Guid &iid) Gets one interface pointer from one pointer to one boxed object that implements the interface. _Ity * query_interface(object_t object) Gets one interface pointer from one pointer to one boxed object that implements the interface.","title":"Interfaces"},{"location":"api/runtime_interface/#interfaces","text":"","title":"Interfaces"},{"location":"api/runtime_interface/#classes","text":"Luna::InterfaceImplDesc Luna::Interface","title":"Classes"},{"location":"api/runtime_interface/#functions","text":"LUNA_RUNTIME_API void impl_interface_for_type(const InterfaceImplDesc &desc) Registers one interface implementation. void impl_interface_for_type() LUNA_RUNTIME_API bool is_interface_implemented_by_type(typeinfo_t type, const Guid &iid) Checks whether the specified type implements the specified interface. LUNA_RUNTIME_API void * query_interface(object_t object, const Guid &iid) Gets one interface pointer from one pointer to one boxed object that implements the interface. _Ity * query_interface(object_t object) Gets one interface pointer from one pointer to one boxed object that implements the interface.","title":"Functions"},{"location":"api/runtime_log/","text":"Logging Aliasing types using log_callback_t = void(LogVerbosity verbosity, const c8 tag, usize tag_length, const c8 message, usize message_length) Called by the log system when one log is emitted. Functions LUNA_RUNTIME_API void log(LogVerbosity verbosity, const c8 tag, const c8 format,...) Logs one message. LUNA_RUNTIME_API void logv(LogVerbosity verbosity, const c8 tag, const c8 format, VarList args) Logs one message. LUNA_RUNTIME_API void log_verbose(const c8 tag, const c8 format,...) Outputs one log message with LogVerbosity::verbose verbosity. LUNA_RUNTIME_API void logv_verbose(const c8 tag, const c8 format, VarList args) Outputs one log message with LogVerbosity::verbose verbosity. LUNA_RUNTIME_API void log_debug(const c8 tag, const c8 format,...) Outputs one log message with LogVerbosity::debug verbosity. LUNA_RUNTIME_API void logv_debug(const c8 tag, const c8 format, VarList args) Outputs one log message with LogVerbosity::debug verbosity. LUNA_RUNTIME_API void log_info(const c8 tag, const c8 format,...) Outputs one log message with LogVerbosity::info verbosity. LUNA_RUNTIME_API void logv_info(const c8 tag, const c8 format, VarList args) Outputs one log message with LogVerbosity::info verbosity. LUNA_RUNTIME_API void log_warning(const c8 tag, const c8 format,...) Outputs one log message with LogVerbosity::warning verbosity. LUNA_RUNTIME_API void logv_warning(const c8 tag, const c8 format, VarList args) Outputs one log message with LogVerbosity::warning verbosity. LUNA_RUNTIME_API void log_error(const c8 tag, const c8 format,...) Outputs one log message with LogVerbosity::error verbosity. LUNA_RUNTIME_API void logv_error(const c8 tag, const c8 format, VarList args) Outputs one log message with LogVerbosity::error verbosity. LUNA_RUNTIME_API usize register_log_handler(const Function< log_callback_t > &handler) Registers one custom log handler that will be called when a new log message is spawned. LUNA_RUNTIME_API void unregister_log_handler(usize handler_id) Unregisters one registered log handler. LUNA_RUNTIME_API void set_log_to_platform_enabled(bool enabled) Enables or disables outputting log messages to platform's default logging device. LUNA_RUNTIME_API void set_log_to_platform_verbosity(LogVerbosity verbosity) Sets the maximum log verbosity level that will be outputted to platform's default logging device. LUNA_RUNTIME_API void set_log_to_file_enabled(bool enabled) Enables or disables outputting log messages to the log file. LUNA_RUNTIME_API void set_log_file(const c8 *file) Sets the file path of the log file. LUNA_RUNTIME_API void set_log_to_file_verbosity(LogVerbosity verbosity) Sets the maximum log verbosity level that will be outputted to the log file. LUNA_RUNTIME_API void flush_log_to_file() Flushes the log-to-file cache and writes all cached logs to the log file.","title":"Logging"},{"location":"api/runtime_log/#logging","text":"","title":"Logging"},{"location":"api/runtime_log/#aliasing-types","text":"using log_callback_t = void(LogVerbosity verbosity, const c8 tag, usize tag_length, const c8 message, usize message_length) Called by the log system when one log is emitted.","title":"Aliasing types"},{"location":"api/runtime_log/#functions","text":"LUNA_RUNTIME_API void log(LogVerbosity verbosity, const c8 tag, const c8 format,...) Logs one message. LUNA_RUNTIME_API void logv(LogVerbosity verbosity, const c8 tag, const c8 format, VarList args) Logs one message. LUNA_RUNTIME_API void log_verbose(const c8 tag, const c8 format,...) Outputs one log message with LogVerbosity::verbose verbosity. LUNA_RUNTIME_API void logv_verbose(const c8 tag, const c8 format, VarList args) Outputs one log message with LogVerbosity::verbose verbosity. LUNA_RUNTIME_API void log_debug(const c8 tag, const c8 format,...) Outputs one log message with LogVerbosity::debug verbosity. LUNA_RUNTIME_API void logv_debug(const c8 tag, const c8 format, VarList args) Outputs one log message with LogVerbosity::debug verbosity. LUNA_RUNTIME_API void log_info(const c8 tag, const c8 format,...) Outputs one log message with LogVerbosity::info verbosity. LUNA_RUNTIME_API void logv_info(const c8 tag, const c8 format, VarList args) Outputs one log message with LogVerbosity::info verbosity. LUNA_RUNTIME_API void log_warning(const c8 tag, const c8 format,...) Outputs one log message with LogVerbosity::warning verbosity. LUNA_RUNTIME_API void logv_warning(const c8 tag, const c8 format, VarList args) Outputs one log message with LogVerbosity::warning verbosity. LUNA_RUNTIME_API void log_error(const c8 tag, const c8 format,...) Outputs one log message with LogVerbosity::error verbosity. LUNA_RUNTIME_API void logv_error(const c8 tag, const c8 format, VarList args) Outputs one log message with LogVerbosity::error verbosity. LUNA_RUNTIME_API usize register_log_handler(const Function< log_callback_t > &handler) Registers one custom log handler that will be called when a new log message is spawned. LUNA_RUNTIME_API void unregister_log_handler(usize handler_id) Unregisters one registered log handler. LUNA_RUNTIME_API void set_log_to_platform_enabled(bool enabled) Enables or disables outputting log messages to platform's default logging device. LUNA_RUNTIME_API void set_log_to_platform_verbosity(LogVerbosity verbosity) Sets the maximum log verbosity level that will be outputted to platform's default logging device. LUNA_RUNTIME_API void set_log_to_file_enabled(bool enabled) Enables or disables outputting log messages to the log file. LUNA_RUNTIME_API void set_log_file(const c8 *file) Sets the file path of the log file. LUNA_RUNTIME_API void set_log_to_file_verbosity(LogVerbosity verbosity) Sets the maximum log verbosity level that will be outputted to the log file. LUNA_RUNTIME_API void flush_log_to_file() Flushes the log-to-file cache and writes all cached logs to the log file.","title":"Functions"},{"location":"api/runtime_memory/","text":"Memory allocation and deallocation Functions LUNA_RUNTIME_API void * memalloc(usize size, usize alignment=0) Allocates heap memory. LUNA_RUNTIME_API void memfree(void *ptr, usize alignment=0) Frees heap memory. LUNA_RUNTIME_API void * memrealloc(void *ptr, usize size, usize alignment=0) Reallocates heap memory. LUNA_RUNTIME_API usize memsize(void *ptr, usize alignment=0) Gets the allocated size of one memory block. _Ty * memnew(_Args &&... args) Allocates heap memory for one object and constructs the object. void memdelete(_Ty *o) Destructs one object and frees its memory.","title":"Memory allocation and deallocation"},{"location":"api/runtime_memory/#memory-allocation-and-deallocation","text":"","title":"Memory allocation and deallocation"},{"location":"api/runtime_memory/#functions","text":"LUNA_RUNTIME_API void * memalloc(usize size, usize alignment=0) Allocates heap memory. LUNA_RUNTIME_API void memfree(void *ptr, usize alignment=0) Frees heap memory. LUNA_RUNTIME_API void * memrealloc(void *ptr, usize size, usize alignment=0) Reallocates heap memory. LUNA_RUNTIME_API usize memsize(void *ptr, usize alignment=0) Gets the allocated size of one memory block. _Ty * memnew(_Args &&... args) Allocates heap memory for one object and constructs the object. void memdelete(_Ty *o) Destructs one object and frees its memory.","title":"Functions"},{"location":"api/runtime_memory_utils/","text":"Memory utility library Classes Luna::Unconstructed Luna::MemoryLayoutMember Functions void * memzero(void *dst, usize byte_count) Clears the specified memory region to 0. _Ty * memzero(_Ty *dst) Clears the memory of the specified object to 0. void * memcpy_bitmap(void dst, const void src, usize copy_size_per_row, usize num_rows, usize dst_row_pitch, usize src_row_pitch) Copies the data for a 2D bitmap. void * memcpy_bitmap3d(void dst, const void src, usize copy_size_per_row, usize num_rows, usize num_slices, usize dst_row_pitch, usize src_row_pitch, usize dst_slice_pitch, usize src_slice_pitch) Copies the data for a 3D bitmap. void * pixel_offset(void *base, usize x, usize y, usize z, usize bytes_per_pixel, usize row_pitch, usize slice_pitch) Returns a pointer that offsets the specified pixels in the bitmap. const void * pixel_offset(const void *base, usize x, usize y, usize z, usize bytes_per_pixel, usize row_pitch, usize slice_pitch) Returns a pointer that offsets the specified pixels in the bitmap. constexpr unsigned long long operator\"\"_kb(unsigned long long v) A integer literal suffix that multiples one number with 1024. Use it like 3_kb . constexpr unsigned long long operator\"\"_mb(unsigned long long v) A integer literal suffix that multiples one number with 1024 * 1024. Use it like 3_mb . constexpr unsigned long long operator\"\"_gb(unsigned long long v) A integer literal suffix that multiples one number with 1024 * 1024 * 1024. Use it like 3_gb . constexpr unsigned long long operator\"\"_tb(unsigned long long v) A integer literal suffix that multiples one number with 1024 * 1024 * 1024 * 1024. Use it like 3_tb . bool bit_test(const void *base_addr, usize bit_offset) Tests if specified bit is 1. void bit_set(void *addr, usize bit_offset) Sets the specified bit to 1. void bit_reset(void *addr, usize bit_offset) Sets the specified bit to 0. void bit_set(void *addr, usize bit_offset, bool value) Sets the specified bit to 1 if value is true , or to 0 if value is false . constexpr _Ty1 align_upper(_Ty1 origin, _Ty2 alignment) Returns the address/size that aligns the origin address/size to the nearest matched aligned address/size that is greater than or equal to the the origin address/size. _Ty * addressof(_Ty &value) Gets the real address for object or function value , even if the operator& of the object has been overloaded. void default_construct(_Iter dst) Calls the default constructor for the object. void value_construct(_Iter dst) Calls the value constructor for the object. void copy_construct(_Iter1 dst, _Iter2 src) Calls the copy constructor for the object. void move_construct(_Iter1 dst, _Iter2 src) Calls the move constructor for the object. void direct_construct(_Iter dst, _Args &&... args) Calls the direct constructor for the object. void destruct(_Iter dst) Calls the destructor of the object. void copy_assign(_Iter1 dst, _Iter2 src) Calls the copy assignment operator of the object. void move_assign(_Iter1 dst, _Iter2 src) Calls the move assignment operator of the object. auto default_construct_range(_Iter first, _Iter last) -> enable_if_t< Impl::default_construct_range_is_value_type_class< _Iter >::value, void > Default-constructs a range of objects. auto value_construct_range(_Iter first, _Iter last) -> enable_if_t< Impl::value_construct_range_is_value_type_trivial< _Iter >::value, void > Value-constructs a range of objects. auto copy_construct_range(_Iter1 first, _Iter1 last, _Iter2 d_first) -> enable_if_t<!Impl::copy_construct_range_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Copy-constructs a range of objects. auto copy_construct_range_n(_Iter1 first, usize count, _Iter2 d_first) -> enable_if_t<!Impl::copy_construct_range_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Copy-constructs a range of objects. The range is provided by first object and object count. auto move_construct_range(_Iter1 first, _Iter1 last, _Iter2 d_first) -> enable_if_t< Impl::move_construct_range_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Move-constructs a range of objects. auto destruct_range(_Iter first, _Iter last) -> enable_if_t< Impl::destruct_range_is_value_type_trivial< _Iter >::value, void > Destructs every object in the range. auto copy_assign_range(_Iter1 first, _Iter1 last, _Iter2 d_first) -> enable_if_t<!Impl::copy_assign_range_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Performs copy assignment operation on every object in the destination range using the corresponding object in the source range. auto move_assign_range(_Iter1 first, _Iter1 last, _Iter2 d_first) -> enable_if_t<!Impl::move_assign_range_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Performs move assignment operation on every object in the destination range using the corresponding object in the source range. auto move_assign_range_backward(_Iter1 first, _Iter1 last, _Iter2 d_last) -> enable_if_t<!Impl::move_assign_range_backward_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Same as move_assign_range, but performs the move assign from back to front. _Iter1 fill_construct_range(_Iter1 first, _Iter1 last, const _Ty &value) Performs copy construct on each of the object in the range by taking a copy of the provided object. _Iter1 fill_assign_range(_Iter1 first, _Iter1 last, const _Ty &value) Performs copy assignment on each of the object in the range by taking a copy of the provided object. auto copy_relocate_range(_Iter1 first, _Iter1 last, _Iter2 d_first) -> enable_if_t< Impl::copy_relocate_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Relocates objects in the source range to a new range that is not overlap with the source range. auto copy_relocate(_Iter1 dst, _Iter2 src) -> enable_if_t< Impl::copy_relocate_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter1 > Relocates one object. auto move_relocate_range(_Iter1 first, _Iter1 last, _Iter2 d_first) -> enable_if_t< Impl::move_relocate_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Relocates objects in the source range to a new range. auto move_relocate_range_backward(_Iter1 first, _Iter1 last, _Iter2 d_last) -> enable_if_t< Impl::move_relocate_backward_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Relocates objects in the source range to a new range. void calculate_struct_memory_layout(Span< MemoryLayoutMember > members, usize &out_size, usize &out_alignment) Calculates the size, alignment and memory layout for one structure type. void calculate_union_memory_layout(Span< MemoryLayoutMember > members, usize &out_size, usize &out_alignment) Calculates the size, alignment and memory layout for one union type.","title":"Memory utility library"},{"location":"api/runtime_memory_utils/#memory-utility-library","text":"","title":"Memory utility library"},{"location":"api/runtime_memory_utils/#classes","text":"Luna::Unconstructed Luna::MemoryLayoutMember","title":"Classes"},{"location":"api/runtime_memory_utils/#functions","text":"void * memzero(void *dst, usize byte_count) Clears the specified memory region to 0. _Ty * memzero(_Ty *dst) Clears the memory of the specified object to 0. void * memcpy_bitmap(void dst, const void src, usize copy_size_per_row, usize num_rows, usize dst_row_pitch, usize src_row_pitch) Copies the data for a 2D bitmap. void * memcpy_bitmap3d(void dst, const void src, usize copy_size_per_row, usize num_rows, usize num_slices, usize dst_row_pitch, usize src_row_pitch, usize dst_slice_pitch, usize src_slice_pitch) Copies the data for a 3D bitmap. void * pixel_offset(void *base, usize x, usize y, usize z, usize bytes_per_pixel, usize row_pitch, usize slice_pitch) Returns a pointer that offsets the specified pixels in the bitmap. const void * pixel_offset(const void *base, usize x, usize y, usize z, usize bytes_per_pixel, usize row_pitch, usize slice_pitch) Returns a pointer that offsets the specified pixels in the bitmap. constexpr unsigned long long operator\"\"_kb(unsigned long long v) A integer literal suffix that multiples one number with 1024. Use it like 3_kb . constexpr unsigned long long operator\"\"_mb(unsigned long long v) A integer literal suffix that multiples one number with 1024 * 1024. Use it like 3_mb . constexpr unsigned long long operator\"\"_gb(unsigned long long v) A integer literal suffix that multiples one number with 1024 * 1024 * 1024. Use it like 3_gb . constexpr unsigned long long operator\"\"_tb(unsigned long long v) A integer literal suffix that multiples one number with 1024 * 1024 * 1024 * 1024. Use it like 3_tb . bool bit_test(const void *base_addr, usize bit_offset) Tests if specified bit is 1. void bit_set(void *addr, usize bit_offset) Sets the specified bit to 1. void bit_reset(void *addr, usize bit_offset) Sets the specified bit to 0. void bit_set(void *addr, usize bit_offset, bool value) Sets the specified bit to 1 if value is true , or to 0 if value is false . constexpr _Ty1 align_upper(_Ty1 origin, _Ty2 alignment) Returns the address/size that aligns the origin address/size to the nearest matched aligned address/size that is greater than or equal to the the origin address/size. _Ty * addressof(_Ty &value) Gets the real address for object or function value , even if the operator& of the object has been overloaded. void default_construct(_Iter dst) Calls the default constructor for the object. void value_construct(_Iter dst) Calls the value constructor for the object. void copy_construct(_Iter1 dst, _Iter2 src) Calls the copy constructor for the object. void move_construct(_Iter1 dst, _Iter2 src) Calls the move constructor for the object. void direct_construct(_Iter dst, _Args &&... args) Calls the direct constructor for the object. void destruct(_Iter dst) Calls the destructor of the object. void copy_assign(_Iter1 dst, _Iter2 src) Calls the copy assignment operator of the object. void move_assign(_Iter1 dst, _Iter2 src) Calls the move assignment operator of the object. auto default_construct_range(_Iter first, _Iter last) -> enable_if_t< Impl::default_construct_range_is_value_type_class< _Iter >::value, void > Default-constructs a range of objects. auto value_construct_range(_Iter first, _Iter last) -> enable_if_t< Impl::value_construct_range_is_value_type_trivial< _Iter >::value, void > Value-constructs a range of objects. auto copy_construct_range(_Iter1 first, _Iter1 last, _Iter2 d_first) -> enable_if_t<!Impl::copy_construct_range_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Copy-constructs a range of objects. auto copy_construct_range_n(_Iter1 first, usize count, _Iter2 d_first) -> enable_if_t<!Impl::copy_construct_range_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Copy-constructs a range of objects. The range is provided by first object and object count. auto move_construct_range(_Iter1 first, _Iter1 last, _Iter2 d_first) -> enable_if_t< Impl::move_construct_range_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Move-constructs a range of objects. auto destruct_range(_Iter first, _Iter last) -> enable_if_t< Impl::destruct_range_is_value_type_trivial< _Iter >::value, void > Destructs every object in the range. auto copy_assign_range(_Iter1 first, _Iter1 last, _Iter2 d_first) -> enable_if_t<!Impl::copy_assign_range_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Performs copy assignment operation on every object in the destination range using the corresponding object in the source range. auto move_assign_range(_Iter1 first, _Iter1 last, _Iter2 d_first) -> enable_if_t<!Impl::move_assign_range_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Performs move assignment operation on every object in the destination range using the corresponding object in the source range. auto move_assign_range_backward(_Iter1 first, _Iter1 last, _Iter2 d_last) -> enable_if_t<!Impl::move_assign_range_backward_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Same as move_assign_range, but performs the move assign from back to front. _Iter1 fill_construct_range(_Iter1 first, _Iter1 last, const _Ty &value) Performs copy construct on each of the object in the range by taking a copy of the provided object. _Iter1 fill_assign_range(_Iter1 first, _Iter1 last, const _Ty &value) Performs copy assignment on each of the object in the range by taking a copy of the provided object. auto copy_relocate_range(_Iter1 first, _Iter1 last, _Iter2 d_first) -> enable_if_t< Impl::copy_relocate_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Relocates objects in the source range to a new range that is not overlap with the source range. auto copy_relocate(_Iter1 dst, _Iter2 src) -> enable_if_t< Impl::copy_relocate_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter1 > Relocates one object. auto move_relocate_range(_Iter1 first, _Iter1 last, _Iter2 d_first) -> enable_if_t< Impl::move_relocate_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Relocates objects in the source range to a new range. auto move_relocate_range_backward(_Iter1 first, _Iter1 last, _Iter2 d_last) -> enable_if_t< Impl::move_relocate_backward_is_value_type_trivial< _Iter1, _Iter2 >::value, _Iter2 > Relocates objects in the source range to a new range. void calculate_struct_memory_layout(Span< MemoryLayoutMember > members, usize &out_size, usize &out_alignment) Calculates the size, alignment and memory layout for one structure type. void calculate_union_memory_layout(Span< MemoryLayoutMember > members, usize &out_size, usize &out_alignment) Calculates the size, alignment and memory layout for one union type.","title":"Functions"},{"location":"api/runtime_module/","text":"Module system Classes Luna::ModuleDesc Luna::StaticRegisterModule","title":"Module system"},{"location":"api/runtime_module/#module-system","text":"","title":"Module system"},{"location":"api/runtime_module/#classes","text":"Luna::ModuleDesc Luna::StaticRegisterModule","title":"Classes"},{"location":"api/runtime_name/","text":"Name strings Classes Luna::Name Aliasing types using name_id_t = u32 The name ID type. Functions LUNA_RUNTIME_API const c8 * intern_name(const c8 *name) Interns one name string to the runtime and fetches the interned address for it. LUNA_RUNTIME_API const c8 * intern_name(const c8 *name, usize count) Interns one name string to the runtime and fetches the interned address for it. LUNA_RUNTIME_API void retain_name(const c8 *name) Increases the reference count of the name string by 1. LUNA_RUNTIME_API void release_name(const c8 *name) Decreases the reference count of the name string by 1, and eventually frees the name string when the reference count goes to 0. LUNA_RUNTIME_API name_id_t get_name_id(const c8 *name) Gets the ID for the specified name. The ID keeps constant between multiple processes. LUNA_RUNTIME_API usize get_name_size(const c8 *name) Fetches the size of the name string. LUNA_RUNTIME_API typeinfo_t name_type() Gets the type object of Name .","title":"Name strings"},{"location":"api/runtime_name/#name-strings","text":"","title":"Name strings"},{"location":"api/runtime_name/#classes","text":"Luna::Name","title":"Classes"},{"location":"api/runtime_name/#aliasing-types","text":"using name_id_t = u32 The name ID type.","title":"Aliasing types"},{"location":"api/runtime_name/#functions","text":"LUNA_RUNTIME_API const c8 * intern_name(const c8 *name) Interns one name string to the runtime and fetches the interned address for it. LUNA_RUNTIME_API const c8 * intern_name(const c8 *name, usize count) Interns one name string to the runtime and fetches the interned address for it. LUNA_RUNTIME_API void retain_name(const c8 *name) Increases the reference count of the name string by 1. LUNA_RUNTIME_API void release_name(const c8 *name) Decreases the reference count of the name string by 1, and eventually frees the name string when the reference count goes to 0. LUNA_RUNTIME_API name_id_t get_name_id(const c8 *name) Gets the ID for the specified name. The ID keeps constant between multiple processes. LUNA_RUNTIME_API usize get_name_size(const c8 *name) Fetches the size of the name string. LUNA_RUNTIME_API typeinfo_t name_type() Gets the type object of Name .","title":"Functions"},{"location":"api/runtime_object/","text":"Boxed objects Aliasing types using object_t = opaque_t The opaque pointer that points to the boxed object. using ref_count_t = i32 The reference counter type for boxed objects. Functions typeinfo_t register_boxed_type() Registers one type so that it can be used for creating boxed objects. LUNA_RUNTIME_API object_t object_alloc(typeinfo_t type) Allocates one boxed object. LUNA_RUNTIME_API ref_count_t object_retain(object_t object_ptr) Increases the strong refernece counter value by one. LUNA_RUNTIME_API ref_count_t object_release(object_t object_ptr) Decreases the strong refernece counter value by one, and destroys the object if the reference counter drops to 0. LUNA_RUNTIME_API ref_count_t object_ref_count(object_t object_ptr) Fetches the strong refernece counter value of the boxed object. LUNA_RUNTIME_API ref_count_t object_retain_weak(object_t object_ptr) Increases the weak refernece counter value by one. LUNA_RUNTIME_API ref_count_t object_release_weak(object_t object_ptr) Decreases the weak refernece counter value by one. LUNA_RUNTIME_API ref_count_t object_weak_ref_count(object_t object_ptr) Fetches the weak refernece counter value of the boxed object. LUNA_RUNTIME_API bool object_expired(object_t object_ptr) Checks if the boxed object is expired, that is, destructed but its memeory is not freed. LUNA_RUNTIME_API bool object_retain_if_not_expired(object_t object_ptr) Increases the strong refernece counter value by one if the boxed object is not expired. LUNA_RUNTIME_API typeinfo_t get_object_type(object_t object_ptr) Gets the type object of the boxed object. LUNA_RUNTIME_API bool object_is_type(object_t object_ptr, typeinfo_t type) Checks whether the boxed object is the specified type or derived types of the specified type. _Rty * cast_object(object_t object_ptr) Casts the object to the specified type.","title":"Boxed objects"},{"location":"api/runtime_object/#boxed-objects","text":"","title":"Boxed objects"},{"location":"api/runtime_object/#aliasing-types","text":"using object_t = opaque_t The opaque pointer that points to the boxed object. using ref_count_t = i32 The reference counter type for boxed objects.","title":"Aliasing types"},{"location":"api/runtime_object/#functions","text":"typeinfo_t register_boxed_type() Registers one type so that it can be used for creating boxed objects. LUNA_RUNTIME_API object_t object_alloc(typeinfo_t type) Allocates one boxed object. LUNA_RUNTIME_API ref_count_t object_retain(object_t object_ptr) Increases the strong refernece counter value by one. LUNA_RUNTIME_API ref_count_t object_release(object_t object_ptr) Decreases the strong refernece counter value by one, and destroys the object if the reference counter drops to 0. LUNA_RUNTIME_API ref_count_t object_ref_count(object_t object_ptr) Fetches the strong refernece counter value of the boxed object. LUNA_RUNTIME_API ref_count_t object_retain_weak(object_t object_ptr) Increases the weak refernece counter value by one. LUNA_RUNTIME_API ref_count_t object_release_weak(object_t object_ptr) Decreases the weak refernece counter value by one. LUNA_RUNTIME_API ref_count_t object_weak_ref_count(object_t object_ptr) Fetches the weak refernece counter value of the boxed object. LUNA_RUNTIME_API bool object_expired(object_t object_ptr) Checks if the boxed object is expired, that is, destructed but its memeory is not freed. LUNA_RUNTIME_API bool object_retain_if_not_expired(object_t object_ptr) Increases the strong refernece counter value by one if the boxed object is not expired. LUNA_RUNTIME_API typeinfo_t get_object_type(object_t object_ptr) Gets the type object of the boxed object. LUNA_RUNTIME_API bool object_is_type(object_t object_ptr, typeinfo_t type) Checks whether the boxed object is the specified type or derived types of the specified type. _Rty * cast_object(object_t object_ptr) Casts the object to the specified type.","title":"Functions"},{"location":"api/runtime_path/","text":"Path Classes Luna::Path Functions LUNA_RUNTIME_API typeinfo_t path_type() Gets the type object of Path .","title":"Path"},{"location":"api/runtime_path/#path","text":"","title":"Path"},{"location":"api/runtime_path/#classes","text":"Luna::Path","title":"Classes"},{"location":"api/runtime_path/#functions","text":"LUNA_RUNTIME_API typeinfo_t path_type() Gets the type object of Path .","title":"Functions"},{"location":"api/runtime_profiler/","text":"Debugging Classes Luna::ProfilerEvent Luna::ProfilerEventData::MemoryAllocate Luna::ProfilerEventData::MemoryDeallocate Luna::ProfilerEventData::SetMemoryName Luna::ProfilerEventData::SetMemoryType Luna::ProfilerEventData::SetMemoryDomain Functions LUNA_RUNTIME_API void * allocate_profiler_event_data(usize size, usize alignment, void( dtor)(void )=nullptr) Allocates one temporary buffer that can be used to store event data for the next profiler event. void profiler_event_data_dtor(void *data) One helper function that calls the destructor of the specified type on the pointer. _Ty * allocate_profiler_event_data() Allocates one temporary object that can be used to store event data for the next profiler event. LUNA_RUNTIME_API void submit_profiler_event(u64 event_id) Submits one profiler event. LUNA_RUNTIME_API usize register_profiler_callback(const Function< on_profiler_event_t > &handler) Registers one profiler callback function. LUNA_RUNTIME_API void unregister_profiler_callback(usize handler_id) Unregisters one profiler callback function. LUNA_RUNTIME_API void memory_profiler_allocate(void *ptr, usize size) Emits one PROFILER_EVENT_ID_MEMORY_ALLOCATE profiler event. LUNA_RUNTIME_API void memory_profiler_deallocate(void *ptr) Emits one PROFILER_EVENT_ID_MEMORY_DEALLOCATE profiler event. LUNA_RUNTIME_API void memory_profiler_set_memory_name(void ptr, const c8 name, usize str_size=USIZE_MAX) Sets a debug name for the memory block, for example, the name of the resource file this memory block is allocated for. This function emits one PROFILER_EVENT_ID_SET_MEMORY_NAME profiler event. LUNA_RUNTIME_API void memory_profiler_set_memory_type(void ptr, const c8 type, usize str_size=USIZE_MAX) Sets the type of the object this memory block. LUNA_RUNTIME_API void memory_profiler_set_memory_domain(void ptr, const c8 domain, usize str_size=USIZE_MAX) Sets the memory domain.","title":"Debugging"},{"location":"api/runtime_profiler/#debugging","text":"","title":"Debugging"},{"location":"api/runtime_profiler/#classes","text":"Luna::ProfilerEvent Luna::ProfilerEventData::MemoryAllocate Luna::ProfilerEventData::MemoryDeallocate Luna::ProfilerEventData::SetMemoryName Luna::ProfilerEventData::SetMemoryType Luna::ProfilerEventData::SetMemoryDomain","title":"Classes"},{"location":"api/runtime_profiler/#functions","text":"LUNA_RUNTIME_API void * allocate_profiler_event_data(usize size, usize alignment, void( dtor)(void )=nullptr) Allocates one temporary buffer that can be used to store event data for the next profiler event. void profiler_event_data_dtor(void *data) One helper function that calls the destructor of the specified type on the pointer. _Ty * allocate_profiler_event_data() Allocates one temporary object that can be used to store event data for the next profiler event. LUNA_RUNTIME_API void submit_profiler_event(u64 event_id) Submits one profiler event. LUNA_RUNTIME_API usize register_profiler_callback(const Function< on_profiler_event_t > &handler) Registers one profiler callback function. LUNA_RUNTIME_API void unregister_profiler_callback(usize handler_id) Unregisters one profiler callback function. LUNA_RUNTIME_API void memory_profiler_allocate(void *ptr, usize size) Emits one PROFILER_EVENT_ID_MEMORY_ALLOCATE profiler event. LUNA_RUNTIME_API void memory_profiler_deallocate(void *ptr) Emits one PROFILER_EVENT_ID_MEMORY_DEALLOCATE profiler event. LUNA_RUNTIME_API void memory_profiler_set_memory_name(void ptr, const c8 name, usize str_size=USIZE_MAX) Sets a debug name for the memory block, for example, the name of the resource file this memory block is allocated for. This function emits one PROFILER_EVENT_ID_SET_MEMORY_NAME profiler event. LUNA_RUNTIME_API void memory_profiler_set_memory_type(void ptr, const c8 type, usize str_size=USIZE_MAX) Sets the type of the object this memory block. LUNA_RUNTIME_API void memory_profiler_set_memory_domain(void ptr, const c8 domain, usize str_size=USIZE_MAX) Sets the memory domain.","title":"Functions"},{"location":"api/runtime_random/","text":"Generating random numbers Classes Luna::IRandom Functions LUNA_RUNTIME_API Ref< IRandom > new_random_number_generator(u32 initial_seed) Creates one new random number generator. LUNA_RUNTIME_API u32 random_u32() Generates one random 32-bit unsigned integer. LUNA_RUNTIME_API i32 random_i32() Generates one random 32-bit signed integer. LUNA_RUNTIME_API u64 random_u64() Generates one random 64-bit unsigned integer. LUNA_RUNTIME_API i64 random_i64() Generates one random 64-bit signed integer. LUNA_RUNTIME_API f32 random_f32(f32 range_begin, f32 range_end) Generates one random 32-bit floating-point number. LUNA_RUNTIME_API f64 random_f64(f64 range_begin, f64 range_end) Generates one random 64-bit floating-point number. LUNA_RUNTIME_API Guid random_guid() Generates one random GUID (Globally Unique Identifier).","title":"Generating random numbers"},{"location":"api/runtime_random/#generating-random-numbers","text":"","title":"Generating random numbers"},{"location":"api/runtime_random/#classes","text":"Luna::IRandom","title":"Classes"},{"location":"api/runtime_random/#functions","text":"LUNA_RUNTIME_API Ref< IRandom > new_random_number_generator(u32 initial_seed) Creates one new random number generator. LUNA_RUNTIME_API u32 random_u32() Generates one random 32-bit unsigned integer. LUNA_RUNTIME_API i32 random_i32() Generates one random 32-bit signed integer. LUNA_RUNTIME_API u64 random_u64() Generates one random 64-bit unsigned integer. LUNA_RUNTIME_API i64 random_i64() Generates one random 64-bit signed integer. LUNA_RUNTIME_API f32 random_f32(f32 range_begin, f32 range_end) Generates one random 32-bit floating-point number. LUNA_RUNTIME_API f64 random_f64(f64 range_begin, f64 range_end) Generates one random 64-bit floating-point number. LUNA_RUNTIME_API Guid random_guid() Generates one random GUID (Globally Unique Identifier).","title":"Functions"},{"location":"api/runtime_thread/","text":"Thread management and synchronization methods Classes Luna::IMutex Luna::MutexGuard Luna::IReadWriteLock Luna::ISemaphore Luna::ISignal Luna::IThread Functions LUNA_RUNTIME_API Ref< IMutex > new_mutex() LUNA_RUNTIME_API Ref< IReadWriteLock > new_read_write_lock() Creates one new read write lock. LUNA_RUNTIME_API Ref< ISemaphore > new_semaphore(i32 initial_count, i32 max_count) LUNA_RUNTIME_API Ref< ISignal > new_signal(bool manual_reset) Create a new signal object. LUNA_RUNTIME_API u32 get_processors_count() Gets the number of logical processors on the platform. LUNA_RUNTIME_API Ref< IThread > new_thread(void( entry_func)(void params), void params, const c8 name=nullptr, u32 stack_size=0) Create a new system thread and make it run the callback function. The thread will be closed when the callback function returns. LUNA_RUNTIME_API IThread * get_current_thread() Gets the thread object of current running thread. LUNA_RUNTIME_API IThread * get_main_thread() Gets the thread object of the main thread. LUNA_RUNTIME_API void sleep(u32 time_milliseconds) Suspends current thread for a specific period of time. LUNA_RUNTIME_API void fast_sleep(u32 time_microseconds) Delays the execution of this thread for a very shout time by yielding this thread several times. LUNA_RUNTIME_API void yield_current_thread() Yields the remain time slice of the current thread and let OS to schedule other threads. LUNA_RUNTIME_API opaque_t tls_alloc(tls_destructor *destructor=nullptr) Allocates one thread local storage (TLS) slot. LUNA_RUNTIME_API void tls_free(opaque_t handle) Frees the TLS slot allocated by tls_alloc . LUNA_RUNTIME_API void tls_set(opaque_t handle, void *ptr) Set the data bound to the current thread's TLS slot specified by handle . LUNA_RUNTIME_API void * tls_get(opaque_t handle) Get the value bound to the TLS slot of current thread.","title":"Thread management and synchronization methods"},{"location":"api/runtime_thread/#thread-management-and-synchronization-methods","text":"","title":"Thread management and synchronization methods"},{"location":"api/runtime_thread/#classes","text":"Luna::IMutex Luna::MutexGuard Luna::IReadWriteLock Luna::ISemaphore Luna::ISignal Luna::IThread","title":"Classes"},{"location":"api/runtime_thread/#functions","text":"LUNA_RUNTIME_API Ref< IMutex > new_mutex() LUNA_RUNTIME_API Ref< IReadWriteLock > new_read_write_lock() Creates one new read write lock. LUNA_RUNTIME_API Ref< ISemaphore > new_semaphore(i32 initial_count, i32 max_count) LUNA_RUNTIME_API Ref< ISignal > new_signal(bool manual_reset) Create a new signal object. LUNA_RUNTIME_API u32 get_processors_count() Gets the number of logical processors on the platform. LUNA_RUNTIME_API Ref< IThread > new_thread(void( entry_func)(void params), void params, const c8 name=nullptr, u32 stack_size=0) Create a new system thread and make it run the callback function. The thread will be closed when the callback function returns. LUNA_RUNTIME_API IThread * get_current_thread() Gets the thread object of current running thread. LUNA_RUNTIME_API IThread * get_main_thread() Gets the thread object of the main thread. LUNA_RUNTIME_API void sleep(u32 time_milliseconds) Suspends current thread for a specific period of time. LUNA_RUNTIME_API void fast_sleep(u32 time_microseconds) Delays the execution of this thread for a very shout time by yielding this thread several times. LUNA_RUNTIME_API void yield_current_thread() Yields the remain time slice of the current thread and let OS to schedule other threads. LUNA_RUNTIME_API opaque_t tls_alloc(tls_destructor *destructor=nullptr) Allocates one thread local storage (TLS) slot. LUNA_RUNTIME_API void tls_free(opaque_t handle) Frees the TLS slot allocated by tls_alloc . LUNA_RUNTIME_API void tls_set(opaque_t handle, void *ptr) Set the data bound to the current thread's TLS slot specified by handle . LUNA_RUNTIME_API void * tls_get(opaque_t handle) Get the value bound to the TLS slot of current thread.","title":"Functions"},{"location":"api/runtime_type/","text":"Type reflection Classes Luna::StructurePropertyDesc Luna::EnumerationOptionDesc Luna::StructureTypeDesc Luna::GenericStructureInstantiateInfo Luna::GenericStructureTypeDesc Luna::EnumerationTypeDesc Luna::typeof_t Aliasing types using equal_to_func_t = bool(typeinfo_t type, const void lhs, const void rhs) The equality testing function used by the reflection system. using hash_func_t = usize(typeinfo_t type, const void* inst) The hash code computing function used by the reflection system. using structure_ctor_t = void(typeinfo_t type, void* inst) The structure constructor used by the reflection system. using structure_dtor_t = void(typeinfo_t type, void* inst) The structure destructor used by the reflection system. using structure_copy_ctor_t = void(typeinfo_t type, void dst, void src) The structure copy constructor used by the reflection system. using structure_move_ctor_t = void(typeinfo_t type, void dst, void src) The structure move constructor used by the reflection system. using structure_copy_assign_t = void(typeinfo_t type, void dst, void src) The structure copy assignment operator used by the reflection system. using structure_move_assign_t = void(typeinfo_t type, void dst, void src) The structure move assignment operator used by the reflection system. using generic_structure_instantiate_t = GenericStructureInstantiateInfo(typeinfo_t generic_type, Span generic_arguments) The generic structure instantiation function called by the reflection system when one new generic structure instanced type is required. using typeinfo_t = opaque_t The opaque pointer that points to one type object. Functions LUNA_RUNTIME_API bool is_primitive_type(typeinfo_t type) Checks whether one type is a primitive type. LUNA_RUNTIME_API bool is_struct_type(typeinfo_t type) Checks whether one type is a structure type. LUNA_RUNTIME_API bool is_enum_type(typeinfo_t type) Checks whether one type is an enumeration type. LUNA_RUNTIME_API bool is_generic_struct_type(typeinfo_t type) Checks whether one type is a generic structure type. LUNA_RUNTIME_API bool is_generic_struct_instanced_type(typeinfo_t type) Checks whether one type is a generic instanced structure type. LUNA_RUNTIME_API typeinfo_t get_type_by_name(const Name &name, const Name &alias=Name()) Gets one type by its name. LUNA_RUNTIME_API Name get_type_name(typeinfo_t type, Name *alias=nullptr) Gets the name of the specified type. LUNA_RUNTIME_API Guid get_type_guid(typeinfo_t type) Gets the GUID of the specified type. LUNA_RUNTIME_API usize get_type_size(typeinfo_t type) Gets the size of the specified type. LUNA_RUNTIME_API usize get_type_alignment(typeinfo_t type) Gets the alignment requirement of the specified type. LUNA_RUNTIME_API void * get_type_private_data(typeinfo_t type, const Guid &data_guid) Gets user defined private data for the specified type. LUNA_RUNTIME_API void * set_type_private_data(typeinfo_t type, const Guid &data_guid, usize data_size, usize data_alignment=0, void( data_dtor)(void )=nullptr) Sets user defined private data for the specified type. LUNA_RUNTIME_API bool is_type_trivially_constructable(typeinfo_t type) Checks whether one type is a trivially constructable type. LUNA_RUNTIME_API bool is_type_trivially_destructable(typeinfo_t type) Checks whether one type is a trivially destructable type. LUNA_RUNTIME_API bool is_type_trivially_copy_constructable(typeinfo_t type) Checks whether one type is a trivially copy constructable type. LUNA_RUNTIME_API bool is_type_trivially_move_constructable(typeinfo_t type) Checks whether one type is a trivially move constructable type. LUNA_RUNTIME_API bool is_type_trivially_copy_assignable(typeinfo_t type) Checks whether one type is a trivially copy assignable type. LUNA_RUNTIME_API bool is_type_trivially_move_assignable(typeinfo_t type) Checks whether one type is a trivially move assignable type. LUNA_RUNTIME_API bool is_type_trivially_relocatable(typeinfo_t type) Checks whether one type is a trivially relocatable type. LUNA_RUNTIME_API void construct_type(typeinfo_t type, void *data) Constructs one instance of the specified type. LUNA_RUNTIME_API void construct_type_range(typeinfo_t type, void *data, usize count) Constructs one array of instances of the specified type. LUNA_RUNTIME_API void destruct_type(typeinfo_t type, void *data) Destructs one instance of the specified type. LUNA_RUNTIME_API void destruct_type_range(typeinfo_t type, void *data, usize count) Destructs one array of instances of the specified type. LUNA_RUNTIME_API void copy_construct_type(typeinfo_t type, void dst, void src) Copy constructs one instance of the specified type. LUNA_RUNTIME_API void copy_construct_type_range(typeinfo_t type, void dst, void src, usize count) Copy constructs one array of instances of the specified type. LUNA_RUNTIME_API void move_construct_type(typeinfo_t type, void dst, void src) Move constructs one instance of the specified type. LUNA_RUNTIME_API void move_construct_type_range(typeinfo_t type, void dst, void src, usize count) Move constructs one array of instances of the specified type. LUNA_RUNTIME_API void copy_assign_type(typeinfo_t type, void dst, void src) Copy assigns one instance of the specified type. LUNA_RUNTIME_API void copy_assign_type_range(typeinfo_t type, void dst, void src, usize count) Copy assigns one array of instances of the specified type. LUNA_RUNTIME_API void move_assign_type(typeinfo_t type, void dst, void src) Move assigns one instance of the specified type. LUNA_RUNTIME_API void move_assign_type_range(typeinfo_t type, void dst, void src, usize count) Move assigns one array of instances of the specified type. LUNA_RUNTIME_API void relocate_type(typeinfo_t type, void dst, void src) Relocates one instance of the specified type. LUNA_RUNTIME_API void relocate_type_range(typeinfo_t type, void dst, void src, usize count) Relocates one array of instances of the specified type. LUNA_RUNTIME_API bool is_type_equatable(typeinfo_t type) Checks whether the specified type supports equality testing. LUNA_RUNTIME_API void set_equatable(typeinfo_t type, equal_to_func_t *func) Sets one type to support equality testing. LUNA_RUNTIME_API bool equal_to_type(typeinfo_t type, const void lhs, const void rhs) Checks whether two instances of one type are equal. LUNA_RUNTIME_API bool is_type_hashable(typeinfo_t type) Checks whether the specified type supports hash code computing. LUNA_RUNTIME_API void set_hashable(typeinfo_t type, hash_func_t *func) Sets one type to support hash code computing. LUNA_RUNTIME_API usize hash_type(typeinfo_t type, const void *inst) Computes the hash code of one instance of the specified type. LUNA_RUNTIME_API void set_type_attribute(typeinfo_t type, const Name &name, const Variant &value=Variant()) Sets one attribute of the specified type. LUNA_RUNTIME_API void remove_type_attribute(typeinfo_t type, const Name &name) Removes one attribute of the specified type. LUNA_RUNTIME_API bool check_type_attribute(typeinfo_t type, const Name &name) Checks whether the attribute of the specified type exists. LUNA_RUNTIME_API Variant get_type_attribute(typeinfo_t type, const Name &name) Gets the attribute of the specified type. LUNA_RUNTIME_API Vector< Name > get_type_attributes(typeinfo_t type) Gets all attributes of the specified type. LUNA_RUNTIME_API void set_property_attribute(typeinfo_t type, const Name &property, const Name &name, const Variant &value=Variant()) Sets one attribute of the specified property. LUNA_RUNTIME_API void remove_property_attribute(typeinfo_t type, const Name &property, const Name &name) Removes one attribute of the specified property. LUNA_RUNTIME_API bool check_property_attribute(typeinfo_t type, const Name &property, const Name &name) Checks whether the attribute of the specified property exists. LUNA_RUNTIME_API Variant get_property_attribute(typeinfo_t type, const Name &property, const Name &name) Gets the attribute of the specified property. LUNA_RUNTIME_API Vector< Name > get_property_attributes(typeinfo_t type, const Name &property) Gets all attributes of the specified property. LUNA_RUNTIME_API typeinfo_t register_struct_type(const StructureTypeDesc &desc) Registers one structure type. LUNA_RUNTIME_API typeinfo_t register_generic_struct_type(const GenericStructureTypeDesc &desc) Registers one generic structure type. LUNA_RUNTIME_API typeinfo_t register_enum_type(const EnumerationTypeDesc &desc) Registers one enumeration type. LUNA_RUNTIME_API Span< const StructurePropertyDesc > get_struct_properties(typeinfo_t type) Gets properties of the specified structure. LUNA_RUNTIME_API typeinfo_t get_base_type(typeinfo_t type) Gets the base type of the specified type. LUNA_RUNTIME_API Span< const EnumerationOptionDesc > get_enum_options(typeinfo_t type) Gets options of the specified enumeration. LUNA_RUNTIME_API typeinfo_t get_enum_underlying_type(typeinfo_t type) Gets the underlying type of the specified enumeration. LUNA_RUNTIME_API bool is_multienum_type(typeinfo_t type) Checks if the specified type is a multi-value enumeration type. LUNA_RUNTIME_API i64 get_enum_instance_value(typeinfo_t type, const void *data) Extracts the mapped value of the enumeration, regardless of the underlying type of the enumeration. LUNA_RUNTIME_API void set_enum_instance_value(typeinfo_t type, void *data, i64 value) Sets the enumeration value to the specified mapped value. LUNA_RUNTIME_API typeinfo_t get_struct_generic_type(typeinfo_t type) Gets the generic structure type from one generic structure instanced type. LUNA_RUNTIME_API Span< const typeinfo_t > get_struct_generic_arguments(typeinfo_t type) Gets the generic arguments used to instantiate one generic structure instanced type. LUNA_RUNTIME_API Span< const Name > get_struct_generic_parameter_names(typeinfo_t type) Gets the generic parameter names of the specified type. bool default_equal_to(typeinfo_t type, const void lhs, const void rhs) The default equality comparison function used by the reflection system. usize default_hash(typeinfo_t type, const void *inst) The default hashing function used by the reflection system. void default_ctor(typeinfo_t type, void *inst) The default constructor used by the reflection system. void default_dtor(typeinfo_t type, void *inst) The default destructor used by the reflection system. void default_copy_ctor(typeinfo_t type, void dst, void src) The default copy constructor used by the reflection system. void default_move_ctor(typeinfo_t type, void dst, void src) The default move constructor used by the reflection system. void default_copy_assign(typeinfo_t type, void dst, void src) The default copy assignment function used by the reflection system. void default_move_assign(typeinfo_t type, void dst, void src) The default move assignment function used by the reflection system. typeinfo_t register_struct_type(Span< const StructurePropertyDesc > properties, typeinfo_t base_type=nullptr) Registers one structure type to the type system. The structure type must have one lustruct macro defined in the structure body. typeinfo_t register_enum_type(Span< const EnumerationOptionDesc > options, bool multienum=false) Registers one enumeration type to the type system. The enumeration type must have one luenum macro defined directly in Luna namespace. LUNA_RUNTIME_API typeinfo_t get_type_by_guid(const Guid &guid) Gets the type object from one type GUID. typeinfo_t typeof() Gets the type object of the specified type. LUNA_RUNTIME_API typeinfo_t void_type() Gets the type object of void type. LUNA_RUNTIME_API typeinfo_t u8_type() Gets the type object of u8 type. LUNA_RUNTIME_API typeinfo_t i8_type() Gets the type object of i8 type. LUNA_RUNTIME_API typeinfo_t u16_type() Gets the type object of u16 type. LUNA_RUNTIME_API typeinfo_t i16_type() Gets the type object of i16 type. LUNA_RUNTIME_API typeinfo_t u32_type() Gets the type object of u32 type. LUNA_RUNTIME_API typeinfo_t i32_type() Gets the type object of i32 type. LUNA_RUNTIME_API typeinfo_t u64_type() Gets the type object of u64 type. LUNA_RUNTIME_API typeinfo_t i64_type() Gets the type object of i64 type. LUNA_RUNTIME_API typeinfo_t usize_type() Gets the type object of usize type. LUNA_RUNTIME_API typeinfo_t isize_type() Gets the type object of isize type. LUNA_RUNTIME_API typeinfo_t f32_type() Gets the type object of f32 type. LUNA_RUNTIME_API typeinfo_t f64_type() Gets the type object of f64 type. LUNA_RUNTIME_API typeinfo_t c8_type() Gets the type object of c8 type. LUNA_RUNTIME_API typeinfo_t c16_type() Gets the type object of c16 type. LUNA_RUNTIME_API typeinfo_t c32_type() Gets the type object of c32 type. LUNA_RUNTIME_API typeinfo_t boolean_type() Gets the type object of bool type. LUNA_RUNTIME_API typeinfo_t guid_type() Gets the type object of [Guid](struct_luna_1_1_guid.md) type. LUNA_RUNTIME_API typeinfo_t version_type() Gets the type object of Version type. LUNA_RUNTIME_API typeinfo_t pair_type() Gets the type object of [Pair](struct_luna_1_1_pair.md) generic type. LUNA_RUNTIME_API typeinfo_t get_generic_instanced_type(typeinfo_t generic_type, Span< const typeinfo_t > generic_arguments) Gets one instanced type of one generic type.","title":"Type reflection"},{"location":"api/runtime_type/#type-reflection","text":"","title":"Type reflection"},{"location":"api/runtime_type/#classes","text":"Luna::StructurePropertyDesc Luna::EnumerationOptionDesc Luna::StructureTypeDesc Luna::GenericStructureInstantiateInfo Luna::GenericStructureTypeDesc Luna::EnumerationTypeDesc Luna::typeof_t","title":"Classes"},{"location":"api/runtime_type/#aliasing-types","text":"using equal_to_func_t = bool(typeinfo_t type, const void lhs, const void rhs) The equality testing function used by the reflection system. using hash_func_t = usize(typeinfo_t type, const void* inst) The hash code computing function used by the reflection system. using structure_ctor_t = void(typeinfo_t type, void* inst) The structure constructor used by the reflection system. using structure_dtor_t = void(typeinfo_t type, void* inst) The structure destructor used by the reflection system. using structure_copy_ctor_t = void(typeinfo_t type, void dst, void src) The structure copy constructor used by the reflection system. using structure_move_ctor_t = void(typeinfo_t type, void dst, void src) The structure move constructor used by the reflection system. using structure_copy_assign_t = void(typeinfo_t type, void dst, void src) The structure copy assignment operator used by the reflection system. using structure_move_assign_t = void(typeinfo_t type, void dst, void src) The structure move assignment operator used by the reflection system. using generic_structure_instantiate_t = GenericStructureInstantiateInfo(typeinfo_t generic_type, Span generic_arguments) The generic structure instantiation function called by the reflection system when one new generic structure instanced type is required. using typeinfo_t = opaque_t The opaque pointer that points to one type object.","title":"Aliasing types"},{"location":"api/runtime_type/#functions","text":"LUNA_RUNTIME_API bool is_primitive_type(typeinfo_t type) Checks whether one type is a primitive type. LUNA_RUNTIME_API bool is_struct_type(typeinfo_t type) Checks whether one type is a structure type. LUNA_RUNTIME_API bool is_enum_type(typeinfo_t type) Checks whether one type is an enumeration type. LUNA_RUNTIME_API bool is_generic_struct_type(typeinfo_t type) Checks whether one type is a generic structure type. LUNA_RUNTIME_API bool is_generic_struct_instanced_type(typeinfo_t type) Checks whether one type is a generic instanced structure type. LUNA_RUNTIME_API typeinfo_t get_type_by_name(const Name &name, const Name &alias=Name()) Gets one type by its name. LUNA_RUNTIME_API Name get_type_name(typeinfo_t type, Name *alias=nullptr) Gets the name of the specified type. LUNA_RUNTIME_API Guid get_type_guid(typeinfo_t type) Gets the GUID of the specified type. LUNA_RUNTIME_API usize get_type_size(typeinfo_t type) Gets the size of the specified type. LUNA_RUNTIME_API usize get_type_alignment(typeinfo_t type) Gets the alignment requirement of the specified type. LUNA_RUNTIME_API void * get_type_private_data(typeinfo_t type, const Guid &data_guid) Gets user defined private data for the specified type. LUNA_RUNTIME_API void * set_type_private_data(typeinfo_t type, const Guid &data_guid, usize data_size, usize data_alignment=0, void( data_dtor)(void )=nullptr) Sets user defined private data for the specified type. LUNA_RUNTIME_API bool is_type_trivially_constructable(typeinfo_t type) Checks whether one type is a trivially constructable type. LUNA_RUNTIME_API bool is_type_trivially_destructable(typeinfo_t type) Checks whether one type is a trivially destructable type. LUNA_RUNTIME_API bool is_type_trivially_copy_constructable(typeinfo_t type) Checks whether one type is a trivially copy constructable type. LUNA_RUNTIME_API bool is_type_trivially_move_constructable(typeinfo_t type) Checks whether one type is a trivially move constructable type. LUNA_RUNTIME_API bool is_type_trivially_copy_assignable(typeinfo_t type) Checks whether one type is a trivially copy assignable type. LUNA_RUNTIME_API bool is_type_trivially_move_assignable(typeinfo_t type) Checks whether one type is a trivially move assignable type. LUNA_RUNTIME_API bool is_type_trivially_relocatable(typeinfo_t type) Checks whether one type is a trivially relocatable type. LUNA_RUNTIME_API void construct_type(typeinfo_t type, void *data) Constructs one instance of the specified type. LUNA_RUNTIME_API void construct_type_range(typeinfo_t type, void *data, usize count) Constructs one array of instances of the specified type. LUNA_RUNTIME_API void destruct_type(typeinfo_t type, void *data) Destructs one instance of the specified type. LUNA_RUNTIME_API void destruct_type_range(typeinfo_t type, void *data, usize count) Destructs one array of instances of the specified type. LUNA_RUNTIME_API void copy_construct_type(typeinfo_t type, void dst, void src) Copy constructs one instance of the specified type. LUNA_RUNTIME_API void copy_construct_type_range(typeinfo_t type, void dst, void src, usize count) Copy constructs one array of instances of the specified type. LUNA_RUNTIME_API void move_construct_type(typeinfo_t type, void dst, void src) Move constructs one instance of the specified type. LUNA_RUNTIME_API void move_construct_type_range(typeinfo_t type, void dst, void src, usize count) Move constructs one array of instances of the specified type. LUNA_RUNTIME_API void copy_assign_type(typeinfo_t type, void dst, void src) Copy assigns one instance of the specified type. LUNA_RUNTIME_API void copy_assign_type_range(typeinfo_t type, void dst, void src, usize count) Copy assigns one array of instances of the specified type. LUNA_RUNTIME_API void move_assign_type(typeinfo_t type, void dst, void src) Move assigns one instance of the specified type. LUNA_RUNTIME_API void move_assign_type_range(typeinfo_t type, void dst, void src, usize count) Move assigns one array of instances of the specified type. LUNA_RUNTIME_API void relocate_type(typeinfo_t type, void dst, void src) Relocates one instance of the specified type. LUNA_RUNTIME_API void relocate_type_range(typeinfo_t type, void dst, void src, usize count) Relocates one array of instances of the specified type. LUNA_RUNTIME_API bool is_type_equatable(typeinfo_t type) Checks whether the specified type supports equality testing. LUNA_RUNTIME_API void set_equatable(typeinfo_t type, equal_to_func_t *func) Sets one type to support equality testing. LUNA_RUNTIME_API bool equal_to_type(typeinfo_t type, const void lhs, const void rhs) Checks whether two instances of one type are equal. LUNA_RUNTIME_API bool is_type_hashable(typeinfo_t type) Checks whether the specified type supports hash code computing. LUNA_RUNTIME_API void set_hashable(typeinfo_t type, hash_func_t *func) Sets one type to support hash code computing. LUNA_RUNTIME_API usize hash_type(typeinfo_t type, const void *inst) Computes the hash code of one instance of the specified type. LUNA_RUNTIME_API void set_type_attribute(typeinfo_t type, const Name &name, const Variant &value=Variant()) Sets one attribute of the specified type. LUNA_RUNTIME_API void remove_type_attribute(typeinfo_t type, const Name &name) Removes one attribute of the specified type. LUNA_RUNTIME_API bool check_type_attribute(typeinfo_t type, const Name &name) Checks whether the attribute of the specified type exists. LUNA_RUNTIME_API Variant get_type_attribute(typeinfo_t type, const Name &name) Gets the attribute of the specified type. LUNA_RUNTIME_API Vector< Name > get_type_attributes(typeinfo_t type) Gets all attributes of the specified type. LUNA_RUNTIME_API void set_property_attribute(typeinfo_t type, const Name &property, const Name &name, const Variant &value=Variant()) Sets one attribute of the specified property. LUNA_RUNTIME_API void remove_property_attribute(typeinfo_t type, const Name &property, const Name &name) Removes one attribute of the specified property. LUNA_RUNTIME_API bool check_property_attribute(typeinfo_t type, const Name &property, const Name &name) Checks whether the attribute of the specified property exists. LUNA_RUNTIME_API Variant get_property_attribute(typeinfo_t type, const Name &property, const Name &name) Gets the attribute of the specified property. LUNA_RUNTIME_API Vector< Name > get_property_attributes(typeinfo_t type, const Name &property) Gets all attributes of the specified property. LUNA_RUNTIME_API typeinfo_t register_struct_type(const StructureTypeDesc &desc) Registers one structure type. LUNA_RUNTIME_API typeinfo_t register_generic_struct_type(const GenericStructureTypeDesc &desc) Registers one generic structure type. LUNA_RUNTIME_API typeinfo_t register_enum_type(const EnumerationTypeDesc &desc) Registers one enumeration type. LUNA_RUNTIME_API Span< const StructurePropertyDesc > get_struct_properties(typeinfo_t type) Gets properties of the specified structure. LUNA_RUNTIME_API typeinfo_t get_base_type(typeinfo_t type) Gets the base type of the specified type. LUNA_RUNTIME_API Span< const EnumerationOptionDesc > get_enum_options(typeinfo_t type) Gets options of the specified enumeration. LUNA_RUNTIME_API typeinfo_t get_enum_underlying_type(typeinfo_t type) Gets the underlying type of the specified enumeration. LUNA_RUNTIME_API bool is_multienum_type(typeinfo_t type) Checks if the specified type is a multi-value enumeration type. LUNA_RUNTIME_API i64 get_enum_instance_value(typeinfo_t type, const void *data) Extracts the mapped value of the enumeration, regardless of the underlying type of the enumeration. LUNA_RUNTIME_API void set_enum_instance_value(typeinfo_t type, void *data, i64 value) Sets the enumeration value to the specified mapped value. LUNA_RUNTIME_API typeinfo_t get_struct_generic_type(typeinfo_t type) Gets the generic structure type from one generic structure instanced type. LUNA_RUNTIME_API Span< const typeinfo_t > get_struct_generic_arguments(typeinfo_t type) Gets the generic arguments used to instantiate one generic structure instanced type. LUNA_RUNTIME_API Span< const Name > get_struct_generic_parameter_names(typeinfo_t type) Gets the generic parameter names of the specified type. bool default_equal_to(typeinfo_t type, const void lhs, const void rhs) The default equality comparison function used by the reflection system. usize default_hash(typeinfo_t type, const void *inst) The default hashing function used by the reflection system. void default_ctor(typeinfo_t type, void *inst) The default constructor used by the reflection system. void default_dtor(typeinfo_t type, void *inst) The default destructor used by the reflection system. void default_copy_ctor(typeinfo_t type, void dst, void src) The default copy constructor used by the reflection system. void default_move_ctor(typeinfo_t type, void dst, void src) The default move constructor used by the reflection system. void default_copy_assign(typeinfo_t type, void dst, void src) The default copy assignment function used by the reflection system. void default_move_assign(typeinfo_t type, void dst, void src) The default move assignment function used by the reflection system. typeinfo_t register_struct_type(Span< const StructurePropertyDesc > properties, typeinfo_t base_type=nullptr) Registers one structure type to the type system. The structure type must have one lustruct macro defined in the structure body. typeinfo_t register_enum_type(Span< const EnumerationOptionDesc > options, bool multienum=false) Registers one enumeration type to the type system. The enumeration type must have one luenum macro defined directly in Luna namespace. LUNA_RUNTIME_API typeinfo_t get_type_by_guid(const Guid &guid) Gets the type object from one type GUID. typeinfo_t typeof() Gets the type object of the specified type. LUNA_RUNTIME_API typeinfo_t void_type() Gets the type object of void type. LUNA_RUNTIME_API typeinfo_t u8_type() Gets the type object of u8 type. LUNA_RUNTIME_API typeinfo_t i8_type() Gets the type object of i8 type. LUNA_RUNTIME_API typeinfo_t u16_type() Gets the type object of u16 type. LUNA_RUNTIME_API typeinfo_t i16_type() Gets the type object of i16 type. LUNA_RUNTIME_API typeinfo_t u32_type() Gets the type object of u32 type. LUNA_RUNTIME_API typeinfo_t i32_type() Gets the type object of i32 type. LUNA_RUNTIME_API typeinfo_t u64_type() Gets the type object of u64 type. LUNA_RUNTIME_API typeinfo_t i64_type() Gets the type object of i64 type. LUNA_RUNTIME_API typeinfo_t usize_type() Gets the type object of usize type. LUNA_RUNTIME_API typeinfo_t isize_type() Gets the type object of isize type. LUNA_RUNTIME_API typeinfo_t f32_type() Gets the type object of f32 type. LUNA_RUNTIME_API typeinfo_t f64_type() Gets the type object of f64 type. LUNA_RUNTIME_API typeinfo_t c8_type() Gets the type object of c8 type. LUNA_RUNTIME_API typeinfo_t c16_type() Gets the type object of c16 type. LUNA_RUNTIME_API typeinfo_t c32_type() Gets the type object of c32 type. LUNA_RUNTIME_API typeinfo_t boolean_type() Gets the type object of bool type. LUNA_RUNTIME_API typeinfo_t guid_type() Gets the type object of [Guid](struct_luna_1_1_guid.md) type. LUNA_RUNTIME_API typeinfo_t version_type() Gets the type object of Version type. LUNA_RUNTIME_API typeinfo_t pair_type() Gets the type object of [Pair](struct_luna_1_1_pair.md) generic type. LUNA_RUNTIME_API typeinfo_t get_generic_instanced_type(typeinfo_t generic_type, Span< const typeinfo_t > generic_arguments) Gets one instanced type of one generic type.","title":"Functions"},{"location":"api/runtime_unicode/","text":"Unicode encoding/decoding Functions constexpr usize utf8_charspan(c32 ch) Gets the number of UTF-8 characters needed to store the Unicode char in UTF-8 encoding. constexpr usize utf8_charlen(c8 ch) Gets the number of UTF-8 characters the Unicode character takes from the first UTF-8 character. constexpr usize utf8_charlen(const c8 *src) Gets the number of UTF-8 characters the Unicode character takes from the first UTF-8 character. constexpr usize utf8_strlen(const c8 *src) Gets the number of Unicode characters in a null-terminated UTF-8 string, not including the null terminator. constexpr usize utf8_index(const c8 *str, usize n) Gets the index of the first UTF-8 character for the specified Unicode character. LUNA_RUNTIME_API usize utf8_encode_char(c8 *dst, c32 ch) Encodes the Unicode character into 1~6 UTF-8 characters. LUNA_RUNTIME_API c32 utf8_decode_char(const c8 *str) Decodes one Unicode character from 1~6 UTF-8 characters. constexpr usize utf16_charspan(c32 ch) Gets the number of UTF-16 characters needed to store the Unicode char in UTF-16 encoding. constexpr usize utf16_charlen(c16 ch) Gets the number of UTF-16 characters the Unicode character takes from the first UTF-16 character. constexpr usize utf16_charlen(const c16 *src) Gets the number of UTF-16 characters the Unicode character takes from the first UTF-16 character. constexpr usize utf16_strlen(const c16 *src) Gets the number of Unicode characters in a null-terminated UTF-16 string, not including the null terminator. constexpr usize utf16_index(const c16 *str, usize n) Gets the index of the first UTF-16 character for the specified Unicode character. LUNA_RUNTIME_API usize utf16_encode_char(c16 *dst, c32 ch) Encodes the Unicode character into 1~2 UTF-16 characters using platform-native endian. LUNA_RUNTIME_API c32 utf16_decode_char(const c16 *str) Decodes one Unicode character from 1~2 UTF-16 characters. LUNA_RUNTIME_API usize utf16_to_utf8(c8 dst, usize dst_max_chars, const c16 src, usize src_chars=USIZE_MAX) Converts a UTF-16 string to UTF-8 string. LUNA_RUNTIME_API usize utf16_to_utf8_len(const c16 *src, usize src_chars=USIZE_MAX) Determines the length of the corresponding UTF-8 string for a UTF-16 string, not include the null-terminator. LUNA_RUNTIME_API usize utf8_to_utf16(c16 dst, usize dst_max_chars, const c8 src, usize src_chars=USIZE_MAX) Converts a UTF-8 string to UTF-16 string. LUNA_RUNTIME_API usize utf8_to_utf16_len(const c8 *src, usize src_chars=USIZE_MAX) Determines the length of the corresponding UTF-16 string for a UTF-8 string, not include the null-terminator.","title":"Unicode encoding/decoding"},{"location":"api/runtime_unicode/#unicode-encodingdecoding","text":"","title":"Unicode encoding/decoding"},{"location":"api/runtime_unicode/#functions","text":"constexpr usize utf8_charspan(c32 ch) Gets the number of UTF-8 characters needed to store the Unicode char in UTF-8 encoding. constexpr usize utf8_charlen(c8 ch) Gets the number of UTF-8 characters the Unicode character takes from the first UTF-8 character. constexpr usize utf8_charlen(const c8 *src) Gets the number of UTF-8 characters the Unicode character takes from the first UTF-8 character. constexpr usize utf8_strlen(const c8 *src) Gets the number of Unicode characters in a null-terminated UTF-8 string, not including the null terminator. constexpr usize utf8_index(const c8 *str, usize n) Gets the index of the first UTF-8 character for the specified Unicode character. LUNA_RUNTIME_API usize utf8_encode_char(c8 *dst, c32 ch) Encodes the Unicode character into 1~6 UTF-8 characters. LUNA_RUNTIME_API c32 utf8_decode_char(const c8 *str) Decodes one Unicode character from 1~6 UTF-8 characters. constexpr usize utf16_charspan(c32 ch) Gets the number of UTF-16 characters needed to store the Unicode char in UTF-16 encoding. constexpr usize utf16_charlen(c16 ch) Gets the number of UTF-16 characters the Unicode character takes from the first UTF-16 character. constexpr usize utf16_charlen(const c16 *src) Gets the number of UTF-16 characters the Unicode character takes from the first UTF-16 character. constexpr usize utf16_strlen(const c16 *src) Gets the number of Unicode characters in a null-terminated UTF-16 string, not including the null terminator. constexpr usize utf16_index(const c16 *str, usize n) Gets the index of the first UTF-16 character for the specified Unicode character. LUNA_RUNTIME_API usize utf16_encode_char(c16 *dst, c32 ch) Encodes the Unicode character into 1~2 UTF-16 characters using platform-native endian. LUNA_RUNTIME_API c32 utf16_decode_char(const c16 *str) Decodes one Unicode character from 1~2 UTF-16 characters. LUNA_RUNTIME_API usize utf16_to_utf8(c8 dst, usize dst_max_chars, const c16 src, usize src_chars=USIZE_MAX) Converts a UTF-16 string to UTF-8 string. LUNA_RUNTIME_API usize utf16_to_utf8_len(const c16 *src, usize src_chars=USIZE_MAX) Determines the length of the corresponding UTF-8 string for a UTF-16 string, not include the null-terminator. LUNA_RUNTIME_API usize utf8_to_utf16(c16 dst, usize dst_max_chars, const c8 src, usize src_chars=USIZE_MAX) Converts a UTF-8 string to UTF-16 string. LUNA_RUNTIME_API usize utf8_to_utf16_len(const c8 *src, usize src_chars=USIZE_MAX) Determines the length of the corresponding UTF-16 string for a UTF-8 string, not include the null-terminator.","title":"Functions"},{"location":"api/struct_luna_1_1_color/","text":"Luna::Color Linear color. struct Luna::Color","title":"Luna::Color"},{"location":"api/struct_luna_1_1_color/#lunacolor","text":"Linear color. struct Luna::Color","title":"Luna::Color"},{"location":"api/struct_luna_1_1_enumeration_option_desc/","text":"Luna::EnumerationOptionDesc Describes one enumeration option. struct Luna::EnumerationOptionDesc Properties Name name The option name. i64 value The underlying value of the option.","title":"Luna::EnumerationOptionDesc"},{"location":"api/struct_luna_1_1_enumeration_option_desc/#lunaenumerationoptiondesc","text":"Describes one enumeration option. struct Luna::EnumerationOptionDesc","title":"Luna::EnumerationOptionDesc"},{"location":"api/struct_luna_1_1_enumeration_option_desc/#properties","text":"Name name The option name. i64 value The underlying value of the option.","title":"Properties"},{"location":"api/struct_luna_1_1_enumeration_option_desc_1a3239af10992676646c485fff201b58e2/","text":"Luna::EnumerationOptionDesc::value i64 value The underlying value of the option.","title":"Luna::EnumerationOptionDesc::value"},{"location":"api/struct_luna_1_1_enumeration_option_desc_1a3239af10992676646c485fff201b58e2/#lunaenumerationoptiondescvalue","text":"i64 value The underlying value of the option.","title":"Luna::EnumerationOptionDesc::value"},{"location":"api/struct_luna_1_1_enumeration_option_desc_1a7082db574ba2d2d69ccafb060398b7d8/","text":"Luna::EnumerationOptionDesc::name Name name The option name.","title":"Luna::EnumerationOptionDesc::name"},{"location":"api/struct_luna_1_1_enumeration_option_desc_1a7082db574ba2d2d69ccafb060398b7d8/#lunaenumerationoptiondescname","text":"Name name The option name.","title":"Luna::EnumerationOptionDesc::name"},{"location":"api/struct_luna_1_1_enumeration_type_desc/","text":"Luna::EnumerationTypeDesc Describes one enumeration type. struct Luna::EnumerationTypeDesc Properties Guid guid The GUID of the enumeration type. This should be unique for every type. Name name The name of the enumeration type. Name alias typeinfo_t underlying_type Span options A list of options for this enumeration. bool multienum","title":"Luna::EnumerationTypeDesc"},{"location":"api/struct_luna_1_1_enumeration_type_desc/#lunaenumerationtypedesc","text":"Describes one enumeration type. struct Luna::EnumerationTypeDesc","title":"Luna::EnumerationTypeDesc"},{"location":"api/struct_luna_1_1_enumeration_type_desc/#properties","text":"Guid guid The GUID of the enumeration type. This should be unique for every type. Name name The name of the enumeration type. Name alias typeinfo_t underlying_type Span options A list of options for this enumeration. bool multienum","title":"Properties"},{"location":"api/struct_luna_1_1_enumeration_type_desc_1a0c8f65c9d3118ff62b1d40950e5154f8/","text":"Luna::EnumerationTypeDesc::guid Guid guid The GUID of the enumeration type. This should be unique for every type.","title":"Luna::EnumerationTypeDesc::guid"},{"location":"api/struct_luna_1_1_enumeration_type_desc_1a0c8f65c9d3118ff62b1d40950e5154f8/#lunaenumerationtypedescguid","text":"Guid guid The GUID of the enumeration type. This should be unique for every type.","title":"Luna::EnumerationTypeDesc::guid"},{"location":"api/struct_luna_1_1_enumeration_type_desc_1a0d0e41840163c5554391d4f5802372d0/","text":"Luna::EnumerationTypeDesc::multienum bool multienum Overview Whether this enumeration is a multi-value enumeration. A multi-value enumeration uses one unique bit of the value for every possible option, while a single-value enumeration uses one unique value for every possible option. For example, for one enumeration with u16 underlying type, 16 possible options may present if the enumeration is a multi-value enumeration, and 65536 possible options may present if the enumeration is a noral enumeration.","title":"Luna::EnumerationTypeDesc::multienum"},{"location":"api/struct_luna_1_1_enumeration_type_desc_1a0d0e41840163c5554391d4f5802372d0/#lunaenumerationtypedescmultienum","text":"bool multienum","title":"Luna::EnumerationTypeDesc::multienum"},{"location":"api/struct_luna_1_1_enumeration_type_desc_1a0d0e41840163c5554391d4f5802372d0/#overview","text":"Whether this enumeration is a multi-value enumeration. A multi-value enumeration uses one unique bit of the value for every possible option, while a single-value enumeration uses one unique value for every possible option. For example, for one enumeration with u16 underlying type, 16 possible options may present if the enumeration is a multi-value enumeration, and 65536 possible options may present if the enumeration is a noral enumeration.","title":"Overview"},{"location":"api/struct_luna_1_1_enumeration_type_desc_1a7072b26b211d14db63c0490964878d81/","text":"Luna::EnumerationTypeDesc::options Span<const EnumerationOptionDesc> options A list of options for this enumeration.","title":"Luna::EnumerationTypeDesc::options"},{"location":"api/struct_luna_1_1_enumeration_type_desc_1a7072b26b211d14db63c0490964878d81/#lunaenumerationtypedescoptions","text":"Span<const EnumerationOptionDesc> options A list of options for this enumeration.","title":"Luna::EnumerationTypeDesc::options"},{"location":"api/struct_luna_1_1_enumeration_type_desc_1a7082db574ba2d2d69ccafb060398b7d8/","text":"Luna::EnumerationTypeDesc::name Name name The name of the enumeration type.","title":"Luna::EnumerationTypeDesc::name"},{"location":"api/struct_luna_1_1_enumeration_type_desc_1a7082db574ba2d2d69ccafb060398b7d8/#lunaenumerationtypedescname","text":"Name name The name of the enumeration type.","title":"Luna::EnumerationTypeDesc::name"},{"location":"api/struct_luna_1_1_enumeration_type_desc_1aab3519e6b2915ade2b650f777b994121/","text":"Luna::EnumerationTypeDesc::alias Name alias Overview The alias of the enumeration type. This can be empty. The alias is used to identify types with the same name. This can be used for generic specialization types.","title":"Luna::EnumerationTypeDesc::alias"},{"location":"api/struct_luna_1_1_enumeration_type_desc_1aab3519e6b2915ade2b650f777b994121/#lunaenumerationtypedescalias","text":"Name alias","title":"Luna::EnumerationTypeDesc::alias"},{"location":"api/struct_luna_1_1_enumeration_type_desc_1aab3519e6b2915ade2b650f777b994121/#overview","text":"The alias of the enumeration type. This can be empty. The alias is used to identify types with the same name. This can be used for generic specialization types.","title":"Overview"},{"location":"api/struct_luna_1_1_enumeration_type_desc_1af89fc3440a240432937a3b0c7d264963/","text":"Luna::EnumerationTypeDesc::underlying_type typeinfo_t underlying_type Overview The underlying type of the enumeration, which is the type that the enumeration value is stored as. This type must be a primitive integer type.","title":"Luna::EnumerationTypeDesc::underlying_type"},{"location":"api/struct_luna_1_1_enumeration_type_desc_1af89fc3440a240432937a3b0c7d264963/#lunaenumerationtypedescunderlying_type","text":"typeinfo_t underlying_type","title":"Luna::EnumerationTypeDesc::underlying_type"},{"location":"api/struct_luna_1_1_enumeration_type_desc_1af89fc3440a240432937a3b0c7d264963/#overview","text":"The underlying type of the enumeration, which is the type that the enumeration value is stored as. This type must be a primitive integer type.","title":"Overview"},{"location":"api/struct_luna_1_1_err_code/","text":"Luna::ErrCode The error code type represents one single error. struct Luna::ErrCode Overview In Luna Runtime, every error is represented by one error code, the code value will be determined when the error is firstly accessed, and will never be changed. Any valid error code number will not be 0. The error code is wrapped in a unique structure so that it will never be misinterpreted to a normal return value when the function return value is also an integer. Properties usize code The identifier of the error code.","title":"Luna::ErrCode"},{"location":"api/struct_luna_1_1_err_code/#lunaerrcode","text":"The error code type represents one single error. struct Luna::ErrCode","title":"Luna::ErrCode"},{"location":"api/struct_luna_1_1_err_code/#overview","text":"In Luna Runtime, every error is represented by one error code, the code value will be determined when the error is firstly accessed, and will never be changed. Any valid error code number will not be 0. The error code is wrapped in a unique structure so that it will never be misinterpreted to a normal return value when the function return value is also an integer.","title":"Overview"},{"location":"api/struct_luna_1_1_err_code/#properties","text":"usize code The identifier of the error code.","title":"Properties"},{"location":"api/struct_luna_1_1_err_code_1a77ca0743e6dd02f1f1ca0b3f5a772388/","text":"Luna::ErrCode::code usize code The identifier of the error code.","title":"Luna::ErrCode::code"},{"location":"api/struct_luna_1_1_err_code_1a77ca0743e6dd02f1f1ca0b3f5a772388/#lunaerrcodecode","text":"usize code The identifier of the error code.","title":"Luna::ErrCode::code"},{"location":"api/struct_luna_1_1_error/","text":"Luna::Error The error object encapsulates one error code along with one string that describes the error. struct Luna::Error","title":"Luna::Error"},{"location":"api/struct_luna_1_1_error/#lunaerror","text":"The error object encapsulates one error code along with one string that describes the error. struct Luna::Error","title":"Luna::Error"},{"location":"api/struct_luna_1_1_file_attribute/","text":"Luna::FileAttribute Specifies file attributes. struct Luna::FileAttribute Properties u64 size The size, in bytes, of the file. i64 creation_time The file creation tiem represented by UNIX timestamps. i64 last_access_time The file last access time represented by UNIX timestamps. i64 last_write_time The file last write time represented by UNIX timestamps. FileAttributeFlag attributes The file binary attributes represented by flags.","title":"Luna::FileAttribute"},{"location":"api/struct_luna_1_1_file_attribute/#lunafileattribute","text":"Specifies file attributes. struct Luna::FileAttribute","title":"Luna::FileAttribute"},{"location":"api/struct_luna_1_1_file_attribute/#properties","text":"u64 size The size, in bytes, of the file. i64 creation_time The file creation tiem represented by UNIX timestamps. i64 last_access_time The file last access time represented by UNIX timestamps. i64 last_write_time The file last write time represented by UNIX timestamps. FileAttributeFlag attributes The file binary attributes represented by flags.","title":"Properties"},{"location":"api/struct_luna_1_1_file_attribute_1a0c60ff86649d5663be7145886c6f76c9/","text":"Luna::FileAttribute::last_access_time i64 last_access_time The file last access time represented by UNIX timestamps.","title":"Luna::FileAttribute::last_access_time"},{"location":"api/struct_luna_1_1_file_attribute_1a0c60ff86649d5663be7145886c6f76c9/#lunafileattributelast_access_time","text":"i64 last_access_time The file last access time represented by UNIX timestamps.","title":"Luna::FileAttribute::last_access_time"},{"location":"api/struct_luna_1_1_file_attribute_1a290e365a22d5cf44734f1575538dc0ff/","text":"Luna::FileAttribute::attributes FileAttributeFlag attributes The file binary attributes represented by flags.","title":"Luna::FileAttribute::attributes"},{"location":"api/struct_luna_1_1_file_attribute_1a290e365a22d5cf44734f1575538dc0ff/#lunafileattributeattributes","text":"FileAttributeFlag attributes The file binary attributes represented by flags.","title":"Luna::FileAttribute::attributes"},{"location":"api/struct_luna_1_1_file_attribute_1a5d0e547c875a793db866cf99eb9889a7/","text":"Luna::FileAttribute::creation_time i64 creation_time The file creation tiem represented by UNIX timestamps.","title":"Luna::FileAttribute::creation_time"},{"location":"api/struct_luna_1_1_file_attribute_1a5d0e547c875a793db866cf99eb9889a7/#lunafileattributecreation_time","text":"i64 creation_time The file creation tiem represented by UNIX timestamps.","title":"Luna::FileAttribute::creation_time"},{"location":"api/struct_luna_1_1_file_attribute_1ad0168cbea60e8394ad6e6efdf99e2401/","text":"Luna::FileAttribute::last_write_time i64 last_write_time The file last write time represented by UNIX timestamps.","title":"Luna::FileAttribute::last_write_time"},{"location":"api/struct_luna_1_1_file_attribute_1ad0168cbea60e8394ad6e6efdf99e2401/#lunafileattributelast_write_time","text":"i64 last_write_time The file last write time represented by UNIX timestamps.","title":"Luna::FileAttribute::last_write_time"},{"location":"api/struct_luna_1_1_file_attribute_1ad3aa5c6909d7fbfc6e5ae6e652f06934/","text":"Luna::FileAttribute::size u64 size The size, in bytes, of the file.","title":"Luna::FileAttribute::size"},{"location":"api/struct_luna_1_1_file_attribute_1ad3aa5c6909d7fbfc6e5ae6e652f06934/#lunafileattributesize","text":"u64 size The size, in bytes, of the file.","title":"Luna::FileAttribute::size"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4/","text":"Luna::Function< _R(_Args...)> A function wrapper that can store one callable object, and enable coping, moving and invoking of such callable object. struct Luna::Function< _R(_Args...)> Overview The callable object can be a function pointer or a function object (types that overloads operator() ). Functions Function() Constructs an empty function wrapper. Function(nullptr_t) Constructs an empty function wrapper with nullptr . Function(const Function &rhs) Constructs an function wrapper by coping from another function object. Function(Function &&rhs) Constructs an function wrapper by moving from another function object. Function(function_t *func) Constructs an function wrapper using one function pointer. Function(_Ty &&value) Constructs an function wrapper using one function object. void swap(Function &rhs) Swaps the data of this function wrapper with another function wrapper. bool empty() const Tests whether this function wrapper is empty. operator bool() const Tests whether this function wrapper is non-empty. _R operator()(_Args... args) const Invokes the function wrapper. This will invoke the callable object that is stored in the function.","title":"Luna::Function< _R(_Args...)>"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4/#lunafunction-_r_args","text":"A function wrapper that can store one callable object, and enable coping, moving and invoking of such callable object. struct Luna::Function< _R(_Args...)>","title":"Luna::Function&lt; _R(_Args...)&gt;"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4/#overview","text":"The callable object can be a function pointer or a function object (types that overloads operator() ).","title":"Overview"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4/#functions","text":"Function() Constructs an empty function wrapper. Function(nullptr_t) Constructs an empty function wrapper with nullptr . Function(const Function &rhs) Constructs an function wrapper by coping from another function object. Function(Function &&rhs) Constructs an function wrapper by moving from another function object. Function(function_t *func) Constructs an function wrapper using one function pointer. Function(_Ty &&value) Constructs an function wrapper using one function object. void swap(Function &rhs) Swaps the data of this function wrapper with another function wrapper. bool empty() const Tests whether this function wrapper is empty. operator bool() const Tests whether this function wrapper is non-empty. _R operator()(_Args... args) const Invokes the function wrapper. This will invoke the callable object that is stored in the function.","title":"Functions"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a02f45d9e3b871201d65c991313c54970/","text":"Luna::Function< _R(_Args...)>::swap void swap(Function &rhs) Swaps the data of this function wrapper with another function wrapper. Overview Parameters rhs The function wrapper to swap with.","title":"Luna::Function< _R(_Args...)>::swap"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a02f45d9e3b871201d65c991313c54970/#lunafunction-_r_argsswap","text":"void swap(Function &rhs) Swaps the data of this function wrapper with another function wrapper.","title":"Luna::Function&lt; _R(_Args...)&gt;::swap"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a02f45d9e3b871201d65c991313c54970/#overview","text":"","title":"Overview"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a02f45d9e3b871201d65c991313c54970/#parameters","text":"","title":"Parameters"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a02f45d9e3b871201d65c991313c54970/#rhs","text":"The function wrapper to swap with.","title":"rhs"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a1a29300c0dc1f7b4626742cf73e7fce4/","text":"Luna::Function< _R(_Args...)>::Function Function(function_t *func) Constructs an function wrapper using one function pointer. Overview Parameters func The function pointer to assign.","title":"Luna::Function< _R(_Args...)>::Function"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a1a29300c0dc1f7b4626742cf73e7fce4/#lunafunction-_r_argsfunction","text":"Function(function_t *func) Constructs an function wrapper using one function pointer.","title":"Luna::Function&lt; _R(_Args...)&gt;::Function"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a1a29300c0dc1f7b4626742cf73e7fce4/#overview","text":"","title":"Overview"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a1a29300c0dc1f7b4626742cf73e7fce4/#parameters","text":"","title":"Parameters"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a1a29300c0dc1f7b4626742cf73e7fce4/#func","text":"The function pointer to assign.","title":"func"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a4461cffc0d61cfd185d3297e539d5f27/","text":"Luna::Function< _R(_Args...)>::operator() _R operator()(_Args... args) const Invokes the function wrapper. This will invoke the callable object that is stored in the function. Overview Parameters args The arguments passed to the callable object. Return value Returns the return value of the callable object if _R is not void . Returns nothing otherwise.","title":"Luna::Function< _R(_Args...)>::operator()"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a4461cffc0d61cfd185d3297e539d5f27/#lunafunction-_r_argsoperator","text":"_R operator()(_Args... args) const Invokes the function wrapper. This will invoke the callable object that is stored in the function.","title":"Luna::Function&lt; _R(_Args...)&gt;::operator()"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a4461cffc0d61cfd185d3297e539d5f27/#overview","text":"","title":"Overview"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a4461cffc0d61cfd185d3297e539d5f27/#parameters","text":"","title":"Parameters"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a4461cffc0d61cfd185d3297e539d5f27/#args","text":"The arguments passed to the callable object.","title":"args"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a4461cffc0d61cfd185d3297e539d5f27/#return-value","text":"Returns the return value of the callable object if _R is not void . Returns nothing otherwise.","title":"Return value"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a644718bb2fb240de962dc3c9a1fdf0dc/","text":"Luna::Function< _R(_Args...)>::empty bool empty() const Tests whether this function wrapper is empty. Overview Return value Return true if this function wrapper is empty, that is, contains no callable object. Return false otherwise.","title":"Luna::Function< _R(_Args...)>::empty"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a644718bb2fb240de962dc3c9a1fdf0dc/#lunafunction-_r_argsempty","text":"bool empty() const Tests whether this function wrapper is empty.","title":"Luna::Function&lt; _R(_Args...)&gt;::empty"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a644718bb2fb240de962dc3c9a1fdf0dc/#overview","text":"","title":"Overview"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a644718bb2fb240de962dc3c9a1fdf0dc/#return-value","text":"Return true if this function wrapper is empty, that is, contains no callable object. Return false otherwise.","title":"Return value"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a67b76affb3b5d35fa419ac234144038b/","text":"Luna::Function< _R(_Args...)>::operator bool operator bool() const Tests whether this function wrapper is non-empty. Overview Return value Return true if this function wrapper is non-empty, that is, contains one callable object. Return false otherwise.","title":"Luna::Function< _R(_Args...)>::operator bool"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a67b76affb3b5d35fa419ac234144038b/#lunafunction-_r_argsoperator-bool","text":"operator bool() const Tests whether this function wrapper is non-empty.","title":"Luna::Function&lt; _R(_Args...)&gt;::operator bool"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a67b76affb3b5d35fa419ac234144038b/#overview","text":"","title":"Overview"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a67b76affb3b5d35fa419ac234144038b/#return-value","text":"Return true if this function wrapper is non-empty, that is, contains one callable object. Return false otherwise.","title":"Return value"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a707a672fcfb2919f438281489a7569a6/","text":"Luna::Function< _R(_Args...)>::Function Function(nullptr_t) Constructs an empty function wrapper with nullptr .","title":"Luna::Function< _R(_Args...)>::Function"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1a707a672fcfb2919f438281489a7569a6/#lunafunction-_r_argsfunction","text":"Function(nullptr_t) Constructs an empty function wrapper with nullptr .","title":"Luna::Function&lt; _R(_Args...)&gt;::Function"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1aa61125691a5b694a46ce9f6a0fbe5093/","text":"Luna::Function< _R(_Args...)>::Function Function() Constructs an empty function wrapper.","title":"Luna::Function< _R(_Args...)>::Function"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1aa61125691a5b694a46ce9f6a0fbe5093/#lunafunction-_r_argsfunction","text":"Function() Constructs an empty function wrapper.","title":"Luna::Function&lt; _R(_Args...)&gt;::Function"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1aaa1331a0ab0a16714e13741cb222b448/","text":"Luna::Function< _R(_Args...)>::Function Function(const Function &rhs) Constructs an function wrapper by coping from another function object. Overview Parameters rhs The function object to copy from.","title":"Luna::Function< _R(_Args...)>::Function"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1aaa1331a0ab0a16714e13741cb222b448/#lunafunction-_r_argsfunction","text":"Function(const Function &rhs) Constructs an function wrapper by coping from another function object.","title":"Luna::Function&lt; _R(_Args...)&gt;::Function"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1aaa1331a0ab0a16714e13741cb222b448/#overview","text":"","title":"Overview"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1aaa1331a0ab0a16714e13741cb222b448/#parameters","text":"","title":"Parameters"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1aaa1331a0ab0a16714e13741cb222b448/#rhs","text":"The function object to copy from.","title":"rhs"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1adc64cd4d9d95878073c69d08821b2ae9/","text":"Luna::Function< _R(_Args...)>::Function template <typename _Ty> Function(_Ty &&value) Constructs an function wrapper using one function object. Overview Parameters value The function object to assign. The function object will be copy-constructed into the wrapper.","title":"Luna::Function< _R(_Args...)>::Function"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1adc64cd4d9d95878073c69d08821b2ae9/#lunafunction-_r_argsfunction","text":"template <typename _Ty> Function(_Ty &&value) Constructs an function wrapper using one function object.","title":"Luna::Function&lt; _R(_Args...)&gt;::Function"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1adc64cd4d9d95878073c69d08821b2ae9/#overview","text":"","title":"Overview"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1adc64cd4d9d95878073c69d08821b2ae9/#parameters","text":"","title":"Parameters"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1adc64cd4d9d95878073c69d08821b2ae9/#value","text":"The function object to assign. The function object will be copy-constructed into the wrapper.","title":"value"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1adcbe3cde1f4efd2a3b309daf49335129/","text":"Luna::Function< _R(_Args...)>::Function Function(Function &&rhs) Constructs an function wrapper by moving from another function object. Overview Parameters rhs The function object to move from.","title":"Luna::Function< _R(_Args...)>::Function"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1adcbe3cde1f4efd2a3b309daf49335129/#lunafunction-_r_argsfunction","text":"Function(Function &&rhs) Constructs an function wrapper by moving from another function object.","title":"Luna::Function&lt; _R(_Args...)&gt;::Function"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1adcbe3cde1f4efd2a3b309daf49335129/#overview","text":"","title":"Overview"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1adcbe3cde1f4efd2a3b309daf49335129/#parameters","text":"","title":"Parameters"},{"location":"api/struct_luna_1_1_function_3_01___r_07___args_8_8_8_08_4_1adcbe3cde1f4efd2a3b309daf49335129/#rhs","text":"The function object to move from.","title":"rhs"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info/","text":"Luna::GenericStructureInstantiateInfo Describes the information of one generic structure instantiation operation. struct Luna::GenericStructureInstantiateInfo Overview This is returned by the instantiation callback function when one new generic structure instanced type is required. Properties usize size The size of the structure type, this should include the size for the base type of this type. usize alignment The alignment of the structure type. typeinfo_t base_type The base type of this structure type. structure_ctor_t* ctor structure_dtor_t* dtor The destructor function for this type. If nullptr , the default destructor will be used. structure_copy_ctor_t* copy_ctor structure_move_ctor_t* move_ctor The move constructor for this type. If nullptr , the default move constructor will be used. structure_copy_assign_t* copy_assign The copy assignment operator for this type. If nullptr , the default copy assignment operator will be used. structure_move_assign_t* move_assign The mvoe assignment operator for this type. If nullptr , the default move assignment operator will be used. Array properties The properties of this structure type. bool trivially_relocatable Whether this structure is trivially relocatable.","title":"Luna::GenericStructureInstantiateInfo"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info/#lunagenericstructureinstantiateinfo","text":"Describes the information of one generic structure instantiation operation. struct Luna::GenericStructureInstantiateInfo","title":"Luna::GenericStructureInstantiateInfo"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info/#overview","text":"This is returned by the instantiation callback function when one new generic structure instanced type is required.","title":"Overview"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info/#properties","text":"usize size The size of the structure type, this should include the size for the base type of this type. usize alignment The alignment of the structure type. typeinfo_t base_type The base type of this structure type. structure_ctor_t* ctor structure_dtor_t* dtor The destructor function for this type. If nullptr , the default destructor will be used. structure_copy_ctor_t* copy_ctor structure_move_ctor_t* move_ctor The move constructor for this type. If nullptr , the default move constructor will be used. structure_copy_assign_t* copy_assign The copy assignment operator for this type. If nullptr , the default copy assignment operator will be used. structure_move_assign_t* move_assign The mvoe assignment operator for this type. If nullptr , the default move assignment operator will be used. Array properties The properties of this structure type. bool trivially_relocatable Whether this structure is trivially relocatable.","title":"Properties"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info_1a04e4a2d458c31f2a64e8669d8568ead9/","text":"Luna::GenericStructureInstantiateInfo::base_type typeinfo_t base_type The base type of this structure type.","title":"Luna::GenericStructureInstantiateInfo::base_type"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info_1a04e4a2d458c31f2a64e8669d8568ead9/#lunagenericstructureinstantiateinfobase_type","text":"typeinfo_t base_type The base type of this structure type.","title":"Luna::GenericStructureInstantiateInfo::base_type"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info_1a49a2c551255183998b610cfabb0bc464/","text":"Luna::GenericStructureInstantiateInfo::move_assign structure_move_assign_t* move_assign The mvoe assignment operator for this type. If nullptr , the default move assignment operator will be used.","title":"Luna::GenericStructureInstantiateInfo::move_assign"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info_1a49a2c551255183998b610cfabb0bc464/#lunagenericstructureinstantiateinfomove_assign","text":"structure_move_assign_t* move_assign The mvoe assignment operator for this type. If nullptr , the default move assignment operator will be used.","title":"Luna::GenericStructureInstantiateInfo::move_assign"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info_1a59f6400efda18d25d7b3cf3c2e7a3d3d/","text":"Luna::GenericStructureInstantiateInfo::size usize size The size of the structure type, this should include the size for the base type of this type.","title":"Luna::GenericStructureInstantiateInfo::size"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info_1a59f6400efda18d25d7b3cf3c2e7a3d3d/#lunagenericstructureinstantiateinfosize","text":"usize size The size of the structure type, this should include the size for the base type of this type.","title":"Luna::GenericStructureInstantiateInfo::size"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info_1a66e83256edf26122efc9735284bf5573/","text":"Luna::GenericStructureInstantiateInfo::move_ctor structure_move_ctor_t* move_ctor The move constructor for this type. If nullptr , the default move constructor will be used.","title":"Luna::GenericStructureInstantiateInfo::move_ctor"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info_1a66e83256edf26122efc9735284bf5573/#lunagenericstructureinstantiateinfomove_ctor","text":"structure_move_ctor_t* move_ctor The move constructor for this type. If nullptr , the default move constructor will be used.","title":"Luna::GenericStructureInstantiateInfo::move_ctor"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info_1a7daacf4ed7ed76c8c18eb17f3ff4b1ed/","text":"Luna::GenericStructureInstantiateInfo::copy_assign structure_copy_assign_t* copy_assign The copy assignment operator for this type. If nullptr , the default copy assignment operator will be used.","title":"Luna::GenericStructureInstantiateInfo::copy_assign"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info_1a7daacf4ed7ed76c8c18eb17f3ff4b1ed/#lunagenericstructureinstantiateinfocopy_assign","text":"structure_copy_assign_t* copy_assign The copy assignment operator for this type. If nullptr , the default copy assignment operator will be used.","title":"Luna::GenericStructureInstantiateInfo::copy_assign"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info_1a84c18f6f6874b7f530f0c3ffe156e3fb/","text":"Luna::GenericStructureInstantiateInfo::alignment usize alignment The alignment of the structure type.","title":"Luna::GenericStructureInstantiateInfo::alignment"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info_1a84c18f6f6874b7f530f0c3ffe156e3fb/#lunagenericstructureinstantiateinfoalignment","text":"usize alignment The alignment of the structure type.","title":"Luna::GenericStructureInstantiateInfo::alignment"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info_1a8b562d2692e5808232b9a65c240e6103/","text":"Luna::GenericStructureInstantiateInfo::ctor structure_ctor_t* ctor Overview The constructor function for this type. If nullptr , the default constructor will be used.","title":"Luna::GenericStructureInstantiateInfo::ctor"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info_1a8b562d2692e5808232b9a65c240e6103/#lunagenericstructureinstantiateinfoctor","text":"structure_ctor_t* ctor","title":"Luna::GenericStructureInstantiateInfo::ctor"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info_1a8b562d2692e5808232b9a65c240e6103/#overview","text":"The constructor function for this type. If nullptr , the default constructor will be used.","title":"Overview"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info_1a8e5f4fefafed4000ee467f8de565955d/","text":"Luna::GenericStructureInstantiateInfo::trivially_relocatable bool trivially_relocatable Whether this structure is trivially relocatable.","title":"Luna::GenericStructureInstantiateInfo::trivially_relocatable"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info_1a8e5f4fefafed4000ee467f8de565955d/#lunagenericstructureinstantiateinfotrivially_relocatable","text":"bool trivially_relocatable Whether this structure is trivially relocatable.","title":"Luna::GenericStructureInstantiateInfo::trivially_relocatable"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info_1a9d4b7ec2acd9a6841c13e7ebd0262f23/","text":"Luna::GenericStructureInstantiateInfo::properties Array<StructurePropertyDesc> properties The properties of this structure type.","title":"Luna::GenericStructureInstantiateInfo::properties"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info_1a9d4b7ec2acd9a6841c13e7ebd0262f23/#lunagenericstructureinstantiateinfoproperties","text":"Array<StructurePropertyDesc> properties The properties of this structure type.","title":"Luna::GenericStructureInstantiateInfo::properties"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info_1aa498db50ab9c3d7f9f84c97b8c24ac63/","text":"Luna::GenericStructureInstantiateInfo::dtor structure_dtor_t* dtor The destructor function for this type. If nullptr , the default destructor will be used.","title":"Luna::GenericStructureInstantiateInfo::dtor"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info_1aa498db50ab9c3d7f9f84c97b8c24ac63/#lunagenericstructureinstantiateinfodtor","text":"structure_dtor_t* dtor The destructor function for this type. If nullptr , the default destructor will be used.","title":"Luna::GenericStructureInstantiateInfo::dtor"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info_1abf45ac6225b448e989e041b420830949/","text":"Luna::GenericStructureInstantiateInfo::copy_ctor structure_copy_ctor_t* copy_ctor Overview The copy constructor for this type. If nullptr , the default copy constructor will be used.","title":"Luna::GenericStructureInstantiateInfo::copy_ctor"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info_1abf45ac6225b448e989e041b420830949/#lunagenericstructureinstantiateinfocopy_ctor","text":"structure_copy_ctor_t* copy_ctor","title":"Luna::GenericStructureInstantiateInfo::copy_ctor"},{"location":"api/struct_luna_1_1_generic_structure_instantiate_info_1abf45ac6225b448e989e041b420830949/#overview","text":"The copy constructor for this type. If nullptr , the default copy constructor will be used.","title":"Overview"},{"location":"api/struct_luna_1_1_generic_structure_type_desc/","text":"Luna::GenericStructureTypeDesc Describes one generic structure type. struct Luna::GenericStructureTypeDesc Properties Guid guid The GUID of the structure type. This should be unique for every type. Name name The name of the structure type. Name alias Span generic_parameter_names bool variable_generic_parameters generic_structure_instantiate_t* instantiate The function used to create generic instants for this generic type.","title":"Luna::GenericStructureTypeDesc"},{"location":"api/struct_luna_1_1_generic_structure_type_desc/#lunagenericstructuretypedesc","text":"Describes one generic structure type. struct Luna::GenericStructureTypeDesc","title":"Luna::GenericStructureTypeDesc"},{"location":"api/struct_luna_1_1_generic_structure_type_desc/#properties","text":"Guid guid The GUID of the structure type. This should be unique for every type. Name name The name of the structure type. Name alias Span generic_parameter_names bool variable_generic_parameters generic_structure_instantiate_t* instantiate The function used to create generic instants for this generic type.","title":"Properties"},{"location":"api/struct_luna_1_1_generic_structure_type_desc_1a0c8f65c9d3118ff62b1d40950e5154f8/","text":"Luna::GenericStructureTypeDesc::guid Guid guid The GUID of the structure type. This should be unique for every type.","title":"Luna::GenericStructureTypeDesc::guid"},{"location":"api/struct_luna_1_1_generic_structure_type_desc_1a0c8f65c9d3118ff62b1d40950e5154f8/#lunagenericstructuretypedescguid","text":"Guid guid The GUID of the structure type. This should be unique for every type.","title":"Luna::GenericStructureTypeDesc::guid"},{"location":"api/struct_luna_1_1_generic_structure_type_desc_1a4fe38c70c80a420b798584bc3c75063c/","text":"Luna::GenericStructureTypeDesc::generic_parameter_names Span<const Name> generic_parameter_names Overview The names for every generic parameter. This is only used as hints for users.","title":"Luna::GenericStructureTypeDesc::generic_parameter_names"},{"location":"api/struct_luna_1_1_generic_structure_type_desc_1a4fe38c70c80a420b798584bc3c75063c/#lunagenericstructuretypedescgeneric_parameter_names","text":"Span<const Name> generic_parameter_names","title":"Luna::GenericStructureTypeDesc::generic_parameter_names"},{"location":"api/struct_luna_1_1_generic_structure_type_desc_1a4fe38c70c80a420b798584bc3c75063c/#overview","text":"The names for every generic parameter. This is only used as hints for users.","title":"Overview"},{"location":"api/struct_luna_1_1_generic_structure_type_desc_1a5b11fda769284800e8a89d90d9873035/","text":"Luna::GenericStructureTypeDesc::instantiate generic_structure_instantiate_t* instantiate The function used to create generic instants for this generic type.","title":"Luna::GenericStructureTypeDesc::instantiate"},{"location":"api/struct_luna_1_1_generic_structure_type_desc_1a5b11fda769284800e8a89d90d9873035/#lunagenericstructuretypedescinstantiate","text":"generic_structure_instantiate_t* instantiate The function used to create generic instants for this generic type.","title":"Luna::GenericStructureTypeDesc::instantiate"},{"location":"api/struct_luna_1_1_generic_structure_type_desc_1a7082db574ba2d2d69ccafb060398b7d8/","text":"Luna::GenericStructureTypeDesc::name Name name The name of the structure type.","title":"Luna::GenericStructureTypeDesc::name"},{"location":"api/struct_luna_1_1_generic_structure_type_desc_1a7082db574ba2d2d69ccafb060398b7d8/#lunagenericstructuretypedescname","text":"Name name The name of the structure type.","title":"Luna::GenericStructureTypeDesc::name"},{"location":"api/struct_luna_1_1_generic_structure_type_desc_1aab3519e6b2915ade2b650f777b994121/","text":"Luna::GenericStructureTypeDesc::alias Name alias Overview The alias of the structure type. This can be empty. The alias is used to identify types with the same name. This can be used for generic specialization types.","title":"Luna::GenericStructureTypeDesc::alias"},{"location":"api/struct_luna_1_1_generic_structure_type_desc_1aab3519e6b2915ade2b650f777b994121/#lunagenericstructuretypedescalias","text":"Name alias","title":"Luna::GenericStructureTypeDesc::alias"},{"location":"api/struct_luna_1_1_generic_structure_type_desc_1aab3519e6b2915ade2b650f777b994121/#overview","text":"The alias of the structure type. This can be empty. The alias is used to identify types with the same name. This can be used for generic specialization types.","title":"Overview"},{"location":"api/struct_luna_1_1_generic_structure_type_desc_1af6d3f22f30f3fda40c0f41afa1058614/","text":"Luna::GenericStructureTypeDesc::variable_generic_parameters bool variable_generic_parameters Overview Whether this type suports variable number of generic arguments. If this is true , the user may specify zero, one or more generic arguments after arguments specified in generic_argument_names . This is only used as hints for users.","title":"Luna::GenericStructureTypeDesc::variable_generic_parameters"},{"location":"api/struct_luna_1_1_generic_structure_type_desc_1af6d3f22f30f3fda40c0f41afa1058614/#lunagenericstructuretypedescvariable_generic_parameters","text":"bool variable_generic_parameters","title":"Luna::GenericStructureTypeDesc::variable_generic_parameters"},{"location":"api/struct_luna_1_1_generic_structure_type_desc_1af6d3f22f30f3fda40c0f41afa1058614/#overview","text":"Whether this type suports variable number of generic arguments. If this is true , the user may specify zero, one or more generic arguments after arguments specified in generic_argument_names . This is only used as hints for users.","title":"Overview"},{"location":"api/struct_luna_1_1_guid/","text":"Luna::Guid Represents a Globally Unique Identifier. struct Luna::Guid Overview [Guid](struct_luna_1_1_guid.md) is a shortcut for Globally Unique Identifier. It is a 128-bit unsigned integer that is usually randomly generated and is used to identify one instance across multiple devices or domains. [Guid](struct_luna_1_1_guid.md) can be constructed from a literal string that is formatted in its canonical textual representation, which appears like \"xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx\". One open branket and one close branket may be added to the string, so both \"123e4567-e89b-12d3-a456-426614174000\" and \"{123e4567-e89b-12d3-a456-426614174000}\" are valid canonical textural representations of one [Guid](struct_luna_1_1_guid.md) . See https://en.wikipedia.org/wiki/Universally_unique_identifier for details about GUID and its canonical textual representation. Properties u64 high The high 64-bits of the GUID. u64 low The low 64-bits of the GUID.","title":"Luna::Guid"},{"location":"api/struct_luna_1_1_guid/#lunaguid","text":"Represents a Globally Unique Identifier. struct Luna::Guid","title":"Luna::Guid"},{"location":"api/struct_luna_1_1_guid/#overview","text":"[Guid](struct_luna_1_1_guid.md) is a shortcut for Globally Unique Identifier. It is a 128-bit unsigned integer that is usually randomly generated and is used to identify one instance across multiple devices or domains. [Guid](struct_luna_1_1_guid.md) can be constructed from a literal string that is formatted in its canonical textual representation, which appears like \"xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx\". One open branket and one close branket may be added to the string, so both \"123e4567-e89b-12d3-a456-426614174000\" and \"{123e4567-e89b-12d3-a456-426614174000}\" are valid canonical textural representations of one [Guid](struct_luna_1_1_guid.md) . See https://en.wikipedia.org/wiki/Universally_unique_identifier for details about GUID and its canonical textual representation.","title":"Overview"},{"location":"api/struct_luna_1_1_guid/#properties","text":"u64 high The high 64-bits of the GUID. u64 low The low 64-bits of the GUID.","title":"Properties"},{"location":"api/struct_luna_1_1_guid_1a5df88de4c741fbc3cdd8b4ea52218d4f/","text":"Luna::Guid::low u64 low The low 64-bits of the GUID.","title":"Luna::Guid::low"},{"location":"api/struct_luna_1_1_guid_1a5df88de4c741fbc3cdd8b4ea52218d4f/#lunaguidlow","text":"u64 low The low 64-bits of the GUID.","title":"Luna::Guid::low"},{"location":"api/struct_luna_1_1_guid_1a815ac712840838394af17a580a826ce9/","text":"Luna::Guid::high u64 high The high 64-bits of the GUID.","title":"Luna::Guid::high"},{"location":"api/struct_luna_1_1_guid_1a815ac712840838394af17a580a826ce9/#lunaguidhigh","text":"u64 high The high 64-bits of the GUID.","title":"Luna::Guid::high"},{"location":"api/struct_luna_1_1_i_file/","text":"Luna::IFile Represents a opened file object. interface Luna::IFile : public virtual ISeekableStream Functions virtual void flush()=0 Clears all buffers for this stream and causes all buffered data to be written to the underlying device.","title":"Luna::IFile"},{"location":"api/struct_luna_1_1_i_file/#lunaifile","text":"Represents a opened file object. interface Luna::IFile : public virtual ISeekableStream","title":"Luna::IFile"},{"location":"api/struct_luna_1_1_i_file/#functions","text":"virtual void flush()=0 Clears all buffers for this stream and causes all buffered data to be written to the underlying device.","title":"Functions"},{"location":"api/struct_luna_1_1_i_file_1a50ab71f4bc571f6e246b20db4b3dd131/","text":"Luna::IFile::flush virtual void flush()=0 Clears all buffers for this stream and causes all buffered data to be written to the underlying device.","title":"Luna::IFile::flush"},{"location":"api/struct_luna_1_1_i_file_1a50ab71f4bc571f6e246b20db4b3dd131/#lunaifileflush","text":"virtual void flush()=0 Clears all buffers for this stream and causes all buffered data to be written to the underlying device.","title":"Luna::IFile::flush"},{"location":"api/struct_luna_1_1_i_file_iterator/","text":"Luna::IFileIterator Represents a directory stream that can be used to iterate all files and directories in the specified directory. See open_dir for details. interface Luna::IFileIterator : public virtual Interface Functions virtual bool is_valid()=0 Checks if this iterator points to a valid file in the directory stream. virtual const c8 * get_filename()=0 Gets the filename of the file that the iterator currently points to. virtual FileAttributeFlag get_attributes()=0 Gets the file attribute flags of the file. virtual bool move_next()=0 Moves the iterator to the next file in the directory.","title":"Luna::IFileIterator"},{"location":"api/struct_luna_1_1_i_file_iterator/#lunaifileiterator","text":"Represents a directory stream that can be used to iterate all files and directories in the specified directory. See open_dir for details. interface Luna::IFileIterator : public virtual Interface","title":"Luna::IFileIterator"},{"location":"api/struct_luna_1_1_i_file_iterator/#functions","text":"virtual bool is_valid()=0 Checks if this iterator points to a valid file in the directory stream. virtual const c8 * get_filename()=0 Gets the filename of the file that the iterator currently points to. virtual FileAttributeFlag get_attributes()=0 Gets the file attribute flags of the file. virtual bool move_next()=0 Moves the iterator to the next file in the directory.","title":"Functions"},{"location":"api/struct_luna_1_1_i_file_iterator_1a8ad5b340ebf155189dae99f009494ff5/","text":"Luna::IFileIterator::is_valid virtual bool is_valid()=0 Checks if this iterator points to a valid file in the directory stream. Overview Return value Returns true if the iterator points to a valid file, returns false otherwise.","title":"Luna::IFileIterator::is_valid"},{"location":"api/struct_luna_1_1_i_file_iterator_1a8ad5b340ebf155189dae99f009494ff5/#lunaifileiteratoris_valid","text":"virtual bool is_valid()=0 Checks if this iterator points to a valid file in the directory stream.","title":"Luna::IFileIterator::is_valid"},{"location":"api/struct_luna_1_1_i_file_iterator_1a8ad5b340ebf155189dae99f009494ff5/#overview","text":"","title":"Overview"},{"location":"api/struct_luna_1_1_i_file_iterator_1a8ad5b340ebf155189dae99f009494ff5/#return-value","text":"Returns true if the iterator points to a valid file, returns false otherwise.","title":"Return value"},{"location":"api/struct_luna_1_1_i_file_iterator_1ae5991546f08147bc944f2baa31e08484/","text":"Luna::IFileIterator::get_filename virtual const c8 * get_filename()=0 Gets the filename of the file that the iterator currently points to. Overview Return value Returns the name of the file that the iterator currently points to, returns nullptr if the file iterator is invalid. The returnd pointer is valid until the file iterator is released or move_next is called.","title":"Luna::IFileIterator::get_filename"},{"location":"api/struct_luna_1_1_i_file_iterator_1ae5991546f08147bc944f2baa31e08484/#lunaifileiteratorget_filename","text":"virtual const c8 * get_filename()=0 Gets the filename of the file that the iterator currently points to.","title":"Luna::IFileIterator::get_filename"},{"location":"api/struct_luna_1_1_i_file_iterator_1ae5991546f08147bc944f2baa31e08484/#overview","text":"","title":"Overview"},{"location":"api/struct_luna_1_1_i_file_iterator_1ae5991546f08147bc944f2baa31e08484/#return-value","text":"Returns the name of the file that the iterator currently points to, returns nullptr if the file iterator is invalid. The returnd pointer is valid until the file iterator is released or move_next is called.","title":"Return value"},{"location":"api/struct_luna_1_1_i_file_iterator_1af8a906d9fcf3404a102db1094f874163/","text":"Luna::IFileIterator::move_next virtual bool move_next()=0 Moves the iterator to the next file in the directory. Overview Return value Returns true if the file iterator is valid after this call, returns false otherwise. If the return value is false , then the iterator has reached the end of the directory stream.","title":"Luna::IFileIterator::move_next"},{"location":"api/struct_luna_1_1_i_file_iterator_1af8a906d9fcf3404a102db1094f874163/#lunaifileiteratormove_next","text":"virtual bool move_next()=0 Moves the iterator to the next file in the directory.","title":"Luna::IFileIterator::move_next"},{"location":"api/struct_luna_1_1_i_file_iterator_1af8a906d9fcf3404a102db1094f874163/#overview","text":"","title":"Overview"},{"location":"api/struct_luna_1_1_i_file_iterator_1af8a906d9fcf3404a102db1094f874163/#return-value","text":"Returns true if the file iterator is valid after this call, returns false otherwise. If the return value is false , then the iterator has reached the end of the directory stream.","title":"Return value"},{"location":"api/struct_luna_1_1_i_file_iterator_1afd5c25f51fb0dc06d6009c2e14a1f204/","text":"Luna::IFileIterator::get_attributes virtual FileAttributeFlag get_attributes()=0 Gets the file attribute flags of the file. Overview Return value Returns the file attribute flags of the file that the iterator currently points to. Returns FileAttributeFlag::none if the file iterator is invalid.","title":"Luna::IFileIterator::get_attributes"},{"location":"api/struct_luna_1_1_i_file_iterator_1afd5c25f51fb0dc06d6009c2e14a1f204/#lunaifileiteratorget_attributes","text":"virtual FileAttributeFlag get_attributes()=0 Gets the file attribute flags of the file.","title":"Luna::IFileIterator::get_attributes"},{"location":"api/struct_luna_1_1_i_file_iterator_1afd5c25f51fb0dc06d6009c2e14a1f204/#overview","text":"","title":"Overview"},{"location":"api/struct_luna_1_1_i_file_iterator_1afd5c25f51fb0dc06d6009c2e14a1f204/#return-value","text":"Returns the file attribute flags of the file that the iterator currently points to. Returns FileAttributeFlag::none if the file iterator is invalid.","title":"Return value"},{"location":"api/struct_luna_1_1_i_mutex/","text":"Luna::IMutex Represents a system-level mutex object. interface Luna::IMutex : public virtual IWaitable Overview @threadsafe The mutex or critical section is an important object that provides synchronization functionality for multiple threads that wants to access the same resource without data race. The mutex can be \"owned\" by at most one thread, when other threads wants to acquire the mutex, it must wait until the thread that currently owns the mutex to release the mutex. The threads that waits on the mutex will probably be suspended by system. The mutex can be acquired recursively, that is, the thread that already owns the mutex can make additional calls to acquire the mutex, so long as it makes one release call for each acquire call to finally release the mutex. Acquiring the mutex from one thread and releasing from another thread is not allowed. Functions virtual void unlock()=0 Releases the ownership of the mutex.","title":"Luna::IMutex"},{"location":"api/struct_luna_1_1_i_mutex/#lunaimutex","text":"Represents a system-level mutex object. interface Luna::IMutex : public virtual IWaitable","title":"Luna::IMutex"},{"location":"api/struct_luna_1_1_i_mutex/#overview","text":"@threadsafe The mutex or critical section is an important object that provides synchronization functionality for multiple threads that wants to access the same resource without data race. The mutex can be \"owned\" by at most one thread, when other threads wants to acquire the mutex, it must wait until the thread that currently owns the mutex to release the mutex. The threads that waits on the mutex will probably be suspended by system. The mutex can be acquired recursively, that is, the thread that already owns the mutex can make additional calls to acquire the mutex, so long as it makes one release call for each acquire call to finally release the mutex. Acquiring the mutex from one thread and releasing from another thread is not allowed.","title":"Overview"},{"location":"api/struct_luna_1_1_i_mutex/#functions","text":"virtual void unlock()=0 Releases the ownership of the mutex.","title":"Functions"},{"location":"api/struct_luna_1_1_i_mutex_1a31262d17e02fcf1524984b10d72dee3e/","text":"Luna::IMutex::unlock virtual void unlock()=0 Releases the ownership of the mutex.","title":"Luna::IMutex::unlock"},{"location":"api/struct_luna_1_1_i_mutex_1a31262d17e02fcf1524984b10d72dee3e/#lunaimutexunlock","text":"virtual void unlock()=0 Releases the ownership of the mutex.","title":"Luna::IMutex::unlock"},{"location":"api/struct_luna_1_1_i_random/","text":"Luna::IRandom Represents a Pseudo-random number generator. interface Luna::IRandom : public virtual Interface Functions virtual void set_seed(u32 seed)=0 Sets random seed for the generator. virtual u32 gen_u32()=0 Generates one random 32-bit unsigned integer. virtual i32 gen_i32()=0 Generates one random 32-bit signed integer. virtual u64 gen_u64()=0 Generates one random 64-bit unsigned integer. virtual i64 gen_i64()=0 Generates one random 64-bit signed integer. virtual f32 gen_f32(f32 range_begin, f32 range_end)=0 Generates one random 32-bit floating-point number. virtual f64 gen_f64(f64 range_begin, f64 range_end)=0 Generates one random 64-bit floating-point number. virtual Guid gen_guid()=0 Generates one random GUID (Globally Unique Identifier).","title":"Luna::IRandom"},{"location":"api/struct_luna_1_1_i_random/#lunairandom","text":"Represents a Pseudo-random number generator. interface Luna::IRandom : public virtual Interface","title":"Luna::IRandom"},{"location":"api/struct_luna_1_1_i_random/#functions","text":"virtual void set_seed(u32 seed)=0 Sets random seed for the generator. virtual u32 gen_u32()=0 Generates one random 32-bit unsigned integer. virtual i32 gen_i32()=0 Generates one random 32-bit signed integer. virtual u64 gen_u64()=0 Generates one random 64-bit unsigned integer. virtual i64 gen_i64()=0 Generates one random 64-bit signed integer. virtual f32 gen_f32(f32 range_begin, f32 range_end)=0 Generates one random 32-bit floating-point number. virtual f64 gen_f64(f64 range_begin, f64 range_end)=0 Generates one random 64-bit floating-point number. virtual Guid gen_guid()=0 Generates one random GUID (Globally Unique Identifier).","title":"Functions"},{"location":"api/struct_luna_1_1_i_random_1a060934db2fb7c3013799f6fbef4a4231/","text":"Luna::IRandom::gen_f64 virtual f64 gen_f64(f64 range_begin, f64 range_end)=0 Generates one random 64-bit floating-point number. Overview Parameters range_begin The minimum number that will be generated. range_end The maximum number that will be generated. Return value Returns the generated number in range [ range_begin , range_end ].","title":"Luna::IRandom::gen_f64"},{"location":"api/struct_luna_1_1_i_random_1a060934db2fb7c3013799f6fbef4a4231/#lunairandomgen_f64","text":"virtual f64 gen_f64(f64 range_begin, f64 range_end)=0 Generates one random 64-bit floating-point number.","title":"Luna::IRandom::gen_f64"},{"location":"api/struct_luna_1_1_i_random_1a060934db2fb7c3013799f6fbef4a4231/#overview","text":"","title":"Overview"},{"location":"api/struct_luna_1_1_i_random_1a060934db2fb7c3013799f6fbef4a4231/#parameters","text":"","title":"Parameters"},{"location":"api/struct_luna_1_1_i_random_1a060934db2fb7c3013799f6fbef4a4231/#range_begin","text":"The minimum number that will be generated.","title":"range_begin"},{"location":"api/struct_luna_1_1_i_random_1a060934db2fb7c3013799f6fbef4a4231/#range_end","text":"The maximum number that will be generated.","title":"range_end"},{"location":"api/struct_luna_1_1_i_random_1a060934db2fb7c3013799f6fbef4a4231/#return-value","text":"Returns the generated number in range [ range_begin , range_end ].","title":"Return value"},{"location":"api/struct_luna_1_1_i_random_1a4e97435ea0c68b5c755fbdc51dcfda81/","text":"Luna::IRandom::gen_u32 virtual u32 gen_u32()=0 Generates one random 32-bit unsigned integer. Overview Return value Returns the generated number.","title":"Luna::IRandom::gen_u32"},{"location":"api/struct_luna_1_1_i_random_1a4e97435ea0c68b5c755fbdc51dcfda81/#lunairandomgen_u32","text":"virtual u32 gen_u32()=0 Generates one random 32-bit unsigned integer.","title":"Luna::IRandom::gen_u32"},{"location":"api/struct_luna_1_1_i_random_1a4e97435ea0c68b5c755fbdc51dcfda81/#overview","text":"","title":"Overview"},{"location":"api/struct_luna_1_1_i_random_1a4e97435ea0c68b5c755fbdc51dcfda81/#return-value","text":"Returns the generated number.","title":"Return value"},{"location":"api/struct_luna_1_1_i_random_1a7981e3767a4abf932de843d0eb7e06b2/","text":"Luna::IRandom::gen_i64 virtual i64 gen_i64()=0 Generates one random 64-bit signed integer. Overview Return value Returns the generated number.","title":"Luna::IRandom::gen_i64"},{"location":"api/struct_luna_1_1_i_random_1a7981e3767a4abf932de843d0eb7e06b2/#lunairandomgen_i64","text":"virtual i64 gen_i64()=0 Generates one random 64-bit signed integer.","title":"Luna::IRandom::gen_i64"},{"location":"api/struct_luna_1_1_i_random_1a7981e3767a4abf932de843d0eb7e06b2/#overview","text":"","title":"Overview"},{"location":"api/struct_luna_1_1_i_random_1a7981e3767a4abf932de843d0eb7e06b2/#return-value","text":"Returns the generated number.","title":"Return value"},{"location":"api/struct_luna_1_1_i_random_1a947974c4ce35f1f686128d421cc82246/","text":"Luna::IRandom::gen_u64 virtual u64 gen_u64()=0 Generates one random 64-bit unsigned integer. Overview Return value Returns the generated number.","title":"Luna::IRandom::gen_u64"},{"location":"api/struct_luna_1_1_i_random_1a947974c4ce35f1f686128d421cc82246/#lunairandomgen_u64","text":"virtual u64 gen_u64()=0 Generates one random 64-bit unsigned integer.","title":"Luna::IRandom::gen_u64"},{"location":"api/struct_luna_1_1_i_random_1a947974c4ce35f1f686128d421cc82246/#overview","text":"","title":"Overview"},{"location":"api/struct_luna_1_1_i_random_1a947974c4ce35f1f686128d421cc82246/#return-value","text":"Returns the generated number.","title":"Return value"},{"location":"api/struct_luna_1_1_i_random_1acdcf572b4cd6adebd10cf13f98d1c640/","text":"Luna::IRandom::gen_i32 virtual i32 gen_i32()=0 Generates one random 32-bit signed integer. Overview Return value Returns the generated number.","title":"Luna::IRandom::gen_i32"},{"location":"api/struct_luna_1_1_i_random_1acdcf572b4cd6adebd10cf13f98d1c640/#lunairandomgen_i32","text":"virtual i32 gen_i32()=0 Generates one random 32-bit signed integer.","title":"Luna::IRandom::gen_i32"},{"location":"api/struct_luna_1_1_i_random_1acdcf572b4cd6adebd10cf13f98d1c640/#overview","text":"","title":"Overview"},{"location":"api/struct_luna_1_1_i_random_1acdcf572b4cd6adebd10cf13f98d1c640/#return-value","text":"Returns the generated number.","title":"Return value"},{"location":"api/struct_luna_1_1_i_random_1ace8b125c8fda7da43adea042fafa1cf7/","text":"Luna::IRandom::gen_guid virtual Guid gen_guid()=0 Generates one random GUID (Globally Unique Identifier). Overview Return value Returns the generated GUID.","title":"Luna::IRandom::gen_guid"},{"location":"api/struct_luna_1_1_i_random_1ace8b125c8fda7da43adea042fafa1cf7/#lunairandomgen_guid","text":"virtual Guid gen_guid()=0 Generates one random GUID (Globally Unique Identifier).","title":"Luna::IRandom::gen_guid"},{"location":"api/struct_luna_1_1_i_random_1ace8b125c8fda7da43adea042fafa1cf7/#overview","text":"","title":"Overview"},{"location":"api/struct_luna_1_1_i_random_1ace8b125c8fda7da43adea042fafa1cf7/#return-value","text":"Returns the generated GUID.","title":"Return value"},{"location":"api/struct_luna_1_1_i_random_1adf32755ca3030b6b3bbcf8bb1df021ba/","text":"Luna::IRandom::gen_f32 virtual f32 gen_f32(f32 range_begin, f32 range_end)=0 Generates one random 32-bit floating-point number. Overview Parameters range_begin The minimum number that will be generated. range_end The maximum number that will be generated. Return value Returns the generated number in range [ range_begin , range_end ].","title":"Luna::IRandom::gen_f32"},{"location":"api/struct_luna_1_1_i_random_1adf32755ca3030b6b3bbcf8bb1df021ba/#lunairandomgen_f32","text":"virtual f32 gen_f32(f32 range_begin, f32 range_end)=0 Generates one random 32-bit floating-point number.","title":"Luna::IRandom::gen_f32"},{"location":"api/struct_luna_1_1_i_random_1adf32755ca3030b6b3bbcf8bb1df021ba/#overview","text":"","title":"Overview"},{"location":"api/struct_luna_1_1_i_random_1adf32755ca3030b6b3bbcf8bb1df021ba/#parameters","text":"","title":"Parameters"},{"location":"api/struct_luna_1_1_i_random_1adf32755ca3030b6b3bbcf8bb1df021ba/#range_begin","text":"The minimum number that will be generated.","title":"range_begin"},{"location":"api/struct_luna_1_1_i_random_1adf32755ca3030b6b3bbcf8bb1df021ba/#range_end","text":"The maximum number that will be generated.","title":"range_end"},{"location":"api/struct_luna_1_1_i_random_1adf32755ca3030b6b3bbcf8bb1df021ba/#return-value","text":"Returns the generated number in range [ range_begin , range_end ].","title":"Return value"},{"location":"api/struct_luna_1_1_i_random_1aea5e5d0ead35d611e22be97fef9d4ad0/","text":"Luna::IRandom::set_seed virtual void set_seed(u32 seed)=0 Sets random seed for the generator. Overview Parameters seed The new random seed to set.","title":"Luna::IRandom::set_seed"},{"location":"api/struct_luna_1_1_i_random_1aea5e5d0ead35d611e22be97fef9d4ad0/#lunairandomset_seed","text":"virtual void set_seed(u32 seed)=0 Sets random seed for the generator.","title":"Luna::IRandom::set_seed"},{"location":"api/struct_luna_1_1_i_random_1aea5e5d0ead35d611e22be97fef9d4ad0/#overview","text":"","title":"Overview"},{"location":"api/struct_luna_1_1_i_random_1aea5e5d0ead35d611e22be97fef9d4ad0/#parameters","text":"","title":"Parameters"},{"location":"api/struct_luna_1_1_i_random_1aea5e5d0ead35d611e22be97fef9d4ad0/#seed","text":"The new random seed to set.","title":"seed"},{"location":"api/struct_luna_1_1_i_read_write_lock/","text":"Luna::IReadWriteLock Represents one system-level read write lock. interface Luna::IReadWriteLock : public virtual Interface Overview One read write lock allows multiple threads to access the same resource in read mode, or at most one thread to access the resource in write mode. One read write lock is created in unlocked mode, and can be transferred to read mode by acquiring read ownership of the lock, or transferred to write mode by acquiring write ownership of the lock. When the read write lock is in read mode, successing acquires of read ownership succeeds, but acquires of write ownership will fail or be blocked until all read ownerships are released; When the read write lock is in write mode, all succeeding acquires of read and write ownerships will fail or be blocked until the write ownership is released. The write ownership is not recursive: succeeding acquire of write ownership from the thread that already acquired the write ownership causes deadlock and shall not be performed. @threadsafe Functions virtual void acquire_read()=0 Acquires one read ownership of the lock. virtual void acquire_write()=0 Acquires one write ownership of the lock. virtual bool try_acquire_read()=0 Tries to acquire one read ownership of the lock. virtual bool try_acquire_write()=0 Tries to acquire one write ownership of the lock. virtual void release_read()=0 Releases the read ownership acquired by acquire_read or try_acquire_read. virtual void release_write()=0 Releases the write ownership acquired by acquire_write or try_acquire_write.","title":"Luna::IReadWriteLock"},{"location":"api/struct_luna_1_1_i_read_write_lock/#lunaireadwritelock","text":"Represents one system-level read write lock. interface Luna::IReadWriteLock : public virtual Interface","title":"Luna::IReadWriteLock"},{"location":"api/struct_luna_1_1_i_read_write_lock/#overview","text":"One read write lock allows multiple threads to access the same resource in read mode, or at most one thread to access the resource in write mode. One read write lock is created in unlocked mode, and can be transferred to read mode by acquiring read ownership of the lock, or transferred to write mode by acquiring write ownership of the lock. When the read write lock is in read mode, successing acquires of read ownership succeeds, but acquires of write ownership will fail or be blocked until all read ownerships are released; When the read write lock is in write mode, all succeeding acquires of read and write ownerships will fail or be blocked until the write ownership is released. The write ownership is not recursive: succeeding acquire of write ownership from the thread that already acquired the write ownership causes deadlock and shall not be performed. @threadsafe","title":"Overview"},{"location":"api/struct_luna_1_1_i_read_write_lock/#functions","text":"virtual void acquire_read()=0 Acquires one read ownership of the lock. virtual void acquire_write()=0 Acquires one write ownership of the lock. virtual bool try_acquire_read()=0 Tries to acquire one read ownership of the lock. virtual bool try_acquire_write()=0 Tries to acquire one write ownership of the lock. virtual void release_read()=0 Releases the read ownership acquired by acquire_read or try_acquire_read. virtual void release_write()=0 Releases the write ownership acquired by acquire_write or try_acquire_write.","title":"Functions"},{"location":"api/struct_luna_1_1_i_read_write_lock_1a4ae8f05cc92bc1c6ec3069ef8a79b590/","text":"Luna::IReadWriteLock::release_read virtual void release_read()=0 Releases the read ownership acquired by acquire_read or try_acquire_read.","title":"Luna::IReadWriteLock::release_read"},{"location":"api/struct_luna_1_1_i_read_write_lock_1a4ae8f05cc92bc1c6ec3069ef8a79b590/#lunaireadwritelockrelease_read","text":"virtual void release_read()=0 Releases the read ownership acquired by acquire_read or try_acquire_read.","title":"Luna::IReadWriteLock::release_read"},{"location":"api/struct_luna_1_1_i_read_write_lock_1a4c422b9f02a7acdbc1b18668d0d4fa9f/","text":"Luna::IReadWriteLock::acquire_read virtual void acquire_read()=0 Acquires one read ownership of the lock. Overview This operation blocks the current thread until the ownership is acquired.","title":"Luna::IReadWriteLock::acquire_read"},{"location":"api/struct_luna_1_1_i_read_write_lock_1a4c422b9f02a7acdbc1b18668d0d4fa9f/#lunaireadwritelockacquire_read","text":"virtual void acquire_read()=0 Acquires one read ownership of the lock.","title":"Luna::IReadWriteLock::acquire_read"},{"location":"api/struct_luna_1_1_i_read_write_lock_1a4c422b9f02a7acdbc1b18668d0d4fa9f/#overview","text":"This operation blocks the current thread until the ownership is acquired.","title":"Overview"},{"location":"api/struct_luna_1_1_i_read_write_lock_1aaafad82e226eb10829ab823b3fb49da6/","text":"Luna::IReadWriteLock::try_acquire_write virtual bool try_acquire_write()=0 Tries to acquire one write ownership of the lock. Overview This operation does not block the current thread, it returns immediately no matter whether the ownership is acquired. Return value Returns true if the ownership is acquired when this function returns. Returns false otherwise.","title":"Luna::IReadWriteLock::try_acquire_write"},{"location":"api/struct_luna_1_1_i_read_write_lock_1aaafad82e226eb10829ab823b3fb49da6/#lunaireadwritelocktry_acquire_write","text":"virtual bool try_acquire_write()=0 Tries to acquire one write ownership of the lock.","title":"Luna::IReadWriteLock::try_acquire_write"},{"location":"api/struct_luna_1_1_i_read_write_lock_1aaafad82e226eb10829ab823b3fb49da6/#overview","text":"This operation does not block the current thread, it returns immediately no matter whether the ownership is acquired.","title":"Overview"},{"location":"api/struct_luna_1_1_i_read_write_lock_1aaafad82e226eb10829ab823b3fb49da6/#return-value","text":"Returns true if the ownership is acquired when this function returns. Returns false otherwise.","title":"Return value"},{"location":"api/struct_luna_1_1_i_read_write_lock_1abdaf802022253a2a516731180958b4c5/","text":"Luna::IReadWriteLock::acquire_write virtual void acquire_write()=0 Acquires one write ownership of the lock. Overview This operation blocks the current thread until the ownership is acquired.","title":"Luna::IReadWriteLock::acquire_write"},{"location":"api/struct_luna_1_1_i_read_write_lock_1abdaf802022253a2a516731180958b4c5/#lunaireadwritelockacquire_write","text":"virtual void acquire_write()=0 Acquires one write ownership of the lock.","title":"Luna::IReadWriteLock::acquire_write"},{"location":"api/struct_luna_1_1_i_read_write_lock_1abdaf802022253a2a516731180958b4c5/#overview","text":"This operation blocks the current thread until the ownership is acquired.","title":"Overview"},{"location":"api/struct_luna_1_1_i_read_write_lock_1ae2a34e31690b2e76292eb05389dfa36f/","text":"Luna::IReadWriteLock::release_write virtual void release_write()=0 Releases the write ownership acquired by acquire_write or try_acquire_write.","title":"Luna::IReadWriteLock::release_write"},{"location":"api/struct_luna_1_1_i_read_write_lock_1ae2a34e31690b2e76292eb05389dfa36f/#lunaireadwritelockrelease_write","text":"virtual void release_write()=0 Releases the write ownership acquired by acquire_write or try_acquire_write.","title":"Luna::IReadWriteLock::release_write"},{"location":"api/struct_luna_1_1_i_read_write_lock_1affc9612ed2c089bba5dadf527a42acb8/","text":"Luna::IReadWriteLock::try_acquire_read virtual bool try_acquire_read()=0 Tries to acquire one read ownership of the lock. Overview This operation does not block the current thread, it returns immediately no matter whether the ownership is acquired. Return value Returns true if the ownership is acquired when this function returns. Returns false otherwise.","title":"Luna::IReadWriteLock::try_acquire_read"},{"location":"api/struct_luna_1_1_i_read_write_lock_1affc9612ed2c089bba5dadf527a42acb8/#lunaireadwritelocktry_acquire_read","text":"virtual bool try_acquire_read()=0 Tries to acquire one read ownership of the lock.","title":"Luna::IReadWriteLock::try_acquire_read"},{"location":"api/struct_luna_1_1_i_read_write_lock_1affc9612ed2c089bba5dadf527a42acb8/#overview","text":"This operation does not block the current thread, it returns immediately no matter whether the ownership is acquired.","title":"Overview"},{"location":"api/struct_luna_1_1_i_read_write_lock_1affc9612ed2c089bba5dadf527a42acb8/#return-value","text":"Returns true if the ownership is acquired when this function returns. Returns false otherwise.","title":"Return value"},{"location":"api/struct_luna_1_1_i_seekable_stream/","text":"Luna::ISeekableStream Represents one stream object that supports setting the cursor position. interface Luna::ISeekableStream : public virtual IStream Functions virtual R< u64 > tell()=0 Gets the current position of the stream cursor. virtual RV seek(i64 offset, SeekMode mode)=0 Moves the read/write cursor to a new position. virtual u64 get_size()=0 Gets the size of the stream buffer in bytes. virtual RV set_size(u64 size)=0 Sets the size of the stream buffer.","title":"Luna::ISeekableStream"},{"location":"api/struct_luna_1_1_i_seekable_stream/#lunaiseekablestream","text":"Represents one stream object that supports setting the cursor position. interface Luna::ISeekableStream : public virtual IStream","title":"Luna::ISeekableStream"},{"location":"api/struct_luna_1_1_i_seekable_stream/#functions","text":"virtual R< u64 > tell()=0 Gets the current position of the stream cursor. virtual RV seek(i64 offset, SeekMode mode)=0 Moves the read/write cursor to a new position. virtual u64 get_size()=0 Gets the size of the stream buffer in bytes. virtual RV set_size(u64 size)=0 Sets the size of the stream buffer.","title":"Functions"},{"location":"api/struct_luna_1_1_i_seekable_stream_1a2aa8f3bce4e55eacddc0a759319a6272/","text":"Luna::ISeekableStream::set_size virtual RV set_size(u64 size)=0 Sets the size of the stream buffer. Overview If the current stream buffer size is smaller than the size to set and this call succeeded, the stream buffer will be extended to the size specified, with data between the last size and current size be uninitialized. If the current stream buffer size is greater than the size to set and this call succeeded, the stream buffer will be truncated and the data between the last size and current size will be discarded. Parameters size The size to set, in bytes.","title":"Luna::ISeekableStream::set_size"},{"location":"api/struct_luna_1_1_i_seekable_stream_1a2aa8f3bce4e55eacddc0a759319a6272/#lunaiseekablestreamset_size","text":"virtual RV set_size(u64 size)=0 Sets the size of the stream buffer.","title":"Luna::ISeekableStream::set_size"},{"location":"api/struct_luna_1_1_i_seekable_stream_1a2aa8f3bce4e55eacddc0a759319a6272/#overview","text":"If the current stream buffer size is smaller than the size to set and this call succeeded, the stream buffer will be extended to the size specified, with data between the last size and current size be uninitialized. If the current stream buffer size is greater than the size to set and this call succeeded, the stream buffer will be truncated and the data between the last size and current size will be discarded.","title":"Overview"},{"location":"api/struct_luna_1_1_i_seekable_stream_1a2aa8f3bce4e55eacddc0a759319a6272/#parameters","text":"","title":"Parameters"},{"location":"api/struct_luna_1_1_i_seekable_stream_1a2aa8f3bce4e55eacddc0a759319a6272/#size","text":"The size to set, in bytes.","title":"size"},{"location":"api/struct_luna_1_1_i_seekable_stream_1a4dbeb603c9f042cd59f6c5e60f5deeaf/","text":"Luna::ISeekableStream::get_size virtual u64 get_size()=0 Gets the size of the stream buffer in bytes. Overview Return value Returns the of the stream buffer in bytes. Returns 0 if the underlying stream is invalid or does not have a specific size.","title":"Luna::ISeekableStream::get_size"},{"location":"api/struct_luna_1_1_i_seekable_stream_1a4dbeb603c9f042cd59f6c5e60f5deeaf/#lunaiseekablestreamget_size","text":"virtual u64 get_size()=0 Gets the size of the stream buffer in bytes.","title":"Luna::ISeekableStream::get_size"},{"location":"api/struct_luna_1_1_i_seekable_stream_1a4dbeb603c9f042cd59f6c5e60f5deeaf/#overview","text":"","title":"Overview"},{"location":"api/struct_luna_1_1_i_seekable_stream_1a4dbeb603c9f042cd59f6c5e60f5deeaf/#return-value","text":"Returns the of the stream buffer in bytes. Returns 0 if the underlying stream is invalid or does not have a specific size.","title":"Return value"},{"location":"api/struct_luna_1_1_i_seekable_stream_1a62f27c4617444c74fd3c5e30fa146020/","text":"Luna::ISeekableStream::tell virtual R< u64 > tell()=0 Gets the current position of the stream cursor. Overview Return value Returns the current position of the stream cursor. The position is number of bytes relative to the beginning of the stream.","title":"Luna::ISeekableStream::tell"},{"location":"api/struct_luna_1_1_i_seekable_stream_1a62f27c4617444c74fd3c5e30fa146020/#lunaiseekablestreamtell","text":"virtual R< u64 > tell()=0 Gets the current position of the stream cursor.","title":"Luna::ISeekableStream::tell"},{"location":"api/struct_luna_1_1_i_seekable_stream_1a62f27c4617444c74fd3c5e30fa146020/#overview","text":"","title":"Overview"},{"location":"api/struct_luna_1_1_i_seekable_stream_1a62f27c4617444c74fd3c5e30fa146020/#return-value","text":"Returns the current position of the stream cursor. The position is number of bytes relative to the beginning of the stream.","title":"Return value"},{"location":"api/struct_luna_1_1_i_seekable_stream_1adeb5573a1c9e9aadf7c4f21a9d765a21/","text":"Luna::ISeekableStream::seek virtual RV seek(i64 offset, SeekMode mode)=0 Moves the read/write cursor to a new position. Overview Parameters offset Number of bytes to move relative to the position specified by mode . mode The seek mode to use. The cursor value cannot be negative, if the new cursor position goes below 0, the seek operation fails.","title":"Luna::ISeekableStream::seek"},{"location":"api/struct_luna_1_1_i_seekable_stream_1adeb5573a1c9e9aadf7c4f21a9d765a21/#lunaiseekablestreamseek","text":"virtual RV seek(i64 offset, SeekMode mode)=0 Moves the read/write cursor to a new position.","title":"Luna::ISeekableStream::seek"},{"location":"api/struct_luna_1_1_i_seekable_stream_1adeb5573a1c9e9aadf7c4f21a9d765a21/#overview","text":"","title":"Overview"},{"location":"api/struct_luna_1_1_i_seekable_stream_1adeb5573a1c9e9aadf7c4f21a9d765a21/#parameters","text":"","title":"Parameters"},{"location":"api/struct_luna_1_1_i_seekable_stream_1adeb5573a1c9e9aadf7c4f21a9d765a21/#offset","text":"Number of bytes to move relative to the position specified by mode .","title":"offset"},{"location":"api/struct_luna_1_1_i_seekable_stream_1adeb5573a1c9e9aadf7c4f21a9d765a21/#mode","text":"The seek mode to use. The cursor value cannot be negative, if the new cursor position goes below 0, the seek operation fails.","title":"mode"},{"location":"api/struct_luna_1_1_i_semaphore/","text":"Luna::ISemaphore Represents one system-level semaphore object. struct Luna::ISemaphore : public virtual IWaitable Functions virtual void release()=0 Increases the counter value of the semaphore by one.","title":"Luna::ISemaphore"},{"location":"api/struct_luna_1_1_i_semaphore/#lunaisemaphore","text":"Represents one system-level semaphore object. struct Luna::ISemaphore : public virtual IWaitable","title":"Luna::ISemaphore"},{"location":"api/struct_luna_1_1_i_semaphore/#functions","text":"virtual void release()=0 Increases the counter value of the semaphore by one.","title":"Functions"},{"location":"api/struct_luna_1_1_i_semaphore_1aab0a52fdd148a54108e7bf49287d7c47/","text":"Luna::ISemaphore::release virtual void release()=0 Increases the counter value of the semaphore by one.","title":"Luna::ISemaphore::release"},{"location":"api/struct_luna_1_1_i_semaphore_1aab0a52fdd148a54108e7bf49287d7c47/#lunaisemaphorerelease","text":"virtual void release()=0 Increases the counter value of the semaphore by one.","title":"Luna::ISemaphore::release"},{"location":"api/struct_luna_1_1_i_signal/","text":"Luna::ISignal Represents a system-level signal object. @threadsafe. interface Luna::ISignal : public virtual IWaitable Functions virtual void trigger()=0 Set this signal to trigged state. virtual void reset()=0 Resets this signal to untriggered state for manual reset signals.","title":"Luna::ISignal"},{"location":"api/struct_luna_1_1_i_signal/#lunaisignal","text":"Represents a system-level signal object. @threadsafe. interface Luna::ISignal : public virtual IWaitable","title":"Luna::ISignal"},{"location":"api/struct_luna_1_1_i_signal/#functions","text":"virtual void trigger()=0 Set this signal to trigged state. virtual void reset()=0 Resets this signal to untriggered state for manual reset signals.","title":"Functions"},{"location":"api/struct_luna_1_1_i_signal_1a195530e6278298441214fa3b1ed938f3/","text":"Luna::ISignal::trigger virtual void trigger()=0 Set this signal to trigged state. Overview If this signal is not a manual reset signal, all threads that are waiting for this signal will be waken up and continue to run. If this signal is a manual reset signal, only one thread that waits for this signal will be waken up, and the signal will be reset to untriggered state automatically. If no thread is waiting for this signal when the signal is triggered, the signal stays in triggered state until one thread calls wait or try_wait to reset the signal.","title":"Luna::ISignal::trigger"},{"location":"api/struct_luna_1_1_i_signal_1a195530e6278298441214fa3b1ed938f3/#lunaisignaltrigger","text":"virtual void trigger()=0 Set this signal to trigged state.","title":"Luna::ISignal::trigger"},{"location":"api/struct_luna_1_1_i_signal_1a195530e6278298441214fa3b1ed938f3/#overview","text":"If this signal is not a manual reset signal, all threads that are waiting for this signal will be waken up and continue to run. If this signal is a manual reset signal, only one thread that waits for this signal will be waken up, and the signal will be reset to untriggered state automatically. If no thread is waiting for this signal when the signal is triggered, the signal stays in triggered state until one thread calls wait or try_wait to reset the signal.","title":"Overview"},{"location":"api/struct_luna_1_1_i_signal_1a20dcbdfbd0ec77afc802522bb7e379c1/","text":"Luna::ISignal::reset virtual void reset()=0 Resets this signal to untriggered state for manual reset signals.","title":"Luna::ISignal::reset"},{"location":"api/struct_luna_1_1_i_signal_1a20dcbdfbd0ec77afc802522bb7e379c1/#lunaisignalreset","text":"virtual void reset()=0 Resets this signal to untriggered state for manual reset signals.","title":"Luna::ISignal::reset"},{"location":"api/struct_luna_1_1_i_stream/","text":"Luna::IStream Represents a serial stream sequence of bytes and supports read/write operations on them. interface Luna::IStream : public virtual Interface Overview Common implementations of streams include file, memory buffer, web socket and so on. This object is not thread safe and the I/O operations on this object is not asynchronous (will suspend the current thread until the operation is done or failed). Functions virtual RV read(void buffer, usize size, usize read_bytes=nullptr)=0 virtual RV write(const void buffer, usize size, usize write_bytes=nullptr)=0","title":"Luna::IStream"},{"location":"api/struct_luna_1_1_i_stream/#lunaistream","text":"Represents a serial stream sequence of bytes and supports read/write operations on them. interface Luna::IStream : public virtual Interface","title":"Luna::IStream"},{"location":"api/struct_luna_1_1_i_stream/#overview","text":"Common implementations of streams include file, memory buffer, web socket and so on. This object is not thread safe and the I/O operations on this object is not asynchronous (will suspend the current thread until the operation is done or failed).","title":"Overview"},{"location":"api/struct_luna_1_1_i_stream/#functions","text":"virtual RV read(void buffer, usize size, usize read_bytes=nullptr)=0 virtual RV write(const void buffer, usize size, usize write_bytes=nullptr)=0","title":"Functions"},{"location":"api/struct_luna_1_1_i_stream_1a6a5956c629eb0bba95dc0dd89bd0abde/","text":"Luna::IStream::read virtual RV read(void *buffer, usize size, usize *read_bytes=nullptr)=0 Overview Reads data from the current position the cursor is pointing to and offsets the cursor back. If the data to be read is not ready, the platform suspends the calling thread until the data is ready. Parameters buffer The buffer to accept the read data. size The size, in bytes, to read from the stream. read_bytes If not nullptr , the system sets the actual size of bytes being read to the buffer to this parameter. The actual size of bytes being read may be smaller than the size of bytes required to be read if the cursor reaches the end of the stream, but this is NOT an error. Specially, if one read operation is performed when the cursor is beyond or at the end of the stream, the read operation succeeds with 0 bytes being read. This can be considered as an EOF symbol in stdlib.","title":"Luna::IStream::read"},{"location":"api/struct_luna_1_1_i_stream_1a6a5956c629eb0bba95dc0dd89bd0abde/#lunaistreamread","text":"virtual RV read(void *buffer, usize size, usize *read_bytes=nullptr)=0","title":"Luna::IStream::read"},{"location":"api/struct_luna_1_1_i_stream_1a6a5956c629eb0bba95dc0dd89bd0abde/#overview","text":"Reads data from the current position the cursor is pointing to and offsets the cursor back. If the data to be read is not ready, the platform suspends the calling thread until the data is ready.","title":"Overview"},{"location":"api/struct_luna_1_1_i_stream_1a6a5956c629eb0bba95dc0dd89bd0abde/#parameters","text":"","title":"Parameters"},{"location":"api/struct_luna_1_1_i_stream_1a6a5956c629eb0bba95dc0dd89bd0abde/#buffer","text":"The buffer to accept the read data.","title":"buffer"},{"location":"api/struct_luna_1_1_i_stream_1a6a5956c629eb0bba95dc0dd89bd0abde/#size","text":"The size, in bytes, to read from the stream.","title":"size"},{"location":"api/struct_luna_1_1_i_stream_1a6a5956c629eb0bba95dc0dd89bd0abde/#read_bytes","text":"If not nullptr , the system sets the actual size of bytes being read to the buffer to this parameter. The actual size of bytes being read may be smaller than the size of bytes required to be read if the cursor reaches the end of the stream, but this is NOT an error. Specially, if one read operation is performed when the cursor is beyond or at the end of the stream, the read operation succeeds with 0 bytes being read. This can be considered as an EOF symbol in stdlib.","title":"read_bytes"},{"location":"api/struct_luna_1_1_i_stream_1ae2de26864471bdff2d8f7d49ac47da39/","text":"Luna::IStream::write virtual RV write(const void *buffer, usize size, usize *write_bytes=nullptr)=0 Overview Writes data to the current position the cursor is pointing to and offsets the cursor back. This call returns after all data have been written. Parameters buffer The buffer that holds the data to be written. size The size, in bytes, to write to the stream. write_bytes If not nullptr , the system sets the actual size of bytes being written to this parameter. Mostly, if the cursor goes beyond the end of the stream buffer while writing data, the stream will be expanded so the succeeding data can be written, so unless an error occurs, the size of bytes written will always equal to the size of bytes required by the user to write. However, if an error occurs while writing data, some of the data may have already be written while others are not, in such case the write_bytes reported by system may not be equal to size specified by the user.","title":"Luna::IStream::write"},{"location":"api/struct_luna_1_1_i_stream_1ae2de26864471bdff2d8f7d49ac47da39/#lunaistreamwrite","text":"virtual RV write(const void *buffer, usize size, usize *write_bytes=nullptr)=0","title":"Luna::IStream::write"},{"location":"api/struct_luna_1_1_i_stream_1ae2de26864471bdff2d8f7d49ac47da39/#overview","text":"Writes data to the current position the cursor is pointing to and offsets the cursor back. This call returns after all data have been written.","title":"Overview"},{"location":"api/struct_luna_1_1_i_stream_1ae2de26864471bdff2d8f7d49ac47da39/#parameters","text":"","title":"Parameters"},{"location":"api/struct_luna_1_1_i_stream_1ae2de26864471bdff2d8f7d49ac47da39/#buffer","text":"The buffer that holds the data to be written.","title":"buffer"},{"location":"api/struct_luna_1_1_i_stream_1ae2de26864471bdff2d8f7d49ac47da39/#size","text":"The size, in bytes, to write to the stream.","title":"size"},{"location":"api/struct_luna_1_1_i_stream_1ae2de26864471bdff2d8f7d49ac47da39/#write_bytes","text":"If not nullptr , the system sets the actual size of bytes being written to this parameter. Mostly, if the cursor goes beyond the end of the stream buffer while writing data, the stream will be expanded so the succeeding data can be written, so unless an error occurs, the size of bytes written will always equal to the size of bytes required by the user to write. However, if an error occurs while writing data, some of the data may have already be written while others are not, in such case the write_bytes reported by system may not be equal to size specified by the user.","title":"write_bytes"},{"location":"api/struct_luna_1_1_i_thread/","text":"Luna::IThread Represents a system thread object. interface Luna::IThread : public virtual IWaitable Overview @threadsafe Functions virtual void set_priority(ThreadPriority priority)=0 Sets thread priority.","title":"Luna::IThread"},{"location":"api/struct_luna_1_1_i_thread/#lunaithread","text":"Represents a system thread object. interface Luna::IThread : public virtual IWaitable","title":"Luna::IThread"},{"location":"api/struct_luna_1_1_i_thread/#overview","text":"@threadsafe","title":"Overview"},{"location":"api/struct_luna_1_1_i_thread/#functions","text":"virtual void set_priority(ThreadPriority priority)=0 Sets thread priority.","title":"Functions"},{"location":"api/struct_luna_1_1_i_thread_1aec42e8e37d89d9a40253880a5cc74d92/","text":"Luna::IThread::set_priority virtual void set_priority(ThreadPriority priority)=0 Sets thread priority. Overview Parameters priority The new priority of the thread.","title":"Luna::IThread::set_priority"},{"location":"api/struct_luna_1_1_i_thread_1aec42e8e37d89d9a40253880a5cc74d92/#lunaithreadset_priority","text":"virtual void set_priority(ThreadPriority priority)=0 Sets thread priority.","title":"Luna::IThread::set_priority"},{"location":"api/struct_luna_1_1_i_thread_1aec42e8e37d89d9a40253880a5cc74d92/#overview","text":"","title":"Overview"},{"location":"api/struct_luna_1_1_i_thread_1aec42e8e37d89d9a40253880a5cc74d92/#parameters","text":"","title":"Parameters"},{"location":"api/struct_luna_1_1_i_thread_1aec42e8e37d89d9a40253880a5cc74d92/#priority","text":"The new priority of the thread.","title":"priority"},{"location":"api/struct_luna_1_1_index_tuple/","text":"Luna::IndexTuple Used to unpack tuple when using tuple to store function arguments. struct Luna::IndexTuple","title":"Luna::IndexTuple"},{"location":"api/struct_luna_1_1_index_tuple/#lunaindextuple","text":"Used to unpack tuple when using tuple to store function arguments. struct Luna::IndexTuple","title":"Luna::IndexTuple"},{"location":"api/struct_luna_1_1_interface/","text":"Luna::Interface The base interface for all other interfaces in Luna SDK. interface Luna::Interface Functions virtual object_t get_object()=0 Gets the pointer to the boxed object that implements this interface.","title":"Luna::Interface"},{"location":"api/struct_luna_1_1_interface/#lunainterface","text":"The base interface for all other interfaces in Luna SDK. interface Luna::Interface","title":"Luna::Interface"},{"location":"api/struct_luna_1_1_interface/#functions","text":"virtual object_t get_object()=0 Gets the pointer to the boxed object that implements this interface.","title":"Functions"},{"location":"api/struct_luna_1_1_interface_1aac55ad90c6087dc9330066b4d5c07a83/","text":"Luna::Interface::get_object virtual object_t get_object()=0 Gets the pointer to the boxed object that implements this interface. Overview Return value Returns the pointer to the boxed object.","title":"Luna::Interface::get_object"},{"location":"api/struct_luna_1_1_interface_1aac55ad90c6087dc9330066b4d5c07a83/#lunainterfaceget_object","text":"virtual object_t get_object()=0 Gets the pointer to the boxed object that implements this interface.","title":"Luna::Interface::get_object"},{"location":"api/struct_luna_1_1_interface_1aac55ad90c6087dc9330066b4d5c07a83/#overview","text":"","title":"Overview"},{"location":"api/struct_luna_1_1_interface_1aac55ad90c6087dc9330066b4d5c07a83/#return-value","text":"Returns the pointer to the boxed object.","title":"Return value"},{"location":"api/struct_luna_1_1_interface_impl_desc/","text":"Luna::InterfaceImplDesc Describes arguments to register an interface implementation. struct Luna::InterfaceImplDesc Properties Guid type_guid The GUID of the type that implements the interface. Guid interface_guid The GUID of the interface. void ( cast_to_interface) (object_t obj) The function pointer called to cast the object pointer to the specified interface pointer.","title":"Luna::InterfaceImplDesc"},{"location":"api/struct_luna_1_1_interface_impl_desc/#lunainterfaceimpldesc","text":"Describes arguments to register an interface implementation. struct Luna::InterfaceImplDesc","title":"Luna::InterfaceImplDesc"},{"location":"api/struct_luna_1_1_interface_impl_desc/#properties","text":"Guid type_guid The GUID of the type that implements the interface. Guid interface_guid The GUID of the interface. void ( cast_to_interface) (object_t obj) The function pointer called to cast the object pointer to the specified interface pointer.","title":"Properties"},{"location":"api/struct_luna_1_1_interface_impl_desc_1a6bfe519e6f8338499457ee013993f8ce/","text":"Luna::InterfaceImplDesc::interface_guid Guid interface_guid The GUID of the interface.","title":"Luna::InterfaceImplDesc::interface_guid"},{"location":"api/struct_luna_1_1_interface_impl_desc_1a6bfe519e6f8338499457ee013993f8ce/#lunainterfaceimpldescinterface_guid","text":"Guid interface_guid The GUID of the interface.","title":"Luna::InterfaceImplDesc::interface_guid"},{"location":"api/struct_luna_1_1_interface_impl_desc_1ae9a2220557b7ef8a4db71662ce9becea/","text":"Luna::InterfaceImplDesc::type_guid Guid type_guid The GUID of the type that implements the interface.","title":"Luna::InterfaceImplDesc::type_guid"},{"location":"api/struct_luna_1_1_interface_impl_desc_1ae9a2220557b7ef8a4db71662ce9becea/#lunainterfaceimpldesctype_guid","text":"Guid type_guid The GUID of the type that implements the interface.","title":"Luna::InterfaceImplDesc::type_guid"},{"location":"api/struct_luna_1_1_interface_impl_desc_1aeb605cc0af8fe3560a6bd05a635cd142/","text":"Luna::InterfaceImplDesc::cast_to_interface void *(* cast_to_interface) (object_t obj) The function pointer called to cast the object pointer to the specified interface pointer.","title":"Luna::InterfaceImplDesc::cast_to_interface"},{"location":"api/struct_luna_1_1_interface_impl_desc_1aeb605cc0af8fe3560a6bd05a635cd142/#lunainterfaceimpldesccast_to_interface","text":"void *(* cast_to_interface) (object_t obj) The function pointer called to cast the object pointer to the specified interface pointer.","title":"Luna::InterfaceImplDesc::cast_to_interface"},{"location":"api/struct_luna_1_1_memory_layout_member/","text":"Luna::MemoryLayoutMember Describes one member used by memory layouting algorithms. struct Luna::MemoryLayoutMember Properties usize size The size of this member in bytes. This property is filled by the user before calculating memory layouts. usize alignment The alignment requirement of this member in bytes. This property is filled by the user before calculating memory layouts. usize offset","title":"Luna::MemoryLayoutMember"},{"location":"api/struct_luna_1_1_memory_layout_member/#lunamemorylayoutmember","text":"Describes one member used by memory layouting algorithms. struct Luna::MemoryLayoutMember","title":"Luna::MemoryLayoutMember"},{"location":"api/struct_luna_1_1_memory_layout_member/#properties","text":"usize size The size of this member in bytes. This property is filled by the user before calculating memory layouts. usize alignment The alignment requirement of this member in bytes. This property is filled by the user before calculating memory layouts. usize offset","title":"Properties"},{"location":"api/struct_luna_1_1_memory_layout_member_1a59f6400efda18d25d7b3cf3c2e7a3d3d/","text":"Luna::MemoryLayoutMember::size usize size The size of this member in bytes. This property is filled by the user before calculating memory layouts.","title":"Luna::MemoryLayoutMember::size"},{"location":"api/struct_luna_1_1_memory_layout_member_1a59f6400efda18d25d7b3cf3c2e7a3d3d/#lunamemorylayoutmembersize","text":"usize size The size of this member in bytes. This property is filled by the user before calculating memory layouts.","title":"Luna::MemoryLayoutMember::size"},{"location":"api/struct_luna_1_1_memory_layout_member_1a84c18f6f6874b7f530f0c3ffe156e3fb/","text":"Luna::MemoryLayoutMember::alignment usize alignment The alignment requirement of this member in bytes. This property is filled by the user before calculating memory layouts.","title":"Luna::MemoryLayoutMember::alignment"},{"location":"api/struct_luna_1_1_memory_layout_member_1a84c18f6f6874b7f530f0c3ffe156e3fb/#lunamemorylayoutmemberalignment","text":"usize alignment The alignment requirement of this member in bytes. This property is filled by the user before calculating memory layouts.","title":"Luna::MemoryLayoutMember::alignment"},{"location":"api/struct_luna_1_1_memory_layout_member_1af54fc49734a070e8a5568b09bb23a9d5/","text":"Luna::MemoryLayoutMember::offset usize offset Overview The offset of this member in bytes. This property is filled by the memory layouting algorithm and can remain uninitialized when calculating memory layouts.","title":"Luna::MemoryLayoutMember::offset"},{"location":"api/struct_luna_1_1_memory_layout_member_1af54fc49734a070e8a5568b09bb23a9d5/#lunamemorylayoutmemberoffset","text":"usize offset","title":"Luna::MemoryLayoutMember::offset"},{"location":"api/struct_luna_1_1_memory_layout_member_1af54fc49734a070e8a5568b09bb23a9d5/#overview","text":"The offset of this member in bytes. This property is filled by the memory layouting algorithm and can remain uninitialized when calculating memory layouts.","title":"Overview"},{"location":"api/struct_luna_1_1_module_desc/","text":"Luna::ModuleDesc Module description structure. struct Luna::ModuleDesc Overview This shall be allocated on static memory and being kept valid during the application lifetime. Properties c8 reserved[32] Used by the Runtime. The user should not change these memory. const c8* name The name of the module. The lifetime of the string should be equal to the lifetime of the module. const c8* dependencies A string that records modules this module depends on. module_init_func_t* init_func The initialize function of the module. module_close_func_t* close_func The close function of the module.","title":"Luna::ModuleDesc"},{"location":"api/struct_luna_1_1_module_desc/#lunamoduledesc","text":"Module description structure. struct Luna::ModuleDesc","title":"Luna::ModuleDesc"},{"location":"api/struct_luna_1_1_module_desc/#overview","text":"This shall be allocated on static memory and being kept valid during the application lifetime.","title":"Overview"},{"location":"api/struct_luna_1_1_module_desc/#properties","text":"c8 reserved[32] Used by the Runtime. The user should not change these memory. const c8* name The name of the module. The lifetime of the string should be equal to the lifetime of the module. const c8* dependencies A string that records modules this module depends on. module_init_func_t* init_func The initialize function of the module. module_close_func_t* close_func The close function of the module.","title":"Properties"},{"location":"api/struct_luna_1_1_module_desc_1a0410004c8e1030f0be3c2c6f692ed685/","text":"Luna::ModuleDesc::close_func module_close_func_t* close_func The close function of the module. Overview This can be nullptr , which behaves like an empty close function.","title":"Luna::ModuleDesc::close_func"},{"location":"api/struct_luna_1_1_module_desc_1a0410004c8e1030f0be3c2c6f692ed685/#lunamoduledescclose_func","text":"module_close_func_t* close_func The close function of the module.","title":"Luna::ModuleDesc::close_func"},{"location":"api/struct_luna_1_1_module_desc_1a0410004c8e1030f0be3c2c6f692ed685/#overview","text":"This can be nullptr , which behaves like an empty close function.","title":"Overview"},{"location":"api/struct_luna_1_1_module_desc_1a7d426a60e33a98255d2a2e5f018cff27/","text":"Luna::ModuleDesc::dependencies const c8* dependencies A string that records modules this module depends on. Overview the lifetime of the module. In case that multiple modules are required, use semicolons(;) to separate them (for example: \"Core;Input;Gfx\"). There should not be any semicolon after the last item in the string. Dependencies to Runtime should not be listed here. The Runtime is always initialized before any other module gets initialized.","title":"Luna::ModuleDesc::dependencies"},{"location":"api/struct_luna_1_1_module_desc_1a7d426a60e33a98255d2a2e5f018cff27/#lunamoduledescdependencies","text":"const c8* dependencies A string that records modules this module depends on.","title":"Luna::ModuleDesc::dependencies"},{"location":"api/struct_luna_1_1_module_desc_1a7d426a60e33a98255d2a2e5f018cff27/#overview","text":"the lifetime of the module. In case that multiple modules are required, use semicolons(;) to separate them (for example: \"Core;Input;Gfx\"). There should not be any semicolon after the last item in the string. Dependencies to Runtime should not be listed here. The Runtime is always initialized before any other module gets initialized.","title":"Overview"},{"location":"api/struct_luna_1_1_module_desc_1aa4599232e3e8acf0218788de720c9439/","text":"Luna::ModuleDesc::reserved c8 reserved[32] Used by the Runtime. The user should not change these memory.","title":"Luna::ModuleDesc::reserved"},{"location":"api/struct_luna_1_1_module_desc_1aa4599232e3e8acf0218788de720c9439/#lunamoduledescreserved","text":"c8 reserved[32] Used by the Runtime. The user should not change these memory.","title":"Luna::ModuleDesc::reserved"},{"location":"api/struct_luna_1_1_module_desc_1ac3c3fcfd83b0007172bb0cd49e4f9b44/","text":"Luna::ModuleDesc::init_func module_init_func_t* init_func The initialize function of the module. Overview This can be nullptr , which behaves the same as returning RV() directly.","title":"Luna::ModuleDesc::init_func"},{"location":"api/struct_luna_1_1_module_desc_1ac3c3fcfd83b0007172bb0cd49e4f9b44/#lunamoduledescinit_func","text":"module_init_func_t* init_func The initialize function of the module.","title":"Luna::ModuleDesc::init_func"},{"location":"api/struct_luna_1_1_module_desc_1ac3c3fcfd83b0007172bb0cd49e4f9b44/#overview","text":"This can be nullptr , which behaves the same as returning RV() directly.","title":"Overview"},{"location":"api/struct_luna_1_1_module_desc_1acd5365440f9f8784729838aa744e02c2/","text":"Luna::ModuleDesc::name const c8* name The name of the module. The lifetime of the string should be equal to the lifetime of the module.","title":"Luna::ModuleDesc::name"},{"location":"api/struct_luna_1_1_module_desc_1acd5365440f9f8784729838aa744e02c2/#lunamoduledescname","text":"const c8* name The name of the module. The lifetime of the string should be equal to the lifetime of the module.","title":"Luna::ModuleDesc::name"},{"location":"api/struct_luna_1_1_pair/","text":"Luna::Pair Stores a pair of values. struct Luna::Pair Overview This struct is ABI-compatible and can be used as parameters for interface methods, whether by value, by pointer or by reference.","title":"Luna::Pair"},{"location":"api/struct_luna_1_1_pair/#lunapair","text":"Stores a pair of values. struct Luna::Pair","title":"Luna::Pair"},{"location":"api/struct_luna_1_1_pair/#overview","text":"This struct is ABI-compatible and can be used as parameters for interface methods, whether by value, by pointer or by reference.","title":"Overview"},{"location":"api/struct_luna_1_1_profiler_event/","text":"Luna::ProfilerEvent A emitted profiler event. struct Luna::ProfilerEvent Properties u64 timestamp The time that this. u64 id The event ID. IThread* thread The thread that submits this event. const void* data The user-defined event data.","title":"Luna::ProfilerEvent"},{"location":"api/struct_luna_1_1_profiler_event/#lunaprofilerevent","text":"A emitted profiler event. struct Luna::ProfilerEvent","title":"Luna::ProfilerEvent"},{"location":"api/struct_luna_1_1_profiler_event/#properties","text":"u64 timestamp The time that this. u64 id The event ID. IThread* thread The thread that submits this event. const void* data The user-defined event data.","title":"Properties"},{"location":"api/struct_luna_1_1_profiler_event_1a0d49d74db4c035719c3867723cf7e779/","text":"Luna::ProfilerEvent::data const void* data The user-defined event data.","title":"Luna::ProfilerEvent::data"},{"location":"api/struct_luna_1_1_profiler_event_1a0d49d74db4c035719c3867723cf7e779/#lunaprofilereventdata","text":"const void* data The user-defined event data.","title":"Luna::ProfilerEvent::data"},{"location":"api/struct_luna_1_1_profiler_event_1a4d2ed0dd669da51c1e248384e27cc2a7/","text":"Luna::ProfilerEvent::id u64 id The event ID.","title":"Luna::ProfilerEvent::id"},{"location":"api/struct_luna_1_1_profiler_event_1a4d2ed0dd669da51c1e248384e27cc2a7/#lunaprofilereventid","text":"u64 id The event ID.","title":"Luna::ProfilerEvent::id"},{"location":"api/struct_luna_1_1_profiler_event_1aadc697c6a8acc6c49459bb88dc082326/","text":"Luna::ProfilerEvent::timestamp u64 timestamp The time that this.","title":"Luna::ProfilerEvent::timestamp"},{"location":"api/struct_luna_1_1_profiler_event_1aadc697c6a8acc6c49459bb88dc082326/#lunaprofilereventtimestamp","text":"u64 timestamp The time that this.","title":"Luna::ProfilerEvent::timestamp"},{"location":"api/struct_luna_1_1_profiler_event_1aeb84deccabbe066a26fea2496295c40a/","text":"Luna::ProfilerEvent::thread IThread* thread The thread that submits this event.","title":"Luna::ProfilerEvent::thread"},{"location":"api/struct_luna_1_1_profiler_event_1aeb84deccabbe066a26fea2496295c40a/#lunaprofilereventthread","text":"IThread* thread The thread that submits this event.","title":"Luna::ProfilerEvent::thread"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_memory_allocate/","text":"Luna::ProfilerEventData::MemoryAllocate The memory allocation event data. struct Luna::ProfilerEventData::MemoryAllocate Properties void* ptr The memory pointer. usize size The size of the memory.","title":"Luna::ProfilerEventData::MemoryAllocate"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_memory_allocate/#lunaprofilereventdatamemoryallocate","text":"The memory allocation event data. struct Luna::ProfilerEventData::MemoryAllocate","title":"Luna::ProfilerEventData::MemoryAllocate"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_memory_allocate/#properties","text":"void* ptr The memory pointer. usize size The size of the memory.","title":"Properties"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_memory_allocate_1a59f6400efda18d25d7b3cf3c2e7a3d3d/","text":"Luna::ProfilerEventData::MemoryAllocate::size usize size The size of the memory.","title":"Luna::ProfilerEventData::MemoryAllocate::size"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_memory_allocate_1a59f6400efda18d25d7b3cf3c2e7a3d3d/#lunaprofilereventdatamemoryallocatesize","text":"usize size The size of the memory.","title":"Luna::ProfilerEventData::MemoryAllocate::size"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_memory_allocate_1add9af9569af79ec26dd741fb226b38ba/","text":"Luna::ProfilerEventData::MemoryAllocate::ptr void* ptr The memory pointer.","title":"Luna::ProfilerEventData::MemoryAllocate::ptr"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_memory_allocate_1add9af9569af79ec26dd741fb226b38ba/#lunaprofilereventdatamemoryallocateptr","text":"void* ptr The memory pointer.","title":"Luna::ProfilerEventData::MemoryAllocate::ptr"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_memory_deallocate/","text":"Luna::ProfilerEventData::MemoryDeallocate The memory deallocation event data. struct Luna::ProfilerEventData::MemoryDeallocate Properties void* ptr The memory pointer.","title":"Luna::ProfilerEventData::MemoryDeallocate"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_memory_deallocate/#lunaprofilereventdatamemorydeallocate","text":"The memory deallocation event data. struct Luna::ProfilerEventData::MemoryDeallocate","title":"Luna::ProfilerEventData::MemoryDeallocate"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_memory_deallocate/#properties","text":"void* ptr The memory pointer.","title":"Properties"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_memory_deallocate_1add9af9569af79ec26dd741fb226b38ba/","text":"Luna::ProfilerEventData::MemoryDeallocate::ptr void* ptr The memory pointer.","title":"Luna::ProfilerEventData::MemoryDeallocate::ptr"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_memory_deallocate_1add9af9569af79ec26dd741fb226b38ba/#lunaprofilereventdatamemorydeallocateptr","text":"void* ptr The memory pointer.","title":"Luna::ProfilerEventData::MemoryDeallocate::ptr"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_set_memory_domain/","text":"Luna::ProfilerEventData::SetMemoryDomain The set memory domain event data. struct Luna::ProfilerEventData::SetMemoryDomain Properties void* ptr The memory pointer. const c8 domain[1]","title":"Luna::ProfilerEventData::SetMemoryDomain"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_set_memory_domain/#lunaprofilereventdatasetmemorydomain","text":"The set memory domain event data. struct Luna::ProfilerEventData::SetMemoryDomain","title":"Luna::ProfilerEventData::SetMemoryDomain"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_set_memory_domain/#properties","text":"void* ptr The memory pointer. const c8 domain[1]","title":"Properties"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_set_memory_domain_1a74472a6556a749aa69a830de854e22d0/","text":"Luna::ProfilerEventData::SetMemoryDomain::domain const c8 domain[1] Overview The domain of the memory to set. The name of the memory to set. The string buffer is allocated along with this structure, and can be referred directly by referring this property. The string buffer is valid so long as this structure is valid.","title":"Luna::ProfilerEventData::SetMemoryDomain::domain"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_set_memory_domain_1a74472a6556a749aa69a830de854e22d0/#lunaprofilereventdatasetmemorydomaindomain","text":"const c8 domain[1]","title":"Luna::ProfilerEventData::SetMemoryDomain::domain"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_set_memory_domain_1a74472a6556a749aa69a830de854e22d0/#overview","text":"The domain of the memory to set. The name of the memory to set. The string buffer is allocated along with this structure, and can be referred directly by referring this property. The string buffer is valid so long as this structure is valid.","title":"Overview"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_set_memory_domain_1add9af9569af79ec26dd741fb226b38ba/","text":"Luna::ProfilerEventData::SetMemoryDomain::ptr void* ptr The memory pointer.","title":"Luna::ProfilerEventData::SetMemoryDomain::ptr"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_set_memory_domain_1add9af9569af79ec26dd741fb226b38ba/#lunaprofilereventdatasetmemorydomainptr","text":"void* ptr The memory pointer.","title":"Luna::ProfilerEventData::SetMemoryDomain::ptr"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_set_memory_name/","text":"Luna::ProfilerEventData::SetMemoryName The set memory name event data. struct Luna::ProfilerEventData::SetMemoryName Properties void* ptr The memory pointer. const c8 name[1]","title":"Luna::ProfilerEventData::SetMemoryName"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_set_memory_name/#lunaprofilereventdatasetmemoryname","text":"The set memory name event data. struct Luna::ProfilerEventData::SetMemoryName","title":"Luna::ProfilerEventData::SetMemoryName"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_set_memory_name/#properties","text":"void* ptr The memory pointer. const c8 name[1]","title":"Properties"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_set_memory_name_1add9af9569af79ec26dd741fb226b38ba/","text":"Luna::ProfilerEventData::SetMemoryName::ptr void* ptr The memory pointer.","title":"Luna::ProfilerEventData::SetMemoryName::ptr"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_set_memory_name_1add9af9569af79ec26dd741fb226b38ba/#lunaprofilereventdatasetmemorynameptr","text":"void* ptr The memory pointer.","title":"Luna::ProfilerEventData::SetMemoryName::ptr"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_set_memory_name_1af04a2329379487d786b35eeb82752945/","text":"Luna::ProfilerEventData::SetMemoryName::name const c8 name[1] Overview The name of the memory to set. The string buffer is allocated along with this structure, and can be referred directly by referring this property. The string buffer is valid so long as this structure is valid.","title":"Luna::ProfilerEventData::SetMemoryName::name"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_set_memory_name_1af04a2329379487d786b35eeb82752945/#lunaprofilereventdatasetmemorynamename","text":"const c8 name[1]","title":"Luna::ProfilerEventData::SetMemoryName::name"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_set_memory_name_1af04a2329379487d786b35eeb82752945/#overview","text":"The name of the memory to set. The string buffer is allocated along with this structure, and can be referred directly by referring this property. The string buffer is valid so long as this structure is valid.","title":"Overview"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_set_memory_type/","text":"Luna::ProfilerEventData::SetMemoryType The set memory type event data. struct Luna::ProfilerEventData::SetMemoryType Properties void* ptr The memory pointer. const c8 type[1]","title":"Luna::ProfilerEventData::SetMemoryType"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_set_memory_type/#lunaprofilereventdatasetmemorytype","text":"The set memory type event data. struct Luna::ProfilerEventData::SetMemoryType","title":"Luna::ProfilerEventData::SetMemoryType"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_set_memory_type/#properties","text":"void* ptr The memory pointer. const c8 type[1]","title":"Properties"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_set_memory_type_1a0e2ae9ca92f60c733065b2f0d58936bc/","text":"Luna::ProfilerEventData::SetMemoryType::type const c8 type[1] Overview The type of the memory to set. The name of the memory to set. The string buffer is allocated along with this structure, and can be referred directly by referring this property. The string buffer is valid so long as this structure is valid.","title":"Luna::ProfilerEventData::SetMemoryType::type"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_set_memory_type_1a0e2ae9ca92f60c733065b2f0d58936bc/#lunaprofilereventdatasetmemorytypetype","text":"const c8 type[1]","title":"Luna::ProfilerEventData::SetMemoryType::type"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_set_memory_type_1a0e2ae9ca92f60c733065b2f0d58936bc/#overview","text":"The type of the memory to set. The name of the memory to set. The string buffer is allocated along with this structure, and can be referred directly by referring this property. The string buffer is valid so long as this structure is valid.","title":"Overview"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_set_memory_type_1add9af9569af79ec26dd741fb226b38ba/","text":"Luna::ProfilerEventData::SetMemoryType::ptr void* ptr The memory pointer.","title":"Luna::ProfilerEventData::SetMemoryType::ptr"},{"location":"api/struct_luna_1_1_profiler_event_data_1_1_set_memory_type_1add9af9569af79ec26dd741fb226b38ba/#lunaprofilereventdatasetmemorytypeptr","text":"void* ptr The memory pointer.","title":"Luna::ProfilerEventData::SetMemoryType::ptr"},{"location":"api/struct_luna_1_1_r/","text":"Luna::R A wrapper object for the return value of one function that may fail. struct Luna::R Overview If the function succeeds, this object contains the return value; if the function fails, this object contains the error code so that it can be identified.","title":"Luna::R"},{"location":"api/struct_luna_1_1_r/#lunar","text":"A wrapper object for the return value of one function that may fail. struct Luna::R","title":"Luna::R"},{"location":"api/struct_luna_1_1_r/#overview","text":"If the function succeeds, this object contains the return value; if the function fails, this object contains the error code so that it can be identified.","title":"Overview"},{"location":"api/struct_luna_1_1_r_3_01void_01_4/","text":"Luna::R< void > Specification of R for void type. struct Luna::R< void >","title":"Luna::R< void >"},{"location":"api/struct_luna_1_1_r_3_01void_01_4/#lunar-void","text":"Specification of R for void type. struct Luna::R< void >","title":"Luna::R&lt; void &gt;"},{"location":"api/struct_luna_1_1_rect/","text":"Luna::Rect Rect is used to specify a region in the bitmap, texture or window. struct Luna::Rect","title":"Luna::Rect"},{"location":"api/struct_luna_1_1_rect/#lunarect","text":"Rect is used to specify a region in the bitmap, texture or window. struct Luna::Rect","title":"Luna::Rect"},{"location":"api/struct_luna_1_1_simd_1_1float3x4/","text":"Luna::Simd::float3x4 struct Luna::Simd::float3x4 Overview Represents one SIMD matrix type with 12 (3x4) packed single-precision (32-bit) floating-point elements. Based on the implementation, the matrix may be stored using two 256-bits registers (AVX), or four 128-bits registers (SSEn / Neon).","title":"Luna::Simd::float3x4"},{"location":"api/struct_luna_1_1_simd_1_1float3x4/#lunasimdfloat3x4","text":"struct Luna::Simd::float3x4","title":"Luna::Simd::float3x4"},{"location":"api/struct_luna_1_1_simd_1_1float3x4/#overview","text":"Represents one SIMD matrix type with 12 (3x4) packed single-precision (32-bit) floating-point elements. Based on the implementation, the matrix may be stored using two 256-bits registers (AVX), or four 128-bits registers (SSEn / Neon).","title":"Overview"},{"location":"api/struct_luna_1_1_simd_1_1float4x4/","text":"Luna::Simd::float4x4 struct Luna::Simd::float4x4 Overview Represents one SIMD matrix type with 16 (4x4) packed single-precision (32-bit) floating-point elements. Based on the implementation, the matrix may be stored using two 256-bits registers (AVX), or four 128-bits registers (SSEn / Neon).","title":"Luna::Simd::float4x4"},{"location":"api/struct_luna_1_1_simd_1_1float4x4/#lunasimdfloat4x4","text":"struct Luna::Simd::float4x4","title":"Luna::Simd::float4x4"},{"location":"api/struct_luna_1_1_simd_1_1float4x4/#overview","text":"Represents one SIMD matrix type with 16 (4x4) packed single-precision (32-bit) floating-point elements. Based on the implementation, the matrix may be stored using two 256-bits registers (AVX), or four 128-bits registers (SSEn / Neon).","title":"Overview"},{"location":"api/struct_luna_1_1_static_register_module/","text":"Luna::StaticRegisterModule One static module registration helper class that registers the specified module when being constructed. struct Luna::StaticRegisterModule Overview Do not use this structure directly, instead, use LUNA_STATIC_REGISTER_MODULE to register one module, which will define this structure internally.","title":"Luna::StaticRegisterModule"},{"location":"api/struct_luna_1_1_static_register_module/#lunastaticregistermodule","text":"One static module registration helper class that registers the specified module when being constructed. struct Luna::StaticRegisterModule","title":"Luna::StaticRegisterModule"},{"location":"api/struct_luna_1_1_static_register_module/#overview","text":"Do not use this structure directly, instead, use LUNA_STATIC_REGISTER_MODULE to register one module, which will define this structure internally.","title":"Overview"},{"location":"api/struct_luna_1_1_structure_property_desc/","text":"Luna::StructurePropertyDesc Describes one structure property. struct Luna::StructurePropertyDesc Properties Name name The property name. typeinfo_t type The property type. usize offset The offset, in bytes, from the beginning of the structure to the beginning of the property.","title":"Luna::StructurePropertyDesc"},{"location":"api/struct_luna_1_1_structure_property_desc/#lunastructurepropertydesc","text":"Describes one structure property. struct Luna::StructurePropertyDesc","title":"Luna::StructurePropertyDesc"},{"location":"api/struct_luna_1_1_structure_property_desc/#properties","text":"Name name The property name. typeinfo_t type The property type. usize offset The offset, in bytes, from the beginning of the structure to the beginning of the property.","title":"Properties"},{"location":"api/struct_luna_1_1_structure_property_desc_1a7082db574ba2d2d69ccafb060398b7d8/","text":"Luna::StructurePropertyDesc::name Name name The property name.","title":"Luna::StructurePropertyDesc::name"},{"location":"api/struct_luna_1_1_structure_property_desc_1a7082db574ba2d2d69ccafb060398b7d8/#lunastructurepropertydescname","text":"Name name The property name.","title":"Luna::StructurePropertyDesc::name"},{"location":"api/struct_luna_1_1_structure_property_desc_1a71e8784a2874f7b333c4ba3ab539a8d9/","text":"Luna::StructurePropertyDesc::type typeinfo_t type The property type.","title":"Luna::StructurePropertyDesc::type"},{"location":"api/struct_luna_1_1_structure_property_desc_1a71e8784a2874f7b333c4ba3ab539a8d9/#lunastructurepropertydesctype","text":"typeinfo_t type The property type.","title":"Luna::StructurePropertyDesc::type"},{"location":"api/struct_luna_1_1_structure_property_desc_1af54fc49734a070e8a5568b09bb23a9d5/","text":"Luna::StructurePropertyDesc::offset usize offset The offset, in bytes, from the beginning of the structure to the beginning of the property.","title":"Luna::StructurePropertyDesc::offset"},{"location":"api/struct_luna_1_1_structure_property_desc_1af54fc49734a070e8a5568b09bb23a9d5/#lunastructurepropertydescoffset","text":"usize offset The offset, in bytes, from the beginning of the structure to the beginning of the property.","title":"Luna::StructurePropertyDesc::offset"},{"location":"api/struct_luna_1_1_structure_type_desc/","text":"Luna::StructureTypeDesc Describes one structure type. struct Luna::StructureTypeDesc Properties Guid guid The GUID of the structure type. This should be unique for every type. Name name The name of the structure type. Name alias usize size The size of the structure type, this should include the size for the base type of this type. usize alignment The alignment of the structure type. typeinfo_t base_type The base type of this structure type. structure_ctor_t* ctor structure_dtor_t* dtor structure_copy_ctor_t* copy_ctor structure_move_ctor_t* move_ctor structure_copy_assign_t* copy_assign structure_move_assign_t* move_assign Span properties The properties of this structure type. bool trivially_relocatable","title":"Luna::StructureTypeDesc"},{"location":"api/struct_luna_1_1_structure_type_desc/#lunastructuretypedesc","text":"Describes one structure type. struct Luna::StructureTypeDesc","title":"Luna::StructureTypeDesc"},{"location":"api/struct_luna_1_1_structure_type_desc/#properties","text":"Guid guid The GUID of the structure type. This should be unique for every type. Name name The name of the structure type. Name alias usize size The size of the structure type, this should include the size for the base type of this type. usize alignment The alignment of the structure type. typeinfo_t base_type The base type of this structure type. structure_ctor_t* ctor structure_dtor_t* dtor structure_copy_ctor_t* copy_ctor structure_move_ctor_t* move_ctor structure_copy_assign_t* copy_assign structure_move_assign_t* move_assign Span properties The properties of this structure type. bool trivially_relocatable","title":"Properties"},{"location":"api/struct_luna_1_1_structure_type_desc_1a04e4a2d458c31f2a64e8669d8568ead9/","text":"Luna::StructureTypeDesc::base_type typeinfo_t base_type The base type of this structure type.","title":"Luna::StructureTypeDesc::base_type"},{"location":"api/struct_luna_1_1_structure_type_desc_1a04e4a2d458c31f2a64e8669d8568ead9/#lunastructuretypedescbase_type","text":"typeinfo_t base_type The base type of this structure type.","title":"Luna::StructureTypeDesc::base_type"},{"location":"api/struct_luna_1_1_structure_type_desc_1a0c8f65c9d3118ff62b1d40950e5154f8/","text":"Luna::StructureTypeDesc::guid Guid guid The GUID of the structure type. This should be unique for every type.","title":"Luna::StructureTypeDesc::guid"},{"location":"api/struct_luna_1_1_structure_type_desc_1a0c8f65c9d3118ff62b1d40950e5154f8/#lunastructuretypedescguid","text":"Guid guid The GUID of the structure type. This should be unique for every type.","title":"Luna::StructureTypeDesc::guid"},{"location":"api/struct_luna_1_1_structure_type_desc_1a49a2c551255183998b610cfabb0bc464/","text":"Luna::StructureTypeDesc::move_assign structure_move_assign_t* move_assign Overview The mvoe assignment operator for this type. If nullptr , the default move assignment operator will be used. See remarks of move_assign_type for default constructor behavior.","title":"Luna::StructureTypeDesc::move_assign"},{"location":"api/struct_luna_1_1_structure_type_desc_1a49a2c551255183998b610cfabb0bc464/#lunastructuretypedescmove_assign","text":"structure_move_assign_t* move_assign","title":"Luna::StructureTypeDesc::move_assign"},{"location":"api/struct_luna_1_1_structure_type_desc_1a49a2c551255183998b610cfabb0bc464/#overview","text":"The mvoe assignment operator for this type. If nullptr , the default move assignment operator will be used. See remarks of move_assign_type for default constructor behavior.","title":"Overview"},{"location":"api/struct_luna_1_1_structure_type_desc_1a59f6400efda18d25d7b3cf3c2e7a3d3d/","text":"Luna::StructureTypeDesc::size usize size The size of the structure type, this should include the size for the base type of this type.","title":"Luna::StructureTypeDesc::size"},{"location":"api/struct_luna_1_1_structure_type_desc_1a59f6400efda18d25d7b3cf3c2e7a3d3d/#lunastructuretypedescsize","text":"usize size The size of the structure type, this should include the size for the base type of this type.","title":"Luna::StructureTypeDesc::size"},{"location":"api/struct_luna_1_1_structure_type_desc_1a66e83256edf26122efc9735284bf5573/","text":"Luna::StructureTypeDesc::move_ctor structure_move_ctor_t* move_ctor Overview The move constructor for this type. If nullptr , the default move constructor will be used. See remarks of move_construct_type for default constructor behavior.","title":"Luna::StructureTypeDesc::move_ctor"},{"location":"api/struct_luna_1_1_structure_type_desc_1a66e83256edf26122efc9735284bf5573/#lunastructuretypedescmove_ctor","text":"structure_move_ctor_t* move_ctor","title":"Luna::StructureTypeDesc::move_ctor"},{"location":"api/struct_luna_1_1_structure_type_desc_1a66e83256edf26122efc9735284bf5573/#overview","text":"The move constructor for this type. If nullptr , the default move constructor will be used. See remarks of move_construct_type for default constructor behavior.","title":"Overview"},{"location":"api/struct_luna_1_1_structure_type_desc_1a7082db574ba2d2d69ccafb060398b7d8/","text":"Luna::StructureTypeDesc::name Name name The name of the structure type.","title":"Luna::StructureTypeDesc::name"},{"location":"api/struct_luna_1_1_structure_type_desc_1a7082db574ba2d2d69ccafb060398b7d8/#lunastructuretypedescname","text":"Name name The name of the structure type.","title":"Luna::StructureTypeDesc::name"},{"location":"api/struct_luna_1_1_structure_type_desc_1a7daacf4ed7ed76c8c18eb17f3ff4b1ed/","text":"Luna::StructureTypeDesc::copy_assign structure_copy_assign_t* copy_assign Overview The copy assignment operator for this type. If nullptr , the default copy assignment operator will be used. See remarks of copy_assign_type for default constructor behavior.","title":"Luna::StructureTypeDesc::copy_assign"},{"location":"api/struct_luna_1_1_structure_type_desc_1a7daacf4ed7ed76c8c18eb17f3ff4b1ed/#lunastructuretypedesccopy_assign","text":"structure_copy_assign_t* copy_assign","title":"Luna::StructureTypeDesc::copy_assign"},{"location":"api/struct_luna_1_1_structure_type_desc_1a7daacf4ed7ed76c8c18eb17f3ff4b1ed/#overview","text":"The copy assignment operator for this type. If nullptr , the default copy assignment operator will be used. See remarks of copy_assign_type for default constructor behavior.","title":"Overview"},{"location":"api/struct_luna_1_1_structure_type_desc_1a84c18f6f6874b7f530f0c3ffe156e3fb/","text":"Luna::StructureTypeDesc::alignment usize alignment The alignment of the structure type.","title":"Luna::StructureTypeDesc::alignment"},{"location":"api/struct_luna_1_1_structure_type_desc_1a84c18f6f6874b7f530f0c3ffe156e3fb/#lunastructuretypedescalignment","text":"usize alignment The alignment of the structure type.","title":"Luna::StructureTypeDesc::alignment"},{"location":"api/struct_luna_1_1_structure_type_desc_1a8b562d2692e5808232b9a65c240e6103/","text":"Luna::StructureTypeDesc::ctor structure_ctor_t* ctor Overview The constructor function for this type. If nullptr , the default constructor will be used. See remarks of construct_type for default constructor behavior.","title":"Luna::StructureTypeDesc::ctor"},{"location":"api/struct_luna_1_1_structure_type_desc_1a8b562d2692e5808232b9a65c240e6103/#lunastructuretypedescctor","text":"structure_ctor_t* ctor","title":"Luna::StructureTypeDesc::ctor"},{"location":"api/struct_luna_1_1_structure_type_desc_1a8b562d2692e5808232b9a65c240e6103/#overview","text":"The constructor function for this type. If nullptr , the default constructor will be used. See remarks of construct_type for default constructor behavior.","title":"Overview"},{"location":"api/struct_luna_1_1_structure_type_desc_1a8e5f4fefafed4000ee467f8de565955d/","text":"Luna::StructureTypeDesc::trivially_relocatable bool trivially_relocatable Overview Whether this structure is trivially relocatable. One structure is trivially relocatable if its content can be moved to another memory address using memcpy, and using the instance on new memory location behaves the same as the instance on old memory location.","title":"Luna::StructureTypeDesc::trivially_relocatable"},{"location":"api/struct_luna_1_1_structure_type_desc_1a8e5f4fefafed4000ee467f8de565955d/#lunastructuretypedesctrivially_relocatable","text":"bool trivially_relocatable","title":"Luna::StructureTypeDesc::trivially_relocatable"},{"location":"api/struct_luna_1_1_structure_type_desc_1a8e5f4fefafed4000ee467f8de565955d/#overview","text":"Whether this structure is trivially relocatable. One structure is trivially relocatable if its content can be moved to another memory address using memcpy, and using the instance on new memory location behaves the same as the instance on old memory location.","title":"Overview"},{"location":"api/struct_luna_1_1_structure_type_desc_1a9b43bf1a828e7baefd0522a2563c66f2/","text":"Luna::StructureTypeDesc::properties Span<const StructurePropertyDesc> properties The properties of this structure type.","title":"Luna::StructureTypeDesc::properties"},{"location":"api/struct_luna_1_1_structure_type_desc_1a9b43bf1a828e7baefd0522a2563c66f2/#lunastructuretypedescproperties","text":"Span<const StructurePropertyDesc> properties The properties of this structure type.","title":"Luna::StructureTypeDesc::properties"},{"location":"api/struct_luna_1_1_structure_type_desc_1aa498db50ab9c3d7f9f84c97b8c24ac63/","text":"Luna::StructureTypeDesc::dtor structure_dtor_t* dtor Overview The destructor function for this type. If nullptr , the default destructor will be used. See remarks of destruct_type for default constructor behavior.","title":"Luna::StructureTypeDesc::dtor"},{"location":"api/struct_luna_1_1_structure_type_desc_1aa498db50ab9c3d7f9f84c97b8c24ac63/#lunastructuretypedescdtor","text":"structure_dtor_t* dtor","title":"Luna::StructureTypeDesc::dtor"},{"location":"api/struct_luna_1_1_structure_type_desc_1aa498db50ab9c3d7f9f84c97b8c24ac63/#overview","text":"The destructor function for this type. If nullptr , the default destructor will be used. See remarks of destruct_type for default constructor behavior.","title":"Overview"},{"location":"api/struct_luna_1_1_structure_type_desc_1aab3519e6b2915ade2b650f777b994121/","text":"Luna::StructureTypeDesc::alias Name alias Overview The alias of the structure type. This can be empty. The alias is used to identify types with the same name. This can be used for generic specialization types.","title":"Luna::StructureTypeDesc::alias"},{"location":"api/struct_luna_1_1_structure_type_desc_1aab3519e6b2915ade2b650f777b994121/#lunastructuretypedescalias","text":"Name alias","title":"Luna::StructureTypeDesc::alias"},{"location":"api/struct_luna_1_1_structure_type_desc_1aab3519e6b2915ade2b650f777b994121/#overview","text":"The alias of the structure type. This can be empty. The alias is used to identify types with the same name. This can be used for generic specialization types.","title":"Overview"},{"location":"api/struct_luna_1_1_structure_type_desc_1abf45ac6225b448e989e041b420830949/","text":"Luna::StructureTypeDesc::copy_ctor structure_copy_ctor_t* copy_ctor Overview The copy constructor for this type. If nullptr , the default copy constructor will be used. See remarks of copy_construct_type for default constructor behavior.","title":"Luna::StructureTypeDesc::copy_ctor"},{"location":"api/struct_luna_1_1_structure_type_desc_1abf45ac6225b448e989e041b420830949/#lunastructuretypedesccopy_ctor","text":"structure_copy_ctor_t* copy_ctor","title":"Luna::StructureTypeDesc::copy_ctor"},{"location":"api/struct_luna_1_1_structure_type_desc_1abf45ac6225b448e989e041b420830949/#overview","text":"The copy constructor for this type. If nullptr , the default copy constructor will be used. See remarks of copy_construct_type for default constructor behavior.","title":"Overview"},{"location":"api/struct_luna_1_1_vec3_u/","text":"Luna::Vec3U Unaligned version of Float3. This is used for storing or transferring data between CPU/GPU and network only. struct Luna::Vec3U","title":"Luna::Vec3U"},{"location":"api/struct_luna_1_1_vec3_u/#lunavec3u","text":"Unaligned version of Float3. This is used for storing or transferring data between CPU/GPU and network only. struct Luna::Vec3U","title":"Luna::Vec3U"},{"location":"api/struct_luna_1_1equal__to/","text":"Luna::equal_to Function object for performing comparisons. Unless specialised, invokes operator== on type T. struct Luna::equal_to","title":"Luna::equal_to"},{"location":"api/struct_luna_1_1equal__to/#lunaequal_to","text":"Function object for performing comparisons. Unless specialised, invokes operator== on type T. struct Luna::equal_to","title":"Luna::equal_to"},{"location":"api/struct_luna_1_1hash/","text":"Luna::hash Function object that hashes the specified type into a usize hash code that can be used in hash map and hash set. struct Luna::hash","title":"Luna::hash"},{"location":"api/struct_luna_1_1hash/#lunahash","text":"Function object that hashes the specified type into a usize hash code that can be used in hash map and hash set. struct Luna::hash","title":"Luna::hash"},{"location":"api/struct_luna_1_1is__over__aligned/","text":"Luna::is_over_aligned Checks if the specified type's alignment requirement is greater than alignof(max_align_t). struct Luna::is_over_aligned : public non-virtual std::integral_constant< bool, impl::is_over_aligned< _Ty >()>","title":"Luna::is_over_aligned"},{"location":"api/struct_luna_1_1is__over__aligned/#lunais_over_aligned","text":"Checks if the specified type's alignment requirement is greater than alignof(max_align_t). struct Luna::is_over_aligned : public non-virtual std::integral_constant< bool, impl::is_over_aligned< _Ty >()>","title":"Luna::is_over_aligned"},{"location":"api/struct_luna_1_1is__trivially__relocatable/","text":"Luna::is_trivially_relocatable struct Luna::is_trivially_relocatable : public non-virtual std::integral_constant< bool, true > Overview Checks if the specified type can be trivially relocatable. One object is trivially relocatable if the data of one well-constructed instance of object can be copied to a new uninitialized memory by bitwise copy (for example, memcpy , memmove or realloc ) and the new copied object behaves the same as the original object, such copy is called a \"relocating operation\". After the operation, the original memory for the object is treated as uninitialized and does not have destructor called before it is freed. If one object can be trivially relocated, then when the memory that holding the object needs to be reallocated (for example when the container needs to expand its capacity), it performs memcpy , memmove or any other bitwise copy algorithms directly on the data without any move constructors and destructors being called. If one object cannot be trivially relocated, then the relocating operation will call the move constructor for the object on the new memory (passing the old object as rvalue reference), then call the destructor for the old object to properly destruct itself before freeing the memory for the old object. All objects are trivially relocatable unless the user explicitly creates a template specialization that evaluates this to false_type for the object that cannot be trivially relocated. In fact, the case that one type cannot be trivially relocatable is very rare, this only happens if the type holds a pointer to this and needs to update the pointer if the object is relocated.","title":"Luna::is_trivially_relocatable"},{"location":"api/struct_luna_1_1is__trivially__relocatable/#lunais_trivially_relocatable","text":"struct Luna::is_trivially_relocatable : public non-virtual std::integral_constant< bool, true >","title":"Luna::is_trivially_relocatable"},{"location":"api/struct_luna_1_1is__trivially__relocatable/#overview","text":"Checks if the specified type can be trivially relocatable. One object is trivially relocatable if the data of one well-constructed instance of object can be copied to a new uninitialized memory by bitwise copy (for example, memcpy , memmove or realloc ) and the new copied object behaves the same as the original object, such copy is called a \"relocating operation\". After the operation, the original memory for the object is treated as uninitialized and does not have destructor called before it is freed. If one object can be trivially relocated, then when the memory that holding the object needs to be reallocated (for example when the container needs to expand its capacity), it performs memcpy , memmove or any other bitwise copy algorithms directly on the data without any move constructors and destructors being called. If one object cannot be trivially relocated, then the relocating operation will call the move constructor for the object on the new memory (passing the old object as rvalue reference), then call the destructor for the old object to properly destruct itself before freeing the memory for the old object. All objects are trivially relocatable unless the user explicitly creates a template specialization that evaluates this to false_type for the object that cannot be trivially relocated. In fact, the case that one type cannot be trivially relocatable is very rare, this only happens if the type holds a pointer to this and needs to update the pointer if the object is relocated.","title":"Overview"},{"location":"api/struct_luna_1_1less/","text":"Luna::less Function object for performing comparisons. Unless specialized, invokes operator< on type T. struct Luna::less","title":"Luna::less"},{"location":"api/struct_luna_1_1less/#lunaless","text":"Function object for performing comparisons. Unless specialized, invokes operator< on type T. struct Luna::less","title":"Luna::less"},{"location":"api/struct_luna_1_1typeof__t/","text":"Luna::typeof_t The functional obejct that can be overloaded to define custom behavior of typeof for user-defined types. struct Luna::typeof_t","title":"Luna::typeof_t"},{"location":"api/struct_luna_1_1typeof__t/#lunatypeof_t","text":"The functional obejct that can be overloaded to define custom behavior of typeof for user-defined types. struct Luna::typeof_t","title":"Luna::typeof_t"},{"location":"manual/basics/","text":"Basics This chapter describes basic concepts and features that the user should understand in order to use Luna SDK correctly and efficiently. All feathers described in this chapter are provided by the Runtime module of Luna SDK, which is the base module of Luna SDK and is included by all other modules implicitly.","title":"Basics"},{"location":"manual/basics/#basics","text":"This chapter describes basic concepts and features that the user should understand in order to use Luna SDK correctly and efficiently. All feathers described in this chapter are provided by the Runtime module of Luna SDK, which is the base module of Luna SDK and is included by all other modules implicitly.","title":"Basics"},{"location":"manual/basics/assertions/","text":"Assertions #include <Luna/Runtime/Assertions.hpp> Assertions are used to detect programming mistakes (or \"bugs\") when developing complex systems and modules. Unlike error handling that is used for run-time errors, assertions are used for errors that should never happen on correctly behaved systems and are expected to interrupt the program immediately when such error occurs, so the developer can get into the code to check the error quickly when an debugger is attached to the process. After the application is fully tested, all assertions should be disabled to increase performance. In Luna SDK, we separate programming mistakes to internal programming mistakes and external programming mistakes, and use different macros to handle them. Prefer assertions to throwing error codes when possible, since it simplifies the implementation, reduces the runtime cost and makes the error obvious. Use error codes only when the error cannot be completely solved during the development period. Assertions for internal programming mistakes Internal programming mistakes are mistakes caused by incorrectly implementing functions. Such mistakes should never happen if the function is correctly used by the user. luassert can be used to handle such internal programming mistakes. luassert firstly evaluates the value of the given expression, if the evaluated value is 0 , it calls assert_fail to report one error message then interrupts the program. luassert_msg is similar to luassert , but it allows the user to specify the message reported by assert_fail . lupanic is equal to luassert(false) , it interrupts the program immediately when being executed. The user can use lupanic to mark one position in the code that should never be reached in normal condition. lupanic_msg is similar to lupanic , but it allows the user to specify the message reported by assert_fail . All those four assertion macros take effect only in debug version of the program or library (controlled by LUNA_DEBUG macro, which is configured by xmake). If you want these macros to work in profile and release builds, use macros with _always suffix, like luassert_always , lupanic_always , luassert_msg_always and lupanic_msg_always . Assertions for external programming mistakes External programming mistakes are mistakes caused by programmers who use the function. Most functions have constraints on arguments and calling time, calling such functions with bad arguments (like out-of-range index) or at improper time (using one service before it is initialized) will result in undefined behavior that is hard to debug. Unlike internal programming mistakes, these mistakes are caused by programmers who uses the function, thus is impossible to be solved when implementing the function. For such case, lucheck and lucheck_msg can be used to check external programming mistakes. lucheck and lucheck_msg behave the same as luassert and luassert_msg . However, these two macros are not controlled by LUNA_DEBUG , but another macro called LUNA_ENABLE_CONTRACT_ASSERTION , which can be enabled by specifying contract_assertion when building the module with xmake. The module developer can place lucheck and lucheck_msg at the beginning of the function implementation to validate function arguments and calling time, and interrupts the program if the function is improperly called. With these macros, the developer of the module may ship two versions of libraries to the user, one for developing with the module, and another for releasing with the final product. The development version of the module can be compiled on release mode with contract_assertion switched on, so all luassert assertions get removed, but lucheck assertions are retained for the user, while the release version of the module will remove both luassert and lucheck for maximum performance.","title":"Assertions"},{"location":"manual/basics/assertions/#assertions","text":"#include <Luna/Runtime/Assertions.hpp> Assertions are used to detect programming mistakes (or \"bugs\") when developing complex systems and modules. Unlike error handling that is used for run-time errors, assertions are used for errors that should never happen on correctly behaved systems and are expected to interrupt the program immediately when such error occurs, so the developer can get into the code to check the error quickly when an debugger is attached to the process. After the application is fully tested, all assertions should be disabled to increase performance. In Luna SDK, we separate programming mistakes to internal programming mistakes and external programming mistakes, and use different macros to handle them. Prefer assertions to throwing error codes when possible, since it simplifies the implementation, reduces the runtime cost and makes the error obvious. Use error codes only when the error cannot be completely solved during the development period.","title":"Assertions"},{"location":"manual/basics/assertions/#assertions-for-internal-programming-mistakes","text":"Internal programming mistakes are mistakes caused by incorrectly implementing functions. Such mistakes should never happen if the function is correctly used by the user. luassert can be used to handle such internal programming mistakes. luassert firstly evaluates the value of the given expression, if the evaluated value is 0 , it calls assert_fail to report one error message then interrupts the program. luassert_msg is similar to luassert , but it allows the user to specify the message reported by assert_fail . lupanic is equal to luassert(false) , it interrupts the program immediately when being executed. The user can use lupanic to mark one position in the code that should never be reached in normal condition. lupanic_msg is similar to lupanic , but it allows the user to specify the message reported by assert_fail . All those four assertion macros take effect only in debug version of the program or library (controlled by LUNA_DEBUG macro, which is configured by xmake). If you want these macros to work in profile and release builds, use macros with _always suffix, like luassert_always , lupanic_always , luassert_msg_always and lupanic_msg_always .","title":"Assertions for internal programming mistakes"},{"location":"manual/basics/assertions/#assertions-for-external-programming-mistakes","text":"External programming mistakes are mistakes caused by programmers who use the function. Most functions have constraints on arguments and calling time, calling such functions with bad arguments (like out-of-range index) or at improper time (using one service before it is initialized) will result in undefined behavior that is hard to debug. Unlike internal programming mistakes, these mistakes are caused by programmers who uses the function, thus is impossible to be solved when implementing the function. For such case, lucheck and lucheck_msg can be used to check external programming mistakes. lucheck and lucheck_msg behave the same as luassert and luassert_msg . However, these two macros are not controlled by LUNA_DEBUG , but another macro called LUNA_ENABLE_CONTRACT_ASSERTION , which can be enabled by specifying contract_assertion when building the module with xmake. The module developer can place lucheck and lucheck_msg at the beginning of the function implementation to validate function arguments and calling time, and interrupts the program if the function is improperly called. With these macros, the developer of the module may ship two versions of libraries to the user, one for developing with the module, and another for releasing with the final product. The development version of the module can be compiled on release mode with contract_assertion switched on, so all luassert assertions get removed, but lucheck assertions are retained for the user, while the release version of the module will remove both luassert and lucheck for maximum performance.","title":"Assertions for external programming mistakes"},{"location":"manual/basics/basic_types/","text":"Basic Types Primitive types The following table lists all primitive typed designed by Luna SDK. Type Description C++ STD Equivalent u8 Unsigned 8-bit integer. std::uint8_t i8 Signed 8-bit integer. std::int8_t u16 Unsigned 16-bit integer. std::uint16_t i16 Signed 16-bit integer. std::int16_t u32 Unsigned 32-bit integer. std::uint32_t i32 Signed 32-bit integer. std::int32_t u64 Unsigned 64-bit integer. std::uint64_t i64 Signed 64-bit integer. std::int64_t usize Unsigned machine-sized integer. std::size_t isize Signed machine-sized integer. std::ptrdiff_t f32 32-bit floating-point number. float f64 64-bit floating-point number. double c8 8-bit character. char c16 16-bit character. chat16_t c32 32-bit character. char32_t Aliasing types of primitive types byte_t is an aliasing type of u8 that indicates one byte. You should use byte_t instead of u8 if you want to be clear that you are talking about bytes, not numbers, for example, in a binary stream ( byte_t* ). opaque_t is an aliasing type of void* that indicated one opaque pointer that should not be dereferenced by the user. Such pointers are usually used as handles to internal data structures, the user should pass opaque_t to functions provided by the system to manipulate it. InitializerList<T> is an aliasing type of std::initializer_list<_Ty> in Luna SDK. VarList is an aliasing type of va_list in Luna SDK. Containers #include <Luna/Runtime/Vector.hpp> #include <Luna/Runtime/List.hpp> #include <Luna/Runtime/HashMap.hpp> #include <Luna/Runtime/HashSet.hpp> #include <Luna/Runtime/UnorderedMap.hpp> #include <Luna/Runtime/UnorderedSet.hpp> #include <Luna/Runtime/UnorderedMultiMap.hpp> #include <Luna/Runtime/UnorderedMultiSet.hpp> #include <Luna/Runtime/SelfIndexedHashMap.hpp> #include <Luna/Runtime/SelfIndexedUnorderedMap.hpp> #include <Luna/Runtime/SelfIndexedUnorderedMultiMap.hpp> #include <Luna/Runtime/RingDeque.hpp> For compatibility and cross-platform consistency reasons, Luna SDK does not use C++ Standard Template Library (STD), but implements its own container types using APIs similar to those of STD. The following table lists all containers provided by Luna SDK. Container Type Description C++ STD Equivalent Vector<T> Dynamic array type. std::vector<T> List<T> Dynamic double-linked list type. std::list<T> HashMap<K, V> Closed hash map type using Robinhood Hashing. N/A HashSet<V> Closed hash set type using Robinhood Hashing. N/A UnorderedMap<K, V> Open hash map type. std::unordered_map<K, V> UnorderedSet<V> Open hash set type. std::unordered_set<V> UnorderedMultiMap<K, V> Open hash map type that allows elements with the same key. std::unordered_multimap<K, V> UnorderedMultiSet<V> Open hash map type that allows multiple insertions of the same elements. std::unordered_multiset<K, V> SelfIndexedHashMap<K, V, E> Closed hash map whose key type can be extracted from the value type. N/A SelfIndexedUnorderedMap<K, V, E> Open hash map whose key type can be extracted from the value type. N/A SelfIndexedUnorderedMultiMap<K, V, E> Open hash map whose key type can be extracted from the value type, and allows multiple insertions of the same elements. N/A RingDeque<T> Double-ended queue using ring buffering. std::deque<T> Self indexed map containers Self indexed map containers are used for elements whose key is a part of the value object. For example, given the following structure: struct Player { Name name; i32 hp; i32 mp; }; Now we want to use one map to store all player records using their name as the key. If we use normal HashMap or UnorderedMap container, every entry in the container will be saved as Pair<const Name, Player> , thus stores the player name twice. In such case, we can use SelfIndexedHashMap and SelfIndexedUnorderedMap instead. The self indexed hash map container does not store the key object directly, instead, it requires the user to provide a special functional object E , which will be called when the key is needed. The functional object E takes a reference to the value object of the map element, and should returns a value or reference to the key object of the element. In our example, we can implement E as below: struct PlayerExtractKey { const Name& operator()(const Player& val) const { return val.name; } }; Then we can define the self indexed map like so: #include <Luna/Runtime/SelfIndexedHashMap.hpp> namespace Luna { SelfIndexedHashMap<Name, Player, PlayerExtractKey> players; } When using self indexed map containers, the user must ensure that the key object is immutable for all elements in the container, or the behavior is undefined. BLOB #include <Luna/Runtime/Blob.hpp> BLOB refers to Binary Large OBject, which is a memory block with arbitrary data. In Luna SDK, we use Blob structure to represent one BLOB object. Blob can be used in many ways, but the common use for it is to store and transfer binary data. For example, load_file_data function returns a Blob object, which contains the data of the file. Span #include <Luna/Runtime/Span.hpp> Span is a template type that refers to one continuous sequence of instances. There are two types of spans in Luna SDK: fixed span and variable span. Fixed spans are spans whose size is decided at compile time, and cannot be changed. Such span only requires one pointer to the object range to be well defined, and the number of elements in the span should be declared as part of the type: i32 data[] = {3, 4, 5, 6, 7}; Span<i32, 3> range(data + 1); debug_printf(\"%d\", range.size()); // 3 for (i32 i : range) debug_printf(\"%d, \", i); // 4, 5, 6, range = Span<i32, 3>(data + 2); debug_printf(\"%d\", range.size()); // 3 for (i32 i : range) debug_printf(\"%d, \", i); // 5, 6, 7, Variable spans are spans whose size may change at run time. Such span requires both the pointer to the object range and the size of the range to be well defined: i32 data[] = {3, 4, 5, 6, 7}; Span<i32> range(data + 1), 3; debug_printf(\"%d\", range.size()); // 3 for (i32 i : range) debug_printf(\"%d, \", i); // 4, 5, 6, range = Span<i32>(data + 2, 2); debug_printf(\"%d\", range.size()); // 2 for (i32 i : range) debug_printf(\"%d, \", i); // 5, 6, Note that spans are NOT containers, they don't allocate memory to store the data, only stores pointers to the objects provided by the user. So use spans only when the original object sequence is valid. Prefer using Span<T> instead of C-style pointer and size pair when referring memory ranges. GUID #include <Luna/Runtime/Base.hpp> Globally Unique Identifier (GUID) is a algorithm-generated 128-bit integer identifier. In Luna SDK, GUIDs are represented by Guid type: struct Guid { u64 high; u64 low; }; Luna SDK supports generating GUID instances from the registry form ( xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx or {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx} ) at compile time: constexpr Guid test_id(\"{5cf28858-60b0-49f2-9674-5888fa7ad027}\"); static_assert(test_id.low == 10841387548328775719Ui64, \"Incorrect GUID values.\"); static_assert(test_id.high == 6697565509014014450Ui64, \"Incorrect GUID values.\"); GUIDs are used widely in Luna SDK for identifying assets, types, interfaces, objects and many other entities. Version type #include <Luna/Runtime/Base.hpp> Version represent the version of one application, module or any version-controlled entity. Every version is composed by three numbers: major , minor and patch : struct Version { u32 major; u32 minor; u32 patch; }; We suggest using the following rules to manage the version number: An increment of major version indicates a breaking change to the interface of the entity, so that existing codes, programs and services using the entity must be explicitly modified to use the newer version of the entity correctly. An increment of minor version indicates a non-breaking change to the interface of the entity, so that existing codes, programs and services can use the newer version of the entity correctly without any source-level modification. An increment of patch version indicates a internal change of the entity and should not affect the entity interface, so that existing codes, programs and services can use the newer version of the entity correctly without any source-level modification. Pair and tuple types #include <Luna/Runtime/Base.hpp> // For Pair. #include <Luna/Runtime/Tuple.hpp> // For Tuple. Pair<T1, T2> encapsulates one pair of elements with T1 and T2 type as the first and second element of the pair. Pair is mainly used by map containers to represent elements. Tuple<Tys...> is a generalization of Pair and may contain one or multiple elements. Elements in Tuple can be fetched by calling get<N>(tuple) function. This type is mainly used to store function arguments in functional programming. Path #include <Luna/Runtime/Path.hpp> Path is one kind of string that describes the location of one node in a hierarchical-based node tree, given that each node in the tree can be identified by a name string. One common use of Path is to represent the location of one file or directory in the file system. Path is represented by a root name (like C: ), plus a Vector of Name that stores nodes of the path. One path can be absolute or relative, which is identified by PathFlag::absolute . One relative path can be calculated by two paths, it can also be appended to another path to create a new path. Path can be created form one string, it can also be encoded to one string using the user-specified path separator.","title":"Basic Types"},{"location":"manual/basics/basic_types/#basic-types","text":"","title":"Basic Types"},{"location":"manual/basics/basic_types/#primitive-types","text":"The following table lists all primitive typed designed by Luna SDK. Type Description C++ STD Equivalent u8 Unsigned 8-bit integer. std::uint8_t i8 Signed 8-bit integer. std::int8_t u16 Unsigned 16-bit integer. std::uint16_t i16 Signed 16-bit integer. std::int16_t u32 Unsigned 32-bit integer. std::uint32_t i32 Signed 32-bit integer. std::int32_t u64 Unsigned 64-bit integer. std::uint64_t i64 Signed 64-bit integer. std::int64_t usize Unsigned machine-sized integer. std::size_t isize Signed machine-sized integer. std::ptrdiff_t f32 32-bit floating-point number. float f64 64-bit floating-point number. double c8 8-bit character. char c16 16-bit character. chat16_t c32 32-bit character. char32_t","title":"Primitive types"},{"location":"manual/basics/basic_types/#aliasing-types-of-primitive-types","text":"byte_t is an aliasing type of u8 that indicates one byte. You should use byte_t instead of u8 if you want to be clear that you are talking about bytes, not numbers, for example, in a binary stream ( byte_t* ). opaque_t is an aliasing type of void* that indicated one opaque pointer that should not be dereferenced by the user. Such pointers are usually used as handles to internal data structures, the user should pass opaque_t to functions provided by the system to manipulate it. InitializerList<T> is an aliasing type of std::initializer_list<_Ty> in Luna SDK. VarList is an aliasing type of va_list in Luna SDK.","title":"Aliasing types of primitive types"},{"location":"manual/basics/basic_types/#containers","text":"#include <Luna/Runtime/Vector.hpp> #include <Luna/Runtime/List.hpp> #include <Luna/Runtime/HashMap.hpp> #include <Luna/Runtime/HashSet.hpp> #include <Luna/Runtime/UnorderedMap.hpp> #include <Luna/Runtime/UnorderedSet.hpp> #include <Luna/Runtime/UnorderedMultiMap.hpp> #include <Luna/Runtime/UnorderedMultiSet.hpp> #include <Luna/Runtime/SelfIndexedHashMap.hpp> #include <Luna/Runtime/SelfIndexedUnorderedMap.hpp> #include <Luna/Runtime/SelfIndexedUnorderedMultiMap.hpp> #include <Luna/Runtime/RingDeque.hpp> For compatibility and cross-platform consistency reasons, Luna SDK does not use C++ Standard Template Library (STD), but implements its own container types using APIs similar to those of STD. The following table lists all containers provided by Luna SDK. Container Type Description C++ STD Equivalent Vector<T> Dynamic array type. std::vector<T> List<T> Dynamic double-linked list type. std::list<T> HashMap<K, V> Closed hash map type using Robinhood Hashing. N/A HashSet<V> Closed hash set type using Robinhood Hashing. N/A UnorderedMap<K, V> Open hash map type. std::unordered_map<K, V> UnorderedSet<V> Open hash set type. std::unordered_set<V> UnorderedMultiMap<K, V> Open hash map type that allows elements with the same key. std::unordered_multimap<K, V> UnorderedMultiSet<V> Open hash map type that allows multiple insertions of the same elements. std::unordered_multiset<K, V> SelfIndexedHashMap<K, V, E> Closed hash map whose key type can be extracted from the value type. N/A SelfIndexedUnorderedMap<K, V, E> Open hash map whose key type can be extracted from the value type. N/A SelfIndexedUnorderedMultiMap<K, V, E> Open hash map whose key type can be extracted from the value type, and allows multiple insertions of the same elements. N/A RingDeque<T> Double-ended queue using ring buffering. std::deque<T>","title":"Containers"},{"location":"manual/basics/basic_types/#self-indexed-map-containers","text":"Self indexed map containers are used for elements whose key is a part of the value object. For example, given the following structure: struct Player { Name name; i32 hp; i32 mp; }; Now we want to use one map to store all player records using their name as the key. If we use normal HashMap or UnorderedMap container, every entry in the container will be saved as Pair<const Name, Player> , thus stores the player name twice. In such case, we can use SelfIndexedHashMap and SelfIndexedUnorderedMap instead. The self indexed hash map container does not store the key object directly, instead, it requires the user to provide a special functional object E , which will be called when the key is needed. The functional object E takes a reference to the value object of the map element, and should returns a value or reference to the key object of the element. In our example, we can implement E as below: struct PlayerExtractKey { const Name& operator()(const Player& val) const { return val.name; } }; Then we can define the self indexed map like so: #include <Luna/Runtime/SelfIndexedHashMap.hpp> namespace Luna { SelfIndexedHashMap<Name, Player, PlayerExtractKey> players; } When using self indexed map containers, the user must ensure that the key object is immutable for all elements in the container, or the behavior is undefined.","title":"Self indexed map containers"},{"location":"manual/basics/basic_types/#blob","text":"#include <Luna/Runtime/Blob.hpp> BLOB refers to Binary Large OBject, which is a memory block with arbitrary data. In Luna SDK, we use Blob structure to represent one BLOB object. Blob can be used in many ways, but the common use for it is to store and transfer binary data. For example, load_file_data function returns a Blob object, which contains the data of the file.","title":"BLOB"},{"location":"manual/basics/basic_types/#span","text":"#include <Luna/Runtime/Span.hpp> Span is a template type that refers to one continuous sequence of instances. There are two types of spans in Luna SDK: fixed span and variable span. Fixed spans are spans whose size is decided at compile time, and cannot be changed. Such span only requires one pointer to the object range to be well defined, and the number of elements in the span should be declared as part of the type: i32 data[] = {3, 4, 5, 6, 7}; Span<i32, 3> range(data + 1); debug_printf(\"%d\", range.size()); // 3 for (i32 i : range) debug_printf(\"%d, \", i); // 4, 5, 6, range = Span<i32, 3>(data + 2); debug_printf(\"%d\", range.size()); // 3 for (i32 i : range) debug_printf(\"%d, \", i); // 5, 6, 7, Variable spans are spans whose size may change at run time. Such span requires both the pointer to the object range and the size of the range to be well defined: i32 data[] = {3, 4, 5, 6, 7}; Span<i32> range(data + 1), 3; debug_printf(\"%d\", range.size()); // 3 for (i32 i : range) debug_printf(\"%d, \", i); // 4, 5, 6, range = Span<i32>(data + 2, 2); debug_printf(\"%d\", range.size()); // 2 for (i32 i : range) debug_printf(\"%d, \", i); // 5, 6, Note that spans are NOT containers, they don't allocate memory to store the data, only stores pointers to the objects provided by the user. So use spans only when the original object sequence is valid. Prefer using Span<T> instead of C-style pointer and size pair when referring memory ranges.","title":"Span"},{"location":"manual/basics/basic_types/#guid","text":"#include <Luna/Runtime/Base.hpp> Globally Unique Identifier (GUID) is a algorithm-generated 128-bit integer identifier. In Luna SDK, GUIDs are represented by Guid type: struct Guid { u64 high; u64 low; }; Luna SDK supports generating GUID instances from the registry form ( xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx or {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx} ) at compile time: constexpr Guid test_id(\"{5cf28858-60b0-49f2-9674-5888fa7ad027}\"); static_assert(test_id.low == 10841387548328775719Ui64, \"Incorrect GUID values.\"); static_assert(test_id.high == 6697565509014014450Ui64, \"Incorrect GUID values.\"); GUIDs are used widely in Luna SDK for identifying assets, types, interfaces, objects and many other entities.","title":"GUID"},{"location":"manual/basics/basic_types/#version-type","text":"#include <Luna/Runtime/Base.hpp> Version represent the version of one application, module or any version-controlled entity. Every version is composed by three numbers: major , minor and patch : struct Version { u32 major; u32 minor; u32 patch; }; We suggest using the following rules to manage the version number: An increment of major version indicates a breaking change to the interface of the entity, so that existing codes, programs and services using the entity must be explicitly modified to use the newer version of the entity correctly. An increment of minor version indicates a non-breaking change to the interface of the entity, so that existing codes, programs and services can use the newer version of the entity correctly without any source-level modification. An increment of patch version indicates a internal change of the entity and should not affect the entity interface, so that existing codes, programs and services can use the newer version of the entity correctly without any source-level modification.","title":"Version type"},{"location":"manual/basics/basic_types/#pair-and-tuple-types","text":"#include <Luna/Runtime/Base.hpp> // For Pair. #include <Luna/Runtime/Tuple.hpp> // For Tuple. Pair<T1, T2> encapsulates one pair of elements with T1 and T2 type as the first and second element of the pair. Pair is mainly used by map containers to represent elements. Tuple<Tys...> is a generalization of Pair and may contain one or multiple elements. Elements in Tuple can be fetched by calling get<N>(tuple) function. This type is mainly used to store function arguments in functional programming.","title":"Pair and tuple types"},{"location":"manual/basics/basic_types/#path","text":"#include <Luna/Runtime/Path.hpp> Path is one kind of string that describes the location of one node in a hierarchical-based node tree, given that each node in the tree can be identified by a name string. One common use of Path is to represent the location of one file or directory in the file system. Path is represented by a root name (like C: ), plus a Vector of Name that stores nodes of the path. One path can be absolute or relative, which is identified by PathFlag::absolute . One relative path can be calculated by two paths, it can also be appended to another path to create a new path. Path can be created form one string, it can also be encoded to one string using the user-specified path separator.","title":"Path"},{"location":"manual/basics/boxed_objects/","text":"Boxed objects Boxed objects are dynamic allocated objects managed by Luna SDK, so that they have the following features: The lifetime of boxed objects are managed by reference-counting. Real-time type identification (RTTI) can be used to check the type of boxed objects, and can be used to perform dynamic type casting safely. Boxed objects can implement interfaces . To implement such features, every boxed object will have one Object Header allocated along with the object data, and is used to record the object metadata like type and reference counter. Boxed objects should also be property referred using smart pointers ( Ref<T> for typed boxed object and ObjRef for type-less boxed object) so that their reference counter can be properly maintained. Registering boxed type #include <Luna/Runtime/Object.hpp> One type must be registered to the type system to be used for creating boxed objects. If you want to register one type solely for creating boxed objects, you may use register_boxed_type instead of calling register_struct_type directly. Managing boxed object manually #include <Luna/Runtime/Object.hpp> Use object_alloc to allocate one boxed object. This call will allocate memory for the boxed object and the object header, initialize the object header, and returns one pointer to the allocated boxed object as object_t , which is an aliasing type of void* . The return pointer can be reinterpreted to the pointer of the required type directly, and it should be passed to all other boxed object management APIs. The object returned by object_alloc is not initialized, the user should then call constructors of the specified type manually to construct the object. Boxed objects implement both strong reference counting and weak reference counting. Use object_retain , object_release to increase and decrease the strong reference counter, and object_retain_weak , object_release_weak to increase and decrease the weak reference counter. One object will have 1 strong reference and 0 weak reference when allocated. If the strong reference counter value drops to 0 , the destructor of the object will be called. If the weak reference counter is not 0 when the object is being destructed, the object will be marked as expired , you can call object_expired to check whether one object is expired. One expired object cannot be used, the only valid operation for it is to release its weak references. The memory for one boxed object will be freed if both the strong and weak reference counter values drop to 0 . Managing boxed object automatically #include <Luna/Runtime/Ref.hpp> In most of the time, you don't need to manage boxed object manually. You can use new_object to create one boxed object directly like memnew , this function allocates one boxed object, and initializes it using user-provided arguments. new_object returns one Ref<T> smart pointer, which represents one strong reference to the object. There are four smart pointers provided by Luna SDK: Ref<T> for strong references to typed boxed objects. ObjRef for strong references to type-less boxed objects, which can refer to any boxed object. WeakRef<T> for weak references to typed boxed objects. WeakObjRef for weak references to type-less boxed objects. All smart pointers decrease the reference counter value automatically when being destructed, so the user does not need to handle this manually. Coping one smart pointer object only increase the reference counter value of the object, the object itself is not copied. You can create one weak reference smart pointer object by casting from one strong reference smart pointer directly, but you should call pin on one weak reference smart pointer to fetch one strong reference smart pointer from it, which will return nullptr if failed. The weak smart pointer will be reset to nullptr automatically when the object is expired and the user calls get on the smart pointer. Run-time type identification and dynamic casting #include <Luna/Runtime/Object.hpp> Luna SDK uses object_t to represent one type-less pointer to one boxed object. It is not safe to cast one typeinfo_t to one concrete typed pointer without checking whether the object type conforms to the pointer type specified. Luna SDK provides run-time type identification (RTTI) for all boxed objects to perform type casting safely at run time. Use get_object_type on object_t to fetch the real type of the object. This function returns one typeinfo_t directly, so it is suitable if you want to inspect the type to perform some special operations. Use object_is_type to check whether the given object conforms to the specified type, that is, either the object is the specified type, or the object is one type that derives from the specified type. Use this function if you want to perform dynamic casting safely like dynamic_cast (which cannot be used in Luna SDK). Any typed pointer to one boxed object can be casted to object_t without any run-time cost.","title":"Boxed Objects"},{"location":"manual/basics/boxed_objects/#boxed-objects","text":"Boxed objects are dynamic allocated objects managed by Luna SDK, so that they have the following features: The lifetime of boxed objects are managed by reference-counting. Real-time type identification (RTTI) can be used to check the type of boxed objects, and can be used to perform dynamic type casting safely. Boxed objects can implement interfaces . To implement such features, every boxed object will have one Object Header allocated along with the object data, and is used to record the object metadata like type and reference counter. Boxed objects should also be property referred using smart pointers ( Ref<T> for typed boxed object and ObjRef for type-less boxed object) so that their reference counter can be properly maintained.","title":"Boxed objects"},{"location":"manual/basics/boxed_objects/#registering-boxed-type","text":"#include <Luna/Runtime/Object.hpp> One type must be registered to the type system to be used for creating boxed objects. If you want to register one type solely for creating boxed objects, you may use register_boxed_type instead of calling register_struct_type directly.","title":"Registering boxed type"},{"location":"manual/basics/boxed_objects/#managing-boxed-object-manually","text":"#include <Luna/Runtime/Object.hpp> Use object_alloc to allocate one boxed object. This call will allocate memory for the boxed object and the object header, initialize the object header, and returns one pointer to the allocated boxed object as object_t , which is an aliasing type of void* . The return pointer can be reinterpreted to the pointer of the required type directly, and it should be passed to all other boxed object management APIs. The object returned by object_alloc is not initialized, the user should then call constructors of the specified type manually to construct the object. Boxed objects implement both strong reference counting and weak reference counting. Use object_retain , object_release to increase and decrease the strong reference counter, and object_retain_weak , object_release_weak to increase and decrease the weak reference counter. One object will have 1 strong reference and 0 weak reference when allocated. If the strong reference counter value drops to 0 , the destructor of the object will be called. If the weak reference counter is not 0 when the object is being destructed, the object will be marked as expired , you can call object_expired to check whether one object is expired. One expired object cannot be used, the only valid operation for it is to release its weak references. The memory for one boxed object will be freed if both the strong and weak reference counter values drop to 0 .","title":"Managing boxed object manually"},{"location":"manual/basics/boxed_objects/#managing-boxed-object-automatically","text":"#include <Luna/Runtime/Ref.hpp> In most of the time, you don't need to manage boxed object manually. You can use new_object to create one boxed object directly like memnew , this function allocates one boxed object, and initializes it using user-provided arguments. new_object returns one Ref<T> smart pointer, which represents one strong reference to the object. There are four smart pointers provided by Luna SDK: Ref<T> for strong references to typed boxed objects. ObjRef for strong references to type-less boxed objects, which can refer to any boxed object. WeakRef<T> for weak references to typed boxed objects. WeakObjRef for weak references to type-less boxed objects. All smart pointers decrease the reference counter value automatically when being destructed, so the user does not need to handle this manually. Coping one smart pointer object only increase the reference counter value of the object, the object itself is not copied. You can create one weak reference smart pointer object by casting from one strong reference smart pointer directly, but you should call pin on one weak reference smart pointer to fetch one strong reference smart pointer from it, which will return nullptr if failed. The weak smart pointer will be reset to nullptr automatically when the object is expired and the user calls get on the smart pointer.","title":"Managing boxed object automatically"},{"location":"manual/basics/boxed_objects/#run-time-type-identification-and-dynamic-casting","text":"#include <Luna/Runtime/Object.hpp> Luna SDK uses object_t to represent one type-less pointer to one boxed object. It is not safe to cast one typeinfo_t to one concrete typed pointer without checking whether the object type conforms to the pointer type specified. Luna SDK provides run-time type identification (RTTI) for all boxed objects to perform type casting safely at run time. Use get_object_type on object_t to fetch the real type of the object. This function returns one typeinfo_t directly, so it is suitable if you want to inspect the type to perform some special operations. Use object_is_type to check whether the given object conforms to the specified type, that is, either the object is the specified type, or the object is one type that derives from the specified type. Use this function if you want to perform dynamic casting safely like dynamic_cast (which cannot be used in Luna SDK). Any typed pointer to one boxed object can be casted to object_t without any run-time cost.","title":"Run-time type identification and dynamic casting"},{"location":"manual/basics/coding_convention/","text":"Coding Convention This section discusses the coding conventions used in Luna SDK. All users using Luna SDK should follow these conventions to achieve a consistent code style and prevent programming errors. Disabled C++ features The following C++ features are disabled in Luna SDK: Exceptions ( try , throw , catch ). Real-time type identification (RTTI, dynamic_cast and typeid for objects). The use of typeid for static types is allowed. In rare cases, if you have to use these features (like integrating one third-party library that uses these features), make sure these features are used internally in your module, and not cross the module interface, or they may not be handled correctly. The noexcept decorator is not used in Luna SDK, since exceptions are disabled by default. File naming conventions Use .hpp file extension name for C++ header files, use .cpp file extension name for C++ source files, use .inl file extension name for inlined C++ source files. Use Pascal case for file and folder names, like FileIterator.hpp . Do not add interface prefix I to the filename. Add the following comments at the beginning of every C++ header, source or inlined source file if you want to contribute it as part of Luna SDK. /*! * This file is a portion of Luna SDK. * For conditions of distribution and use, see the disclaimer * and license in LICENSE.txt * * @file {The filename of this file} * @author {Author name} * @date {The file creation date, YYYY/MM/DD} */ Lexical formats Indents One indent can be represented by one tab character or four whitespace characters. Both forms are allowed. Scopes In most cases, scope opening and closing brackets should occupy a whole line. Nested scopes should be properly indented. namesapce A { namespace B { class C { }; } } However, if the scope is empty or contains simple statements, you may write the opening and coding brackets without beginning a new line: class A { i32 n; public: A() {} // Empty scope. i32 get_n() { return n; } // Simple scope. } Always use the form that maximizes the readability when deciding scoping forms. Documenting comments Use doxygen comment blocks for documenting comments (comments that exists in the header file as the documentation of function, type or object). //! Resets the task context and begins a new task. //! @param[in] world The world to run the task on. //! @param[in] exec_mode The task execution mode. //! @param[in] read_components If task mode is `shared`, specify components that will be read by this task. //! @param[in] write_components If task mode is `shared`, specify components that will be read and written by //! this task. //! @remark This call may block the current thread until all components required by this task can be safely //! accessed by this task, or until all other tasks are finished if this is a exclusive task. virtual void begin( IWorld* world, TaskExecutionMode exec_mode, Span<typeinfo_t> read_components, Span<typeinfo_t> write_components ) = 0; Naming conventions Primitive types Primitive types (numbers, characters, pointers) and the aliasing primitive types are named using the underscore case: u8 i32 usize For all user-defined aliasing types of primitive types, uses _t suffix: using opaque_t = void* Enumeration types Use enum classs instead of enum for all enumerations. All enumeration types are named using the Pascal case. Options of the enumeration are named using the underscore case. enum class ResourceType : u8 { buffer, texture_1d, texture_2d, texture_3d }; If the enumeration represents a single-value type, the use of Type or Kind suffix is suggested, but not required; if the enumeration represents a bit-OR-combined multi-value type, the use of Flag suffix is suggested, but not required. For all multi-value enumeration types, always provides one option none with the value 0 . Using hexadecimal form to represent multi-value enumeration option values is suggested, but not required. enum class ResourceUsageFlag : u32 { none = 0x00, shader_resource = 0x01, constant_buffer = 0x02, unordered_access = 0x04, render_target = 0x08, depth_stencil = 0x10, vertex_buffer = 0x20, index_buffer = 0x40, stream_output = 0x80, indirect_buffer = 0x100, }; Structure and class types Types defined by struct and class are considered the same in Luna SDK, we use \"structure type\" to refer both. Most structure types are named using the Pascal case. struct ResourceDesc { ResourceType type; ResourceHeapType heap_type; Format pixel_format; ResourceUsageFlag usages; u64 width_or_buffer_size; u32 height; u32 depth_or_array_size; u32 mip_levels; u32 sample_count; u32 sample_quality; ResourceFlag flags; }; The only exception is the structure type that: contains only one primitive typed member object. can be trivially constructed, destructed, copied and moved. can be constructed by providing one value with the same type of its member variable, and the behavior is assigning its member object with the provided value. In such case, we consider the structure type as a aliasing type of the primitive type, thus use the underscore case with _t suffix for the type: struct asset_t { opaque_t handle; asset_t() : handle(nullptr) {} constexpr asset_t(opaque_t handle) : handle(handle) {} constexpr bool operator==(const asset_t& rhs) const { return handle == rhs.handle; } constexpr bool operator!=(const asset_t& rhs) const { return handle != rhs.handle; } operator bool() const { return handle != nullptr; } }; Note that using the Pascal case for such structure type is also allowed. Interface structure types If the structure type represents an interface, append I prefix to the structure type name. struct IStream : virtual Interface { luiid(\"{0345f636-ca5c-4b4d-8416-29834377d239}\"); virtual RV read(void* buffer, usize size, usize* read_bytes = nullptr) = 0; virtual RV write(const void* buffer, usize size, usize* write_bytes = nullptr) = 0; }; Functions All functions, including member functions of structure types, are named using the underscore case. Function parameters are also named using the underscore case. RV read_file(opaque_t file, void* buffer, usize size, usize* read_bytes = nullptr); For functions with long parameter lists, you can separate parameter lists into multiple lines, providing the parameter list line is correctly indented. void draw_shape(u32 begin_command, u32 num_commands, const Float2U& min_position, const Float2U& max_position, const Float2U& min_shapecoord, const Float2U& max_shapecoord, u32 color = 0xFFFFFFFF, const Float2U& min_texcoord = Float2U(0.0f), const Float2U& max_texcoord = Float2U(0.0f)); These rules are also applied to member functions. Objects All objects except global constants are named using the underscore case, including member object of structure types. Float2U origin_point; For member objects of structure types that are not exposed as part of module interface, the prefix m_ is suggested, but not required. struct ComponentBuffer { typeinfo_t m_type; void* m_data = nullptr; usize m_size = 0; usize m_capacity = 0; }; For global variables that are not exposed as part of module interface, the prefix g_ is suggested, but not required. Ref<IFontFile> g_default_font; Global constants are named using uppercase words separated by underscores, and is decorated by constexpr . constexpr f32 PI = 3.141592654f; constexpr entity_id_t NULL_ENTITY(0); Prevent defining global constants using macros. Namespace All namespaces are named using the Pascal case. namespace Luna { namespace RHI { } } All Luna SDK components are defined in Luna namespace, every Luna SDK module except Runtime should have its own namespace under Luna containing its own components. Macros Macros can be declared using two forms. The first form is uppercase words separated by underscores, with LUNA_ prefix. These macros are usually used for conditional compiling and replacing some platform-dependent keywords. #define LUNA_DEBUG 1 #define LUNA_PROFILE 1 #define LUNA_RELEASE 1 #if defined(LUNA_COMPILER_MSVC) #define LUNA_DLL_EXPORT __declspec(dllexport) #else #define LUNA_DLL_EXPORT __attribute__ ((visibility(\"default\"))) #endif The second form is the underscore case with lu prefix. These macros are usually used to replace some code patterns to improve coding efficiency. #define luassert(_condition) //... #define luassert_msg(_condition, _message) //... #define lustruct(_name, _guid) //... #define luproperty(_struct, _type, _name) //... #define luenum(_type, _name, _guid) //... #define luoption(_enum, _item) //... #define lucatchret //... Macro parameters are allowed for both macro forms. Macro parameter names should be prefixed with one underscore character. Templates Template type parameters should be decorated with typename instead of class , and should be prefixed with one underscore character. template <typename _Ty> struct less { constexpr bool operator()(const _Ty& lhs, const _Ty& rhs) const { return lhs < rhs; } };","title":"Coding Convention"},{"location":"manual/basics/coding_convention/#coding-convention","text":"This section discusses the coding conventions used in Luna SDK. All users using Luna SDK should follow these conventions to achieve a consistent code style and prevent programming errors.","title":"Coding Convention"},{"location":"manual/basics/coding_convention/#disabled-c-features","text":"The following C++ features are disabled in Luna SDK: Exceptions ( try , throw , catch ). Real-time type identification (RTTI, dynamic_cast and typeid for objects). The use of typeid for static types is allowed. In rare cases, if you have to use these features (like integrating one third-party library that uses these features), make sure these features are used internally in your module, and not cross the module interface, or they may not be handled correctly. The noexcept decorator is not used in Luna SDK, since exceptions are disabled by default.","title":"Disabled C++ features"},{"location":"manual/basics/coding_convention/#file-naming-conventions","text":"Use .hpp file extension name for C++ header files, use .cpp file extension name for C++ source files, use .inl file extension name for inlined C++ source files. Use Pascal case for file and folder names, like FileIterator.hpp . Do not add interface prefix I to the filename. Add the following comments at the beginning of every C++ header, source or inlined source file if you want to contribute it as part of Luna SDK. /*! * This file is a portion of Luna SDK. * For conditions of distribution and use, see the disclaimer * and license in LICENSE.txt * * @file {The filename of this file} * @author {Author name} * @date {The file creation date, YYYY/MM/DD} */","title":"File naming conventions"},{"location":"manual/basics/coding_convention/#lexical-formats","text":"","title":"Lexical formats"},{"location":"manual/basics/coding_convention/#indents","text":"One indent can be represented by one tab character or four whitespace characters. Both forms are allowed.","title":"Indents"},{"location":"manual/basics/coding_convention/#scopes","text":"In most cases, scope opening and closing brackets should occupy a whole line. Nested scopes should be properly indented. namesapce A { namespace B { class C { }; } } However, if the scope is empty or contains simple statements, you may write the opening and coding brackets without beginning a new line: class A { i32 n; public: A() {} // Empty scope. i32 get_n() { return n; } // Simple scope. } Always use the form that maximizes the readability when deciding scoping forms.","title":"Scopes"},{"location":"manual/basics/coding_convention/#documenting-comments","text":"Use doxygen comment blocks for documenting comments (comments that exists in the header file as the documentation of function, type or object). //! Resets the task context and begins a new task. //! @param[in] world The world to run the task on. //! @param[in] exec_mode The task execution mode. //! @param[in] read_components If task mode is `shared`, specify components that will be read by this task. //! @param[in] write_components If task mode is `shared`, specify components that will be read and written by //! this task. //! @remark This call may block the current thread until all components required by this task can be safely //! accessed by this task, or until all other tasks are finished if this is a exclusive task. virtual void begin( IWorld* world, TaskExecutionMode exec_mode, Span<typeinfo_t> read_components, Span<typeinfo_t> write_components ) = 0;","title":"Documenting comments"},{"location":"manual/basics/coding_convention/#naming-conventions","text":"","title":"Naming conventions"},{"location":"manual/basics/coding_convention/#primitive-types","text":"Primitive types (numbers, characters, pointers) and the aliasing primitive types are named using the underscore case: u8 i32 usize For all user-defined aliasing types of primitive types, uses _t suffix: using opaque_t = void*","title":"Primitive types"},{"location":"manual/basics/coding_convention/#enumeration-types","text":"Use enum classs instead of enum for all enumerations. All enumeration types are named using the Pascal case. Options of the enumeration are named using the underscore case. enum class ResourceType : u8 { buffer, texture_1d, texture_2d, texture_3d }; If the enumeration represents a single-value type, the use of Type or Kind suffix is suggested, but not required; if the enumeration represents a bit-OR-combined multi-value type, the use of Flag suffix is suggested, but not required. For all multi-value enumeration types, always provides one option none with the value 0 . Using hexadecimal form to represent multi-value enumeration option values is suggested, but not required. enum class ResourceUsageFlag : u32 { none = 0x00, shader_resource = 0x01, constant_buffer = 0x02, unordered_access = 0x04, render_target = 0x08, depth_stencil = 0x10, vertex_buffer = 0x20, index_buffer = 0x40, stream_output = 0x80, indirect_buffer = 0x100, };","title":"Enumeration types"},{"location":"manual/basics/coding_convention/#structure-and-class-types","text":"Types defined by struct and class are considered the same in Luna SDK, we use \"structure type\" to refer both. Most structure types are named using the Pascal case. struct ResourceDesc { ResourceType type; ResourceHeapType heap_type; Format pixel_format; ResourceUsageFlag usages; u64 width_or_buffer_size; u32 height; u32 depth_or_array_size; u32 mip_levels; u32 sample_count; u32 sample_quality; ResourceFlag flags; }; The only exception is the structure type that: contains only one primitive typed member object. can be trivially constructed, destructed, copied and moved. can be constructed by providing one value with the same type of its member variable, and the behavior is assigning its member object with the provided value. In such case, we consider the structure type as a aliasing type of the primitive type, thus use the underscore case with _t suffix for the type: struct asset_t { opaque_t handle; asset_t() : handle(nullptr) {} constexpr asset_t(opaque_t handle) : handle(handle) {} constexpr bool operator==(const asset_t& rhs) const { return handle == rhs.handle; } constexpr bool operator!=(const asset_t& rhs) const { return handle != rhs.handle; } operator bool() const { return handle != nullptr; } }; Note that using the Pascal case for such structure type is also allowed.","title":"Structure and class types"},{"location":"manual/basics/coding_convention/#interface-structure-types","text":"If the structure type represents an interface, append I prefix to the structure type name. struct IStream : virtual Interface { luiid(\"{0345f636-ca5c-4b4d-8416-29834377d239}\"); virtual RV read(void* buffer, usize size, usize* read_bytes = nullptr) = 0; virtual RV write(const void* buffer, usize size, usize* write_bytes = nullptr) = 0; };","title":"Interface structure types"},{"location":"manual/basics/coding_convention/#functions","text":"All functions, including member functions of structure types, are named using the underscore case. Function parameters are also named using the underscore case. RV read_file(opaque_t file, void* buffer, usize size, usize* read_bytes = nullptr); For functions with long parameter lists, you can separate parameter lists into multiple lines, providing the parameter list line is correctly indented. void draw_shape(u32 begin_command, u32 num_commands, const Float2U& min_position, const Float2U& max_position, const Float2U& min_shapecoord, const Float2U& max_shapecoord, u32 color = 0xFFFFFFFF, const Float2U& min_texcoord = Float2U(0.0f), const Float2U& max_texcoord = Float2U(0.0f)); These rules are also applied to member functions.","title":"Functions"},{"location":"manual/basics/coding_convention/#objects","text":"All objects except global constants are named using the underscore case, including member object of structure types. Float2U origin_point; For member objects of structure types that are not exposed as part of module interface, the prefix m_ is suggested, but not required. struct ComponentBuffer { typeinfo_t m_type; void* m_data = nullptr; usize m_size = 0; usize m_capacity = 0; }; For global variables that are not exposed as part of module interface, the prefix g_ is suggested, but not required. Ref<IFontFile> g_default_font; Global constants are named using uppercase words separated by underscores, and is decorated by constexpr . constexpr f32 PI = 3.141592654f; constexpr entity_id_t NULL_ENTITY(0); Prevent defining global constants using macros.","title":"Objects"},{"location":"manual/basics/coding_convention/#namespace","text":"All namespaces are named using the Pascal case. namespace Luna { namespace RHI { } } All Luna SDK components are defined in Luna namespace, every Luna SDK module except Runtime should have its own namespace under Luna containing its own components.","title":"Namespace"},{"location":"manual/basics/coding_convention/#macros","text":"Macros can be declared using two forms. The first form is uppercase words separated by underscores, with LUNA_ prefix. These macros are usually used for conditional compiling and replacing some platform-dependent keywords. #define LUNA_DEBUG 1 #define LUNA_PROFILE 1 #define LUNA_RELEASE 1 #if defined(LUNA_COMPILER_MSVC) #define LUNA_DLL_EXPORT __declspec(dllexport) #else #define LUNA_DLL_EXPORT __attribute__ ((visibility(\"default\"))) #endif The second form is the underscore case with lu prefix. These macros are usually used to replace some code patterns to improve coding efficiency. #define luassert(_condition) //... #define luassert_msg(_condition, _message) //... #define lustruct(_name, _guid) //... #define luproperty(_struct, _type, _name) //... #define luenum(_type, _name, _guid) //... #define luoption(_enum, _item) //... #define lucatchret //... Macro parameters are allowed for both macro forms. Macro parameter names should be prefixed with one underscore character.","title":"Macros"},{"location":"manual/basics/coding_convention/#templates","text":"Template type parameters should be decorated with typename instead of class , and should be prefixed with one underscore character. template <typename _Ty> struct less { constexpr bool operator()(const _Ty& lhs, const _Ty& rhs) const { return lhs < rhs; } };","title":"Templates"},{"location":"manual/basics/error_handling/","text":"Error Handling Luna SDK does not use the exception mechanism provided by C++. Instead, it adopts a more light-weight error-handling mechanism by returning error codes. Compared to other error-code based solutions, Luna SDK manages error codes and the relationship between error codes, so the user can extend the error handling mechanism easily. Error code #include <Luna/Runtime/Error.hpp> ErrCode represents one error code, which is a machine-sized unsigned integer ( usize ). ErrCode is defined as a dedicated structure type to distinguish from normal return values, the actual error code value can be fetched by code property of ErrCode . We use error code 0 to represent a successful operation (no error), and any non-zero error code value represents one error. The error code value is not defined directly. Instead, the user should call get_error_code_by_name to fetch the error code for one specific error. The error code is generated by the system on the first call to get_error_code_by_name , and is cached and returned directly on succeeding calls to get_error_code_by_name with the same arguments. The error code for the same error will change in different processes, so do not store the error code directly, store its name and category (which will be explained in the following section) instead. Error name and category #include <Luna/Runtime/Error.hpp> Every ErrCode is described by two properties: error name and error category, which is required when calling get_error_code_by_name , and can be fetched by get_error_code_name and get_error_code_category . Error name is a UTF-8 string that briefly describes the error, while error category is used to hold one set of error codes in the same domain. For example, the Runtime module of Luna SDK defines one error category called BasicError , which contains error codes like bad_arguments , out_of_memory , not_supported , etc. The error category is represented by errcat_t , and is identified by one UTF-8 name string. You can get errcat_t from its name by calling get_error_category_by_name , and get the name of one errcat_t by calling get_error_category_name . Error categories can also contain sub-categories, for example, BasicError may contains one IOError sub-category that contains all error codes related to IO errors. In such case, the error category name and sub-category name should both be specified for sub-categories, separated by double colons ( :: ), like BasicError::IOError . You can call get_all_error_codes_of_category to get all error codes of one specific error category, and get_all_error_subcategories_of_category to get all error sub-categories of one specific error category. Declaring error codes Error codes can be declared by specifying error categories as namespaces, and error codes as functions that return the corresponding ErrCode instances. All error categories should be declared directly in Luna namespace. Every error category should have one errtype function that returns the errcat_t instance of the specified error category. namespace Luna { namespace MyError { //! Gets the error category object of `MyError`. LUNA_MYMODULE_API errcat_t errtype(); LUNA_MYMODULE_API ErrCode my_error_1(); LUNA_MYMODULE_API ErrCode my_error_2(); LUNA_MYMODULE_API ErrCode my_error_3(); //... namespace MySubError { //! Gets the error category object of `MySubError`. LUNA_MYMODULE_API errcat_t errtype(); LUNA_MYMODULE_API ErrCode my_error_4(); LUNA_MYMODULE_API ErrCode my_error_5(); //... } } } When implementing such functions, you may use static local variables to prevent fetching the error code every time it is called: namespace Luna { namespace MyError { LUNA_MYMODULE_API errcat_t errtype() { static errcat_t e = get_error_category_by_name(\"MyError\"); return e; } LUNA_MYMODULE_API ErrCode my_error_1(); { static ErrCode e = get_error_code_by_name(\"MyError\", \"my_error_1\"); return e; } //... namespace MySubError { LUNA_MYMODULE_API errcat_t errtype() { static errcat_t e = get_error_category_by_name(\"MyError::MySubError\"); return e; } LUNA_MYMODULE_API ErrCode my_error_4() { static ErrCode e = get_error_code_by_name(\"MyError::MySubError\", \"my_error_4\"); return e; } //... } } } Built-in errors Runtime/Error.hpp contains a list of error codes that covers most common error types, like bad_arguments , bad_platform_call , out_of_memory , not_found , already_exists , etc. All these error codes are declared in BasicError error category, and can be used directly. Besides error codes in BasicError , some built-in modules of Luna SDK declare their own error codes. For example, RHI module declares device_lost in RHIError error category to indicate one graphic device removal error. You can check module documentations and interface files for error codes defined by such modules. Result object #include <Luna/Runtime/Result.hpp> To represent one function that may throw errors, you should wrap the return type of the function with the result object type R<T> , which encapsulates the returned value of the function as well as one error code. The result object can be constructed by passing normal return values (which indicates a successful function call) or error codes (which indicates one error). If the result object is constructed by error, its result object will not be initialized. The following example shows how to declare and implement one function that may throw errors: R<u64> get_file_size(File* file) { u64 size; BOOL succeeded = system_get_file_size(file, &size); if(succeeded) return size; // Return the return value means success. else return BasicError::bad_platform_call(); // Return the error code means failure. } If the return type of the function is R<void> , you can return ok to indicate one successful function call. Note that using ok is allowed only if the function return value is R<void> . You can also use RV to replace of R<void> for convenience. RV reset_file_cursor(File* file) { BOOL succeeded = system_reset_file_cursor(file); if(succeeded) return ok; else return BasicError::bad_platform_call(); } On the caller side, we can use succeeded and failed to test whether one result object represents one valid return value or one error code: auto res = reset_file_cursor(file); if(failed(res)) { // Gets the error code stored in `R<T>`. ErrCode err = res.errcode(); // Handle the error. // ... } Error objects #include <Luna/Runtime/Error.hpp> Error codes indicate only the type of the error, without any further information, which can be inconvenient for the user to indicating the error. For such purpose, Luna SDK provides error objects that extend error codes to provide more detailed information about the error. One error object is represented by Error and contains three members: code : The error code. message : One UTF-8 short description of the error. info : One Variant that may contain any additional error information provided. To return one error object instead of one error code, first set the error object by calling get_error , then returns BasicError::error_object as the returned error code of the function: Error& err = get_error(); err = Error(BasicError::not_found(), \"The specified file %s is not found.\", file_name); return BasicError::error_object(); The error object fetched by get_error is a thread-local object attached to the current thread, so error objects in different threads are independent to each other. If you want to pass error objects between different threads, you can always store one Error instance down and pass it using your own methods. You can also use set_error to simplify the process of creating and returning error objects. The above code can be rewritten by: return set_error(BasicError::not_found(), \"The specified file %s is not found.\", file_name); set_error always returns BasicError::error_object , so we can return it directly. On the caller side, if we find the error code of one function is BasicError::error_object , we should retrieve the real error code by checking the same error object set by the calling function: auto res = do_something(); if(failed(res)) { ErrCode err = res.errcode(); if(err == BasicError::error_object()) { err = get_error().code; } // Handle the error. // ... } We can use unwrap_errcode to simplify this process and retrieve the error code directly like so: auto res = do_something(); if(failed(res)) { ErrCode err = unwrap_errcode(res); // Handle the error. // ... } unwrap_errcode will retrieve the error code from R<T> result object, and if the error code is BasicError::error_object , it will then retrieve the real error code automatically from the error object of this thread. We can also call explain to fetch the message stored on the error object if the error code is BasicError::error_object , or the name of the error code if not: auto res = do_something(); if(failed(res)) { debug_printf(\"%s\", explain(res.errcode())); } Try-catch macros for error handling #include <Luna/Runtime/Result.hpp> Correctly handling functions that may throw errors requires a lot of if statements to judge whether every function call is successful, which takes a lot of effort. In order to ease this, Luna SDK provides macros that can be used to handle throwable functions using a try-catch syntax, much like those in C++. In order to catch error codes returned by throwable function, we firstly need to declare one pair of try-catch blocks using lutry and lucatch like so: lutry { } lucatch { } lutry block is the place where throwable functions are called. In this block, throwable functions are wrapped by luexp , lulet and luset macros: luexp is used if the return type of the function is R<void> . lulet creates a new local variable to hold the return value of the function. luset assigns the return value of the function to one existing variable. The user can also use luthrow to throw one directly. The following code shows the usage of these four macros: lutry { luexp(do_something_that_may_fail()); lulet(size, get_file_size(file)); // Creates one new local variable `size`. luexp(set_file_size(file, 1024)); u64 new_size; luset(new_size, get_file_size(file)); // Assigns to one existing variable `new_size`. if(new_size != 1024) { luthrow(BasicError::bad_platform_call()); // Throw errors directly. } } lucatch { //... } For all these four macros, if the calling function or luthrow throws errors, the execution flow will be interrupted and redirected to lucatch block by a internal goto jump. In lucatch block, the user should handle the error, or just return the error to the caller function. lures macro is used in this block to represent the error code. lucatch { ErrCode code = unwrap_errcode(lures); // To fetch the real error code if lures is `BasicError::error_object`. if(code == BasicError::bad_platform_call()) { // Do something... } else if(code == BasicError::bad_arguments()) { // Do something... } else return lures; // Forward the error to caller function if the error cannot be handled here. } If the user does not want to handle errors at all, she can use lucatchret instead of lucatch block, which will forward all errors caught to the caller function: lutry { //... } lucatchret; // Return all errors caught. In most cases, only one lutry - lucatch pair is needed for one function. If you need multiple lutry - lucatch pairs in the same function, add suffix numbers to macros of succeeding lutry - lucatch pairs after the first pair like so: RV func() { // First pair. lutry { luexp(...); lulet(a, ...); luset(a, ...); luthrow(...); } lucatch { return lures; } // Another pair. lutry2 { luexp2(...); lulet2(a, ...); luset2(a, ...); luthrow2(...); } lucatch2 { return lures2; } // Another pair. lutry3 { luexp3(...); lulet3(a, ...); luset3(a, ...); luthrow3(...); } lucatch3 { return lures3; } }","title":"Error Handling"},{"location":"manual/basics/error_handling/#error-handling","text":"Luna SDK does not use the exception mechanism provided by C++. Instead, it adopts a more light-weight error-handling mechanism by returning error codes. Compared to other error-code based solutions, Luna SDK manages error codes and the relationship between error codes, so the user can extend the error handling mechanism easily.","title":"Error Handling"},{"location":"manual/basics/error_handling/#error-code","text":"#include <Luna/Runtime/Error.hpp> ErrCode represents one error code, which is a machine-sized unsigned integer ( usize ). ErrCode is defined as a dedicated structure type to distinguish from normal return values, the actual error code value can be fetched by code property of ErrCode . We use error code 0 to represent a successful operation (no error), and any non-zero error code value represents one error. The error code value is not defined directly. Instead, the user should call get_error_code_by_name to fetch the error code for one specific error. The error code is generated by the system on the first call to get_error_code_by_name , and is cached and returned directly on succeeding calls to get_error_code_by_name with the same arguments. The error code for the same error will change in different processes, so do not store the error code directly, store its name and category (which will be explained in the following section) instead.","title":"Error code"},{"location":"manual/basics/error_handling/#error-name-and-category","text":"#include <Luna/Runtime/Error.hpp> Every ErrCode is described by two properties: error name and error category, which is required when calling get_error_code_by_name , and can be fetched by get_error_code_name and get_error_code_category . Error name is a UTF-8 string that briefly describes the error, while error category is used to hold one set of error codes in the same domain. For example, the Runtime module of Luna SDK defines one error category called BasicError , which contains error codes like bad_arguments , out_of_memory , not_supported , etc. The error category is represented by errcat_t , and is identified by one UTF-8 name string. You can get errcat_t from its name by calling get_error_category_by_name , and get the name of one errcat_t by calling get_error_category_name . Error categories can also contain sub-categories, for example, BasicError may contains one IOError sub-category that contains all error codes related to IO errors. In such case, the error category name and sub-category name should both be specified for sub-categories, separated by double colons ( :: ), like BasicError::IOError . You can call get_all_error_codes_of_category to get all error codes of one specific error category, and get_all_error_subcategories_of_category to get all error sub-categories of one specific error category.","title":"Error name and category"},{"location":"manual/basics/error_handling/#declaring-error-codes","text":"Error codes can be declared by specifying error categories as namespaces, and error codes as functions that return the corresponding ErrCode instances. All error categories should be declared directly in Luna namespace. Every error category should have one errtype function that returns the errcat_t instance of the specified error category. namespace Luna { namespace MyError { //! Gets the error category object of `MyError`. LUNA_MYMODULE_API errcat_t errtype(); LUNA_MYMODULE_API ErrCode my_error_1(); LUNA_MYMODULE_API ErrCode my_error_2(); LUNA_MYMODULE_API ErrCode my_error_3(); //... namespace MySubError { //! Gets the error category object of `MySubError`. LUNA_MYMODULE_API errcat_t errtype(); LUNA_MYMODULE_API ErrCode my_error_4(); LUNA_MYMODULE_API ErrCode my_error_5(); //... } } } When implementing such functions, you may use static local variables to prevent fetching the error code every time it is called: namespace Luna { namespace MyError { LUNA_MYMODULE_API errcat_t errtype() { static errcat_t e = get_error_category_by_name(\"MyError\"); return e; } LUNA_MYMODULE_API ErrCode my_error_1(); { static ErrCode e = get_error_code_by_name(\"MyError\", \"my_error_1\"); return e; } //... namespace MySubError { LUNA_MYMODULE_API errcat_t errtype() { static errcat_t e = get_error_category_by_name(\"MyError::MySubError\"); return e; } LUNA_MYMODULE_API ErrCode my_error_4() { static ErrCode e = get_error_code_by_name(\"MyError::MySubError\", \"my_error_4\"); return e; } //... } } }","title":"Declaring error codes"},{"location":"manual/basics/error_handling/#built-in-errors","text":"Runtime/Error.hpp contains a list of error codes that covers most common error types, like bad_arguments , bad_platform_call , out_of_memory , not_found , already_exists , etc. All these error codes are declared in BasicError error category, and can be used directly. Besides error codes in BasicError , some built-in modules of Luna SDK declare their own error codes. For example, RHI module declares device_lost in RHIError error category to indicate one graphic device removal error. You can check module documentations and interface files for error codes defined by such modules.","title":"Built-in errors"},{"location":"manual/basics/error_handling/#result-object","text":"#include <Luna/Runtime/Result.hpp> To represent one function that may throw errors, you should wrap the return type of the function with the result object type R<T> , which encapsulates the returned value of the function as well as one error code. The result object can be constructed by passing normal return values (which indicates a successful function call) or error codes (which indicates one error). If the result object is constructed by error, its result object will not be initialized. The following example shows how to declare and implement one function that may throw errors: R<u64> get_file_size(File* file) { u64 size; BOOL succeeded = system_get_file_size(file, &size); if(succeeded) return size; // Return the return value means success. else return BasicError::bad_platform_call(); // Return the error code means failure. } If the return type of the function is R<void> , you can return ok to indicate one successful function call. Note that using ok is allowed only if the function return value is R<void> . You can also use RV to replace of R<void> for convenience. RV reset_file_cursor(File* file) { BOOL succeeded = system_reset_file_cursor(file); if(succeeded) return ok; else return BasicError::bad_platform_call(); } On the caller side, we can use succeeded and failed to test whether one result object represents one valid return value or one error code: auto res = reset_file_cursor(file); if(failed(res)) { // Gets the error code stored in `R<T>`. ErrCode err = res.errcode(); // Handle the error. // ... }","title":"Result object"},{"location":"manual/basics/error_handling/#error-objects","text":"#include <Luna/Runtime/Error.hpp> Error codes indicate only the type of the error, without any further information, which can be inconvenient for the user to indicating the error. For such purpose, Luna SDK provides error objects that extend error codes to provide more detailed information about the error. One error object is represented by Error and contains three members: code : The error code. message : One UTF-8 short description of the error. info : One Variant that may contain any additional error information provided. To return one error object instead of one error code, first set the error object by calling get_error , then returns BasicError::error_object as the returned error code of the function: Error& err = get_error(); err = Error(BasicError::not_found(), \"The specified file %s is not found.\", file_name); return BasicError::error_object(); The error object fetched by get_error is a thread-local object attached to the current thread, so error objects in different threads are independent to each other. If you want to pass error objects between different threads, you can always store one Error instance down and pass it using your own methods. You can also use set_error to simplify the process of creating and returning error objects. The above code can be rewritten by: return set_error(BasicError::not_found(), \"The specified file %s is not found.\", file_name); set_error always returns BasicError::error_object , so we can return it directly. On the caller side, if we find the error code of one function is BasicError::error_object , we should retrieve the real error code by checking the same error object set by the calling function: auto res = do_something(); if(failed(res)) { ErrCode err = res.errcode(); if(err == BasicError::error_object()) { err = get_error().code; } // Handle the error. // ... } We can use unwrap_errcode to simplify this process and retrieve the error code directly like so: auto res = do_something(); if(failed(res)) { ErrCode err = unwrap_errcode(res); // Handle the error. // ... } unwrap_errcode will retrieve the error code from R<T> result object, and if the error code is BasicError::error_object , it will then retrieve the real error code automatically from the error object of this thread. We can also call explain to fetch the message stored on the error object if the error code is BasicError::error_object , or the name of the error code if not: auto res = do_something(); if(failed(res)) { debug_printf(\"%s\", explain(res.errcode())); }","title":"Error objects"},{"location":"manual/basics/error_handling/#try-catch-macros-for-error-handling","text":"#include <Luna/Runtime/Result.hpp> Correctly handling functions that may throw errors requires a lot of if statements to judge whether every function call is successful, which takes a lot of effort. In order to ease this, Luna SDK provides macros that can be used to handle throwable functions using a try-catch syntax, much like those in C++. In order to catch error codes returned by throwable function, we firstly need to declare one pair of try-catch blocks using lutry and lucatch like so: lutry { } lucatch { } lutry block is the place where throwable functions are called. In this block, throwable functions are wrapped by luexp , lulet and luset macros: luexp is used if the return type of the function is R<void> . lulet creates a new local variable to hold the return value of the function. luset assigns the return value of the function to one existing variable. The user can also use luthrow to throw one directly. The following code shows the usage of these four macros: lutry { luexp(do_something_that_may_fail()); lulet(size, get_file_size(file)); // Creates one new local variable `size`. luexp(set_file_size(file, 1024)); u64 new_size; luset(new_size, get_file_size(file)); // Assigns to one existing variable `new_size`. if(new_size != 1024) { luthrow(BasicError::bad_platform_call()); // Throw errors directly. } } lucatch { //... } For all these four macros, if the calling function or luthrow throws errors, the execution flow will be interrupted and redirected to lucatch block by a internal goto jump. In lucatch block, the user should handle the error, or just return the error to the caller function. lures macro is used in this block to represent the error code. lucatch { ErrCode code = unwrap_errcode(lures); // To fetch the real error code if lures is `BasicError::error_object`. if(code == BasicError::bad_platform_call()) { // Do something... } else if(code == BasicError::bad_arguments()) { // Do something... } else return lures; // Forward the error to caller function if the error cannot be handled here. } If the user does not want to handle errors at all, she can use lucatchret instead of lucatch block, which will forward all errors caught to the caller function: lutry { //... } lucatchret; // Return all errors caught. In most cases, only one lutry - lucatch pair is needed for one function. If you need multiple lutry - lucatch pairs in the same function, add suffix numbers to macros of succeeding lutry - lucatch pairs after the first pair like so: RV func() { // First pair. lutry { luexp(...); lulet(a, ...); luset(a, ...); luthrow(...); } lucatch { return lures; } // Another pair. lutry2 { luexp2(...); lulet2(a, ...); luset2(a, ...); luthrow2(...); } lucatch2 { return lures2; } // Another pair. lutry3 { luexp3(...); lulet3(a, ...); luset3(a, ...); luthrow3(...); } lucatch3 { return lures3; } }","title":"Try-catch macros for error handling"},{"location":"manual/basics/file_management/","text":"File Management #include <Luna/Runtime/File.hpp> File IO IFile represents one system-level file handle that can be used to read and write file data. The user can create one IFile interface using open_file , and the file handle will be closed when its reference count drops to 0 . Data in the file can be read by IFile::read , and can be written by IFile::write . The current file cursor for IO operations can be fetched by IFile::tell , and can be set by IFile::seek . The whole size of the file can be fetched by IFile::get_size , and can be set by IFile::set_size . In most cases, file data written by IFile::write will not be written to storage media immediately, but being cached in driver buffer and written back to the storage in next hardware flush. The user can wait such flush by calling IFile::flush , which blocks the current thread until all written data is successfully written back to storage and visible to other processes. If you simply want to load file data after opening one file, you can pass IFile to load_file_data immediately after it is opened, which loads the whole file binary data and returns the data as one Blob object. File operations Use file_attribute to fetch the attribute of one specified file, like its creation time, last modified time, whether it is a directory, etc. Use copy_file and move_file for coping and moving files and directories. Use delete_file for deleting one file or directory. Use open_dir to create a file iterator ( IFileIterator ) that can be used to iterate over files and directories in the specified directory. Use create_dir to create a new empty directory on the specified directory. Use get_current_dir and set_current_dir to get and set the current working directory of the current process. Use get_process_path to get process executable file's absolute directory, ended with application executable name.","title":"File Management"},{"location":"manual/basics/file_management/#file-management","text":"#include <Luna/Runtime/File.hpp>","title":"File Management"},{"location":"manual/basics/file_management/#file-io","text":"IFile represents one system-level file handle that can be used to read and write file data. The user can create one IFile interface using open_file , and the file handle will be closed when its reference count drops to 0 . Data in the file can be read by IFile::read , and can be written by IFile::write . The current file cursor for IO operations can be fetched by IFile::tell , and can be set by IFile::seek . The whole size of the file can be fetched by IFile::get_size , and can be set by IFile::set_size . In most cases, file data written by IFile::write will not be written to storage media immediately, but being cached in driver buffer and written back to the storage in next hardware flush. The user can wait such flush by calling IFile::flush , which blocks the current thread until all written data is successfully written back to storage and visible to other processes. If you simply want to load file data after opening one file, you can pass IFile to load_file_data immediately after it is opened, which loads the whole file binary data and returns the data as one Blob object.","title":"File IO"},{"location":"manual/basics/file_management/#file-operations","text":"Use file_attribute to fetch the attribute of one specified file, like its creation time, last modified time, whether it is a directory, etc. Use copy_file and move_file for coping and moving files and directories. Use delete_file for deleting one file or directory. Use open_dir to create a file iterator ( IFileIterator ) that can be used to iterate over files and directories in the specified directory. Use create_dir to create a new empty directory on the specified directory. Use get_current_dir and set_current_dir to get and set the current working directory of the current process. Use get_process_path to get process executable file's absolute directory, ended with application executable name.","title":"File operations"},{"location":"manual/basics/initialization_and_shutdown/","text":"Initialization and Shutdown SDK Initialization #include <Luna/Runtime/Runtime.hpp> Call Luna::init to initialize Luna SDK. Most features provided by Luna SDK are only available after Luna SDK is initialized, so always initialize Luna SDK firstly on program startup. Luna::init returns one bool value, which indicates whether the initialization is succeeded. After the initialization is succeeded, following calls to Luna::init does nothing and returns true directly. Note that modules registered to Luna SDK will not be initialized by Luna::init , they should be initialized manually using functions like init_modules . See Modules for details. SDK shutdown #include <Luna/Runtime/Runtime.hpp> Call Luna::close to close Luna SDK. Most features provided by Luna SDK are not available after Luna SDK is closed. If Luna SDK is already closed, calling Luna::close does nothing and returns directly. Unlike SDK initialization, initialized modules will be closed by Luna::close in the reverse order of their initialization order, so they don't need to be closed manually. Release resources before closing SDK All dynamic memory allocated from memalloc , memrealloc and memnew must be freed before calling Luna::close . All boxed object created from new_object and object_alloc must be released before calling Luna::close . Calls to memfree , memdelete , object_release and other functions after Luna::close results in undefined behavior, and usually a program crash. This often happens when you declare global variables that hold dynamic allocated resources (such as Ref ) and memory blocks (such as UniquePtr , and containers like Vector , HashMap , etc.). Remember to clear such resources before calling Luna::close . For some containers, you should call clear then shrink_to_fit to eventually frees the internal memory buffer used by containers.","title":"Initialization and Shutdown"},{"location":"manual/basics/initialization_and_shutdown/#initialization-and-shutdown","text":"","title":"Initialization and Shutdown"},{"location":"manual/basics/initialization_and_shutdown/#sdk-initialization","text":"#include <Luna/Runtime/Runtime.hpp> Call Luna::init to initialize Luna SDK. Most features provided by Luna SDK are only available after Luna SDK is initialized, so always initialize Luna SDK firstly on program startup. Luna::init returns one bool value, which indicates whether the initialization is succeeded. After the initialization is succeeded, following calls to Luna::init does nothing and returns true directly. Note that modules registered to Luna SDK will not be initialized by Luna::init , they should be initialized manually using functions like init_modules . See Modules for details.","title":"SDK Initialization"},{"location":"manual/basics/initialization_and_shutdown/#sdk-shutdown","text":"#include <Luna/Runtime/Runtime.hpp> Call Luna::close to close Luna SDK. Most features provided by Luna SDK are not available after Luna SDK is closed. If Luna SDK is already closed, calling Luna::close does nothing and returns directly. Unlike SDK initialization, initialized modules will be closed by Luna::close in the reverse order of their initialization order, so they don't need to be closed manually.","title":"SDK shutdown"},{"location":"manual/basics/initialization_and_shutdown/#release-resources-before-closing-sdk","text":"All dynamic memory allocated from memalloc , memrealloc and memnew must be freed before calling Luna::close . All boxed object created from new_object and object_alloc must be released before calling Luna::close . Calls to memfree , memdelete , object_release and other functions after Luna::close results in undefined behavior, and usually a program crash. This often happens when you declare global variables that hold dynamic allocated resources (such as Ref ) and memory blocks (such as UniquePtr , and containers like Vector , HashMap , etc.). Remember to clear such resources before calling Luna::close . For some containers, you should call clear then shrink_to_fit to eventually frees the internal memory buffer used by containers.","title":"Release resources before closing SDK"},{"location":"manual/basics/interfaces/","text":"Interfaces Interfaces are C++ structures that only have pure virtual functions. Luna SDK provides most its functionalities through interfaces, so that the implementation detail can be encapsulated and may be different on different platforms. Declaring interfaces #include <Luna/Runtime/Interface.hpp> To declare one interface, declare one structure with I name prefix, and virtually inherit from Interface structure. Every interface should have one GUID, which can be declared using luiid macro. Methods of the interface is represented by pure virtual functions. struct IStream : virtual Interface { luiid(\"{0345f636-ca5c-4b4d-8416-29834377d239}\"); virtual RV read(void* buffer, usize size, usize* read_bytes = nullptr) = 0; virtual RV write(const void* buffer, usize size, usize* write_bytes = nullptr) = 0; }; One interface can inherit Interface directly, or it can inherit multiple other interfaces. The behavior is correctly defined since virtual inheritance is used. struct ISeekableStream : virtual IStream { luiid(\"{42F66080-C388-4EE0-9C4D-1EEC1B82F692}\"); virtual R<u64> tell() = 0; virtual RV seek(i64 offset, SeekMode mode) = 0; virtual u64 get_size() = 0; virtual RV set_size(u64 sz) = 0; }; Implementing interfaces Interfaces can be implemented by declaring structures that inherit from them. struct WindowsFile : ISeekableStream { lustruct(\"WindowsFile\", \"{95a2e5b2-d48a-4f19-bfb8-22c273c0ad4b}\"); luiimpl(); HANDLE m_file; virtual RV read(void* buffer, usize size, usize* read_bytes) override; virtual RV write(const void* buffer, usize size, usize* write_bytes) override; virtual R<u64> tell() override; virtual RV seek(i64 offset, SeekMode mode) override; virtual u64 get_size() override; virtual RV set_size(u64 sz) override; }; Note that interfaces only work for boxed objects . So the structure type that implements the interface should be registered to the type system either by register_boxed_type or by register_struct_type , and the object that implements the interface should only be created as boxed objects using new_object . Luna SDK also requires you to register interface implementation information to the system, so the registration code for the type above may looks like this: register_boxed_type<WindowsFile>(); impl_interface_for_type<WindowsFile, ISeekableStream, IStream>(); You can always use is_interface_implemented_by_type to check whether one interface is implemented by the specified type. Interface conversion Besides the dynamic casting functionality provided by boxed objects, Luna SDK provides additional functionalities for casting between interface pointers and boxed object pointers safely at run time. Casting typed object pointers to interface pointers Casting typed object pointers to interface pointers can be done directly using static_cast or C-style pointer casting, since the boxed type inherits from the interface type by declaration. Casting object_t to interface pointers If the underlying type of the interface is not exposed to the user, the user can use query_interface to fetch one pointer interface from object_t . This function will check whether the specified interface is implemented by the type of the specified object, and returns nullptr if not. The returned pointer can be casting to the specified interface type safely by using static_cast or C-style pointer casting. Casting interface pointers to object_t Casting interface pointers to object_t can be done by calling get_object function of the interface. This function is declared in Interface structure, and is implemented by luiimpl macro, so all interfaces support this function. The returned type of get_object is object_t , which is a type-less pointer, the user can then casting the pointer to one typed pointer using dynamic casting . Smart pointer for interface types #include <Luna/Runtime/Ref.hpp> Ref<T> and WeakRef<T> support interface types. You can use Ref<IStream> to refer one boxed object that comforms to IStream interface directly. Ref<T> handles type conversions automatically, so you can assign Ref of any type to each other, and the destination pointer will be set to nullptr if type casting fails.","title":"Interfaces"},{"location":"manual/basics/interfaces/#interfaces","text":"Interfaces are C++ structures that only have pure virtual functions. Luna SDK provides most its functionalities through interfaces, so that the implementation detail can be encapsulated and may be different on different platforms.","title":"Interfaces"},{"location":"manual/basics/interfaces/#declaring-interfaces","text":"#include <Luna/Runtime/Interface.hpp> To declare one interface, declare one structure with I name prefix, and virtually inherit from Interface structure. Every interface should have one GUID, which can be declared using luiid macro. Methods of the interface is represented by pure virtual functions. struct IStream : virtual Interface { luiid(\"{0345f636-ca5c-4b4d-8416-29834377d239}\"); virtual RV read(void* buffer, usize size, usize* read_bytes = nullptr) = 0; virtual RV write(const void* buffer, usize size, usize* write_bytes = nullptr) = 0; }; One interface can inherit Interface directly, or it can inherit multiple other interfaces. The behavior is correctly defined since virtual inheritance is used. struct ISeekableStream : virtual IStream { luiid(\"{42F66080-C388-4EE0-9C4D-1EEC1B82F692}\"); virtual R<u64> tell() = 0; virtual RV seek(i64 offset, SeekMode mode) = 0; virtual u64 get_size() = 0; virtual RV set_size(u64 sz) = 0; };","title":"Declaring interfaces"},{"location":"manual/basics/interfaces/#implementing-interfaces","text":"Interfaces can be implemented by declaring structures that inherit from them. struct WindowsFile : ISeekableStream { lustruct(\"WindowsFile\", \"{95a2e5b2-d48a-4f19-bfb8-22c273c0ad4b}\"); luiimpl(); HANDLE m_file; virtual RV read(void* buffer, usize size, usize* read_bytes) override; virtual RV write(const void* buffer, usize size, usize* write_bytes) override; virtual R<u64> tell() override; virtual RV seek(i64 offset, SeekMode mode) override; virtual u64 get_size() override; virtual RV set_size(u64 sz) override; }; Note that interfaces only work for boxed objects . So the structure type that implements the interface should be registered to the type system either by register_boxed_type or by register_struct_type , and the object that implements the interface should only be created as boxed objects using new_object . Luna SDK also requires you to register interface implementation information to the system, so the registration code for the type above may looks like this: register_boxed_type<WindowsFile>(); impl_interface_for_type<WindowsFile, ISeekableStream, IStream>(); You can always use is_interface_implemented_by_type to check whether one interface is implemented by the specified type.","title":"Implementing interfaces"},{"location":"manual/basics/interfaces/#interface-conversion","text":"Besides the dynamic casting functionality provided by boxed objects, Luna SDK provides additional functionalities for casting between interface pointers and boxed object pointers safely at run time.","title":"Interface conversion"},{"location":"manual/basics/interfaces/#casting-typed-object-pointers-to-interface-pointers","text":"Casting typed object pointers to interface pointers can be done directly using static_cast or C-style pointer casting, since the boxed type inherits from the interface type by declaration.","title":"Casting typed object pointers to interface pointers"},{"location":"manual/basics/interfaces/#casting-object_t-to-interface-pointers","text":"If the underlying type of the interface is not exposed to the user, the user can use query_interface to fetch one pointer interface from object_t . This function will check whether the specified interface is implemented by the type of the specified object, and returns nullptr if not. The returned pointer can be casting to the specified interface type safely by using static_cast or C-style pointer casting.","title":"Casting object_t to interface pointers"},{"location":"manual/basics/interfaces/#casting-interface-pointers-to-object_t","text":"Casting interface pointers to object_t can be done by calling get_object function of the interface. This function is declared in Interface structure, and is implemented by luiimpl macro, so all interfaces support this function. The returned type of get_object is object_t , which is a type-less pointer, the user can then casting the pointer to one typed pointer using dynamic casting .","title":"Casting interface pointers to object_t"},{"location":"manual/basics/interfaces/#smart-pointer-for-interface-types","text":"#include <Luna/Runtime/Ref.hpp> Ref<T> and WeakRef<T> support interface types. You can use Ref<IStream> to refer one boxed object that comforms to IStream interface directly. Ref<T> handles type conversions automatically, so you can assign Ref of any type to each other, and the destination pointer will be set to nullptr if type casting fails.","title":"Smart pointer for interface types"},{"location":"manual/basics/logs/","text":"Logs #include <Luna/Runtime/Log.hpp> Luna SDK contains a log system that can be used for logging and debugging purposes. Log message LogMessage structure represents one log entry. Every log message contains four properties: sender : The name of the function or module that emits this log, which can be used to filter logs. message : The log message, which is a UTF-8 string. verbosity : The verbosity level of the log, which can be used to filter logs based on verbosity level. extra : Extra arguments attached to the log entry, represented by one Variant object. One log message can be submitted to the log system by constructing one LogMessage object and passing it to log function manually. It can also be submitted conveniently by calling log_verbose , log_info , log_warning and log_error based on the verbosity level of your log message. Log handler Log handlers are entities that handle log messages to display or save them. For example, you may implement a log handler to display the log message on your game HUD or editor window. When one log is submitted to the log system, it will be dispatched to all handlers, the handler should decide whether to handle or skip this log by its filter and verbosity level settings. One log handler can be registered to the log system by register_log_callback , and unregistered from the log system by unregister_log_callback . When one log handler callback function is invoked, the same LogMessage object passed by the user or generated by the system will be provided, but is read-only to the handler. Built-in log handlers The log system includes two built-in log handlers: the STD log handler and the file log handler. STD log handler STD log handler outputs log messages to the standard output ( stdout ) of the program using printf . The STD log handler is disabled by default, the user can call set_log_std_enabled to enable/disable it at any time. The verbosity level of STD log handler can be configured by set_log_std_verbosity . File log handler File log handler outputs log messages to the file specified by the user. The file log handler is disabled by default, the user can call set_log_file_enabled to enable/disable it at any time. The user can call set_log_file to set the destination file of the log messages. If no file is set by the user, the handler will output logs to Log.txt file on the current working directory. For performance reasons, log messages will not be written to file immediately when being handled, but will be buffered internally and written to the file only when the buffer is full. You can also call flush_log_to_file manually if you want the buffer to be flushed immediately.","title":"Logs"},{"location":"manual/basics/logs/#logs","text":"#include <Luna/Runtime/Log.hpp> Luna SDK contains a log system that can be used for logging and debugging purposes.","title":"Logs"},{"location":"manual/basics/logs/#log-message","text":"LogMessage structure represents one log entry. Every log message contains four properties: sender : The name of the function or module that emits this log, which can be used to filter logs. message : The log message, which is a UTF-8 string. verbosity : The verbosity level of the log, which can be used to filter logs based on verbosity level. extra : Extra arguments attached to the log entry, represented by one Variant object. One log message can be submitted to the log system by constructing one LogMessage object and passing it to log function manually. It can also be submitted conveniently by calling log_verbose , log_info , log_warning and log_error based on the verbosity level of your log message.","title":"Log message"},{"location":"manual/basics/logs/#log-handler","text":"Log handlers are entities that handle log messages to display or save them. For example, you may implement a log handler to display the log message on your game HUD or editor window. When one log is submitted to the log system, it will be dispatched to all handlers, the handler should decide whether to handle or skip this log by its filter and verbosity level settings. One log handler can be registered to the log system by register_log_callback , and unregistered from the log system by unregister_log_callback . When one log handler callback function is invoked, the same LogMessage object passed by the user or generated by the system will be provided, but is read-only to the handler.","title":"Log handler"},{"location":"manual/basics/logs/#built-in-log-handlers","text":"The log system includes two built-in log handlers: the STD log handler and the file log handler.","title":"Built-in log handlers"},{"location":"manual/basics/logs/#std-log-handler","text":"STD log handler outputs log messages to the standard output ( stdout ) of the program using printf . The STD log handler is disabled by default, the user can call set_log_std_enabled to enable/disable it at any time. The verbosity level of STD log handler can be configured by set_log_std_verbosity .","title":"STD log handler"},{"location":"manual/basics/logs/#file-log-handler","text":"File log handler outputs log messages to the file specified by the user. The file log handler is disabled by default, the user can call set_log_file_enabled to enable/disable it at any time. The user can call set_log_file to set the destination file of the log messages. If no file is set by the user, the handler will output logs to Log.txt file on the current working directory. For performance reasons, log messages will not be written to file immediately when being handled, but will be buffered internally and written to the file only when the buffer is full. You can also call flush_log_to_file manually if you want the buffer to be flushed immediately.","title":"File log handler"},{"location":"manual/basics/math_library/","text":"Math Library Luna SDK comes with a math library that contains most math types and functions commonly-used in 3D applications. The math library contains the following parts: #include <Luna/Runtime/Math/Math.hpp> // For basic math types and functions. #include <Luna/Runtime/Math/Vector.hpp> // For vector types and functions. #include <Luna/Runtime/Math/Matrix.hpp> // For matrix types and functions. #include <Luna/Runtime/Math/Quaternion.hpp> // For Quaternion type and functions. #include <Luna/Runtime/Math/Transform.hpp> // For transform operations. The math library use SIMD instructions for vector and matrix calculations when possible. If SIMD instructions are not available on the target platform, we also have non-SIMD implementations for all math operations for compatibility. The SIMD instructions support of math library includes support of SSE/SSE2, SSE3, SSE4, AVX, AVX2, FMA3 and SVML instruction sets on x86/x64 processors, and NEON instruction set on arm/arm64 processors. Vectors #include <Luna/Runtime/Math/Vector.hpp> Float2 , Float3 and Float4 represent 2D, 3D and 4D vectors. These three types are 16-bytes aligned for maximizing SIMD performance. Luna SDK also provides unaligned vector types, these types are Vec2U<T> , Vec3U<T> and Vec4U<T> . The unaligned types are used mainly for storing and transferring vectors, such types should be converted to aligned types before they can be used for calculations. Luna SDK also defines Float2U , Int2U , UInt2U , Float3U , Int3U , UInt3U , Float4U , Int4U , UInt4U as aliasing types of Vec2U<T> , Vec3U<T> , Vec24U<T> for convenience. Components of these vector types can be fetched by their x , y , z and w properties. Aligned vector types can be compared( == and != ), added ( + ), subtracted ( - ), multiplied ( * ) and divided ( / ) like normal scalar types. These calculations are performed as performing the same calculation on each component element of the vector individually. When performing mathematical calculations between vector types and scalar types, the scaler number will be applied to all components of the vector. Luna SDK defines a series of functions to perform basic vector calculations. All these functions provide overloaded versions for handling 2D, 3D and 4D vector types. The following table lists all vector functions. Function Description in_bounds(a, min, max) Tests if a is in [min, max] bounds. length(a) Returns the length of vector a . length_squared(a) Returns the squared length of vector a . This is faster than length . dot(a, b) Returns the dot product of vector a and vector b . cross(a, b) Returns the cross product of vector a and vector b . normalize(a) Returns the normalized vector of vector a . clamp(a, min, max) Clamps vector a in [min, max] range. distance(a, b) Returns the Euclidean distance from vector a to vector b . distance_squared(a, b) Returns the squared Euclidean distance from vector a to vector b . This is faster than `distance . min(a, b) Returns one vector composed by the smaller component of each component in a and b . max(a, b) Returns one vector composed by the larger component of each component in a and b . lerp(a, b, t) Performs Linear interpolation between vector a and vector b according to one scalar factor t . smoothstep(a, b, t) Performs Smoothstep between vector a and vector b according to one scalar factor t . barycentric(a, b, c, x, y) Performs Barycentric triangle interpolation using three vector points a , b , c according to two scalar factors x and y . catmull_rom(a, b, c, d, t) Performs Catmull-Rom spline interpolation using four vector points a , b , c , d according to one scalar factor t . hermite(a, t1, b, t2, t) Performs Cubic Hermite spline interpolation using two vector points a , b , two vector tangents t1 , t2 according to one scalar factor t . reflect(i, n) Computes the reflection vector of the incident vector i using the normal vector n . refract(i, n, r) Computes the refraction vector of the incident vector i using the normal vector n and refraction index r . Matrices #include <Luna/Runtime/Math/Matrix.hpp> Float3x3 and Float4x4 represent 3x3 and 4x4 32-bit floating-point matrices. These two types are 16-bytes aligned for maximizing SIMD performance. Luna SDK also provides unaligned matrix types, these types are Float3x2U , Float3x3U , Float4x3U and Float4x4U . The unaligned types are used for storing and transferring matrices, and should be converted to aligned types ( Float3x2U to Float3x3 , Float4x3U to Float4x4 ) before they can be used for calculation. Rows in one matrix can be fetched by the m property of the matrix type, which is an array of Float3 or Float4 for Float3x3 and Float4x4 , or an two-dimensional f32 array for any unaligned matrix type. Aligned matrix types can be compared( == and != ), added ( + ), subtracted ( - ), multiplied ( * ) and divided ( / ) like normal scalar types. These calculations are performed as performing the same calculation on each component element of the matrix individually. When performing mathematical calculations between matrix types and scalar types, the scaler number will be applied to all components of the matrix. Luna SDK defines a series of functions to perform basic matrix calculations. All these functions provide overloaded versions for handling different matrix types. The following table lists all matrix functions. Function Description mul(a, b) Performs matrix multiplication between a and b , where a and b can be vector or matrix types. determinant(m) Computes determinant of one matrix m . transpose(m) Computes the transpose matrix of one matrix m . inverse(m) Computes the inversed matrix of one matrix m . Quaternions #include <Luna/Runtime/Math/Quaternion.hpp> Quaternion represents one Quaternion that can be used to represent a rotating operation in 3D space. Every Quaternion contains four f32 components, and is 16-bytes aligned for maximizing SIMD performance. The user can convert one Quaternion to Float4U for storing and transferring the Quaternion. Quaternion can be compared( == and != ), added ( + ), subtracted ( - ), multiplied ( * ) and divided ( / ) like normal scalar types. The addition and subtraction behavior of one Quaternion is the same as those of Float4 . The multiplication operation concatenates two Quaternions, while the division operation decomposes one Quaternion into two. Luna SDK defines a series of functions to perform Quaternion calculations. The following table lists all Quaternion functions. Function Description length(q) Returns the length of one Quaternion . Same as length for Float4 . length_squared(q) Returns the squared length of one Quaternion . Same as length_squared for Float4 . normalize(q) Normalizes one Quaternion . Same as normalize for Float4 . conjugate(q) Computes the conjugate of one Quaternion . inverse(q) Computes the inverse of one Quaternion . dot(q1, q2) Computes the dot product of two Quaternion s q1 and q2 . Same as dot for Float4 . lerp(q1, q2, t) Performs linear interpolation on two Quaternion s q1 and q2 according to one scalar factor t . slerp(q1, q2, t) Performs spherical linear interpolation on two Quaternion s q1 and q2 according to one scalar factor t . Transform #include <Luna/Runtime/Math/Transform.hpp> The transform header file does not include any new type. Instead, it defines a set of functions that can be useful for constructing affine matrices and projection matrices that are used in 2D and 3D transformations. Affine matrix operations 2D affine matrices and 3D affine matrices are presented by Float3x3 and Float4x4 . The +x axis of one affine matrix points to right, the +y axis of one affine matrix points to top, the +z axis of one affine matrix points to forward. The following table lists all functions for operating affine matrices. All functions are declared in AffineMatrix namespace. Function Description make(p, r, s) Constructs one 2D or 3D affine matrix from position vector p , rotation scalar or Quaternion r and scaling vector s . up(m) Extracts the up vector from one 2D or 3D affine matrix. down(m) Extracts the down vector from one 2D or 3D affine matrix. left(m) Extracts the left vector from one 2D or 3D affine matrix. right(m) Extracts the right vector from one 2D or 3D affine matrix. forward Extracts the forward vector from one 3D affine matrix. backward Extracts the backward vector from one 2D or 3D affine matrix. translation(m) Extracts the translation vector from one 2D or 3D affine matrix. rotation(m) Extracts the rotation scalar or Quaternion from one 2D or 3D affine matrix. euler_angles(m) Extracts the rotation vector that uses stores the rotation in Euler angles (pitch, yaw, roll) from one 3D affine matrix. scaling(m) Extracts the scaling vector from one 2D or 3D affine matrix. translation_matrix(m) Extracts the translation matrix from one 2D or 3D affine matrix. rotation_matrix(m) Extracts the rotation matrix from one 2D or 3D affine matrix. scaling_matrix(m) Extracts the scaling matrix from one 2D or 3D affine matrix. make_translation(t) Constructs one 2D or 3D translation matrix from position vector p . make_rotation(r) Constructs one 2D or 3D rotation matrix from rotation scalar or Quaternion r . make_rotation_x(r) Constructs one 3D rotation matrix that represents one rotation alone x axis. make_rotation_y(r) Constructs one 3D rotation matrix that represents one rotation alone y axis. make_rotation_z(r) Constructs one 3D rotation matrix that represents one rotation alone z axis. make_rotation_axis_angle(axis, angle) Constructs one 3D rotation matrix by specifying the rotation axis and rotation angle. make_rotation_euler_angles Constructs one 3D rotation matrix from Euler angles (pitch, yaw, roll). make_scaling(s) Constructs one 2D or 3D scaling matrix from scaling vector s . make_look_at(eye, target, up) Constructs one view matrix that targets the specified position. make_look_to(eye, dir, up) Constructs one view matrix that targets the specified direction. Projection matrix operations The following table lists all functions for operating projection matrices. All functions are declared in ProjectionMatrix namespace. Function Description make_perspective(width, height, near_z, far_z) Constructs a perspective projection matrix using width and height of the frustum. make_perspective_fov(fov, aspect_ratio, near_z, far_z) Constructs a perspective projection matrix using field-of-view and aspect_ratio of the frustum. make_perspective_off_center(left, right, bottom, top, near_z, far_z) Constructs a perspective projection matrix using offsets of the four sides of the frustum from the camera center. make_orthographic(width, height, near_z, far_z) Constructs a orthographic projection matrix using width and height of the frustum. make_orthographic_off_center(f32 left, f32 right, f32 bottom, f32 top, f32 near_z, f32 far_z) Constructs a orthographic projection matrix using offsets of the four sides of the frustum from the camera center.","title":"Math Library"},{"location":"manual/basics/math_library/#math-library","text":"Luna SDK comes with a math library that contains most math types and functions commonly-used in 3D applications. The math library contains the following parts: #include <Luna/Runtime/Math/Math.hpp> // For basic math types and functions. #include <Luna/Runtime/Math/Vector.hpp> // For vector types and functions. #include <Luna/Runtime/Math/Matrix.hpp> // For matrix types and functions. #include <Luna/Runtime/Math/Quaternion.hpp> // For Quaternion type and functions. #include <Luna/Runtime/Math/Transform.hpp> // For transform operations. The math library use SIMD instructions for vector and matrix calculations when possible. If SIMD instructions are not available on the target platform, we also have non-SIMD implementations for all math operations for compatibility. The SIMD instructions support of math library includes support of SSE/SSE2, SSE3, SSE4, AVX, AVX2, FMA3 and SVML instruction sets on x86/x64 processors, and NEON instruction set on arm/arm64 processors.","title":"Math Library"},{"location":"manual/basics/math_library/#vectors","text":"#include <Luna/Runtime/Math/Vector.hpp> Float2 , Float3 and Float4 represent 2D, 3D and 4D vectors. These three types are 16-bytes aligned for maximizing SIMD performance. Luna SDK also provides unaligned vector types, these types are Vec2U<T> , Vec3U<T> and Vec4U<T> . The unaligned types are used mainly for storing and transferring vectors, such types should be converted to aligned types before they can be used for calculations. Luna SDK also defines Float2U , Int2U , UInt2U , Float3U , Int3U , UInt3U , Float4U , Int4U , UInt4U as aliasing types of Vec2U<T> , Vec3U<T> , Vec24U<T> for convenience. Components of these vector types can be fetched by their x , y , z and w properties. Aligned vector types can be compared( == and != ), added ( + ), subtracted ( - ), multiplied ( * ) and divided ( / ) like normal scalar types. These calculations are performed as performing the same calculation on each component element of the vector individually. When performing mathematical calculations between vector types and scalar types, the scaler number will be applied to all components of the vector. Luna SDK defines a series of functions to perform basic vector calculations. All these functions provide overloaded versions for handling 2D, 3D and 4D vector types. The following table lists all vector functions. Function Description in_bounds(a, min, max) Tests if a is in [min, max] bounds. length(a) Returns the length of vector a . length_squared(a) Returns the squared length of vector a . This is faster than length . dot(a, b) Returns the dot product of vector a and vector b . cross(a, b) Returns the cross product of vector a and vector b . normalize(a) Returns the normalized vector of vector a . clamp(a, min, max) Clamps vector a in [min, max] range. distance(a, b) Returns the Euclidean distance from vector a to vector b . distance_squared(a, b) Returns the squared Euclidean distance from vector a to vector b . This is faster than `distance . min(a, b) Returns one vector composed by the smaller component of each component in a and b . max(a, b) Returns one vector composed by the larger component of each component in a and b . lerp(a, b, t) Performs Linear interpolation between vector a and vector b according to one scalar factor t . smoothstep(a, b, t) Performs Smoothstep between vector a and vector b according to one scalar factor t . barycentric(a, b, c, x, y) Performs Barycentric triangle interpolation using three vector points a , b , c according to two scalar factors x and y . catmull_rom(a, b, c, d, t) Performs Catmull-Rom spline interpolation using four vector points a , b , c , d according to one scalar factor t . hermite(a, t1, b, t2, t) Performs Cubic Hermite spline interpolation using two vector points a , b , two vector tangents t1 , t2 according to one scalar factor t . reflect(i, n) Computes the reflection vector of the incident vector i using the normal vector n . refract(i, n, r) Computes the refraction vector of the incident vector i using the normal vector n and refraction index r .","title":"Vectors"},{"location":"manual/basics/math_library/#matrices","text":"#include <Luna/Runtime/Math/Matrix.hpp> Float3x3 and Float4x4 represent 3x3 and 4x4 32-bit floating-point matrices. These two types are 16-bytes aligned for maximizing SIMD performance. Luna SDK also provides unaligned matrix types, these types are Float3x2U , Float3x3U , Float4x3U and Float4x4U . The unaligned types are used for storing and transferring matrices, and should be converted to aligned types ( Float3x2U to Float3x3 , Float4x3U to Float4x4 ) before they can be used for calculation. Rows in one matrix can be fetched by the m property of the matrix type, which is an array of Float3 or Float4 for Float3x3 and Float4x4 , or an two-dimensional f32 array for any unaligned matrix type. Aligned matrix types can be compared( == and != ), added ( + ), subtracted ( - ), multiplied ( * ) and divided ( / ) like normal scalar types. These calculations are performed as performing the same calculation on each component element of the matrix individually. When performing mathematical calculations between matrix types and scalar types, the scaler number will be applied to all components of the matrix. Luna SDK defines a series of functions to perform basic matrix calculations. All these functions provide overloaded versions for handling different matrix types. The following table lists all matrix functions. Function Description mul(a, b) Performs matrix multiplication between a and b , where a and b can be vector or matrix types. determinant(m) Computes determinant of one matrix m . transpose(m) Computes the transpose matrix of one matrix m . inverse(m) Computes the inversed matrix of one matrix m .","title":"Matrices"},{"location":"manual/basics/math_library/#quaternions","text":"#include <Luna/Runtime/Math/Quaternion.hpp> Quaternion represents one Quaternion that can be used to represent a rotating operation in 3D space. Every Quaternion contains four f32 components, and is 16-bytes aligned for maximizing SIMD performance. The user can convert one Quaternion to Float4U for storing and transferring the Quaternion. Quaternion can be compared( == and != ), added ( + ), subtracted ( - ), multiplied ( * ) and divided ( / ) like normal scalar types. The addition and subtraction behavior of one Quaternion is the same as those of Float4 . The multiplication operation concatenates two Quaternions, while the division operation decomposes one Quaternion into two. Luna SDK defines a series of functions to perform Quaternion calculations. The following table lists all Quaternion functions. Function Description length(q) Returns the length of one Quaternion . Same as length for Float4 . length_squared(q) Returns the squared length of one Quaternion . Same as length_squared for Float4 . normalize(q) Normalizes one Quaternion . Same as normalize for Float4 . conjugate(q) Computes the conjugate of one Quaternion . inverse(q) Computes the inverse of one Quaternion . dot(q1, q2) Computes the dot product of two Quaternion s q1 and q2 . Same as dot for Float4 . lerp(q1, q2, t) Performs linear interpolation on two Quaternion s q1 and q2 according to one scalar factor t . slerp(q1, q2, t) Performs spherical linear interpolation on two Quaternion s q1 and q2 according to one scalar factor t .","title":"Quaternions"},{"location":"manual/basics/math_library/#transform","text":"#include <Luna/Runtime/Math/Transform.hpp> The transform header file does not include any new type. Instead, it defines a set of functions that can be useful for constructing affine matrices and projection matrices that are used in 2D and 3D transformations.","title":"Transform"},{"location":"manual/basics/math_library/#affine-matrix-operations","text":"2D affine matrices and 3D affine matrices are presented by Float3x3 and Float4x4 . The +x axis of one affine matrix points to right, the +y axis of one affine matrix points to top, the +z axis of one affine matrix points to forward. The following table lists all functions for operating affine matrices. All functions are declared in AffineMatrix namespace. Function Description make(p, r, s) Constructs one 2D or 3D affine matrix from position vector p , rotation scalar or Quaternion r and scaling vector s . up(m) Extracts the up vector from one 2D or 3D affine matrix. down(m) Extracts the down vector from one 2D or 3D affine matrix. left(m) Extracts the left vector from one 2D or 3D affine matrix. right(m) Extracts the right vector from one 2D or 3D affine matrix. forward Extracts the forward vector from one 3D affine matrix. backward Extracts the backward vector from one 2D or 3D affine matrix. translation(m) Extracts the translation vector from one 2D or 3D affine matrix. rotation(m) Extracts the rotation scalar or Quaternion from one 2D or 3D affine matrix. euler_angles(m) Extracts the rotation vector that uses stores the rotation in Euler angles (pitch, yaw, roll) from one 3D affine matrix. scaling(m) Extracts the scaling vector from one 2D or 3D affine matrix. translation_matrix(m) Extracts the translation matrix from one 2D or 3D affine matrix. rotation_matrix(m) Extracts the rotation matrix from one 2D or 3D affine matrix. scaling_matrix(m) Extracts the scaling matrix from one 2D or 3D affine matrix. make_translation(t) Constructs one 2D or 3D translation matrix from position vector p . make_rotation(r) Constructs one 2D or 3D rotation matrix from rotation scalar or Quaternion r . make_rotation_x(r) Constructs one 3D rotation matrix that represents one rotation alone x axis. make_rotation_y(r) Constructs one 3D rotation matrix that represents one rotation alone y axis. make_rotation_z(r) Constructs one 3D rotation matrix that represents one rotation alone z axis. make_rotation_axis_angle(axis, angle) Constructs one 3D rotation matrix by specifying the rotation axis and rotation angle. make_rotation_euler_angles Constructs one 3D rotation matrix from Euler angles (pitch, yaw, roll). make_scaling(s) Constructs one 2D or 3D scaling matrix from scaling vector s . make_look_at(eye, target, up) Constructs one view matrix that targets the specified position. make_look_to(eye, dir, up) Constructs one view matrix that targets the specified direction.","title":"Affine matrix operations"},{"location":"manual/basics/math_library/#projection-matrix-operations","text":"The following table lists all functions for operating projection matrices. All functions are declared in ProjectionMatrix namespace. Function Description make_perspective(width, height, near_z, far_z) Constructs a perspective projection matrix using width and height of the frustum. make_perspective_fov(fov, aspect_ratio, near_z, far_z) Constructs a perspective projection matrix using field-of-view and aspect_ratio of the frustum. make_perspective_off_center(left, right, bottom, top, near_z, far_z) Constructs a perspective projection matrix using offsets of the four sides of the frustum from the camera center. make_orthographic(width, height, near_z, far_z) Constructs a orthographic projection matrix using width and height of the frustum. make_orthographic_off_center(f32 left, f32 right, f32 bottom, f32 top, f32 near_z, f32 far_z) Constructs a orthographic projection matrix using offsets of the four sides of the frustum from the camera center.","title":"Projection matrix operations"},{"location":"manual/basics/memory_management/","text":"Memory Management Luna SDK defines its own memory management functions instead of using those provided by standard libraries. The user should use functions provided by Luna SDK to manage memory when programming with Luna SDK. Heap memory allocation and deallocation #include <Luna/Runtime/Memory.hpp> The following functions allocate memory blocks in heaps. Function Description C++ STD Equivalent memalloc(size, alignment) Allocates memory block. malloc(size) memfree(ptr, alignment) Frees memory block. free(ptr) memrealloc(ptr, size, alignment) Reallocates memory block. realloc(ptr, size) memsize(ptr, alignment) Gets the size of the allocated memory block. N/A You may notice that all heap memory allocation functions provided by Luna SDK takes an alignment parameter, which can be used to allocate memory blocks with special address alignment requirements. If you don't have such requirement, simply specify alignment as 0 and Luna SDK will use the default alignment requirement for allocating memory blocks, which is 8 on 32-bit platforms and 16 on 64-bit platforms. Memory leak detection Luna SDK comes with an memory leak detection layer that tracks all memory blocks allocated from memalloc or memrealloc . The memory leak detection layer is disabled by default, you may enable it on xmake menus, or passing --check_memory_leak=true when building the SDK. You can use LUNA_RUNTIME_CHECK_MEMORY_LEAK macro to determine whether the memory leak detection layer is enabled. If memory leak detection layer is enabled and unfreed memory blocks are detected when Luna SDK is closing, Luna SDK will print warning messages for each unfreed memory block, including the size and the memory address of the block. If these blocks were allocated using memnew , the type of the block will also be printed, so that the user can detect the problem quickly. Dynamic object creation and destruction #include <Luna/Runtime/Memory.hpp> The following functions creates and destroys dynamic objects. Function Description C++ STD Equivalent memnew<T>(args...) Creates a dynamic object. new T(args...) memdelete(ptr) Destroys a dynamic object. delete ptr Out of memory (OOM) Although memalloc and memnew returns nullptr to indicate a failed memory allocation, most functions in Luna SDK do not handle OOM and assumes that the memory allocation will never fail. We treat OOM as an unrecoverable error for the following reasons: Dynamic memory allocation is used in throughout Luna SDK. If we need to handle OOM correctly, the SDK code will become much complex and redundant. It is not worthwhile to pay such effort to handle one error that seldom happens in normal cases. OOM actually never happens on some operating systems, if such system fails to allocate memory, it will simply kill the current process or let the user kill another process to free up some memory. We consider OOM as an optimization problem, not a programming error, so it is improper to \"handle\" it. If your program suffers from OOM on the target platform, the best thing to do is reducing the memory size consumed by your program, rather than trying to recover from OOM. Memory utility library #include <Luna/Runtime/MemoryUtils.hpp> Memory utility library provides functions that can be used to manipulate memory data easily. You can check the docs for each function for their usages. _kb , _mb , _gb , _tb are integer literals that can be used to define byte sizes clearly. For example, you can use 100_mb to represent 100 * 1024 * 1024 , and they have the same meaning. memcpy , memcmp , memset , memmove are memory manipulating functions provided by the C/C++ standard library. They can be used in Luna SDK as well. memzero is used to fill one range of memory with value 0 , it is equivalent to calling memset with value 0 . memcpy_bitmap and memcpy_bitmap3d are used to copy binary data between two row-major 2D and 3D bitmaps. pixel_offset is used to fetch the address of one particular pixel in a row-major 2D or 3D bitmap. These functions can be useful when dealing with bitmap data. align_upper increases the input size or address number to the nearest number that is a multiple of the alignment number. bit_test , bit_set , bit_reset tests, sets and resets one specific bit on the given memory address. These functions can be useful when performing bitwise operations. addressof returns the real address of one object, even if the operator& of the object has been overloaded. default_construct , value_construct , copy_construct , move_construct and direct_construct performs object initialization on the object pointed by the specified iterator/pointer. destruct performs object destruction on the object pointed by the specified iterator/pointer. copy_assign and move_assign perform copy assignment and move assignment on two objects pointed by the specified iterators/pointers. default_construct_range , value_construct_range , copy_construct_range and move_construct_range performs object initialization on objects in the range specified by two iterators/pointers. destruct_range performs object destruction on objects in the range specified by two iterators/pointers. copy_assign_range , move_assign_range and move_assign_range_backward performs copy assignment and move assignment on objects in the range specified by two iterators/pointers. fill_construct_range and fill_assign_range calls the copy constructor and copy assignment operator on objects with the specified instance. copy_relocate_range , copy_relocate , move_relocate_range and move_relocate_range_backward relocates objects in the range specified by two iterators/pointers to another continuous range, preserving the order of objects. If the object is trivially relocatable, this function will perform memory copy and does not invoke any move constructor; if the object is not trivially relocatable, this call performs move construction on the new address, and destruction on the old address.","title":"Memory Management"},{"location":"manual/basics/memory_management/#memory-management","text":"Luna SDK defines its own memory management functions instead of using those provided by standard libraries. The user should use functions provided by Luna SDK to manage memory when programming with Luna SDK.","title":"Memory Management"},{"location":"manual/basics/memory_management/#heap-memory-allocation-and-deallocation","text":"#include <Luna/Runtime/Memory.hpp> The following functions allocate memory blocks in heaps. Function Description C++ STD Equivalent memalloc(size, alignment) Allocates memory block. malloc(size) memfree(ptr, alignment) Frees memory block. free(ptr) memrealloc(ptr, size, alignment) Reallocates memory block. realloc(ptr, size) memsize(ptr, alignment) Gets the size of the allocated memory block. N/A You may notice that all heap memory allocation functions provided by Luna SDK takes an alignment parameter, which can be used to allocate memory blocks with special address alignment requirements. If you don't have such requirement, simply specify alignment as 0 and Luna SDK will use the default alignment requirement for allocating memory blocks, which is 8 on 32-bit platforms and 16 on 64-bit platforms.","title":"Heap memory allocation and deallocation"},{"location":"manual/basics/memory_management/#memory-leak-detection","text":"Luna SDK comes with an memory leak detection layer that tracks all memory blocks allocated from memalloc or memrealloc . The memory leak detection layer is disabled by default, you may enable it on xmake menus, or passing --check_memory_leak=true when building the SDK. You can use LUNA_RUNTIME_CHECK_MEMORY_LEAK macro to determine whether the memory leak detection layer is enabled. If memory leak detection layer is enabled and unfreed memory blocks are detected when Luna SDK is closing, Luna SDK will print warning messages for each unfreed memory block, including the size and the memory address of the block. If these blocks were allocated using memnew , the type of the block will also be printed, so that the user can detect the problem quickly.","title":"Memory leak detection"},{"location":"manual/basics/memory_management/#dynamic-object-creation-and-destruction","text":"#include <Luna/Runtime/Memory.hpp> The following functions creates and destroys dynamic objects. Function Description C++ STD Equivalent memnew<T>(args...) Creates a dynamic object. new T(args...) memdelete(ptr) Destroys a dynamic object. delete ptr","title":"Dynamic object creation and destruction"},{"location":"manual/basics/memory_management/#out-of-memory-oom","text":"Although memalloc and memnew returns nullptr to indicate a failed memory allocation, most functions in Luna SDK do not handle OOM and assumes that the memory allocation will never fail. We treat OOM as an unrecoverable error for the following reasons: Dynamic memory allocation is used in throughout Luna SDK. If we need to handle OOM correctly, the SDK code will become much complex and redundant. It is not worthwhile to pay such effort to handle one error that seldom happens in normal cases. OOM actually never happens on some operating systems, if such system fails to allocate memory, it will simply kill the current process or let the user kill another process to free up some memory. We consider OOM as an optimization problem, not a programming error, so it is improper to \"handle\" it. If your program suffers from OOM on the target platform, the best thing to do is reducing the memory size consumed by your program, rather than trying to recover from OOM.","title":"Out of memory (OOM)"},{"location":"manual/basics/memory_management/#memory-utility-library","text":"#include <Luna/Runtime/MemoryUtils.hpp> Memory utility library provides functions that can be used to manipulate memory data easily. You can check the docs for each function for their usages. _kb , _mb , _gb , _tb are integer literals that can be used to define byte sizes clearly. For example, you can use 100_mb to represent 100 * 1024 * 1024 , and they have the same meaning. memcpy , memcmp , memset , memmove are memory manipulating functions provided by the C/C++ standard library. They can be used in Luna SDK as well. memzero is used to fill one range of memory with value 0 , it is equivalent to calling memset with value 0 . memcpy_bitmap and memcpy_bitmap3d are used to copy binary data between two row-major 2D and 3D bitmaps. pixel_offset is used to fetch the address of one particular pixel in a row-major 2D or 3D bitmap. These functions can be useful when dealing with bitmap data. align_upper increases the input size or address number to the nearest number that is a multiple of the alignment number. bit_test , bit_set , bit_reset tests, sets and resets one specific bit on the given memory address. These functions can be useful when performing bitwise operations. addressof returns the real address of one object, even if the operator& of the object has been overloaded. default_construct , value_construct , copy_construct , move_construct and direct_construct performs object initialization on the object pointed by the specified iterator/pointer. destruct performs object destruction on the object pointed by the specified iterator/pointer. copy_assign and move_assign perform copy assignment and move assignment on two objects pointed by the specified iterators/pointers. default_construct_range , value_construct_range , copy_construct_range and move_construct_range performs object initialization on objects in the range specified by two iterators/pointers. destruct_range performs object destruction on objects in the range specified by two iterators/pointers. copy_assign_range , move_assign_range and move_assign_range_backward performs copy assignment and move assignment on objects in the range specified by two iterators/pointers. fill_construct_range and fill_assign_range calls the copy constructor and copy assignment operator on objects with the specified instance. copy_relocate_range , copy_relocate , move_relocate_range and move_relocate_range_backward relocates objects in the range specified by two iterators/pointers to another continuous range, preserving the order of objects. If the object is trivially relocatable, this function will perform memory copy and does not invoke any move constructor; if the object is not trivially relocatable, this call performs move construction on the new address, and destruction on the old address.","title":"Memory utility library"},{"location":"manual/basics/modules/","text":"Modules Luna SDK is a modular framework, every function of Luna SDK is provided by one or more modules. The fundamental functions of Luna SDK are provided by Runtime module, which will be initialized along with Luna SDK and is can be used anywhere. Other functions are provided by dedicated modules and should be added to Luna SDK explicitly when required. Module files Every Luna SDK module should have its own directory under ${ROOT_DIR}/Modules directory, with the module name as the directory name. Under the module root directory, every module must have one xmake.lua script defining the building rules of the module. The user can use the following code as the starting point for new modules: target(\"MyModule\") set_luna_sdk_module() add_headerfiles(\"*.hpp\", \"Source/**.hpp\") add_files(\"Source/**.cpp\") add_deps(\"Runtime\", \"MuDepModule1\", \"MyDepModule2\") target_end() set_luna_sdk_module() tells xmake to import all Luna SDK module global options and specifications to the current module, including one set_kind call to properly set the module target file kind. One module may be built into one static library ( .lib or .o ) or one shared library ( .dll or .so ) based on build_shared_lib xmake config of Luna SDK. add_headerfiles and add_files imports module header files ( .h , .hpp and .inl ) and module source files ( .c , .cpp ) to the module. add_deps adds dependency modules for the current module, so that they can be linked correctly. Every module should have one Source directory under the module root directory that contains all private files and directories only visible to the current module. All files and directories that are not in Source directory will be considered as module public files and should not contain module source files ( .c , .cpp files). Luna SDK sets ${ROOT_DIR}/Modules as the global include directory for all modules and programs, so you can simply include module interface files by #include <Luna/ModuleName/FileName.hpp> , like #include <Luna/RHI/RHI.hpp> . Module namespace Every module should declare all entities under its own namespace under Luna namespace. The namespace name for the module should be concise and is may not be equal to the name of the module. Do not declare using namespace under the module interface header files. namespace Luna { namespace MyModule { // Your declarations goes here... } } Module API declaration Module API functions and variables should have special linkage and codec specifications to be exported and linked correctly when compiled to shared or static libraries. Every module should use LUNA_XXX_API macro to decorate all APIs of the module, where XXX is the name of your module. LUNA_XXX_API should be defined like so in the module header files: #ifndef LUNA_XXX_API #define LUNA_XXX_API #endif // Your API. LUNA_XXX_API void do_something(); When you need to provide definitions for APIs on module source files, define LUNA_XXX_API before including header files like so: #include <Luna/Runtime/PlatformDefines.hpp> #define LUNA_XXX_API LUNA_EXPORT // Include your header files... This will overwrite LUNA_XXX_API with LUNA_EXPORT , which is a predefined platform-specific macro to append linkage and codec declarations for API functions and objects. Module registration #include <Luna/Runtime/Module.hpp> One module must be registered to Luna SDK before it can be initialized and used by your program or other modules. Modules are described by ModuleDesc structure, you can fill this structure and call add_module to add one module to Luna SDK. ModuleDesc desc; desc.name = \"MyModule\"; desc.dependencies = \"MuDepModule1;MyDepModule2\"; // `Runtime` is always included and should not be listed here. desc.init_func = my_module_init; // Can be `nullptr` if not needed. desc.close_func = my_module_close; // Can be `nullptr` if not needed. add_module(&desc); add_module is one of few functions that can be called before Luna SDK is initialized. StaticRegisterModule uses this behavior to register modules automatically by calling add_module in its constructor. We can simply declare it as a global object for our module to register our module automatically when the module library is loaded. StaticRegisterModule my_module(\"MyModule\", \"MuDepModule1;MyDepModule2\", my_module_init, my_module_close); Module initialization #include <Luna/Runtime/Module.hpp> Modules are not initialized along with Luna SDK and should be manually initialized after Luna SDK is initialized. This behavior enables the user to have a precisely control over module initialization time and can perform some extra operations before the module is initialized. Module system provides three methods to initialize modules: init_modules , init_module and init_module_dependencies . init_modules initialize all uninitialized modules registered to Luna SDK, by their dependency order. This is the simplest way to initialize all modules in one call, but the user does not have much control during the module initialization process. init_module initializes one specific module and all its recursively dependency modules of that module by their dependency order, while init_module_dependencies only initializes all recursively dependency modules of the specified module by their dependency order, but not the specified module. These two functions let the user pause the module initialization process to perform some extra tasks (like choosing the default graphic device), then continue to initialize other modules, which make the module initialization process more flexible. Module closing Modules are closed along with Luna SDK in the reverse order of their initialization order. There is no approach to close modules manually.","title":"Modules"},{"location":"manual/basics/modules/#modules","text":"Luna SDK is a modular framework, every function of Luna SDK is provided by one or more modules. The fundamental functions of Luna SDK are provided by Runtime module, which will be initialized along with Luna SDK and is can be used anywhere. Other functions are provided by dedicated modules and should be added to Luna SDK explicitly when required.","title":"Modules"},{"location":"manual/basics/modules/#module-files","text":"Every Luna SDK module should have its own directory under ${ROOT_DIR}/Modules directory, with the module name as the directory name. Under the module root directory, every module must have one xmake.lua script defining the building rules of the module. The user can use the following code as the starting point for new modules: target(\"MyModule\") set_luna_sdk_module() add_headerfiles(\"*.hpp\", \"Source/**.hpp\") add_files(\"Source/**.cpp\") add_deps(\"Runtime\", \"MuDepModule1\", \"MyDepModule2\") target_end() set_luna_sdk_module() tells xmake to import all Luna SDK module global options and specifications to the current module, including one set_kind call to properly set the module target file kind. One module may be built into one static library ( .lib or .o ) or one shared library ( .dll or .so ) based on build_shared_lib xmake config of Luna SDK. add_headerfiles and add_files imports module header files ( .h , .hpp and .inl ) and module source files ( .c , .cpp ) to the module. add_deps adds dependency modules for the current module, so that they can be linked correctly. Every module should have one Source directory under the module root directory that contains all private files and directories only visible to the current module. All files and directories that are not in Source directory will be considered as module public files and should not contain module source files ( .c , .cpp files). Luna SDK sets ${ROOT_DIR}/Modules as the global include directory for all modules and programs, so you can simply include module interface files by #include <Luna/ModuleName/FileName.hpp> , like #include <Luna/RHI/RHI.hpp> .","title":"Module files"},{"location":"manual/basics/modules/#module-namespace","text":"Every module should declare all entities under its own namespace under Luna namespace. The namespace name for the module should be concise and is may not be equal to the name of the module. Do not declare using namespace under the module interface header files. namespace Luna { namespace MyModule { // Your declarations goes here... } }","title":"Module namespace"},{"location":"manual/basics/modules/#module-api-declaration","text":"Module API functions and variables should have special linkage and codec specifications to be exported and linked correctly when compiled to shared or static libraries. Every module should use LUNA_XXX_API macro to decorate all APIs of the module, where XXX is the name of your module. LUNA_XXX_API should be defined like so in the module header files: #ifndef LUNA_XXX_API #define LUNA_XXX_API #endif // Your API. LUNA_XXX_API void do_something(); When you need to provide definitions for APIs on module source files, define LUNA_XXX_API before including header files like so: #include <Luna/Runtime/PlatformDefines.hpp> #define LUNA_XXX_API LUNA_EXPORT // Include your header files... This will overwrite LUNA_XXX_API with LUNA_EXPORT , which is a predefined platform-specific macro to append linkage and codec declarations for API functions and objects.","title":"Module API declaration"},{"location":"manual/basics/modules/#module-registration","text":"#include <Luna/Runtime/Module.hpp> One module must be registered to Luna SDK before it can be initialized and used by your program or other modules. Modules are described by ModuleDesc structure, you can fill this structure and call add_module to add one module to Luna SDK. ModuleDesc desc; desc.name = \"MyModule\"; desc.dependencies = \"MuDepModule1;MyDepModule2\"; // `Runtime` is always included and should not be listed here. desc.init_func = my_module_init; // Can be `nullptr` if not needed. desc.close_func = my_module_close; // Can be `nullptr` if not needed. add_module(&desc); add_module is one of few functions that can be called before Luna SDK is initialized. StaticRegisterModule uses this behavior to register modules automatically by calling add_module in its constructor. We can simply declare it as a global object for our module to register our module automatically when the module library is loaded. StaticRegisterModule my_module(\"MyModule\", \"MuDepModule1;MyDepModule2\", my_module_init, my_module_close);","title":"Module registration"},{"location":"manual/basics/modules/#module-initialization","text":"#include <Luna/Runtime/Module.hpp> Modules are not initialized along with Luna SDK and should be manually initialized after Luna SDK is initialized. This behavior enables the user to have a precisely control over module initialization time and can perform some extra operations before the module is initialized. Module system provides three methods to initialize modules: init_modules , init_module and init_module_dependencies . init_modules initialize all uninitialized modules registered to Luna SDK, by their dependency order. This is the simplest way to initialize all modules in one call, but the user does not have much control during the module initialization process. init_module initializes one specific module and all its recursively dependency modules of that module by their dependency order, while init_module_dependencies only initializes all recursively dependency modules of the specified module by their dependency order, but not the specified module. These two functions let the user pause the module initialization process to perform some extra tasks (like choosing the default graphic device), then continue to initialize other modules, which make the module initialization process more flexible.","title":"Module initialization"},{"location":"manual/basics/modules/#module-closing","text":"Modules are closed along with Luna SDK in the reverse order of their initialization order. There is no approach to close modules manually.","title":"Module closing"},{"location":"manual/basics/serialization_and_deserialization/","text":"Serialization and Deserialization #include <Luna/Runtime/Serialization.hpp> Luna SDK comes with a built-in serialization and deserialization library that can serialize objects of serializable types to Variant objects, with can then be encoded to byte streams using JSON or other text and binary formats. One type must meets the following requirements to be a serializable type: This type has been registered to the type system . This type is marked as serializable by calling set_serializable . set_serializable accepts one optional SerializableTypeDesc structure, which let the user set serialization and deserialization callback functions for the type. If this structure is not provided, the default serialization and deserialization procedure will be used. For generic structure types, set_serializable will be applied to all instanced types of that generic type. The user can also call set_serializable on one specific instanced type to override the serialization and deserialization behavior set on the generic type. For any serializable objects, the user can call serialize to serialize one object to one Variant , and call deserialize to deserialize one object from one Variant . Default serialization and deserialization behavior The default serialization procedure checks the type of the object, then returns one Variant object based on the following rules: For structure types, the returned Variant will be an object of serializable properties, indexed by their property names. The data of every property is generated by another serialize call. Unserializable properties will be ignored. For single enumeration types, the returned Variant will be the name of the option that matches the underlying value of the object. If no option matches the underlying value, the serialization function will throw BasicError::bad_data error. For multiple enumeration types, the returned Variant will be an array that contains names of all selected options. If no option is selected, an empty Variant array will be returned. The default deserialization procedure checks the type of the object, then assigns the data of the object based on the following rules: For structure types, deserialize is called for every serializable property of the object with the data of that property. Properties without data in Variant and unrecognized properties will be ignored. For single enumeration types, the default deserialization function reads the name string stored in Variant , and assigns the enumeration object with the value whose option name matches the data. If no option matches the name string stored in Variant , the deserialization function will throw BasicError::bad_data error. For multiple enumeration types, the default deserialization function firstly clears the object to 0 , then reads the array of strings stored in Variant , and sets corresponding bits in the target object. Unrecognized options will be ignored.","title":"Serialization and Deserialization"},{"location":"manual/basics/serialization_and_deserialization/#serialization-and-deserialization","text":"#include <Luna/Runtime/Serialization.hpp> Luna SDK comes with a built-in serialization and deserialization library that can serialize objects of serializable types to Variant objects, with can then be encoded to byte streams using JSON or other text and binary formats. One type must meets the following requirements to be a serializable type: This type has been registered to the type system . This type is marked as serializable by calling set_serializable . set_serializable accepts one optional SerializableTypeDesc structure, which let the user set serialization and deserialization callback functions for the type. If this structure is not provided, the default serialization and deserialization procedure will be used. For generic structure types, set_serializable will be applied to all instanced types of that generic type. The user can also call set_serializable on one specific instanced type to override the serialization and deserialization behavior set on the generic type. For any serializable objects, the user can call serialize to serialize one object to one Variant , and call deserialize to deserialize one object from one Variant .","title":"Serialization and Deserialization"},{"location":"manual/basics/serialization_and_deserialization/#default-serialization-and-deserialization-behavior","text":"The default serialization procedure checks the type of the object, then returns one Variant object based on the following rules: For structure types, the returned Variant will be an object of serializable properties, indexed by their property names. The data of every property is generated by another serialize call. Unserializable properties will be ignored. For single enumeration types, the returned Variant will be the name of the option that matches the underlying value of the object. If no option matches the underlying value, the serialization function will throw BasicError::bad_data error. For multiple enumeration types, the returned Variant will be an array that contains names of all selected options. If no option is selected, an empty Variant array will be returned. The default deserialization procedure checks the type of the object, then assigns the data of the object based on the following rules: For structure types, deserialize is called for every serializable property of the object with the data of that property. Properties without data in Variant and unrecognized properties will be ignored. For single enumeration types, the default deserialization function reads the name string stored in Variant , and assigns the enumeration object with the value whose option name matches the data. If no option matches the name string stored in Variant , the deserialization function will throw BasicError::bad_data error. For multiple enumeration types, the default deserialization function firstly clears the object to 0 , then reads the array of strings stored in Variant , and sets corresponding bits in the target object. Unrecognized options will be ignored.","title":"Default serialization and deserialization behavior"},{"location":"manual/basics/strings/","text":"Strings Strings are sequences of characters represented by c8 , c16 and c32 , terminated by a null terminator ( \\0 ). Luna SDK provides various string types and libraries, they will be discussed in this section. String types #include <Luna/Runtime/String.hpp> // For String, String16 and String32. #include <Luna/Runtime/Name.hpp> // For Name. Luna SDK provides two kinds of string types: String and Name . The String type is a sequence of c8 characters ended with \\0 . We designed String as a replacement of std::string in Luna SDK, so most methods used for std::string should work find with our String type. Besides the String type, we also have String16 and String32 as replacements for std::u16string and std::u32string that holds character sequences of c16 and c32 types. The Name type represents one immutable c8 string that is usually used as an identifier. We implemented a global name registry in Luna SDK so that every unique name will have only one data copy in the registry, and all Name objects with the same string data refers to that copy, thus can be compared for equality quickly. The name string data is reference counted, and will be freed when the last Name object that refers to the data is destructed. Strings stored in Name cannot be changed, if the user assigns Name with another string, the Name object will refer to another string data entry, remaining the original string entry unchanged. Name and String can be converted to each other implicitly. There is no enforced encoding format for string types, but most text processing APIs in Luna SDK expects UTF-8 encoded strings for String and Name types. String utility library #include <Luna/Runtime/StringUtils.hpp> The string utility library provides functions for processing characters and strings. Luna SDK imports the following string and character processing functions from C standard library that can be used directly in Luna SDK: strncpy strcat strncat strxfrm strncmp strcoll strchr strrchr strspn strpbrk strstr strtok isalnum isalpha islower isupper tolower toupper isdigit isxdigit iscntrl isgraph isspace isblank isprint ispunct strlen , strcpy and strcmp are compatible to C standard library, but are extended by Luna SDK so they handles all character types. strcmp_prefix checks whether one string is the prefix string of another string, and returns 0 if is. strtoi64 , strtou64 and strtof64 interprets one number value presented the by string, and returns the value. Unicode encoding library #include <Luna/Runtime/UTF8.hpp> Unicode is a text encoding standard that is widely used in modern computers, programs and websites. Luna SDK comes with a built-in Unicode library for processing strings encoded in commonly-used Unicode formats, including UTF-8, UTF-16 (LE and GE) and UTF-32. Luna SDK uses 32-bit character type ( c32 ) to represent one Unicode character, the value of the character object represents the codepoint of the character in Unicode character table. One Unicode character can be encoded to 1 c32 character in UTF-32, 1 to 2 c16 characters in UTF-16, and 1 to 6 c8 characters in UTF-8. By definition, one Unicode character represented by c32 differs from one Unicode character encoded using UTF-32 (the first bit of one UTF-32 character must be 0, so only 2^32 Unicode codepoints can be represented in UTF-32). But in practice, all existing Unicode characters can be converted to their UTF-32 representation without any modification, so we do not differ one Unicode character from one UTF-32 character in this manual. utf8_charspan and utf16_charspan take one Unicode character, and return the number of c8 or c16 characters required to represent that character in UTF-8 or UTF-16 encoding. utf8_charlen and utf16_charlen take the first c8 or c16 character of one UTF-8 or UTF-16 encoded Unicode character, and return the number of bytes used for that character. These functions can be used to measure the size of one UTF-32 character in UTF-8 and UTF-16 encoding. utf8_strlen and utf16_strlen calculate the number of Unicode characters contained by a UTF-8 or UTF-16 encoded string, utf8_index and utf16_index return the index of the first c8 or c16 character of the n th Unicode character in a UTF-8 or UTF-16 ebcided string. These functions can be used to calculate the length of Unicode-encoded strings. utf8_encode_char and utf16_encode_char encode one Unicode character into multiple c8 or c16 characters using UTF-8 or UTF-16 encoding, write the encoded characters to the user-provided buffer, and return the number of characters written. utf8_decode_char and utf16_decode_char , on the other side, read multiple c8 or c16 characters from the user-provided buffer, and returns the Unicode character represented by these characters. utf16_to_utf8 converts a UTF-8 encoded string to a UTF-16 encoded string, and utf8_to_utf16 converts a UTF-16 encoded string to a UTF-8 encoded string. Both functions write result strings in a user-provided buffer, utf16_to_utf8_len and utf8_to_utf16_len can be used to calculate the minimum size (measured in number of c8 or c16 characters, not including the null terminator) required for the buffer to hold the result string. Base64 encoding library #include <Luna/Runtime/Base64.hpp> Base64 is an encoding format that represents arbitrary binary data using 64 printable characters, plus one character ( = ) for paddings. It is useful to store binary data in a text-based file. Luna SDK comes with a built-in Base64 library for encoding and decoding binary data using Base64. base64_encode encodes the binary data in the user-provided source buffer to a Base64 encoded string, and writes the string to the user-provided destination buffer. To determine the size of the destination buffer required, call base64_get_encoded_size with the size of the row binary data. base64_decode decodes the Base64 string in the user-provided source buffer to original binary data, and writes the binary data to the user-provided destination buffer. To determine the size of the destination buffer required, call base64_get_decoded_size with the size of the Base64 string, excluding the null terminator.","title":"Strings"},{"location":"manual/basics/strings/#strings","text":"Strings are sequences of characters represented by c8 , c16 and c32 , terminated by a null terminator ( \\0 ). Luna SDK provides various string types and libraries, they will be discussed in this section.","title":"Strings"},{"location":"manual/basics/strings/#string-types","text":"#include <Luna/Runtime/String.hpp> // For String, String16 and String32. #include <Luna/Runtime/Name.hpp> // For Name. Luna SDK provides two kinds of string types: String and Name . The String type is a sequence of c8 characters ended with \\0 . We designed String as a replacement of std::string in Luna SDK, so most methods used for std::string should work find with our String type. Besides the String type, we also have String16 and String32 as replacements for std::u16string and std::u32string that holds character sequences of c16 and c32 types. The Name type represents one immutable c8 string that is usually used as an identifier. We implemented a global name registry in Luna SDK so that every unique name will have only one data copy in the registry, and all Name objects with the same string data refers to that copy, thus can be compared for equality quickly. The name string data is reference counted, and will be freed when the last Name object that refers to the data is destructed. Strings stored in Name cannot be changed, if the user assigns Name with another string, the Name object will refer to another string data entry, remaining the original string entry unchanged. Name and String can be converted to each other implicitly. There is no enforced encoding format for string types, but most text processing APIs in Luna SDK expects UTF-8 encoded strings for String and Name types.","title":"String types"},{"location":"manual/basics/strings/#string-utility-library","text":"#include <Luna/Runtime/StringUtils.hpp> The string utility library provides functions for processing characters and strings. Luna SDK imports the following string and character processing functions from C standard library that can be used directly in Luna SDK: strncpy strcat strncat strxfrm strncmp strcoll strchr strrchr strspn strpbrk strstr strtok isalnum isalpha islower isupper tolower toupper isdigit isxdigit iscntrl isgraph isspace isblank isprint ispunct strlen , strcpy and strcmp are compatible to C standard library, but are extended by Luna SDK so they handles all character types. strcmp_prefix checks whether one string is the prefix string of another string, and returns 0 if is. strtoi64 , strtou64 and strtof64 interprets one number value presented the by string, and returns the value.","title":"String utility library"},{"location":"manual/basics/strings/#unicode-encoding-library","text":"#include <Luna/Runtime/UTF8.hpp> Unicode is a text encoding standard that is widely used in modern computers, programs and websites. Luna SDK comes with a built-in Unicode library for processing strings encoded in commonly-used Unicode formats, including UTF-8, UTF-16 (LE and GE) and UTF-32. Luna SDK uses 32-bit character type ( c32 ) to represent one Unicode character, the value of the character object represents the codepoint of the character in Unicode character table. One Unicode character can be encoded to 1 c32 character in UTF-32, 1 to 2 c16 characters in UTF-16, and 1 to 6 c8 characters in UTF-8. By definition, one Unicode character represented by c32 differs from one Unicode character encoded using UTF-32 (the first bit of one UTF-32 character must be 0, so only 2^32 Unicode codepoints can be represented in UTF-32). But in practice, all existing Unicode characters can be converted to their UTF-32 representation without any modification, so we do not differ one Unicode character from one UTF-32 character in this manual. utf8_charspan and utf16_charspan take one Unicode character, and return the number of c8 or c16 characters required to represent that character in UTF-8 or UTF-16 encoding. utf8_charlen and utf16_charlen take the first c8 or c16 character of one UTF-8 or UTF-16 encoded Unicode character, and return the number of bytes used for that character. These functions can be used to measure the size of one UTF-32 character in UTF-8 and UTF-16 encoding. utf8_strlen and utf16_strlen calculate the number of Unicode characters contained by a UTF-8 or UTF-16 encoded string, utf8_index and utf16_index return the index of the first c8 or c16 character of the n th Unicode character in a UTF-8 or UTF-16 ebcided string. These functions can be used to calculate the length of Unicode-encoded strings. utf8_encode_char and utf16_encode_char encode one Unicode character into multiple c8 or c16 characters using UTF-8 or UTF-16 encoding, write the encoded characters to the user-provided buffer, and return the number of characters written. utf8_decode_char and utf16_decode_char , on the other side, read multiple c8 or c16 characters from the user-provided buffer, and returns the Unicode character represented by these characters. utf16_to_utf8 converts a UTF-8 encoded string to a UTF-16 encoded string, and utf8_to_utf16 converts a UTF-16 encoded string to a UTF-8 encoded string. Both functions write result strings in a user-provided buffer, utf16_to_utf8_len and utf8_to_utf16_len can be used to calculate the minimum size (measured in number of c8 or c16 characters, not including the null terminator) required for the buffer to hold the result string.","title":"Unicode encoding library"},{"location":"manual/basics/strings/#base64-encoding-library","text":"#include <Luna/Runtime/Base64.hpp> Base64 is an encoding format that represents arbitrary binary data using 64 printable characters, plus one character ( = ) for paddings. It is useful to store binary data in a text-based file. Luna SDK comes with a built-in Base64 library for encoding and decoding binary data using Base64. base64_encode encodes the binary data in the user-provided source buffer to a Base64 encoded string, and writes the string to the user-provided destination buffer. To determine the size of the destination buffer required, call base64_get_encoded_size with the size of the row binary data. base64_decode decodes the Base64 string in the user-provided source buffer to original binary data, and writes the binary data to the user-provided destination buffer. To determine the size of the destination buffer required, call base64_get_decoded_size with the size of the Base64 string, excluding the null terminator.","title":"Base64 encoding library"},{"location":"manual/basics/thread_and_synchronization_objects/","text":"Thread and Synchronization Objects Threads #include <Luna/Runtime/Thread.hpp> new_thread creates one system-level thread, which is represented by IThread . The user can wait for the thread to exit by calling IThread::wait , and check whether the thread is exited by calling IThread::try_wait . When the last reference to IThread is releasing, the system blocks the current thread until the thread quits. Every thread uses a thread-local variable to record the current thread's handle, which can be retrieved by get_current_thread . The main thread's handle is also recorded and can be retrieved from any thread by get_main_thread . The user can delay the execution of the current thread by calling sleep or fast_sleep , the second function is more accurate and will not suspend the current thread if the time specified is smaller than several milliseconds. The user can call yield_current_thread to yield the remain time slice of the current thread and let OS to schedule other threads. This is useful for reducing CPU cycles if the current thread is waiting for another operation to finish by hardware or another thread. Thread local storage (TLS) #include <Luna/Runtime/Thread.hpp> Thread local storage is a set of pointer-sized memory slots that contains unique data for every thread. This can be useful to store thread-local data and is efficient since reading such data does not require synchronization between threads. Use tls_alloc to create a new thread local storage slot. The slot is allocated for every thread in the current process, including threads that are not yet created. Every thread local storage slot may accept an optional destructor function, which will be called to clean up the thread local object when one thread with one non-zero thread local value on the specified slot is exiting. The TLS destructor function works only for threads created by new_thread on Windows. tls_alloc returns one opaque_t -typed handle, which will be used to get the pointer stored in the thread local storage by tls_get , and set the pointer stored in the thread local storage by tls_set . The stored pointer will be set to 0 by system before it is set by the user for the first time on one particular thread. tls_free frees one thread local storage slot allocated by tls_alloc . Note that freeing one TLS slot will not call destructors registered by tls_alloc , so make sure to clean up such resources manually. Signals #include <Luna/Runtime/Signal.hpp> Signal ( ISignal ) is a synchronization object for execution synchronization between threads. Every signal has two states: triggered and untriggered. When one signal is in untriggered state, all threads that wait for the signal will be blocked until the signal is switched to triggered state. When one signal is in triggered state, all threads that wait for the signal will be resumed. One signal can be created by new_signal , the signal is in untriggered state when created. One signal can be monitored by ISignal::wait and ISignal::try_wait , the second form returns false instead of blocking the current thread if the signal is in untriggered state. One signal can be triggered by ISignal::trigger , which transfers the signal to triggered state. One signal can be reset back to untriggered state manually or automatically, which is specified by manual_reset when creating the signal. If manual_reset is true , one ISignal::trigger call will resume all threads waiting for the signal, and the signal stays in triggered state until ISignal::reset is called; if manual_reset is false , every ISignal::trigger call will only resume exact one thread waiting for the signal, and the signal will be reset back to untriggered state automatically. The resuming order of threads waiting for the signal is unspecified in both modes. Mutex #include <Luna/Runtime/Mutex.hpp> Mutex ( IMutex ) is a synchronization object for granting exclusive access of one entity to at most one thread. Every mutex have two states: locked and unlocked. When one mutex is in unlocked state, the first thread that tries to acquire the lock succeeds and transfers the mutex to locked state. When one mutex is in locked state, all other threads that try to acquire the mutex will get blocked until the mutex is released by its owning thread and is transferred to unlocked state. The mutex lock is recursive, acquiring the lock multiple times from the same thread is allowed, but the user should release the lock the same times as she acquires the lock to finally release the lock. One mutex can be created by new_mutex , the mutex is in unlocked state when created. One mutex can be locked by IMutex::wait and IMutex::try_wait , the second form returns false instead of blocking the current thread if failed to acquire the lock. One mutex can be unlocked by IMutex::unlock . The user can use MutexGuard helper object to lock one mutex in one function scope and release it automatically when MutexGuard is expired. Spin lock #include <Luna/Runtime/SpinLock.hpp> A spin lock ( SpinLock or RecursiveSpinLock ) is a light-weight version of IMutex with the following differences: The spin lock is implemented purely in user-mode by C++, while the mutex is implemented by the underlying platform/OS and is usually implemented in kernel-mode as an OS component, which means locking and releasing one spin lock is much faster than locking and releasing one mutex, since the later is usually performed through a system call. The spin lock will never suspend one thread, nor will it yield the time slice of the waiting thread. If one spin lock is already locked, the waiting thread will keep checking (busy-waiting) until it obtains the lock. In the other side, the mutex will usually suspends or yields the current thread if the mutex is already locked to let other threads use the processor. This makes the spin lock suitable for locking the resource for a very short period of time (hundreds or thousands of CPU-cycles), but not suitable if the lock will be obtained for a long time (>100us). Creating one spin lock creation consumes much less memory than creating one mutex (only 4 bytes for non-recursive spin lock). Meanwhile, creating one spin lock does not need to allocate any dynamic memory, just declare and use it, which makes it suitable for embedding into other objects. One spin lock can be acquired by lock and try_lock , and can be released by unlock . Recursive locking from the same thread is supported only by RecursiveSpinLock , not SpinLock . The user can use LockGuard helper object to acquire one spin lock in one function scope and release it automatically when LockGuard is expired. LockGuard works for both SpinLock and RecursiveSpinLock . Semaphore #include <Luna/Runtime/Semaphore.hpp> Semaphore ( ISemaphore ) is a synchronization object which allows at most max_count number of threads to access the same resource. Every semaphore maintains one counter value between 0 and max_count , when the semaphore is acquired by one thread, its counter value is decreased by one; when the semaphore is released by one thread, its counter value is increased by one. If the counter value is 0 when one thread wants to acquire the semaphore, the thread will be blocked until another thread releases the semaphore to increase the counter value. The counter value of one semaphore will never go below 0 . One semaphore can be created by new_semaphore . When creating the semaphore, the user can specify the initial counter value and maximum counter value of the semaphore. One semaphore can be acquired by ISemaphore::wait and ISemaphore::try_wait , the second form returns false instead of blocking the current thread if failed to acquire the semaphore. One semaphore can be released by ISemaphore::release . Read write lock #include <Luna/Runtime/ReadWriteLock.hpp> A read write lock ( IReadWriteLock ) is a special mutex that allows unlimited number of read locks, but only one write lock at the same time. Every read write lock have three states: unlocked, read locked and write locked. When the read write lock is in unlocked state, the user can acquire both read and write lock from the object, which transfers the object into read locked or write locked state. When the read write lock is in read locked state, only read locks can be acquired, which increases the internal read count of the lock. The read locked state will be transferred back to unlocked state when all read locks are released. When the object is in write locked state, neither read lock nor write lock can be acquired. The write locked state will be transferred back to unlocked state when the unique write lock is released. One read write lock can be acquired by new_read_write_lock . The read lock of one read write lock can be acquired by acquire_read and try_acquire_read , and can be released by release_read . The write lock of one read write lock can be acquired by acquire_write and try_acquire_write , and can be released by release_write . try_acquire_read and try_acquire_write return false instead of blocking the current thread if failed to acquire the lock.","title":"Thread and Synchronization Objects"},{"location":"manual/basics/thread_and_synchronization_objects/#thread-and-synchronization-objects","text":"","title":"Thread and Synchronization Objects"},{"location":"manual/basics/thread_and_synchronization_objects/#threads","text":"#include <Luna/Runtime/Thread.hpp> new_thread creates one system-level thread, which is represented by IThread . The user can wait for the thread to exit by calling IThread::wait , and check whether the thread is exited by calling IThread::try_wait . When the last reference to IThread is releasing, the system blocks the current thread until the thread quits. Every thread uses a thread-local variable to record the current thread's handle, which can be retrieved by get_current_thread . The main thread's handle is also recorded and can be retrieved from any thread by get_main_thread . The user can delay the execution of the current thread by calling sleep or fast_sleep , the second function is more accurate and will not suspend the current thread if the time specified is smaller than several milliseconds. The user can call yield_current_thread to yield the remain time slice of the current thread and let OS to schedule other threads. This is useful for reducing CPU cycles if the current thread is waiting for another operation to finish by hardware or another thread.","title":"Threads"},{"location":"manual/basics/thread_and_synchronization_objects/#thread-local-storage-tls","text":"#include <Luna/Runtime/Thread.hpp> Thread local storage is a set of pointer-sized memory slots that contains unique data for every thread. This can be useful to store thread-local data and is efficient since reading such data does not require synchronization between threads. Use tls_alloc to create a new thread local storage slot. The slot is allocated for every thread in the current process, including threads that are not yet created. Every thread local storage slot may accept an optional destructor function, which will be called to clean up the thread local object when one thread with one non-zero thread local value on the specified slot is exiting. The TLS destructor function works only for threads created by new_thread on Windows. tls_alloc returns one opaque_t -typed handle, which will be used to get the pointer stored in the thread local storage by tls_get , and set the pointer stored in the thread local storage by tls_set . The stored pointer will be set to 0 by system before it is set by the user for the first time on one particular thread. tls_free frees one thread local storage slot allocated by tls_alloc . Note that freeing one TLS slot will not call destructors registered by tls_alloc , so make sure to clean up such resources manually.","title":"Thread local storage (TLS)"},{"location":"manual/basics/thread_and_synchronization_objects/#signals","text":"#include <Luna/Runtime/Signal.hpp> Signal ( ISignal ) is a synchronization object for execution synchronization between threads. Every signal has two states: triggered and untriggered. When one signal is in untriggered state, all threads that wait for the signal will be blocked until the signal is switched to triggered state. When one signal is in triggered state, all threads that wait for the signal will be resumed. One signal can be created by new_signal , the signal is in untriggered state when created. One signal can be monitored by ISignal::wait and ISignal::try_wait , the second form returns false instead of blocking the current thread if the signal is in untriggered state. One signal can be triggered by ISignal::trigger , which transfers the signal to triggered state. One signal can be reset back to untriggered state manually or automatically, which is specified by manual_reset when creating the signal. If manual_reset is true , one ISignal::trigger call will resume all threads waiting for the signal, and the signal stays in triggered state until ISignal::reset is called; if manual_reset is false , every ISignal::trigger call will only resume exact one thread waiting for the signal, and the signal will be reset back to untriggered state automatically. The resuming order of threads waiting for the signal is unspecified in both modes.","title":"Signals"},{"location":"manual/basics/thread_and_synchronization_objects/#mutex","text":"#include <Luna/Runtime/Mutex.hpp> Mutex ( IMutex ) is a synchronization object for granting exclusive access of one entity to at most one thread. Every mutex have two states: locked and unlocked. When one mutex is in unlocked state, the first thread that tries to acquire the lock succeeds and transfers the mutex to locked state. When one mutex is in locked state, all other threads that try to acquire the mutex will get blocked until the mutex is released by its owning thread and is transferred to unlocked state. The mutex lock is recursive, acquiring the lock multiple times from the same thread is allowed, but the user should release the lock the same times as she acquires the lock to finally release the lock. One mutex can be created by new_mutex , the mutex is in unlocked state when created. One mutex can be locked by IMutex::wait and IMutex::try_wait , the second form returns false instead of blocking the current thread if failed to acquire the lock. One mutex can be unlocked by IMutex::unlock . The user can use MutexGuard helper object to lock one mutex in one function scope and release it automatically when MutexGuard is expired.","title":"Mutex"},{"location":"manual/basics/thread_and_synchronization_objects/#spin-lock","text":"#include <Luna/Runtime/SpinLock.hpp> A spin lock ( SpinLock or RecursiveSpinLock ) is a light-weight version of IMutex with the following differences: The spin lock is implemented purely in user-mode by C++, while the mutex is implemented by the underlying platform/OS and is usually implemented in kernel-mode as an OS component, which means locking and releasing one spin lock is much faster than locking and releasing one mutex, since the later is usually performed through a system call. The spin lock will never suspend one thread, nor will it yield the time slice of the waiting thread. If one spin lock is already locked, the waiting thread will keep checking (busy-waiting) until it obtains the lock. In the other side, the mutex will usually suspends or yields the current thread if the mutex is already locked to let other threads use the processor. This makes the spin lock suitable for locking the resource for a very short period of time (hundreds or thousands of CPU-cycles), but not suitable if the lock will be obtained for a long time (>100us). Creating one spin lock creation consumes much less memory than creating one mutex (only 4 bytes for non-recursive spin lock). Meanwhile, creating one spin lock does not need to allocate any dynamic memory, just declare and use it, which makes it suitable for embedding into other objects. One spin lock can be acquired by lock and try_lock , and can be released by unlock . Recursive locking from the same thread is supported only by RecursiveSpinLock , not SpinLock . The user can use LockGuard helper object to acquire one spin lock in one function scope and release it automatically when LockGuard is expired. LockGuard works for both SpinLock and RecursiveSpinLock .","title":"Spin lock"},{"location":"manual/basics/thread_and_synchronization_objects/#semaphore","text":"#include <Luna/Runtime/Semaphore.hpp> Semaphore ( ISemaphore ) is a synchronization object which allows at most max_count number of threads to access the same resource. Every semaphore maintains one counter value between 0 and max_count , when the semaphore is acquired by one thread, its counter value is decreased by one; when the semaphore is released by one thread, its counter value is increased by one. If the counter value is 0 when one thread wants to acquire the semaphore, the thread will be blocked until another thread releases the semaphore to increase the counter value. The counter value of one semaphore will never go below 0 . One semaphore can be created by new_semaphore . When creating the semaphore, the user can specify the initial counter value and maximum counter value of the semaphore. One semaphore can be acquired by ISemaphore::wait and ISemaphore::try_wait , the second form returns false instead of blocking the current thread if failed to acquire the semaphore. One semaphore can be released by ISemaphore::release .","title":"Semaphore"},{"location":"manual/basics/thread_and_synchronization_objects/#read-write-lock","text":"#include <Luna/Runtime/ReadWriteLock.hpp> A read write lock ( IReadWriteLock ) is a special mutex that allows unlimited number of read locks, but only one write lock at the same time. Every read write lock have three states: unlocked, read locked and write locked. When the read write lock is in unlocked state, the user can acquire both read and write lock from the object, which transfers the object into read locked or write locked state. When the read write lock is in read locked state, only read locks can be acquired, which increases the internal read count of the lock. The read locked state will be transferred back to unlocked state when all read locks are released. When the object is in write locked state, neither read lock nor write lock can be acquired. The write locked state will be transferred back to unlocked state when the unique write lock is released. One read write lock can be acquired by new_read_write_lock . The read lock of one read write lock can be acquired by acquire_read and try_acquire_read , and can be released by release_read . The write lock of one read write lock can be acquired by acquire_write and try_acquire_write , and can be released by release_write . try_acquire_read and try_acquire_write return false instead of blocking the current thread if failed to acquire the lock.","title":"Read write lock"},{"location":"manual/basics/time/","text":"Time #include <Luna/Runtime/Time.hpp> High-resolution CPU timer All modern CPUs contain high-resolution timers whose values will increase constantly and monotonically after CPU is powered or reset, usually once per several nanoseconds. The value of this timer can be used to measure time interval at a high resolution. Use get_ticks to read the current value of the high-resolution CPU timer. The time value is an u64 integer measured in CPU ticks, which is a platform-dependent small unit. The user can then call get_ticks_per_second to get the number of ticks per second on the current platform, and use this number to convert ticks to seconds. Remember to use f64 instead of f32 when performing high-resolution time calculation measured in seconds., since f32 does not provide enough precision for representing such a tiny value. System time Besides the high-resolution CPU timer, the underlying platform/OS also contains a timer that tracks the system time on the current platform, which can usually be changed by the user. Unlike CPU time, the system time is affected by the time zone and daylight saving time (DST) settings on the platform, so requires additional care when we're handling it. In Luna SDK, the system time is represented by a i64 UNIX timestamp (number of seconds from Jan 1st, 1970, UTC). The user can call get_local_timestamp to get the current system time shifted by the time zone and DST settings on the current platform, or call get_utc_timestamp to get the current system time in UTC. The local and UTC timestamp can be converted to each other by local_timestamp_to_utc_timestamp and utc_timestamp_to_local_timestamp . To convert one timestamp to one calendar form, the user can call timestamp_to_datetime , which returns one DateTime structure that contains the year, month, day, hour, minute, second and day of week of the timestamp. The user can also call datetime_to_timestamp to convert one DateTime to its corresponding timestamp.","title":"Time"},{"location":"manual/basics/time/#time","text":"#include <Luna/Runtime/Time.hpp>","title":"Time"},{"location":"manual/basics/time/#high-resolution-cpu-timer","text":"All modern CPUs contain high-resolution timers whose values will increase constantly and monotonically after CPU is powered or reset, usually once per several nanoseconds. The value of this timer can be used to measure time interval at a high resolution. Use get_ticks to read the current value of the high-resolution CPU timer. The time value is an u64 integer measured in CPU ticks, which is a platform-dependent small unit. The user can then call get_ticks_per_second to get the number of ticks per second on the current platform, and use this number to convert ticks to seconds. Remember to use f64 instead of f32 when performing high-resolution time calculation measured in seconds., since f32 does not provide enough precision for representing such a tiny value.","title":"High-resolution CPU timer"},{"location":"manual/basics/time/#system-time","text":"Besides the high-resolution CPU timer, the underlying platform/OS also contains a timer that tracks the system time on the current platform, which can usually be changed by the user. Unlike CPU time, the system time is affected by the time zone and daylight saving time (DST) settings on the platform, so requires additional care when we're handling it. In Luna SDK, the system time is represented by a i64 UNIX timestamp (number of seconds from Jan 1st, 1970, UTC). The user can call get_local_timestamp to get the current system time shifted by the time zone and DST settings on the current platform, or call get_utc_timestamp to get the current system time in UTC. The local and UTC timestamp can be converted to each other by local_timestamp_to_utc_timestamp and utc_timestamp_to_local_timestamp . To convert one timestamp to one calendar form, the user can call timestamp_to_datetime , which returns one DateTime structure that contains the year, month, day, hour, minute, second and day of week of the timestamp. The user can also call datetime_to_timestamp to convert one DateTime to its corresponding timestamp.","title":"System time"},{"location":"manual/basics/type_system/","text":"Type system Type reflection is the ability of a program to introspect type name, size, layout and other information in the program. Such ability can be used to write code that can operate on different types. Luna SDK comes with a run-time type reflection system that tracks most types used in the framework, it can also be extended to accept user-defined new types, including enumeration types, structure types and generic structure types. Type object #include <Luna/Runtime/TypeInfo.hpp> typeinfo_t represents one type object that stores the type information for one type registered to type reflection system. You can get the type object of one specified type by calling typeof<T>() . If the specified type is not registered, the program may fail to compile or nullptr will be returned. Type name and GUID #include <Luna/Runtime/Reflection.hpp> Every registered type can be identified by name or by GUID, you can get one type object from its name by calling get_type_by_name , and from its GUID by calling get_type_by_guid . The name and GUID of one type object can be fetched by calling get_type_name and get_type_guid . Every type must have one unique GUID, but multiple types may have the same name. If multiple types have the same name, each of them should have one unique alias so that it can be differed from others. If the type is defined in namespaces, its namespace should be appended before the type name, separated by double colons ( :: ). Type size and alignment #include <Luna/Runtime/Reflection.hpp> Every registered type except generic structure type will have one specific size and alignment value, which can be fetched by get_type_size and get_type_alignment . Generic structure type is not a real type and will return 0 for both functions. Type class #include <Luna/Runtime/Reflection.hpp> There are different type classes in Luna SDK, including: Primitive type Structure type Enumeration type Generic structure type Generic structure instanced type Every registered type in Luna SDK belong to one type class. You can use is_primitive_type , is_struct_type , is_enum_type , is_generic_struct_type and is_generic_struct_instanced_type to check the class of one typeinfo_t object. Primitive type Primitive types are predefined simple types, including void , u8 , i8 , u16 , i16 , u32 , i32 , u64 , i64 , usize , isize , c8 , c16 , c32 , f32 , f64 and bool . void is a special type with size and alignment equal to 0 , and is mainly used as type parameters of generic types. Primitive types cannot be registered by users. Structure type Structure types are used to represent a set of data of different types. Structure types may have properties (member objects), they can also define special functions called meta functions to let Luna SDK handle these types correctly. If such meta function is not provided, Luna SDK will use the default meta function for the type. The following table lists all meta functions provided for one structure type T . Meta function Usage Default meta function Constructor Constructs one object of type T . Calls constructors for all properties of T . Destructor Destructs one object of type T . Calls destructors for all properties of T . Copy constructor Constructs one object of type T by coping data from another object of type T . Calls copy constructors for all properties of T . Move constructor Constructs one object of type T by moving data from another object of type T . Calls move constructors for all properties of T . Copy assignment operator Assigns data of one object of type T by coping data from another object of type T . Calls copy assignment operator for all properties of T . Move assignment operator Assigns data of one object of type T by moving data from another object of type T . Calls move assignment operator for all properties of T . Note that once the user-defined meta function is provided, the corresponding default meta function will not be called. Structure inheritance One structure type can inherit from another structure type. The structure type being inherited from is called base type or base structure , and the structure type derived from the base type is called derived type or derived structure . Every structure type can only have at most one base type, but may have multiple derived types. Enumeration type An enumeration type defines a group of options. Every enumeration have one integral underlying type, and every option of the enumeration is mapped to one specific value of that underlying type. Different options in the same enumeration must have different mapped values. Luna SDK supports multiple enumeration type , which enables the user to select multiple options instead of only one as the value of the enumeration. In such case, every option will take one bit of the underlying integral type, and the enumeration value is stored by bitwise OR combination of selected options. Generic structure type and generic structure instanced type Generic structure type represents one structure type with generic type parameters, such as Vector<T> . The number of generic type parameters can be uncertain, like Tuple<T1, T2, ...> . Generic structure types cannot be used directly, they must be instantiated to a generic structure instanced type by calling get_generic_instanced_type . The generic instantiation process is happened at run time, every generic instanced type with one particular set of generic structure type and generic type parameters will be instantiated only once, and the instantiated type will be reused. One generic structure instanced type can be used just as one normal structure type. Registering structure type #include <Luna/Runtime/Reflection.hpp> There are two methods to register one structure type. The first method is simpler and can be used for most cases, the second method is non-intrusive can be used if the structure is defined in another module or third-party library and cannot be changed directly. The first method The first method is to insert one lustruct macro in your structure definition, specifying the name and GUID of the structure. struct SpotLight { lustruct(\"SpotLight\", \"{2BB45396-E0E3-433E-8794-49BEE8BD1BB5}\"); Float3 intensity = { 0.5f, 0.5f, 0.5f }; f32 intensity_multiplier = 1.0f; f32 attenuation_power = 1.0f; f32 spot_power = 64.0f; }; Then you can call register_struct_type<T> to register the type. The properties of the type can be specified quickly using luproperty macro: register_struct_type<SpotLight>({ luproperty(SpotLight, Float3, intensity), luproperty(SpotLight, f32, intensity_multiplier), luproperty(SpotLight, f32, attenuation_power), luproperty(SpotLight, f32, spot_power) }); If the structure type has base type, the base type should be specified as the second argument, after the property list. The second method In the second method, the user should fill one StructureTypeDesc structure, then call register_struct_type to register the type. For example, the following code registers Name type into the system. StructureTypeDesc desc; desc.guid = Guid(\"{E5EEA2C6-2D51-4658-9B3F-C141DDE983D8}\"); desc.name = \"Name\"; desc.alias = \"\"; desc.size = sizeof(Name); desc.alignment = alignof(Name); desc.base_type = nullptr; desc.ctor = nullptr; desc.dtor = default_dtor<Name>; desc.copy_ctor = default_copy_ctor<Name>; desc.move_ctor = default_move_ctor<Name>; desc.copy_assign = default_copy_assign<Name>; desc.move_assign = default_move_assign<Name>; desc.trivially_relocatable = true; typeinfo_t type = register_struct_type(desc); After the type is registered, the user should also implement typeof_t<T> structure for the type like so: // In .hpp file: LUNA_MYMODULE_API typeinfo_t get_my_type(); template <> struct typeof_t<MyType> { typeinfo_t operator()() const { return get_my_type(); } }; // In .cpp file: typeinfo_t g_my_type; LUNA_XXX_API typeinfo_t get_my_type() { return g_my_type; } Registering enumeration type #include <Luna/Runtime/Reflection.hpp> The user can use register_enum_type function and luoption macro to register one enumeration type. For example, if we have the following type: enum class CameraType : u32 { perspective = 0, orthographic = 1, }; The registration code will be: register_enum_type<CameraType>({ luoption(CameraType, perspective), luoption(CameraType, orthographic) }); Since enumeration types cannot include static variables, the GUID of the enumeration type must be declared separately using luenum like so: luenum(CameraType, \"CameraType\", \"{920C8F7F-7CEC-4776-BF01-1F63A4C51D9F}\"); luenum must be defined directly in Luna namespace, not the sub-namespace of Luna namespace. Registering generic structure type #include <Luna/Runtime/Reflection.hpp> Generic structure type is not actually a real type, but a type generator for generic structure instance types. To register one generic structure type, the user should fill one GenericStructureTypeDesc structure, and call register_generic_struct_type to register the generic structure type. The most important property of GenericStructureTypeDesc is instantiate , which is a callback function that generates one generic structure instance type based on type arguments provided: GenericStructureInstantiateInfo instantiate(typeinfo_t generic_type, const typeinfo_t* generic_arguments, usize num_generic_arguments) This function should returns one GenericStructureInstantiateInfo structure, which is similar to StructureTypeDesc and describes one generic structure instanced type. The generic structure instanced type is then registered to the system can will be returned by get_generic_instanced_type . The instantiation function never fails, if the instantiation function cannot handle the input type arguments, it should call lupanic_msg to crash the program. The base generic structure type and all its instanced types will have the same name and GUID, but each of them will have a unique typeinfo_t handle. You can get the type arguments of one generic structure instanced type by calling count_struct_generic_arguments and get_struct_generic_argument . Implementing typeof_t<T> for generic structure types The user can implement typeof_t<T> using C++ partial template specification like so: LUNA_RUNTIME_API typeinfo_t vector_type(); // Returns the generic structure type. template <typename _Ty> struct typeof_t<Vector<_Ty>> { typeinfo_t operator()() const { return get_generic_instanced_type(vector_type(), { typeof<_Ty>() }); } // Returns the generic structure instanced type. };","title":"Type System"},{"location":"manual/basics/type_system/#type-system","text":"Type reflection is the ability of a program to introspect type name, size, layout and other information in the program. Such ability can be used to write code that can operate on different types. Luna SDK comes with a run-time type reflection system that tracks most types used in the framework, it can also be extended to accept user-defined new types, including enumeration types, structure types and generic structure types.","title":"Type system"},{"location":"manual/basics/type_system/#type-object","text":"#include <Luna/Runtime/TypeInfo.hpp> typeinfo_t represents one type object that stores the type information for one type registered to type reflection system. You can get the type object of one specified type by calling typeof<T>() . If the specified type is not registered, the program may fail to compile or nullptr will be returned.","title":"Type object"},{"location":"manual/basics/type_system/#type-name-and-guid","text":"#include <Luna/Runtime/Reflection.hpp> Every registered type can be identified by name or by GUID, you can get one type object from its name by calling get_type_by_name , and from its GUID by calling get_type_by_guid . The name and GUID of one type object can be fetched by calling get_type_name and get_type_guid . Every type must have one unique GUID, but multiple types may have the same name. If multiple types have the same name, each of them should have one unique alias so that it can be differed from others. If the type is defined in namespaces, its namespace should be appended before the type name, separated by double colons ( :: ).","title":"Type name and GUID"},{"location":"manual/basics/type_system/#type-size-and-alignment","text":"#include <Luna/Runtime/Reflection.hpp> Every registered type except generic structure type will have one specific size and alignment value, which can be fetched by get_type_size and get_type_alignment . Generic structure type is not a real type and will return 0 for both functions.","title":"Type size and alignment"},{"location":"manual/basics/type_system/#type-class","text":"#include <Luna/Runtime/Reflection.hpp> There are different type classes in Luna SDK, including: Primitive type Structure type Enumeration type Generic structure type Generic structure instanced type Every registered type in Luna SDK belong to one type class. You can use is_primitive_type , is_struct_type , is_enum_type , is_generic_struct_type and is_generic_struct_instanced_type to check the class of one typeinfo_t object.","title":"Type class"},{"location":"manual/basics/type_system/#primitive-type","text":"Primitive types are predefined simple types, including void , u8 , i8 , u16 , i16 , u32 , i32 , u64 , i64 , usize , isize , c8 , c16 , c32 , f32 , f64 and bool . void is a special type with size and alignment equal to 0 , and is mainly used as type parameters of generic types. Primitive types cannot be registered by users.","title":"Primitive type"},{"location":"manual/basics/type_system/#structure-type","text":"Structure types are used to represent a set of data of different types. Structure types may have properties (member objects), they can also define special functions called meta functions to let Luna SDK handle these types correctly. If such meta function is not provided, Luna SDK will use the default meta function for the type. The following table lists all meta functions provided for one structure type T . Meta function Usage Default meta function Constructor Constructs one object of type T . Calls constructors for all properties of T . Destructor Destructs one object of type T . Calls destructors for all properties of T . Copy constructor Constructs one object of type T by coping data from another object of type T . Calls copy constructors for all properties of T . Move constructor Constructs one object of type T by moving data from another object of type T . Calls move constructors for all properties of T . Copy assignment operator Assigns data of one object of type T by coping data from another object of type T . Calls copy assignment operator for all properties of T . Move assignment operator Assigns data of one object of type T by moving data from another object of type T . Calls move assignment operator for all properties of T . Note that once the user-defined meta function is provided, the corresponding default meta function will not be called.","title":"Structure type"},{"location":"manual/basics/type_system/#structure-inheritance","text":"One structure type can inherit from another structure type. The structure type being inherited from is called base type or base structure , and the structure type derived from the base type is called derived type or derived structure . Every structure type can only have at most one base type, but may have multiple derived types.","title":"Structure inheritance"},{"location":"manual/basics/type_system/#enumeration-type","text":"An enumeration type defines a group of options. Every enumeration have one integral underlying type, and every option of the enumeration is mapped to one specific value of that underlying type. Different options in the same enumeration must have different mapped values. Luna SDK supports multiple enumeration type , which enables the user to select multiple options instead of only one as the value of the enumeration. In such case, every option will take one bit of the underlying integral type, and the enumeration value is stored by bitwise OR combination of selected options.","title":"Enumeration type"},{"location":"manual/basics/type_system/#generic-structure-type-and-generic-structure-instanced-type","text":"Generic structure type represents one structure type with generic type parameters, such as Vector<T> . The number of generic type parameters can be uncertain, like Tuple<T1, T2, ...> . Generic structure types cannot be used directly, they must be instantiated to a generic structure instanced type by calling get_generic_instanced_type . The generic instantiation process is happened at run time, every generic instanced type with one particular set of generic structure type and generic type parameters will be instantiated only once, and the instantiated type will be reused. One generic structure instanced type can be used just as one normal structure type.","title":"Generic structure type and generic structure instanced type"},{"location":"manual/basics/type_system/#registering-structure-type","text":"#include <Luna/Runtime/Reflection.hpp> There are two methods to register one structure type. The first method is simpler and can be used for most cases, the second method is non-intrusive can be used if the structure is defined in another module or third-party library and cannot be changed directly.","title":"Registering structure type"},{"location":"manual/basics/type_system/#the-first-method","text":"The first method is to insert one lustruct macro in your structure definition, specifying the name and GUID of the structure. struct SpotLight { lustruct(\"SpotLight\", \"{2BB45396-E0E3-433E-8794-49BEE8BD1BB5}\"); Float3 intensity = { 0.5f, 0.5f, 0.5f }; f32 intensity_multiplier = 1.0f; f32 attenuation_power = 1.0f; f32 spot_power = 64.0f; }; Then you can call register_struct_type<T> to register the type. The properties of the type can be specified quickly using luproperty macro: register_struct_type<SpotLight>({ luproperty(SpotLight, Float3, intensity), luproperty(SpotLight, f32, intensity_multiplier), luproperty(SpotLight, f32, attenuation_power), luproperty(SpotLight, f32, spot_power) }); If the structure type has base type, the base type should be specified as the second argument, after the property list.","title":"The first method"},{"location":"manual/basics/type_system/#the-second-method","text":"In the second method, the user should fill one StructureTypeDesc structure, then call register_struct_type to register the type. For example, the following code registers Name type into the system. StructureTypeDesc desc; desc.guid = Guid(\"{E5EEA2C6-2D51-4658-9B3F-C141DDE983D8}\"); desc.name = \"Name\"; desc.alias = \"\"; desc.size = sizeof(Name); desc.alignment = alignof(Name); desc.base_type = nullptr; desc.ctor = nullptr; desc.dtor = default_dtor<Name>; desc.copy_ctor = default_copy_ctor<Name>; desc.move_ctor = default_move_ctor<Name>; desc.copy_assign = default_copy_assign<Name>; desc.move_assign = default_move_assign<Name>; desc.trivially_relocatable = true; typeinfo_t type = register_struct_type(desc); After the type is registered, the user should also implement typeof_t<T> structure for the type like so: // In .hpp file: LUNA_MYMODULE_API typeinfo_t get_my_type(); template <> struct typeof_t<MyType> { typeinfo_t operator()() const { return get_my_type(); } }; // In .cpp file: typeinfo_t g_my_type; LUNA_XXX_API typeinfo_t get_my_type() { return g_my_type; }","title":"The second method"},{"location":"manual/basics/type_system/#registering-enumeration-type","text":"#include <Luna/Runtime/Reflection.hpp> The user can use register_enum_type function and luoption macro to register one enumeration type. For example, if we have the following type: enum class CameraType : u32 { perspective = 0, orthographic = 1, }; The registration code will be: register_enum_type<CameraType>({ luoption(CameraType, perspective), luoption(CameraType, orthographic) }); Since enumeration types cannot include static variables, the GUID of the enumeration type must be declared separately using luenum like so: luenum(CameraType, \"CameraType\", \"{920C8F7F-7CEC-4776-BF01-1F63A4C51D9F}\"); luenum must be defined directly in Luna namespace, not the sub-namespace of Luna namespace.","title":"Registering enumeration type"},{"location":"manual/basics/type_system/#registering-generic-structure-type","text":"#include <Luna/Runtime/Reflection.hpp> Generic structure type is not actually a real type, but a type generator for generic structure instance types. To register one generic structure type, the user should fill one GenericStructureTypeDesc structure, and call register_generic_struct_type to register the generic structure type. The most important property of GenericStructureTypeDesc is instantiate , which is a callback function that generates one generic structure instance type based on type arguments provided: GenericStructureInstantiateInfo instantiate(typeinfo_t generic_type, const typeinfo_t* generic_arguments, usize num_generic_arguments) This function should returns one GenericStructureInstantiateInfo structure, which is similar to StructureTypeDesc and describes one generic structure instanced type. The generic structure instanced type is then registered to the system can will be returned by get_generic_instanced_type . The instantiation function never fails, if the instantiation function cannot handle the input type arguments, it should call lupanic_msg to crash the program. The base generic structure type and all its instanced types will have the same name and GUID, but each of them will have a unique typeinfo_t handle. You can get the type arguments of one generic structure instanced type by calling count_struct_generic_arguments and get_struct_generic_argument .","title":"Registering generic structure type"},{"location":"manual/basics/type_system/#implementing-typeof_tt-for-generic-structure-types","text":"The user can implement typeof_t<T> using C++ partial template specification like so: LUNA_RUNTIME_API typeinfo_t vector_type(); // Returns the generic structure type. template <typename _Ty> struct typeof_t<Vector<_Ty>> { typeinfo_t operator()() const { return get_generic_instanced_type(vector_type(), { typeof<_Ty>() }); } // Returns the generic structure instanced type. };","title":"Implementing typeof_t&lt;T&gt; for generic structure types"},{"location":"manual/basics/variants/","text":"Variants #include <Luna/Runtime/Variant.hpp> Variant is a dynamic typed object that stores data in a schema-less (self-described) manner. Variant is used as a general way of representing data for purposes like serialization and deserialization . Variant type The type of one Variant is represented by VariantType enumeration and can be fetched by calling type method. Luna SDK supports the following variant types: Null Number String Boolean BLOB Pointer Array of variants Associated array of variants Null variant Variant can be null , which represents the absence of value for the variant object. Calling type of one null variant returns VariantType::null , and calling valid of one null variant returns false . Number variant Number variant contains one number of integer or floating-point type. The number type of one number variant is represented by VariantNumberType enumeration and can be fetched by calling number_type method. If the variant object is not a number type, NumberType::not_number will be returned. The number value of the variant can be fetched by calling unum , inum and fnum methods, each of them returns the underlying number in specified format with implicit type conversion when needed. If the variant type is not VariantType::number , 0 or 0.0 will be returned. One variant can be set to number by assigning it with one integer or floating-point value or instance. String variant String variant contains one single string represented by a Name object. You can fetch the underlying string of one variant by calling str() method, which returns one empty string if the type of the variant is not VariantType::string . We also provide c_str method to fetch the string buffer quickly, which will return \"\" if the variant is not VariantType::string . One variant can be set to string by assigning it with one Name instance, one String instance, one string literal, or one zero-terminated c8* pointer instance. Boolean variant Boolean variant contains only two kinds of values: true and false . The Boolean value of one variant can be fetched by calling boolean method, which returns false if the variant is not VariantType::boolean . One variant can be set to Boolean by assigning it with one bool value or instance. BLOB Variant BLOB variant contains one single binary large object. The data, size and alignment of the data can be fetched by calling blob_data , blob_size and blob_alignment methods. Note that Variant does optimizations for small blob data, so the blob data is not necessary represented by Blob . You may detach the blob data from the variant by calling blob_detach , which returns the blob data as a Blob object, and the variant will contain one empty blob after this operation. One variant can be set to pointer by assigning it with one Blob value or instance. Pointer Variant Pointer variant contains one type-less user pointer. The pointer is stored as-is and can be fetched by calling pointer method, which returns nullptr if the variant is not VariantType::pointer . One variant can be set to pointer by assigning it with one pointer value or instance. Array of variants Array variant contains one array of Variant objects, which acts as sub-objects of the current object. Note that Variant does optimizations for small array, so the array data is not necessary represented by Vector<Variant> . Associated array of variants Associated array variant contains one set of Variant objects, which acts as sub-objects of the current object. Unlike array variants, objects in associated array variant are indexed by Name objects, and does not have a particular order. Note that Variant does optimizations for small array, so the array data is not necessary represented by HashMap<Name, Variant> . For both array variants and associated array variants, size method returns the number of sub-objects in the array, and empty method returns true if size() returns 0 . The user can use subscript syntaxes ( [] ) to fetch elements in array variants ( [N] ) and associated array variants ( [\"Name\"] ), if the specified element does not exist, one null variant will be returned. Using subscript syntaxes for variants with incorrect types always return null objects. Variant differential #include <Luna/Runtime/VariantDiff.hpp> Luna SDK comes with one variant differential library that computes and patches variant differences. diff_variant calculates the difference between before and after variant objects, and returns the difference as another variant object called diff object. patch_variant_diff applies diff object to before variant object to reproduce after object, and reverse_variant_diff removes the diff object from after object to reproduce before object. These functions are useful for implementing data versioning and undo/redo operations. JSON encoding #include <Luna/Runtime/VariantJSON.hpp> Luna SDK comes with one JSON encoding/decoding library for Variant objects. json_write encodes one Variant to one JSON text stream, while json_read decodes one JSON text stream to one Variant object. When performing JSON encoding, Variant of VariantType::pointer will be ignored, and Variant with VariantType::blob will be encoded using Base64 encoding format.","title":"Variants"},{"location":"manual/basics/variants/#variants","text":"#include <Luna/Runtime/Variant.hpp> Variant is a dynamic typed object that stores data in a schema-less (self-described) manner. Variant is used as a general way of representing data for purposes like serialization and deserialization .","title":"Variants"},{"location":"manual/basics/variants/#variant-type","text":"The type of one Variant is represented by VariantType enumeration and can be fetched by calling type method. Luna SDK supports the following variant types: Null Number String Boolean BLOB Pointer Array of variants Associated array of variants","title":"Variant type"},{"location":"manual/basics/variants/#null-variant","text":"Variant can be null , which represents the absence of value for the variant object. Calling type of one null variant returns VariantType::null , and calling valid of one null variant returns false .","title":"Null variant"},{"location":"manual/basics/variants/#number-variant","text":"Number variant contains one number of integer or floating-point type. The number type of one number variant is represented by VariantNumberType enumeration and can be fetched by calling number_type method. If the variant object is not a number type, NumberType::not_number will be returned. The number value of the variant can be fetched by calling unum , inum and fnum methods, each of them returns the underlying number in specified format with implicit type conversion when needed. If the variant type is not VariantType::number , 0 or 0.0 will be returned. One variant can be set to number by assigning it with one integer or floating-point value or instance.","title":"Number variant"},{"location":"manual/basics/variants/#string-variant","text":"String variant contains one single string represented by a Name object. You can fetch the underlying string of one variant by calling str() method, which returns one empty string if the type of the variant is not VariantType::string . We also provide c_str method to fetch the string buffer quickly, which will return \"\" if the variant is not VariantType::string . One variant can be set to string by assigning it with one Name instance, one String instance, one string literal, or one zero-terminated c8* pointer instance.","title":"String variant"},{"location":"manual/basics/variants/#boolean-variant","text":"Boolean variant contains only two kinds of values: true and false . The Boolean value of one variant can be fetched by calling boolean method, which returns false if the variant is not VariantType::boolean . One variant can be set to Boolean by assigning it with one bool value or instance.","title":"Boolean variant"},{"location":"manual/basics/variants/#blob-variant","text":"BLOB variant contains one single binary large object. The data, size and alignment of the data can be fetched by calling blob_data , blob_size and blob_alignment methods. Note that Variant does optimizations for small blob data, so the blob data is not necessary represented by Blob . You may detach the blob data from the variant by calling blob_detach , which returns the blob data as a Blob object, and the variant will contain one empty blob after this operation. One variant can be set to pointer by assigning it with one Blob value or instance.","title":"BLOB Variant"},{"location":"manual/basics/variants/#pointer-variant","text":"Pointer variant contains one type-less user pointer. The pointer is stored as-is and can be fetched by calling pointer method, which returns nullptr if the variant is not VariantType::pointer . One variant can be set to pointer by assigning it with one pointer value or instance.","title":"Pointer Variant"},{"location":"manual/basics/variants/#array-of-variants","text":"Array variant contains one array of Variant objects, which acts as sub-objects of the current object. Note that Variant does optimizations for small array, so the array data is not necessary represented by Vector<Variant> .","title":"Array of variants"},{"location":"manual/basics/variants/#associated-array-of-variants","text":"Associated array variant contains one set of Variant objects, which acts as sub-objects of the current object. Unlike array variants, objects in associated array variant are indexed by Name objects, and does not have a particular order. Note that Variant does optimizations for small array, so the array data is not necessary represented by HashMap<Name, Variant> . For both array variants and associated array variants, size method returns the number of sub-objects in the array, and empty method returns true if size() returns 0 . The user can use subscript syntaxes ( [] ) to fetch elements in array variants ( [N] ) and associated array variants ( [\"Name\"] ), if the specified element does not exist, one null variant will be returned. Using subscript syntaxes for variants with incorrect types always return null objects.","title":"Associated array of variants"},{"location":"manual/basics/variants/#variant-differential","text":"#include <Luna/Runtime/VariantDiff.hpp> Luna SDK comes with one variant differential library that computes and patches variant differences. diff_variant calculates the difference between before and after variant objects, and returns the difference as another variant object called diff object. patch_variant_diff applies diff object to before variant object to reproduce after object, and reverse_variant_diff removes the diff object from after object to reproduce before object. These functions are useful for implementing data versioning and undo/redo operations.","title":"Variant differential"},{"location":"manual/basics/variants/#json-encoding","text":"#include <Luna/Runtime/VariantJSON.hpp> Luna SDK comes with one JSON encoding/decoding library for Variant objects. json_write encodes one Variant to one JSON text stream, while json_read decodes one JSON text stream to one Variant object. When performing JSON encoding, Variant of VariantType::pointer will be ignored, and Variant with VariantType::blob will be encoded using Base64 encoding format.","title":"JSON encoding"},{"location":"manual/introduction/","text":"Introduction Thanks for using Luna SDK. This user manual provides a comprehensive explanation of every aspect of Luna SDK, and is served for your reference. If you are completely new to Luna SDK, we suggest you to follow the step-by-step Getting Started tutorial for a quick boot. Then you should read the Basics chapter for a deeper understanding of the basic usage of Luna SDK. Other chapters in this manual does not have a particular dependency, you can read these chapters in any order, and in any time you want.","title":"Introduction"},{"location":"manual/introduction/#introduction","text":"Thanks for using Luna SDK. This user manual provides a comprehensive explanation of every aspect of Luna SDK, and is served for your reference. If you are completely new to Luna SDK, we suggest you to follow the step-by-step Getting Started tutorial for a quick boot. Then you should read the Basics chapter for a deeper understanding of the basic usage of Luna SDK. Other chapters in this manual does not have a particular dependency, you can read these chapters in any order, and in any time you want.","title":"Introduction"},{"location":"manual/introduction/getting_started/","text":"Getting Started Welcome to Luna SDK. In this article, we will guide you to Luna SDK by creating a simple program that draws one textured 3D cube on the screen. At the end of this article, you will have a basic understanding of using Luna SDK to create a simple graphic program, and can start to explore more advanced features provided by Luna SDK. The source code of this article can be downloaded here: DemoApp.zip Prerequisites In this article, we assume that you have the basic knowledge of C++ programming and graphics programming (like using D3D11, D3D12 or OpenGL). You should also correctly setup Luna SDK and developing environments using the instructions provided in README.md of the project. Creating the program The first thing to do is to create an binary target for our demo program, so that XMake build system can correctly build our program. To create a new program, create a new folder in the {LUNA_ROOT_DIR}/Programs directory, and name it DemoApp . In this folder, create a new Lua script file called xmake.lua , and fill its content with the following text: target(\"DemoApp\") set_luna_sdk_program() add_files(\"**.cpp\") add_deps(\"Runtime\", \"Window\", \"RHI\", \"ShaderCompiler\", \"Image\") target_end() target and target_end enclose a target scope , where all target definitions are specified. set_luna_sdk_program tells XMake that we are defining one Luna SDK program, this will let XMake set the target kind to \"binary\" and import all SDK options for the program. add_files(\"**.cpp\") tells XMake to add all CPP files in the current directory and all subdirectories to the this target. add_deps lists all libraries that this program links to, in our example, we need to link to the SDK runtime ( Runtime ), the window module ( Window ) , the Graphics API module ( RHI ), the shader compiler module ( ShaderCompiler ) and the image file module ( Image ). If you got unresolved external symbol errors when compiling, make sure you already link correct libraries. Then we need to create source CPP files for our program. Since out demo program is simple, we only create one \"main.cpp\" file to host all source codes. After this, the DemoApp directory should looks like this: DemoApp |- xmake.lua |- main.cpp The last thing is to add one line in the end of {LUNA_ROOT_DIR}/Programs/xmake.lua to tell XMake to add our program in the solution: includes(\"DemoApp\") Well done, now every is set up and we can start to program our first Luna SDK program! Program structure Next, fills main.cpp with the following initial content. As we go further, we will add more properties and methods to our DemoApp structure, while remaining the rest part unchanged. #include <Luna/Runtime/Runtime.hpp> #include <Luna/Runtime/Module.hpp> #include <Luna/Runtime/Log.hpp> #include <Luna/Runtime/UniquePtr.hpp> using namespace Luna; struct DemoApp { RV init(); RV update(); bool is_exiting(); }; RV DemoApp::init() { return ok; } RV DemoApp::update() { return ok; } bool DemoApp::is_closed() { return false; } RV run_app() { auto result = init_modules(); if(failed(result)) return result; UniquePtr<DemoApp> app (memnew<DemoApp>()); result = app->init(); if(failed(result)) return result; while(!app->is_exiting()) { result = app->update(); if(failed(result)) return result; } return ok; } int main() { bool initialized = Luna::init(); if(!initialized) return -1; RV result = run_app(); if(failed(result)) log_error(\"DemoApp\", \"%s\", explain(result.errcode())); Luna::close(); return 0; } The first four lines includes the header files that we need to include to compile the program, which are: * for Luna::init() and Luna::shutdown() . * for Luna::init_modules() . * for Luna::log_error() . * for Luna::UniquePtr<T> . You can include any SDK interface header files using similar syntax: #include <Luna/Module/File> . We set {LUNA_ROOT_DIR}/Engine as the global include directory, the user may check it for available header files. In this example, all header files are from the Runtime module, which is the core module of Luna SDK that provides fundamental SDK features. The next statement is using namespace Luna . In Luna SDK, all types, functions and variables are defined in Luna namespace, and every module will define its elements in nested namespace, such as Luna::RHI . So, we use this statement to prevent spelling the Luna:: namespace prefix in our following code. The program starts with the main function, just like any normal C/C++ program. In the main function, we firstly call Luna::init to initialize Luna SDK. This function should be called before any other Luna SDK function. Luna::init returns one Boolean value to indicate whether the SDK initialization is succeeded, if the return value is false , we then return -1 and exit the program to indicate one runtime error. If Luna::init returns true , then one Luna::close call is need before the program exit to let the SDK clean up all internal resources. We then wrap the real program logic in one run_app function. The return type of run_app is RV , which is a shortcut for R<void> , this is part of the error handling mechanism of Luna SDK. R<T> is a structure that encapsulates one return value with type T and one error code with type ErrCode , which is simply an alias of usize (or std::size_t ). If the function succeeds, the returned value will be one T -typed value and one error code 0 ; if the function fails, the returned value will be one non-zero error code, and the T -typed value will be uninitialized and inaccessible, you may call errcode() to fetch the error code from R<T> , and may call explain to get a brief description of the error. In our main function, we check whether our run_app function is failed by using failed helper function (there is also one succeeded helper function available), then we print the error description and exits the program if any error occurs. In our run_app function, the first thing to do is calling init_modules , which will initialize all linked SDK modules for our program. We deliberately separate module initialization from Luna::init so that the user get a chance to set module initialization parameters before initializing modules, and modules can also indicate initialization failure by returning error codes (error handling system is available after Luna::init ). Then, we allocate and initialize one new object of DemoApp type by calling memnew function. The following table shows memory allocation functions used in Luna SDK: Luna SDK functions C++ functions/keywords memalloc(size, alignment) malloc(size) memfree(ptr, alignment) free(ptr) memrealloc(ptr, size, alignment) realloc(ptr, size) memsize(size, alignment) N/A memnew<T>(args...) new T (args...) memdelete(ptr) delete ptr The user should uses allocation functions provided by Luna SDK instead of those provided by C++ std. DemoApp will contain all states and logics for our demo program. The created DempApp instance will then be stored as a variable app with UniquePtr<DemoApp> type, which is a smart pointer that will delete the pointing object automatically when expired. DemoApp has three functions: init , update and is_closed . The init function initializes the program, and reports errors if the initialization is failed; the update function updates the program state and renders the image at every frame; the is_exiting function checks whether the program is exiting. We will implement these three methods in the following sections. The rest part of our run_app function simply checks whether the program is exiting by calling is_exiting , and updates the program when it is not exiting. After filling this content, execute xmake build DemoApp on terminal or click build button on your IDE, you should successfully build the DemoApp program. Window creation and event handling Now that we have one basic program structure, we need to create a system window so that we can render images to it. We also need to implement window event handling so that the program can exit when the user clicks the close button of the window. Window creation is fairly simple, we firstly need to introduce one new header: #include <Luna/Window/Window.hpp> then we add one new property to our DemoApp structure: struct DemoApp { Ref<Window::IWindow> window; RV init(); RV update(); bool is_exiting(); RV resize(u32 width, u32 height); }; The window object is provided by Window::IWindow* interface pointer in Luna SDK, which points to a boxed object which manages its lifetime using reference counting . IWindow interface may have different implementations on different platforms, by they all provide the same functionality required by this interface. Ref<T> is a smart pointer for boxed objects, it will manage the reference counter of the pointing object automatically when being constructed and destructed, so the user does not need to call object_retain and object_release manually. You may compare Ref<T> to ComPtr used in Microsoft's Component-Object Model (COM), or the automatic reference counting in Apple's Objective-C and Swift. The default constructor of Ref<T> initializes the pointer to nullptr , so we need to assign it with a valid object. Then we need to create our window in DemoApp::init : RV DemoApp::init() { lutry { luset(window, Window::new_window(\"DemoApp\", Window::WindowDisplaySettings::as_windowed(), Window::WindowCreationFlag::resizable)); } lucatch { return lures; } return ok; } Besides the new_window function that creates the window, there are four new keywords in our code: lutry , lucatch , luset and lures . These four keywords are macros that enables us to write error handling using a simpler try-catch style, rather than fetching and checking error codes once and once again for every function call that may fail. lutry and lucatch must be used in pairs, next to each other. In the lutry block, the user may define multiple lulet , luset or luexp statements, lulet statement creates a new local variable to hold the return value of the function, and jumps to lucatch if the function fails; luset assigns the return value to one existing variable, and jumps to lucatch if the function fails; luexp is used if the function does not return any value, it simply checks whether the function succeeds, and jumps to lucatch if not. The user may also call luthrow manually in lutry block to jump to lucatch directly. In the lucatch block, lures is provided as the error code that causes the failure. You may use one switch statement on the lures to handle specific errors, or you can propagate the error directly to parent function by return lures . Since error propagating is so commonly used, we create another macro lucatchret to replace lucatch { return lures; } , so the code above can be written as: RV DemoApp::init() { lutry { luset(window, Window::new_window(\"DemoApp\", Window::WindowDisplaySettings::as_windowed(), Window::WindowCreationFlag::resizable)); } lucatchret; return ok; } Since we use goto statement to implement lutry and lucatch , it you needs multiple lutry-lucatch pairs in one function, you should use a numbered version for every pair (like lutry2 , lucatch2 , luset 2, lures2 , etc.). In most cases, only one lutry-lucatch pair is sufficient. Now let's get back to Window::new_window function that does the actual work: R<Ref<IWindow>> new_window(const c8* title, const WindowDisplaySettings& display_settings, WindowCreationFlag flags) In this function, title Specifies the title of the window, which is usually displayed on the title bar of the window. flags are a combination of WindowCreationFlag enumeration class that lists flags for window creation process, like whether the window is resizable by dragging the border of the window, whether the window is a border-less window, etc. display_settings specifies the display settings for the window, which is described by WindowDisplaySettings structre: struct WindowDisplaySettings { monitor_t monitor; i32 x; i32 y; u32 width; u32 height; u32 refresh_rate; bool full_screen; }; Every window can be displayed in windowed mode or full screen mode, which can be specified by full_screen . monitor specifies the monitor to attach the window to in full screen mode. If monitor is nullptr and the window is set to full screen mode, the primary monitor of the system will be used. x and y are the position of the window on screen coordinates in windowed mode. The user may pass DEFAULT_POS constant to indicate a system-specific default position for the window. width and height are used to control the size of the window, the user can pass 0 to indicate a system-specific default size. refresh_rate controls the refresh rate of the window, the user may pass 0 to use the default refresh rate of the system. WindowDisplaySettings comes with two static functions as_windowed and as_full_screen for quickly specify all parameters in one row, with default values specified when they are skipped by the user, just as in our example. After the window is created, we need to register window event callbacks so that we can handle window events properly. In this example, the events we need to handle is the close event (triggered when the close button of the window is pressed) and the framebuffer resize event (triggered when the window framebuffer size is changed). This can be done by the following statements: window->get_close_event().add_handler([](Window::IWindow* window) { window->close(); }); window->get_framebuffer_resize_event().add_handler([this](Window::IWindow* window, u32 width, u32 height) { lupanic_if_failed(this->resize(width, height)); }); get_close_event and get_framebuffer_resize_event are methods of IWindow that gets the close event and the framebuffer resize event object of the window. The event object is a collection of callback functions that once triggered, calls all the callback functions. We then register one callback function to the close event that closes the window immediately, and one callback function to the framebuffer resize event that calls the resize method of our DempApp . The resize method is currently empty, we will fill the content of this method when we create render textures later: RV DemoApp::resize(u32 width, u32 height) { return ok; } Window events are not polled automatically, we need to tell the window system to poll events at every frame by calling Window::poll_events in update function: RV DemoApp::update() { Window::poll_events(); return ok; } This call polls events for all existing windows, so we don't need to provide specific window here. After we correctly handle the close event, we can complete the is_closed method of DemoApp : bool DemoApp::is_exiting() { return window->is_closed(); } So far, the complete code for main.cpp is: #include <Luna/Runtime/Runtime.hpp> #include <Luna/Runtime/Module.hpp> #include <Luna/Runtime/Log.hpp> #include <Luna/Runtime/UniquePtr.hpp> #include <Luna/Window/Window.hpp> using namespace Luna; struct DemoApp { Ref<Window::IWindow> window; RV init(); RV update(); bool is_exiting(); RV resize(u32 width, u32 height); }; RV DemoApp::init() { lutry { luset(window, Window::new_window(\"DemoApp\", Window::WindowDisplaySettings::as_windowed(), Window::WindowCreationFlag::resizable)); window->get_close_event().add_handler([](Window::IWindow* window) { window->close(); }); window->get_framebuffer_resize_event().add_handler([this](Window::IWindow* window, u32 width, u32 height) { lupanic_if_failed(this->resize(width, height)); }); } lucatchret; return ok; } RV DemoApp::update() { Window::poll_events(); return ok; } bool DemoApp::is_exiting() { return window->is_closed(); } RV DemoApp::resize(u32 width, u32 height) { return ok; } RV run_app() { auto result = init_modules(); if(failed(result)) return result; UniquePtr<DemoApp> app (memnew<DemoApp>()); result = app->init(); if(failed(result)) return result; while(!app->is_exiting()) { result = app->update(); if(failed(result)) return result; } return ok; } int main() { bool initialized = Luna::init(); if(!initialized) return -1; RV result = run_app(); if(failed(result)) log_error(\"DemoApp\", \"%s\", explain(result.errcode())); Luna::close(); return 0; } Build and run DemoApp , and you will see a blank window appears, and the program exits when you click the close button of the window. Fetching graphics device After the window is created, we can start drawing our box. Luna SDK provides all rendering features through RHI module, which is the abbreviation of Rendering Hardware Interface . To use RHI module, we need to include its header first: #include <Luna/RHI/RHI.hpp> In Luna SDK, all graphics resources are related to one specific graphics device represented by RHI::IDevice , which is the virtual representation of the physical graphics device on the platform, so we need to add one property to DemoApp to hold this device: Ref<RHI::IDevice> dev; When RHI module initializes, it automatically chooses the most suitable physical device and creates one IDevice instance for you, which can be fetched by RHI::get_main_device() . You may also create additional devices for special use, but in our DemoApp , we will stick to the default one by adding the following line in the lutry scope of DemoApp::init : dev = RHI::get_main_device(); We can also import all RHI types and functions by using namespace RHI; so that we don't need to spell them all over the init function: using namespace RHI; The code of DemoApp::init should look similar to: RV DemoApp::init() { lutry { luset(window, Window::new_window(\"DemoApp\", Window::WindowDisplaySettings::as_windowed(), Window::WindowCreationFlag::resizable)); window->get_close_event().add_handler([](Window::IWindow* window) { window->close(); }); window->get_framebuffer_resize_event().add_handler([this](Window::IWindow* window, u32 width, u32 height) { lupanic_if_failed(this->resize(width, height)); }); dev = RHI::get_main_device(); using namespace RHI; // New resource creation code goes here... } lucatchret; return ok; } Unless explicitly specified, all codes we need to add to DemoApp::init in the following sections are added to the end of lutry scope, not in the end of the function scope directly. Fetching command queue and creating command buffer Luna SDK employs deferred execution model , where render and compute invocations are recorded as commands in command buffers , then submitted to GPU explicitly by submitting command buffers to command queues . The command buffer object manages memory allocated to store commands, it also tracks the execution state for commands in the buffer when the buffer is submitted for execution. The command queue is a FIFO message queue between the host program and GPU. The host program submits command buffers to the command queue, and GPU consumes command buffers from the queue and execute commands in the buffer. Command buffers in the same queue are guaranteed to execute one after another, the next command buffer will not be executed until the last command buffer is finished. When IDevice initializes, it creates one or multiple command queues based on the physical device architecture and limitation. The user can use IDevice::get_num_command_queues to fetch the number of command queues present on the current device, and use IDevice::get_command_queue_desc to fetch the command queue description of each command queue. get_command_queue_desc returns one CommandQueueDesc structure, which is defined as follows: struct CommandQueueDesc { CommandQueueType type; CommandQueueFlag flags; }; CommandQueueType indicates the type of the command queue. There are three different queue types: graphics , compute and copy . The copy queue only accepts copy commands, and is used for transferring data between different resources; the compute queue accepts copy and compute tasks, while the graphics queue accepts graphics, compute and copy commands. CommandQueueFlag indicates additional properties for the queue, including CommandQueueFlag::presenting , which indicates one command queue that supports swap chain presenting. In our program, we need to choose one command queue of graphics type, and has CommandQueueFlag::presenting flag present. We firstly need to add one property to DemoApp to store the command queue index we choose: u32 queue; Then the command queue can be fetched by adding the following codes to DemoApp::init : queue = U32_MAX; u32 num_queues = dev->get_num_command_queues(); for (u32 i = 0; i < num_queues; ++i) { auto desc = dev->get_command_queue_desc(i); if (desc.type == CommandQueueType::graphics && test_flags(desc.flags, CommandQueueFlag::presenting)) { queue = i; break; } } if(queue == U32_MAX) return BasicError::not_supported(); After we fetched the command queue, we need to create one command buffer to record commands that will be submitted to that queue. We firstly need to add one new property to DemoApp to hold the command buffer: Ref<RHI::ICommandBuffer> cmdbuf; Then we can create the command buffer by adding the following codes to DemoApp::init : luset(cmdbuf, dev->new_command_buffer(queue)); When we create the command buffer, we should pass the index of the command queue that is attached to the command buffer. The created command buffer can only be submitted to the command queue specified when creating the command buffer. Creating swap chain The swap chain object contains resources that are used to present render results to our window. In order to create one swap chain, we firstly need to add one property to DemoApp to store the created swap chain: Ref<RHI::ISwapChain> swap_chain; In Luna SDK, the swap chain presentation is also a command that should be submitted using command queues, so we need to specify the command queue we need to use when creating swap chains like so: luset(swap_chain, dev->new_swap_chain(queue, window, SwapChainDesc(0, 0, 2, Format::bgra8_unorm, true))); The swap chain is described by one SwapChainDesc structure: struct SwapChainDesc { u32 width; u32 height; u32 buffer_count; Format pixel_format; bool vertically_synchronized; }; When used for creating swap chains, you may pass 0 for width and height property, which indicates the system to use the window framebuffer size as the size of the swap chain. The swap chain needs to be resized when the window framebuffer size is changed. This can be done by filling DemoApp::resize method with the following codes: RV DemoApp::resize(u32 width, u32 height) { lutry { using namespace RHI; if(width && height) { auto dev = get_main_device(); luexp(swap_chain->reset({width, height, 2, Format::unknown, true})); } } lucatchret; return ok; } ISwapChain::reset will reset the swap chain according to the new swap chain description, we can use Format::unknown to tell the system to use the current back buffer format for the new back buffer. Note that on some systems, the resize event will be emitted with both width and height being 0 if the window is minimized. We cannot create one swap chain with zero width or height, so we should handle this case and resize the back buffer with only non-zero size values. Creating descriptor set layout and descriptor set The descriptor set object stores descriptors that bind resources to graphics or compute pipeline. Descriptors have the following types: Uniform buffer view, which binds constant global data to shaders. Read buffer view, which binds buffers to shaders and enables load operations on the buffer data. Read texture view, which binds textures to shaders and enables sampling and load operations on the pixel data. Read write buffer view, which binds buffers to shaders and enables load, store and atomic operations on the buffer data. Read write texture view, which binds textures to shaders and enables load, store, and atomic operations on the pixel data. Sampler, which stores sampling settings and exposes those settings for shaders. Every pipeline may bind multiple descriptor sets, every descriptor set may contain all kinds of descriptors listed above. The descriptor set layout object stores the layout of one descriptor set object, including the number of descriptors in the descriptor set and the property of each descriptor. In order to create one descriptor set layout object, we need to fill one DescriptorSetLayoutDesc structure. Here is the definition of DescriptorSetLayoutDesc structure: struct DescriptorSetLayoutDesc { Span<const DescriptorSetLayoutBinding> bindings; DescriptorSetLayoutFlag flags = DescriptorSetLayoutFlag::none; }; The descriptor set layout consists of multiple bindings specified by DescriptorSetLayoutBinding , each binding describes one range of the descriptor set: struct DescriptorSetLayoutBinding { DescriptorType type; TextureViewType texture_view_type; u32 binding_slot; u32 num_descs; ShaderVisibilityFlag shader_visibility_flags; }; the type property describes the type of this binding. All descriptors in the same binding must be the same type: enum class DescriptorType : u32 { uniform_buffer_view, read_buffer_view, read_write_buffer_view, read_texture_view, read_write_texture_view, sampler }; the texture_view_type property describes the texture view type that can be set in this binding. This is required only when type of this binding is read_texture_view or read_write_texture_view . All texture views in the same binding must be the same type. binding_slot and num_descs describes the binding slot range of this binding, starting from 0 . All slots in [binding_slot, binding_slot + num_descs) will be occupied by this binding and cannot be used by other bindings. If num_descs is greater than 1 , then this binding will be interpreted as one descriptor array in the shader. shader_visibility_flags specifies which shaders may access descriptors in this binding, you may restrict the visibility of one binding to one set of specific shaders, which may improve performance on some platforms. We need to add two new properties to DemoApp to hold the descriptor set layout object and the descriptor set object: Ref<RHI::IDescriptorSetLayout> dlayout; Ref<RHI::IDescriptorSet> desc_set; We need 1 descriptor set with 1 constant buffer view, 1 shader resource view and 1 sampler. So we can create our descriptor set layout object in DemoApp::init like so: luset(dlayout, dev->new_descriptor_set_layout(DescriptorSetLayoutDesc({ DescriptorSetLayoutBinding::uniform_buffer_view(0, 1, ShaderVisibilityFlag::vertex), DescriptorSetLayoutBinding::read_texture_view(TextureViewType::tex2d, 1, 1, ShaderVisibilityFlag::pixel), DescriptorSetLayoutBinding::sampler(2, 1, ShaderVisibilityFlag::pixel) }))); Then we can create one descriptor set using the descriptor set layout object: luset(desc_set, dev->new_descriptor_set(DescriptorSetDesc(dlayout))); We will fill descriptors in the set by calling update_descriptors later. Compiling shaders The next thing to do is compiling shaders for the pipeline state object. Luna SDK uses HLSL as the source shader language, and uses ShaderCompiler module to compile HLSL to DXBC, DXIL, SPIR-V and other target shading languages. To compile shader, we need to include corresponding header files: #include <Luna/ShaderCompiler/ShaderCompiler.hpp> #include <Luna/RHI/ShaderCompileHelper.hpp> ShaderCompileHelper.hpp includes RHI::get_current_platform_shader_target_format() function, which tell the shader compiler the native target target shader format for the current graphics API. Since our shader is rather simple, we declare our shader source code directly in the C++ source file, in DemoApp::init function: const char vs_shader_code[] = R\"( cbuffer vertexBuffer : register(b0) { float4x4 world_to_proj; }; struct VS_INPUT { [[vk::location(0)]] float3 position : POSITION; [[vk::location(1)]] float2 texcoord : TEXCOORD; }; struct PS_INPUT { [[vk::location(0)]] float4 position : SV_POSITION; [[vk::location(1)]] float2 texcoord : TEXCOORD; }; PS_INPUT main(VS_INPUT input) { PS_INPUT output; output.position = mul(world_to_proj, float4(input.position, 1.0f)); output.texcoord = input.texcoord; return output; })\"; const char ps_shader_code[] = R\"( Texture2D tex : register(t1); SamplerState tex_sampler : register(s2); struct PS_INPUT { [[vk::location(0)]] float4 position : SV_POSITION; [[vk::location(1)]] float2 texcoord : TEXCOORD; }; [[vk::location(0)]] float4 main(PS_INPUT input) : SV_Target { return float4(tex.Sample(tex_sampler, input.texcoord)); })\"; here we use C++ raw string syntax R\"()\" to declare multiline string without appending \\ for every string line. Note the register number specified in shader must match the binding slot specified in descriptor set layout we just created. Since we use the same slot numbering system for all descriptor types, the register number for b , t , u and s should not overlap. Then we can compile shaders using ShaderCompiler::ICompiler object: auto compiler = ShaderCompiler::new_compiler(); compiler->set_source({ vs_shader_code, strlen(vs_shader_code) }); compiler->set_source_name(\"DemoAppVS\"); compiler->set_entry_point(\"main\"); compiler->set_target_format(RHI::get_current_platform_shader_target_format()); compiler->set_shader_type(ShaderCompiler::ShaderType::vertex); compiler->set_shader_model(6, 0); compiler->set_optimization_level(ShaderCompiler::OptimizationLevel::full); luexp(compiler->compile()); auto vs_data = compiler->get_output(); Blob vs(vs_data.data(), vs_data.size()); compiler->reset(); compiler->set_source({ ps_shader_code, strlen(ps_shader_code) }); compiler->set_source_name(\"DemoAppPS\"); compiler->set_entry_point(\"main\"); compiler->set_target_format(RHI::get_current_platform_shader_target_format()); compiler->set_shader_type(ShaderCompiler::ShaderType::pixel); compiler->set_shader_model(6, 0); compiler->set_optimization_level(ShaderCompiler::OptimizationLevel::full); luexp(compiler->compile()); auto ps_data = compiler->get_output(); Blob ps(ps_data.data(), ps_data.size()); The shader compilation process is fairly simple, we just set source code, compilation settings, then triggers the compilation. The compilation result will be given by get_output , we use one Blob object , a container for binary data, to hold the compilation result. The compiled shader data will be used when creating pipeline state object later. Creating pipeline layout and pipeline state The graphics and compute pipeline state is described by two objects: pipeline layout object and pipeline state object. Pipeline layout object stores the shader binding layout information for all shader stages, while pipeline state object stores pipeline settings for all graphics stages. Pipeline layout is described by the PipelineLayoutDesc structure, which is configured by specifying layouts of descriptor sets that will be bound to this pipeline and flags that specifies shaders that are allowed to access shader inputs. struct PipelineLayoutDesc { Span<IDescriptorSetLayout*> descriptor_set_layouts; PipelineLayoutFlag flags; }; We need to add one new property to DemoApp to hold the pipeline layout object: Ref<RHI::IPipelineLayout> playout; Then we can create pipeline layout object using the following code: luset(playout, dev->new_pipeline_layout(PipelineLayoutDesc({dlayout}, PipelineLayoutFlag::allow_input_assembler_input_layout))); The pipeline object is described by the GraphicsPipelineStateDesc structure or the ComputePipelineStateDesc structure. Since we are creating one graphics pipeline, we need to fill the GraphicsPipelineStateDesc structure, which is a complex structure that contains all pipeline settings for one graphics pipeline: struct GraphicsPipelineStateDesc { InputLayoutDesc input_layout; IPipelineLayout* pipeline_layout = nullptr; Span<const byte_t> vs; Span<const byte_t> ps; RasterizerDesc rasterizer_state; DepthStencilDesc depth_stencil_state; BlendDesc blend_state; IndexBufferStripCutValue ib_strip_cut_value = IndexBufferStripCutValue::disabled; PrimitiveTopology primitive_topology = PrimitiveTopology::triangle_list; u8 num_color_attachments = 0; Format color_formats[8] = { Format::unknown }; Format depth_stencil_format = Format::unknown; u32 sample_count = 1; }; Most graphic settings are similar to those in D3D11, D3D12, OpenGL or Vulkan, we will not explain these settings, but only gives the code that correctly sets every setting of the pipeline. You can see docs for RHI module for detailed explanations of these settings. We need to add one new property to DemoApp to hold the pipeline state object: Ref<RHI::IPipelineState> pso; Then we can create pipeline state object using the following code: GraphicsPipelineStateDesc ps_desc; ps_desc.primitive_topology = PrimitiveTopology::triangle_list; ps_desc.rasterizer_state = RasterizerDesc(); ps_desc.depth_stencil_state = DepthStencilDesc(true, true, CompareFunction::less_equal); ps_desc.ib_strip_cut_value = IndexBufferStripCutValue::disabled; InputAttributeDesc input_attributes[] = { InputAttributeDesc(\"POSITION\", 0, 0, 0, 0, Format::rgb32_float), InputAttributeDesc(\"TEXCOORD\", 0, 1, 0, 12, Format::rg32_float) }; InputBindingDesc input_bindings[] = { InputBindingDesc(0, 20, InputRate::per_vertex) }; ps_desc.input_layout.attributes = {input_attributes, 2}; ps_desc.input_layout.bindings = {input_bindings, 1}; ps_desc.vs = vs.cspan(); ps_desc.ps = ps.cspan(); ps_desc.pipeline_layout = playout; ps_desc.num_color_attachments = 1; ps_desc.color_formats[0] = Format::rgba8_unorm; ps_desc.depth_stencil_format = Format::d32_float; luset(pso, dev->new_graphics_pipeline_state(ps_desc)); Creating depth textures The next step is to create one depth texture that is used as the depth stencil attachment when drawing our box. Texture objects in Luna SDK are represented by ITexture interface, and are described by TextureDesc structure, which is defined as follows: struct TextureDesc { TextureType type; Format format; u32 width; u32 height; u32 depth; u32 array_size; u32 mip_levels; u32 sample_count; TextureUsageFlag usages; ResourceFlag flags; } type specifies the type of the texture, like tex1d , tex2d , etc. format specifies the pixel format of the texture. usages specifies all possible usages of the texture when being bound to a pipeline. width , height and depth specifies the size of the texture. array_size specifies the number of texture elements if this texture object represents a texture array, otherwise 1 shall be specified. mip_levels specifies the number of mips that should be allocated for the resource, if this is 0 , the system allocates full mipmap chain for the resource. sample_count specifies the sampling count for MSAA textures. flags specifies additional features for the texture, like whether this texture can share memory with other resources. To simplify the texture description, we can use static methods provided by TextureDesc to quickly construct TextureDesc structure: TextureDesc TextureDesc::tex1d(Format format, TextureUsageFlag usages, u64 width, u32 array_size = 1, u32 mip_levels = 0, ResourceFlag flags = ResourceFlag::none); TextureDesc TextureDesc::tex2d(Format format, TextureUsageFlag usages, u64 width, u32 height, u32 array_size = 1, u32 mip_levels = 0, u32 sample_count = 1, ResourceFlag flags = ResourceFlag::none); TextureDesc TextureDesc::tex3d(Format format, TextureUsageFlag usages, u64 width, u32 height, u32 depth, u32 mip_levels = 0, ResourceFlag flags = ResourceFlag::none); Back to our DemoApp , we need to add one new property to DemoApp to hold the depth texture: Ref<RHI::ITexture> depth_tex; Then we can create textures using the following code: auto window_size = window->get_framebuffer_size(); luset(depth_tex, dev->new_texture(MemoryType::local, TextureDesc::tex2d(Format::d32_float, TextureUsageFlag::depth_stencil_attachment, window_size.x, window_size.y, 1, 1))); The first parameter of new_texture is the memory type of texture memory. The memory type is defined by MemoryType enumeration, possible options include: local - The memory can only be accessed by GPU, CPU access is disabled. This memory type is suitable for resources that will be frequently accessed by GPU. upload - The memory can be written by CPU and read by GPU. This memory type is suitable for resources that should be updated by CPU frequently. Textures cannot be created in this heap. readback - The memory can be written by GPU and read by CPU. This memory type is suitable for transferring data from GPU to CPU. Textures cannot be created in this heap. Note that when retrieving window size for rendering, we need to call IWindow::get_framebuffer_size instead of IWindow::get_size , on some platforms the window size is not necessary measured in pixels, causing these two methods return different values. Since we are using the window size as the depth texture size, the depth texture should also be recreated when the window size is changed. This can be done by adding the following code to the DemoApp::resize method: luset(depth_tex, dev->new_texture(MemoryType::local, TextureDesc::tex2d(Format::d32_float, TextureUsageFlag::depth_stencil_attachment, width, height, 1, 1))); Creating buffers and uploading buffer data The next step is to create buffers used in our DemoApp , including: The vertex buffer and index buffer for our box mesh. The uniform buffer for camera properties. Firstly we need to define the vertex structure of our box. Adding the following code after the declaration of DemoApp structure: struct Vertex { Float3U position; Float2U texcoord; }; Float2U and Float3U are vector types used in Luna SDK, which represent 2D and 3D vectors. In Luna SDK, we have 16-bytes aligned vector types Float2 , Float3 , Float4 , and unaligned vector types Float2U , Float3U and Float4U . The aligned vector types are used for calculations, SIMD functions like min , max , lerp , clamp only accepts aligned types, while unaligned vector types are used for storing and transferring data, just like this case. The size of aligned vector types are all 16 bytes, while the size of unaligned types are 8, 12 and 16 for Float2U , Float3U and Float4U . We need to add three new properties to DemoApp to hold the these three buffers: Ref<RHI::IBuffer> vb; Ref<RHI::IBuffer> ib; Ref<RHI::IBuffer> ub; As you can see, buffer objects are represented by IBuffer interface. Both IBuffer and ITexture interface inherits from IResource interface, which provides one method to fetch the underlying memory of the resource. Fetching the underlying memory enables the user to create aliasing resources that share the same memory, which is an advanced feature that will not be covered in this article. One buffer resource is described by BufferDesc structure, which is defined as follows: struct BufferDesc { u64 size; BufferUsageFlag usages; ResourceFlag flags; } BufferDesc is rather simple compared to TextureDesc . size specifies the size of the buffer, usages specifies all possible usages of the buffer when being bound to the pipeline, and flags specifies additional features of the buffer, like whether this buffer can share memory with other resources. Then, we need to create the vertex buffer and index buffer for our box using the following code: Vertex vertices[] = { {{+0.5, -0.5, -0.5}, {0.0, 1.0}}, {{+0.5, +0.5, -0.5}, {0.0, 0.0}}, {{+0.5, +0.5, +0.5}, {1.0, 0.0}}, {{+0.5, -0.5, +0.5}, {1.0, 1.0}}, {{+0.5, -0.5, +0.5}, {0.0, 1.0}}, {{+0.5, +0.5, +0.5}, {0.0, 0.0}}, {{-0.5, +0.5, +0.5}, {1.0, 0.0}}, {{-0.5, -0.5, +0.5}, {1.0, 1.0}}, {{-0.5, -0.5, +0.5}, {0.0, 1.0}}, {{-0.5, +0.5, +0.5}, {0.0, 0.0}}, {{-0.5, +0.5, -0.5}, {1.0, 0.0}}, {{-0.5, -0.5, -0.5}, {1.0, 1.0}}, {{-0.5, -0.5, -0.5}, {0.0, 1.0}}, {{-0.5, +0.5, -0.5}, {0.0, 0.0}}, {{+0.5, +0.5, -0.5}, {1.0, 0.0}}, {{+0.5, -0.5, -0.5}, {1.0, 1.0}}, {{-0.5, +0.5, -0.5}, {0.0, 1.0}}, {{-0.5, +0.5, +0.5}, {0.0, 0.0}}, {{+0.5, +0.5, +0.5}, {1.0, 0.0}}, {{+0.5, +0.5, -0.5}, {1.0, 1.0}}, {{+0.5, -0.5, -0.5}, {0.0, 1.0}}, {{+0.5, -0.5, +0.5}, {0.0, 0.0}}, {{-0.5, -0.5, +0.5}, {1.0, 0.0}}, {{-0.5, -0.5, -0.5}, {1.0, 1.0}} }; u32 indices[] = { 0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23 }; luset(vb, dev->new_buffer(MemoryType::local, BufferDesc(BufferUsageFlag::vertex_buffer | BufferUsageFlag::copy_dest, sizeof(vertices)))); luset(ib, dev->new_buffer(MemoryType::local, BufferDesc(BufferUsageFlag::index_buffer | BufferUsageFlag::copy_dest, sizeof(indices)))); We firstly define vertex and index data for our box, then we create two buffer resources to hold the vertex and index data. One buffer is created by calling IDevice::new_buffer , which is similar to IDevice::new_texture , but takes BufferDesc as the resource descriptor object. Since we only need to upload vertex and index buffer data once, these two buffers are created in local memory to achieve maximum GPU bandwidth. We can use similar code to create the constant buffer for uploading camera properties, but there are two differences. First, the graphic device has alignment requirements for constant buffers, which can be fetched from IDevice::check_feature(DeviceFeature::uniform_buffer_data_alignment) , so we use align_upper helper function to adjust the size of our uniform buffer resource to meet the alignment requirement. Second, since we need to update uniform buffer data once every frame, we should choose upload memory type instead of local to give host program direct access to that resource. In our DemoApp , the data of the uniform buffer is the 4x4 world-to-project matrix of the camera. We need to add a new include file to use matrix types: #include <Luna/Runtime/Math/Matrix.hpp> then we can use the following code to create constant buffer: auto ub_align = dev->check_feature(DeviceFeature::uniform_buffer_data_alignment).uniform_buffer_data_alignment; luset(ub, dev->new_buffer(MemoryType::upload, BufferDesc(BufferUsageFlag::uniform_buffer, align_upper(sizeof(Float4x4), ub_align)))); as you can see, Float4x4 is the matrix type used in Luna SDK. We also have Float3x3 for 2D affine transformations. Uploading vertex and index data Now that we have created one vertex buffer and one index buffer, we need to upload vertex and index data to these buffers, so that they can be used by GPU correctly. As we have mentioned before, resources with local memory type can not be accessed by the host directly. To copy data between local memory and host memory, we can either use staging buffers to transfer the data manually, or we can use RHI::copy_resource_data to perform data copy automatically. We will show how to perform data copy in both approaches. Uploading data manually In order to upload data to resources with local memory type, we need to create intermediate buffers with upload memory type, copy data to such buffers form the host, and use GPU to copy data from such buffers to resources with local memory type. Such intermediate buffers are usually called staging buffers , and are used frequently to copy data from host memory to device local memory. The following code shows how to upload data for our vertex and index buffer: lulet(vb_staging, dev->new_buffer(MemoryType::upload, BufferDesc(BufferUsageFlag::copy_source, sizeof(vertices)))); lulet(ib_staging, dev->new_buffer(MemoryType::upload, BufferDesc(BufferUsageFlag::copy_source, sizeof(indices)))); void* vb_mapped = nullptr; luexp(vb_staging->map(0, 0, &vb_mapped)); memcpy(vb_mapped, vertices, sizeof(vertices)); vb_staging->unmap(0, sizeof(vertices)); void* ib_mapped = nullptr; luexp(ib_staging->map(0, 0, &ib_mapped)); memcpy(ib_mapped, indices, sizeof(indices)); ib_staging->unmap(0, sizeof(indices)); cmdbuf->begin_copy_pass(); cmdbuf->resource_barrier({ BufferBarrier(vb, BufferStateFlag::automatic, BufferStateFlag::copy_dest), BufferBarrier(vb_staging, BufferStateFlag::automatic, BufferStateFlag::copy_source), BufferBarrier(ib, BufferStateFlag::automatic, BufferStateFlag::copy_dest), BufferBarrier(ib_staging, BufferStateFlag::automatic, BufferStateFlag::copy_source), }, {}); cmdbuf->copy_buffer(vb, 0, vb_staging, 0, sizeof(vertices)); cmdbuf->copy_buffer(ib, 0, ib_staging, 0, sizeof(indices)); cmdbuf->end_copy_pass(); cmdbuf->submit({}, {}, true); cmdbuf->wait(); cmdbuf->reset(); Firstly, we create two staging buffers vb_staging and ib_staging . These two buffers have the same size as vb and ib and use upload memory type, so they can be written by the host directly. Then, we use IBuffer::map to take pointers to the buffer memory, use memcpy to copy data to the memory, then use IBuffer::unmap to release the host access to the memory. map takes two integer parameters indicating the host reading range of the mapped memory, this should always be 0 if the memory type of the buffer is not readback , just like this case. unmap takes another two integer parameters indicating the host writing range of the mapped memory. in our case, we have written memory in [0, sizeof(data)) range, so we should specify the range correctly. There is a special range [0, USIZE_MAX) that indicates the whole buffer memory is read or written, so we don't need to specify the size explicitly. After we copy data to staging buffers, we need to tell GPU to copy data from staging buffers to GPU local resources. As we have mentioned before, to send commands to GPU, we need to record commands into command buffers, submit them to command queues, then waits for command buffers to be finished by GPU. The first command we need to record is ICommandBuffer::begin_copy_pass , which tells GPU to start a copy pass. This is required because all copy commands like copy_buffer , copy_texture etc. can only be recorded in a copy pass scope. Similarly, we have render passes for render commands, and compute passes for compute commands. After beginning the copy pass, we need to emit resource barriers to transfer resources used by GPU to compatible states. Resource barrier commands are recorded by ICommandBuffer::resource_barrier , and will be described later. After resources have been transferred into suitable states, we call ICommandBuffer::copy_buffer to record one buffer-to-buffer copy command. Finally, we call ICommandBuffer::end_copy_pass to end the copy pass we opened before. When we finish recording commands into the command buffer, we call ICommandBuffer::submit to submit the command buffer to the command queue, call ICommandBuffer::wait to wait for the command buffer to be finished, then call ICommandBuffer::reset to clear commands in the command buffer, and reset the command buffer state so that it can be used for a recording new commands. Uploading data using RHI::copy_resource_data In order to use RHI::copy_resource_data , we need to include one new header file: #include <Luna/RHI/Utility.hpp> RHI/Utility.hpp is an auxiliary library that defines high-level functionalities implemented using APIs provided by RHI , including RHI::copy_resource_data we use here. The following code shows how to upload data using RHI::copy_resource_data : luexp(copy_resource_data(cmdbuf, { CopyResourceData::write_buffer(vb, 0, vertices, sizeof(vertices)), CopyResourceData::write_buffer(ib, 0, indices, sizeof(indices)) })); You can see how RHI::copy_resource_data greatly simplifies the code we need to write in order to upload resource data. Loading image from file The next step is to load our Luna LOGO image that will be drawn on the box surface: Save the image file in the same directory as main.cpp , and naming it luna.png . You should have one file structure similar to this: DemoApp |- xmake.lua |- main.cpp |- luna.png Then fills xmake.lua with the following code: target(\"DemoApp\") set_luna_sdk_program() add_files(\"**.cpp\") add_deps(\"Runtime\", \"Window\", \"RHI\", \"ShaderCompiler\", \"Image\") before_build(function(target) os.cp(\"$(scriptdir)/luna.png\", target:targetdir() .. \"/luna.png\") end) after_install(function (target) os.cp(target:targetdir() .. \"/luna.png\", target:installdir() .. \"/bin/luna.png\") end) target_end() This script triggers registers custom functions before building the program and after installing the program, the custom function copies the image file to same the directory of our program binary file, so that our program can correctly find the image file. Then, go back to main.cpp , and add one new property to DemoApp to represent the loaded image: Ref<RHI::ITexture> file_tex; To load the image in our program, we need to use one new module called Image , which parses image file data and gives row-majored image data in our desired format. We also need to use the file API provided by Runtime module, so we includes two new headers: #include <Luna/Runtime/File.hpp> #include <Luna/Image/Image.hpp> The first thing to do is to load image file data from our luna.png file. In order to load file data, we need to use the open_file function provided by the Runtime module. This function returns one file handle represented by IFile if the file is correctly opened. Then, we loads the file data into one Blob object by calling load_file_data , this function creates one properly-sized blob object, and calls IFile::read to read all data of the file to the blob, then returns the blob: lulet(image_file, open_file(\"Luna.png\", FileOpenFlag::read, FileCreationMode::open_existing)); lulet(image_file_data, load_file_data(image_file)); Now that the file data has been stored in image_file_data , we need to call Image::read_image_file function to parse the file data and gives the real image data: Image::ImageDesc image_desc; lulet(image_data, Image::read_image_file(image_file_data.data(), image_file_data.size(), Image::ImageFormat::rgba8_unorm, image_desc)); Image::read_image_file function outputs one Image::ImageDesc structure that describes the returned image data, including the width, height and pixel format of the image. The image data is arranged in a row-major manner and without and alignment padding. We can now creates the texture resource based on the image size: luset(file_tex, dev->new_texture(MemoryType::local, TextureDesc::tex2d(Format::rgba8_unorm, TextureUsageFlag::copy_dest | TextureUsageFlag::read_texture, image_desc.width, image_desc.height, 1, 1))); The following code shows how to upload data for our texture: u64 tex_size, tex_row_pitch, tex_slice_pitch; dev->get_texture_data_placement_info(image_desc.width, image_desc.height, 1, Format::rgba8_unorm, &tex_size, nullptr, &tex_row_pitch, &tex_slice_pitch); lulet(file_tex_staging, dev->new_buffer(MemoryType::upload, BufferDesc(BufferUsageFlag::copy_source, tex_size))); void* file_tex_mapped = nullptr; luexp(file_tex_staging->map(0, 0, &file_tex_mapped)); memcpy_bitmap(file_tex_mapped, image_data.data(), image_desc.width * 4, image_desc.height, tex_row_pitch, image_desc.width * 4); file_tex_staging->unmap(0, USIZE_MAX); cmdbuf->begin_copy_pass(); cmdbuf->resource_barrier({ BufferBarrier(file_tex_staging, BufferStateFlag::automatic, BufferStateFlag::copy_source) }, { TextureBarrier(file_tex, TEXTURE_BARRIER_ALL_SUBRESOURCES, TextureStateFlag::automatic, TextureStateFlag::copy_dest) }); cmdbuf->copy_buffer_to_texture(file_tex, SubresourceIndex(0, 0), 0, 0, 0, file_tex_staging, 0, tex_row_pitch, tex_slice_pitch, image_desc.width, image_desc.height, 1); cmdbuf->end_copy_pass(); cmdbuf->submit({}, {}, true); cmdbuf->wait(); cmdbuf->reset(); Uploading texture data is similar to uploading buffer data, we need to create one staging buffer to hold the texture data, then use ICommandBuffer::copy_buffer_to_texture to copy data from buffer to texture. Note that most systems have special alignment requirements for texture data in buffers when copying data between buffers and textures, the user should call IDevice::get_texture_data_placement_info to fetch the texture data placement information for one specific texture, and use that information to manipulate texture data in the buffer. Instead of memcpy , the user should call memcpy_bitmap to copy row-major bitmap data, which takes src_row_pitch and dst_row_pitch to correctly offsets every texture data row. We can also use RHI::copy_resource_data to upload data for textures like so: luexp(copy_resource_data(cmdbuf, { CopyResourceData::write_texture(file_tex, SubresourceIndex(0, 0), 0, 0, 0, image_data.data(), image_desc.width * 4, image_desc.width * image_desc.height * 4, image_desc.width, image_desc.height, 1) })); Set up descriptor set Once the uniform buffer and file texture is set up, we can bind these two resources to the descriptor set by calling IDescriptorSet::update_descriptors . We also need to set the sampler in the descriptor set to be used by the pixel shader. luexp(desc_set->update_descriptors({ WriteDescriptorSet::uniform_buffer_view(0, BufferViewDesc::uniform_buffer(ub)), WriteDescriptorSet::read_texture_view(1, TextureViewDesc::tex2d(file_tex)), WriteDescriptorSet::sampler(2, SamplerDesc(Filter::linear, Filter::linear, Filter::linear, TextureAddressMode::clamp, TextureAddressMode::clamp, TextureAddressMode::clamp)) })); This concludes the DemoApp::init function. Camera control Now that we have created all resources required to draw the box, we need to fill the actual drawing code in DemoApp::update . To make our program more interesting, we can apply one simple animation that rotates the camera around the box. We firstly adds one new property to DemoApp that stores the rotation angle of the camera: f32 camera_rotation = 0.0f; We can increase the rotation angle of the camera by one at every frame by adding the following line to the end of DemoApp:update : camera_rotation += 1.0f; Since we are going to use many functions that may throw errors, it is better to declare one lutry - lucatch scope that wraps all succeeding codes in DemoApp:update . Also, we don't want to render the image if the window is closed or minimized, so we add two early-out conditions after Window::poll_events() . Now DemoApp::update should look like this: RV DemoApp::update() { Window::poll_events(); if(window->is_closed()) return ok; if(window->is_minimized()) return ok; lutry { camera_rotation += 1.0f; // More codes goes here... } lucatchret; return ok; } After we updates the camera rotation, we need to calculate the view-projection matrix for the camera. Fortunately, the math library of the Runtime module already includes implementations for many commonly used vector and matrix calculations, and here we are going to use two of them: AffineMatrix::make_look_at and ProjectionMatrix::make_perspective_fov . To use these two functions, we firstly need to add one new header file: #include <Luna/Runtime/Math/Transform.hpp> Then the matrix can be computed using the following code: Float3 camera_pos(cosf(camera_rotation / 180.0f * PI) * 3.0f, 1.0f, sinf(camera_rotation / 180.0f * PI) * 3.0f); Float4x4 camera_mat = AffineMatrix::make_look_at(camera_pos, Float3(0, 0, 0), Float3(0, 1, 0)); auto window_sz = window->get_framebuffer_size(); camera_mat = mul(camera_mat, ProjectionMatrix::make_perspective_fov(PI / 3.0f, (f32)window_sz.x / (f32)window_sz.y, 0.001f, 100.0f)); AffineMatrix::make_look_at generates one camera view matrix from the position of the camera and the position of the point to look at. ProjectionMatrix::make_perspective_fov is another helper function that generates one projection matrix from the specified field-of-view and aspect ratio values. Those two matrices are multiplied by mul function to get the final view-projection matrix. Note that when performing matrix multiplications, use mul instead of operator * , the later one is used to multiply each element in the matrix separately. After we get the matrix, we need to copy the matrix data to the uniform buffer resource like so: void* camera_mapped; luexp(ub->map(0, 0, &camera_mapped)); memcpy(camera_mapped, &camera_mat, sizeof(Float4x4)); ub->unmap(0, sizeof(Float4x4)); Fetching the back buffer In order to render contents to one window, we need to fetch back buffers managed by the window swap chain. The number of back buffers that are contained by a swap chain is determined by SwapChainDesc::buffer_count , which can be set when the swap chain is created or reset. At every frame, only one back buffer can be used for rendering, which can be fetched by calling ISwapChain::get_current_back_buffer : lulet(back_buffer, swap_chain->get_current_back_buffer()); ISwapChain::get_current_back_buffer can be called multiple times during the same frame, and will return the same back buffer. The current back buffer will be switched when ISwapChain::present is called, the user should not use the back buffer in the previous frame after ISwapChain::present is called. Resource barriers In Luna SDK, every graphic resource has one state that describes the current memory layout and pipeline access polity of the resource. Before we can issue draw calls, we need to transfer every resource we use to their correct states. Luna SDK requires the user to transfer the state explicitly by calling ICommandBuffer::resource_barrier with transition-typed resource barriers. In our example, we need to perform the following transitions: cmdbuf->resource_barrier({ BufferBarrier(ub, BufferStateFlag::automatic, BufferStateFlag::uniform_buffer_vs), BufferBarrier(vb, BufferStateFlag::automatic, BufferStateFlag::vertex_buffer), BufferBarrier(ib, BufferStateFlag::automatic, BufferStateFlag::index_buffer) }, { TextureBarrier(file_tex, TEXTURE_BARRIER_ALL_SUBRESOURCES, TextureStateFlag::automatic, TextureStateFlag::shader_read_ps), TextureBarrier(back_buffer, SubresourceIndex(0, 0), TextureStateFlag::automatic, TextureStateFlag::color_attachment_write), TextureBarrier(depth_tex, SubresourceIndex(0, 0), TextureStateFlag::automatic, TextureStateFlag::depth_stencil_attachment_write) }); One resource can have multiple states, so long as such states are compatible to each other. For example, one texture can have TextureStateFlag::shader_read_vs and TextureStateFlag::shader_read_ps at the same time if it will be accessed by both vertex and pixel shader, or can have TextureStateFlag::shader_read_cs and TextureStateFlag::shader_write_cs at the same time if it will be read and write by compute shader. Luna SDK internally tracks the current states for all resources, so we can set before states of resources to automatic in most cases, which tells the system to load the previous states automatically. Luna SDK also omits unnecessary barriers automatically. Drawing the box Finally, we can issue the draw call that draws our box: RenderPassDesc desc; desc.color_attachments[0] = ColorAttachment(back_buffer, LoadOp::clear, StoreOp::store, Float4U(0.0f)); desc.depth_stencil_attachment = DepthStencilAttachment(depth_tex, false, LoadOp::clear, StoreOp::store, 1.0f); cmdbuf->begin_render_pass(desc); cmdbuf->set_graphics_pipeline_layout(playout); cmdbuf->set_graphics_pipeline_state(pso); cmdbuf->set_graphics_descriptor_set(0, desc_set); auto sz = vb->get_desc().size; cmdbuf->set_vertex_buffers(0, {VertexBufferView(vb, 0, sz, sizeof(Vertex))}); sz = ib->get_desc().size; cmdbuf->set_index_buffer(IndexBufferView(ib, 0, sz, Format::r32_uint)); cmdbuf->set_scissor_rect(RectI(0, 0, (i32)window_sz.x, (i32)window_sz.y)); cmdbuf->set_viewport(Viewport(0.0f, 0.0f, (f32)window_sz.x, (f32)window_sz.y, 0.0f, 1.0f)); cmdbuf->draw_indexed(36, 0, 0); cmdbuf->end_render_pass(); The first thing to do is to begin a render pass that attaches one set of color attachments and/or the depth stencil attachment to the graphic pipeline, these textures are bound to the pipeline during the current render pass and cannot be changed, while all other settings (like shader input layout object, pipeline state object, descriptor sets, etc) can be changed within the same render pass. The render pass begins with ICommandBuffer::begin_render_pass . In the render pass, we set up all pipeline settings, and bind all resources required for the current draw call, then calls ICommandBuffer::draw_indexed to issue the draw call based on the current settings. Then we should close the render pass by calling ICommandBuffer::end_render_pass . We won't go detail about the pipeline setup for this draw call, they should be familiar to you if you have been using other graphics API before. For further explanations, please consult the documentations for the RHI module. Before we can submit our command buffer, we need to insert another resource barrier to transfer our back buffer into TextureStateFlag::present state. This is required for one back buffer to be successfully presented. cmdbuf->resource_barrier({}, { TextureBarrier(back_buffer, SubresourceIndex(0, 0), TextureStateFlag::automatic, TextureStateFlag::present) }); Finally, we submit our command buffer, waiting for its completion, and resets the command buffer for next frame: luexp(cmdbuf->submit({}, {}, true)); cmdbuf->wait(); luexp(cmdbuf->reset()); Presenting the render result The last thing we need to do is to present our rendering result to the window. This is done by calling ISwapChain::present : luexp(swap_chain->present()); This concludes the DemoApp::update function. Build and run DemoApp , if everything goes correctly, you will see a textured rotating box in the screen: Congratulations! If you have followed every step of this article correctly, you should have a first impression of graphic programming using Luna SDK. If anything goes wrong, you can download the source code archive from the beginning of this article and compare it with your code.","title":"Getting Started"},{"location":"manual/introduction/getting_started/#getting-started","text":"Welcome to Luna SDK. In this article, we will guide you to Luna SDK by creating a simple program that draws one textured 3D cube on the screen. At the end of this article, you will have a basic understanding of using Luna SDK to create a simple graphic program, and can start to explore more advanced features provided by Luna SDK. The source code of this article can be downloaded here: DemoApp.zip","title":"Getting Started"},{"location":"manual/introduction/getting_started/#prerequisites","text":"In this article, we assume that you have the basic knowledge of C++ programming and graphics programming (like using D3D11, D3D12 or OpenGL). You should also correctly setup Luna SDK and developing environments using the instructions provided in README.md of the project.","title":"Prerequisites"},{"location":"manual/introduction/getting_started/#creating-the-program","text":"The first thing to do is to create an binary target for our demo program, so that XMake build system can correctly build our program. To create a new program, create a new folder in the {LUNA_ROOT_DIR}/Programs directory, and name it DemoApp . In this folder, create a new Lua script file called xmake.lua , and fill its content with the following text: target(\"DemoApp\") set_luna_sdk_program() add_files(\"**.cpp\") add_deps(\"Runtime\", \"Window\", \"RHI\", \"ShaderCompiler\", \"Image\") target_end() target and target_end enclose a target scope , where all target definitions are specified. set_luna_sdk_program tells XMake that we are defining one Luna SDK program, this will let XMake set the target kind to \"binary\" and import all SDK options for the program. add_files(\"**.cpp\") tells XMake to add all CPP files in the current directory and all subdirectories to the this target. add_deps lists all libraries that this program links to, in our example, we need to link to the SDK runtime ( Runtime ), the window module ( Window ) , the Graphics API module ( RHI ), the shader compiler module ( ShaderCompiler ) and the image file module ( Image ). If you got unresolved external symbol errors when compiling, make sure you already link correct libraries. Then we need to create source CPP files for our program. Since out demo program is simple, we only create one \"main.cpp\" file to host all source codes. After this, the DemoApp directory should looks like this: DemoApp |- xmake.lua |- main.cpp The last thing is to add one line in the end of {LUNA_ROOT_DIR}/Programs/xmake.lua to tell XMake to add our program in the solution: includes(\"DemoApp\") Well done, now every is set up and we can start to program our first Luna SDK program!","title":"Creating the program"},{"location":"manual/introduction/getting_started/#program-structure","text":"Next, fills main.cpp with the following initial content. As we go further, we will add more properties and methods to our DemoApp structure, while remaining the rest part unchanged. #include <Luna/Runtime/Runtime.hpp> #include <Luna/Runtime/Module.hpp> #include <Luna/Runtime/Log.hpp> #include <Luna/Runtime/UniquePtr.hpp> using namespace Luna; struct DemoApp { RV init(); RV update(); bool is_exiting(); }; RV DemoApp::init() { return ok; } RV DemoApp::update() { return ok; } bool DemoApp::is_closed() { return false; } RV run_app() { auto result = init_modules(); if(failed(result)) return result; UniquePtr<DemoApp> app (memnew<DemoApp>()); result = app->init(); if(failed(result)) return result; while(!app->is_exiting()) { result = app->update(); if(failed(result)) return result; } return ok; } int main() { bool initialized = Luna::init(); if(!initialized) return -1; RV result = run_app(); if(failed(result)) log_error(\"DemoApp\", \"%s\", explain(result.errcode())); Luna::close(); return 0; } The first four lines includes the header files that we need to include to compile the program, which are: * for Luna::init() and Luna::shutdown() . * for Luna::init_modules() . * for Luna::log_error() . * for Luna::UniquePtr<T> . You can include any SDK interface header files using similar syntax: #include <Luna/Module/File> . We set {LUNA_ROOT_DIR}/Engine as the global include directory, the user may check it for available header files. In this example, all header files are from the Runtime module, which is the core module of Luna SDK that provides fundamental SDK features. The next statement is using namespace Luna . In Luna SDK, all types, functions and variables are defined in Luna namespace, and every module will define its elements in nested namespace, such as Luna::RHI . So, we use this statement to prevent spelling the Luna:: namespace prefix in our following code. The program starts with the main function, just like any normal C/C++ program. In the main function, we firstly call Luna::init to initialize Luna SDK. This function should be called before any other Luna SDK function. Luna::init returns one Boolean value to indicate whether the SDK initialization is succeeded, if the return value is false , we then return -1 and exit the program to indicate one runtime error. If Luna::init returns true , then one Luna::close call is need before the program exit to let the SDK clean up all internal resources. We then wrap the real program logic in one run_app function. The return type of run_app is RV , which is a shortcut for R<void> , this is part of the error handling mechanism of Luna SDK. R<T> is a structure that encapsulates one return value with type T and one error code with type ErrCode , which is simply an alias of usize (or std::size_t ). If the function succeeds, the returned value will be one T -typed value and one error code 0 ; if the function fails, the returned value will be one non-zero error code, and the T -typed value will be uninitialized and inaccessible, you may call errcode() to fetch the error code from R<T> , and may call explain to get a brief description of the error. In our main function, we check whether our run_app function is failed by using failed helper function (there is also one succeeded helper function available), then we print the error description and exits the program if any error occurs. In our run_app function, the first thing to do is calling init_modules , which will initialize all linked SDK modules for our program. We deliberately separate module initialization from Luna::init so that the user get a chance to set module initialization parameters before initializing modules, and modules can also indicate initialization failure by returning error codes (error handling system is available after Luna::init ). Then, we allocate and initialize one new object of DemoApp type by calling memnew function. The following table shows memory allocation functions used in Luna SDK: Luna SDK functions C++ functions/keywords memalloc(size, alignment) malloc(size) memfree(ptr, alignment) free(ptr) memrealloc(ptr, size, alignment) realloc(ptr, size) memsize(size, alignment) N/A memnew<T>(args...) new T (args...) memdelete(ptr) delete ptr The user should uses allocation functions provided by Luna SDK instead of those provided by C++ std. DemoApp will contain all states and logics for our demo program. The created DempApp instance will then be stored as a variable app with UniquePtr<DemoApp> type, which is a smart pointer that will delete the pointing object automatically when expired. DemoApp has three functions: init , update and is_closed . The init function initializes the program, and reports errors if the initialization is failed; the update function updates the program state and renders the image at every frame; the is_exiting function checks whether the program is exiting. We will implement these three methods in the following sections. The rest part of our run_app function simply checks whether the program is exiting by calling is_exiting , and updates the program when it is not exiting. After filling this content, execute xmake build DemoApp on terminal or click build button on your IDE, you should successfully build the DemoApp program.","title":"Program structure"},{"location":"manual/introduction/getting_started/#window-creation-and-event-handling","text":"Now that we have one basic program structure, we need to create a system window so that we can render images to it. We also need to implement window event handling so that the program can exit when the user clicks the close button of the window. Window creation is fairly simple, we firstly need to introduce one new header: #include <Luna/Window/Window.hpp> then we add one new property to our DemoApp structure: struct DemoApp { Ref<Window::IWindow> window; RV init(); RV update(); bool is_exiting(); RV resize(u32 width, u32 height); }; The window object is provided by Window::IWindow* interface pointer in Luna SDK, which points to a boxed object which manages its lifetime using reference counting . IWindow interface may have different implementations on different platforms, by they all provide the same functionality required by this interface. Ref<T> is a smart pointer for boxed objects, it will manage the reference counter of the pointing object automatically when being constructed and destructed, so the user does not need to call object_retain and object_release manually. You may compare Ref<T> to ComPtr used in Microsoft's Component-Object Model (COM), or the automatic reference counting in Apple's Objective-C and Swift. The default constructor of Ref<T> initializes the pointer to nullptr , so we need to assign it with a valid object. Then we need to create our window in DemoApp::init : RV DemoApp::init() { lutry { luset(window, Window::new_window(\"DemoApp\", Window::WindowDisplaySettings::as_windowed(), Window::WindowCreationFlag::resizable)); } lucatch { return lures; } return ok; } Besides the new_window function that creates the window, there are four new keywords in our code: lutry , lucatch , luset and lures . These four keywords are macros that enables us to write error handling using a simpler try-catch style, rather than fetching and checking error codes once and once again for every function call that may fail. lutry and lucatch must be used in pairs, next to each other. In the lutry block, the user may define multiple lulet , luset or luexp statements, lulet statement creates a new local variable to hold the return value of the function, and jumps to lucatch if the function fails; luset assigns the return value to one existing variable, and jumps to lucatch if the function fails; luexp is used if the function does not return any value, it simply checks whether the function succeeds, and jumps to lucatch if not. The user may also call luthrow manually in lutry block to jump to lucatch directly. In the lucatch block, lures is provided as the error code that causes the failure. You may use one switch statement on the lures to handle specific errors, or you can propagate the error directly to parent function by return lures . Since error propagating is so commonly used, we create another macro lucatchret to replace lucatch { return lures; } , so the code above can be written as: RV DemoApp::init() { lutry { luset(window, Window::new_window(\"DemoApp\", Window::WindowDisplaySettings::as_windowed(), Window::WindowCreationFlag::resizable)); } lucatchret; return ok; } Since we use goto statement to implement lutry and lucatch , it you needs multiple lutry-lucatch pairs in one function, you should use a numbered version for every pair (like lutry2 , lucatch2 , luset 2, lures2 , etc.). In most cases, only one lutry-lucatch pair is sufficient. Now let's get back to Window::new_window function that does the actual work: R<Ref<IWindow>> new_window(const c8* title, const WindowDisplaySettings& display_settings, WindowCreationFlag flags) In this function, title Specifies the title of the window, which is usually displayed on the title bar of the window. flags are a combination of WindowCreationFlag enumeration class that lists flags for window creation process, like whether the window is resizable by dragging the border of the window, whether the window is a border-less window, etc. display_settings specifies the display settings for the window, which is described by WindowDisplaySettings structre: struct WindowDisplaySettings { monitor_t monitor; i32 x; i32 y; u32 width; u32 height; u32 refresh_rate; bool full_screen; }; Every window can be displayed in windowed mode or full screen mode, which can be specified by full_screen . monitor specifies the monitor to attach the window to in full screen mode. If monitor is nullptr and the window is set to full screen mode, the primary monitor of the system will be used. x and y are the position of the window on screen coordinates in windowed mode. The user may pass DEFAULT_POS constant to indicate a system-specific default position for the window. width and height are used to control the size of the window, the user can pass 0 to indicate a system-specific default size. refresh_rate controls the refresh rate of the window, the user may pass 0 to use the default refresh rate of the system. WindowDisplaySettings comes with two static functions as_windowed and as_full_screen for quickly specify all parameters in one row, with default values specified when they are skipped by the user, just as in our example. After the window is created, we need to register window event callbacks so that we can handle window events properly. In this example, the events we need to handle is the close event (triggered when the close button of the window is pressed) and the framebuffer resize event (triggered when the window framebuffer size is changed). This can be done by the following statements: window->get_close_event().add_handler([](Window::IWindow* window) { window->close(); }); window->get_framebuffer_resize_event().add_handler([this](Window::IWindow* window, u32 width, u32 height) { lupanic_if_failed(this->resize(width, height)); }); get_close_event and get_framebuffer_resize_event are methods of IWindow that gets the close event and the framebuffer resize event object of the window. The event object is a collection of callback functions that once triggered, calls all the callback functions. We then register one callback function to the close event that closes the window immediately, and one callback function to the framebuffer resize event that calls the resize method of our DempApp . The resize method is currently empty, we will fill the content of this method when we create render textures later: RV DemoApp::resize(u32 width, u32 height) { return ok; } Window events are not polled automatically, we need to tell the window system to poll events at every frame by calling Window::poll_events in update function: RV DemoApp::update() { Window::poll_events(); return ok; } This call polls events for all existing windows, so we don't need to provide specific window here. After we correctly handle the close event, we can complete the is_closed method of DemoApp : bool DemoApp::is_exiting() { return window->is_closed(); } So far, the complete code for main.cpp is: #include <Luna/Runtime/Runtime.hpp> #include <Luna/Runtime/Module.hpp> #include <Luna/Runtime/Log.hpp> #include <Luna/Runtime/UniquePtr.hpp> #include <Luna/Window/Window.hpp> using namespace Luna; struct DemoApp { Ref<Window::IWindow> window; RV init(); RV update(); bool is_exiting(); RV resize(u32 width, u32 height); }; RV DemoApp::init() { lutry { luset(window, Window::new_window(\"DemoApp\", Window::WindowDisplaySettings::as_windowed(), Window::WindowCreationFlag::resizable)); window->get_close_event().add_handler([](Window::IWindow* window) { window->close(); }); window->get_framebuffer_resize_event().add_handler([this](Window::IWindow* window, u32 width, u32 height) { lupanic_if_failed(this->resize(width, height)); }); } lucatchret; return ok; } RV DemoApp::update() { Window::poll_events(); return ok; } bool DemoApp::is_exiting() { return window->is_closed(); } RV DemoApp::resize(u32 width, u32 height) { return ok; } RV run_app() { auto result = init_modules(); if(failed(result)) return result; UniquePtr<DemoApp> app (memnew<DemoApp>()); result = app->init(); if(failed(result)) return result; while(!app->is_exiting()) { result = app->update(); if(failed(result)) return result; } return ok; } int main() { bool initialized = Luna::init(); if(!initialized) return -1; RV result = run_app(); if(failed(result)) log_error(\"DemoApp\", \"%s\", explain(result.errcode())); Luna::close(); return 0; } Build and run DemoApp , and you will see a blank window appears, and the program exits when you click the close button of the window.","title":"Window creation and event handling"},{"location":"manual/introduction/getting_started/#fetching-graphics-device","text":"After the window is created, we can start drawing our box. Luna SDK provides all rendering features through RHI module, which is the abbreviation of Rendering Hardware Interface . To use RHI module, we need to include its header first: #include <Luna/RHI/RHI.hpp> In Luna SDK, all graphics resources are related to one specific graphics device represented by RHI::IDevice , which is the virtual representation of the physical graphics device on the platform, so we need to add one property to DemoApp to hold this device: Ref<RHI::IDevice> dev; When RHI module initializes, it automatically chooses the most suitable physical device and creates one IDevice instance for you, which can be fetched by RHI::get_main_device() . You may also create additional devices for special use, but in our DemoApp , we will stick to the default one by adding the following line in the lutry scope of DemoApp::init : dev = RHI::get_main_device(); We can also import all RHI types and functions by using namespace RHI; so that we don't need to spell them all over the init function: using namespace RHI; The code of DemoApp::init should look similar to: RV DemoApp::init() { lutry { luset(window, Window::new_window(\"DemoApp\", Window::WindowDisplaySettings::as_windowed(), Window::WindowCreationFlag::resizable)); window->get_close_event().add_handler([](Window::IWindow* window) { window->close(); }); window->get_framebuffer_resize_event().add_handler([this](Window::IWindow* window, u32 width, u32 height) { lupanic_if_failed(this->resize(width, height)); }); dev = RHI::get_main_device(); using namespace RHI; // New resource creation code goes here... } lucatchret; return ok; } Unless explicitly specified, all codes we need to add to DemoApp::init in the following sections are added to the end of lutry scope, not in the end of the function scope directly.","title":"Fetching graphics device"},{"location":"manual/introduction/getting_started/#fetching-command-queue-and-creating-command-buffer","text":"Luna SDK employs deferred execution model , where render and compute invocations are recorded as commands in command buffers , then submitted to GPU explicitly by submitting command buffers to command queues . The command buffer object manages memory allocated to store commands, it also tracks the execution state for commands in the buffer when the buffer is submitted for execution. The command queue is a FIFO message queue between the host program and GPU. The host program submits command buffers to the command queue, and GPU consumes command buffers from the queue and execute commands in the buffer. Command buffers in the same queue are guaranteed to execute one after another, the next command buffer will not be executed until the last command buffer is finished. When IDevice initializes, it creates one or multiple command queues based on the physical device architecture and limitation. The user can use IDevice::get_num_command_queues to fetch the number of command queues present on the current device, and use IDevice::get_command_queue_desc to fetch the command queue description of each command queue. get_command_queue_desc returns one CommandQueueDesc structure, which is defined as follows: struct CommandQueueDesc { CommandQueueType type; CommandQueueFlag flags; }; CommandQueueType indicates the type of the command queue. There are three different queue types: graphics , compute and copy . The copy queue only accepts copy commands, and is used for transferring data between different resources; the compute queue accepts copy and compute tasks, while the graphics queue accepts graphics, compute and copy commands. CommandQueueFlag indicates additional properties for the queue, including CommandQueueFlag::presenting , which indicates one command queue that supports swap chain presenting. In our program, we need to choose one command queue of graphics type, and has CommandQueueFlag::presenting flag present. We firstly need to add one property to DemoApp to store the command queue index we choose: u32 queue; Then the command queue can be fetched by adding the following codes to DemoApp::init : queue = U32_MAX; u32 num_queues = dev->get_num_command_queues(); for (u32 i = 0; i < num_queues; ++i) { auto desc = dev->get_command_queue_desc(i); if (desc.type == CommandQueueType::graphics && test_flags(desc.flags, CommandQueueFlag::presenting)) { queue = i; break; } } if(queue == U32_MAX) return BasicError::not_supported(); After we fetched the command queue, we need to create one command buffer to record commands that will be submitted to that queue. We firstly need to add one new property to DemoApp to hold the command buffer: Ref<RHI::ICommandBuffer> cmdbuf; Then we can create the command buffer by adding the following codes to DemoApp::init : luset(cmdbuf, dev->new_command_buffer(queue)); When we create the command buffer, we should pass the index of the command queue that is attached to the command buffer. The created command buffer can only be submitted to the command queue specified when creating the command buffer.","title":"Fetching command queue and creating command buffer"},{"location":"manual/introduction/getting_started/#creating-swap-chain","text":"The swap chain object contains resources that are used to present render results to our window. In order to create one swap chain, we firstly need to add one property to DemoApp to store the created swap chain: Ref<RHI::ISwapChain> swap_chain; In Luna SDK, the swap chain presentation is also a command that should be submitted using command queues, so we need to specify the command queue we need to use when creating swap chains like so: luset(swap_chain, dev->new_swap_chain(queue, window, SwapChainDesc(0, 0, 2, Format::bgra8_unorm, true))); The swap chain is described by one SwapChainDesc structure: struct SwapChainDesc { u32 width; u32 height; u32 buffer_count; Format pixel_format; bool vertically_synchronized; }; When used for creating swap chains, you may pass 0 for width and height property, which indicates the system to use the window framebuffer size as the size of the swap chain. The swap chain needs to be resized when the window framebuffer size is changed. This can be done by filling DemoApp::resize method with the following codes: RV DemoApp::resize(u32 width, u32 height) { lutry { using namespace RHI; if(width && height) { auto dev = get_main_device(); luexp(swap_chain->reset({width, height, 2, Format::unknown, true})); } } lucatchret; return ok; } ISwapChain::reset will reset the swap chain according to the new swap chain description, we can use Format::unknown to tell the system to use the current back buffer format for the new back buffer. Note that on some systems, the resize event will be emitted with both width and height being 0 if the window is minimized. We cannot create one swap chain with zero width or height, so we should handle this case and resize the back buffer with only non-zero size values.","title":"Creating swap chain"},{"location":"manual/introduction/getting_started/#creating-descriptor-set-layout-and-descriptor-set","text":"The descriptor set object stores descriptors that bind resources to graphics or compute pipeline. Descriptors have the following types: Uniform buffer view, which binds constant global data to shaders. Read buffer view, which binds buffers to shaders and enables load operations on the buffer data. Read texture view, which binds textures to shaders and enables sampling and load operations on the pixel data. Read write buffer view, which binds buffers to shaders and enables load, store and atomic operations on the buffer data. Read write texture view, which binds textures to shaders and enables load, store, and atomic operations on the pixel data. Sampler, which stores sampling settings and exposes those settings for shaders. Every pipeline may bind multiple descriptor sets, every descriptor set may contain all kinds of descriptors listed above. The descriptor set layout object stores the layout of one descriptor set object, including the number of descriptors in the descriptor set and the property of each descriptor. In order to create one descriptor set layout object, we need to fill one DescriptorSetLayoutDesc structure. Here is the definition of DescriptorSetLayoutDesc structure: struct DescriptorSetLayoutDesc { Span<const DescriptorSetLayoutBinding> bindings; DescriptorSetLayoutFlag flags = DescriptorSetLayoutFlag::none; }; The descriptor set layout consists of multiple bindings specified by DescriptorSetLayoutBinding , each binding describes one range of the descriptor set: struct DescriptorSetLayoutBinding { DescriptorType type; TextureViewType texture_view_type; u32 binding_slot; u32 num_descs; ShaderVisibilityFlag shader_visibility_flags; }; the type property describes the type of this binding. All descriptors in the same binding must be the same type: enum class DescriptorType : u32 { uniform_buffer_view, read_buffer_view, read_write_buffer_view, read_texture_view, read_write_texture_view, sampler }; the texture_view_type property describes the texture view type that can be set in this binding. This is required only when type of this binding is read_texture_view or read_write_texture_view . All texture views in the same binding must be the same type. binding_slot and num_descs describes the binding slot range of this binding, starting from 0 . All slots in [binding_slot, binding_slot + num_descs) will be occupied by this binding and cannot be used by other bindings. If num_descs is greater than 1 , then this binding will be interpreted as one descriptor array in the shader. shader_visibility_flags specifies which shaders may access descriptors in this binding, you may restrict the visibility of one binding to one set of specific shaders, which may improve performance on some platforms. We need to add two new properties to DemoApp to hold the descriptor set layout object and the descriptor set object: Ref<RHI::IDescriptorSetLayout> dlayout; Ref<RHI::IDescriptorSet> desc_set; We need 1 descriptor set with 1 constant buffer view, 1 shader resource view and 1 sampler. So we can create our descriptor set layout object in DemoApp::init like so: luset(dlayout, dev->new_descriptor_set_layout(DescriptorSetLayoutDesc({ DescriptorSetLayoutBinding::uniform_buffer_view(0, 1, ShaderVisibilityFlag::vertex), DescriptorSetLayoutBinding::read_texture_view(TextureViewType::tex2d, 1, 1, ShaderVisibilityFlag::pixel), DescriptorSetLayoutBinding::sampler(2, 1, ShaderVisibilityFlag::pixel) }))); Then we can create one descriptor set using the descriptor set layout object: luset(desc_set, dev->new_descriptor_set(DescriptorSetDesc(dlayout))); We will fill descriptors in the set by calling update_descriptors later.","title":"Creating descriptor set layout and descriptor set"},{"location":"manual/introduction/getting_started/#compiling-shaders","text":"The next thing to do is compiling shaders for the pipeline state object. Luna SDK uses HLSL as the source shader language, and uses ShaderCompiler module to compile HLSL to DXBC, DXIL, SPIR-V and other target shading languages. To compile shader, we need to include corresponding header files: #include <Luna/ShaderCompiler/ShaderCompiler.hpp> #include <Luna/RHI/ShaderCompileHelper.hpp> ShaderCompileHelper.hpp includes RHI::get_current_platform_shader_target_format() function, which tell the shader compiler the native target target shader format for the current graphics API. Since our shader is rather simple, we declare our shader source code directly in the C++ source file, in DemoApp::init function: const char vs_shader_code[] = R\"( cbuffer vertexBuffer : register(b0) { float4x4 world_to_proj; }; struct VS_INPUT { [[vk::location(0)]] float3 position : POSITION; [[vk::location(1)]] float2 texcoord : TEXCOORD; }; struct PS_INPUT { [[vk::location(0)]] float4 position : SV_POSITION; [[vk::location(1)]] float2 texcoord : TEXCOORD; }; PS_INPUT main(VS_INPUT input) { PS_INPUT output; output.position = mul(world_to_proj, float4(input.position, 1.0f)); output.texcoord = input.texcoord; return output; })\"; const char ps_shader_code[] = R\"( Texture2D tex : register(t1); SamplerState tex_sampler : register(s2); struct PS_INPUT { [[vk::location(0)]] float4 position : SV_POSITION; [[vk::location(1)]] float2 texcoord : TEXCOORD; }; [[vk::location(0)]] float4 main(PS_INPUT input) : SV_Target { return float4(tex.Sample(tex_sampler, input.texcoord)); })\"; here we use C++ raw string syntax R\"()\" to declare multiline string without appending \\ for every string line. Note the register number specified in shader must match the binding slot specified in descriptor set layout we just created. Since we use the same slot numbering system for all descriptor types, the register number for b , t , u and s should not overlap. Then we can compile shaders using ShaderCompiler::ICompiler object: auto compiler = ShaderCompiler::new_compiler(); compiler->set_source({ vs_shader_code, strlen(vs_shader_code) }); compiler->set_source_name(\"DemoAppVS\"); compiler->set_entry_point(\"main\"); compiler->set_target_format(RHI::get_current_platform_shader_target_format()); compiler->set_shader_type(ShaderCompiler::ShaderType::vertex); compiler->set_shader_model(6, 0); compiler->set_optimization_level(ShaderCompiler::OptimizationLevel::full); luexp(compiler->compile()); auto vs_data = compiler->get_output(); Blob vs(vs_data.data(), vs_data.size()); compiler->reset(); compiler->set_source({ ps_shader_code, strlen(ps_shader_code) }); compiler->set_source_name(\"DemoAppPS\"); compiler->set_entry_point(\"main\"); compiler->set_target_format(RHI::get_current_platform_shader_target_format()); compiler->set_shader_type(ShaderCompiler::ShaderType::pixel); compiler->set_shader_model(6, 0); compiler->set_optimization_level(ShaderCompiler::OptimizationLevel::full); luexp(compiler->compile()); auto ps_data = compiler->get_output(); Blob ps(ps_data.data(), ps_data.size()); The shader compilation process is fairly simple, we just set source code, compilation settings, then triggers the compilation. The compilation result will be given by get_output , we use one Blob object , a container for binary data, to hold the compilation result. The compiled shader data will be used when creating pipeline state object later.","title":"Compiling shaders"},{"location":"manual/introduction/getting_started/#creating-pipeline-layout-and-pipeline-state","text":"The graphics and compute pipeline state is described by two objects: pipeline layout object and pipeline state object. Pipeline layout object stores the shader binding layout information for all shader stages, while pipeline state object stores pipeline settings for all graphics stages. Pipeline layout is described by the PipelineLayoutDesc structure, which is configured by specifying layouts of descriptor sets that will be bound to this pipeline and flags that specifies shaders that are allowed to access shader inputs. struct PipelineLayoutDesc { Span<IDescriptorSetLayout*> descriptor_set_layouts; PipelineLayoutFlag flags; }; We need to add one new property to DemoApp to hold the pipeline layout object: Ref<RHI::IPipelineLayout> playout; Then we can create pipeline layout object using the following code: luset(playout, dev->new_pipeline_layout(PipelineLayoutDesc({dlayout}, PipelineLayoutFlag::allow_input_assembler_input_layout))); The pipeline object is described by the GraphicsPipelineStateDesc structure or the ComputePipelineStateDesc structure. Since we are creating one graphics pipeline, we need to fill the GraphicsPipelineStateDesc structure, which is a complex structure that contains all pipeline settings for one graphics pipeline: struct GraphicsPipelineStateDesc { InputLayoutDesc input_layout; IPipelineLayout* pipeline_layout = nullptr; Span<const byte_t> vs; Span<const byte_t> ps; RasterizerDesc rasterizer_state; DepthStencilDesc depth_stencil_state; BlendDesc blend_state; IndexBufferStripCutValue ib_strip_cut_value = IndexBufferStripCutValue::disabled; PrimitiveTopology primitive_topology = PrimitiveTopology::triangle_list; u8 num_color_attachments = 0; Format color_formats[8] = { Format::unknown }; Format depth_stencil_format = Format::unknown; u32 sample_count = 1; }; Most graphic settings are similar to those in D3D11, D3D12, OpenGL or Vulkan, we will not explain these settings, but only gives the code that correctly sets every setting of the pipeline. You can see docs for RHI module for detailed explanations of these settings. We need to add one new property to DemoApp to hold the pipeline state object: Ref<RHI::IPipelineState> pso; Then we can create pipeline state object using the following code: GraphicsPipelineStateDesc ps_desc; ps_desc.primitive_topology = PrimitiveTopology::triangle_list; ps_desc.rasterizer_state = RasterizerDesc(); ps_desc.depth_stencil_state = DepthStencilDesc(true, true, CompareFunction::less_equal); ps_desc.ib_strip_cut_value = IndexBufferStripCutValue::disabled; InputAttributeDesc input_attributes[] = { InputAttributeDesc(\"POSITION\", 0, 0, 0, 0, Format::rgb32_float), InputAttributeDesc(\"TEXCOORD\", 0, 1, 0, 12, Format::rg32_float) }; InputBindingDesc input_bindings[] = { InputBindingDesc(0, 20, InputRate::per_vertex) }; ps_desc.input_layout.attributes = {input_attributes, 2}; ps_desc.input_layout.bindings = {input_bindings, 1}; ps_desc.vs = vs.cspan(); ps_desc.ps = ps.cspan(); ps_desc.pipeline_layout = playout; ps_desc.num_color_attachments = 1; ps_desc.color_formats[0] = Format::rgba8_unorm; ps_desc.depth_stencil_format = Format::d32_float; luset(pso, dev->new_graphics_pipeline_state(ps_desc));","title":"Creating pipeline layout and pipeline state"},{"location":"manual/introduction/getting_started/#creating-depth-textures","text":"The next step is to create one depth texture that is used as the depth stencil attachment when drawing our box. Texture objects in Luna SDK are represented by ITexture interface, and are described by TextureDesc structure, which is defined as follows: struct TextureDesc { TextureType type; Format format; u32 width; u32 height; u32 depth; u32 array_size; u32 mip_levels; u32 sample_count; TextureUsageFlag usages; ResourceFlag flags; } type specifies the type of the texture, like tex1d , tex2d , etc. format specifies the pixel format of the texture. usages specifies all possible usages of the texture when being bound to a pipeline. width , height and depth specifies the size of the texture. array_size specifies the number of texture elements if this texture object represents a texture array, otherwise 1 shall be specified. mip_levels specifies the number of mips that should be allocated for the resource, if this is 0 , the system allocates full mipmap chain for the resource. sample_count specifies the sampling count for MSAA textures. flags specifies additional features for the texture, like whether this texture can share memory with other resources. To simplify the texture description, we can use static methods provided by TextureDesc to quickly construct TextureDesc structure: TextureDesc TextureDesc::tex1d(Format format, TextureUsageFlag usages, u64 width, u32 array_size = 1, u32 mip_levels = 0, ResourceFlag flags = ResourceFlag::none); TextureDesc TextureDesc::tex2d(Format format, TextureUsageFlag usages, u64 width, u32 height, u32 array_size = 1, u32 mip_levels = 0, u32 sample_count = 1, ResourceFlag flags = ResourceFlag::none); TextureDesc TextureDesc::tex3d(Format format, TextureUsageFlag usages, u64 width, u32 height, u32 depth, u32 mip_levels = 0, ResourceFlag flags = ResourceFlag::none); Back to our DemoApp , we need to add one new property to DemoApp to hold the depth texture: Ref<RHI::ITexture> depth_tex; Then we can create textures using the following code: auto window_size = window->get_framebuffer_size(); luset(depth_tex, dev->new_texture(MemoryType::local, TextureDesc::tex2d(Format::d32_float, TextureUsageFlag::depth_stencil_attachment, window_size.x, window_size.y, 1, 1))); The first parameter of new_texture is the memory type of texture memory. The memory type is defined by MemoryType enumeration, possible options include: local - The memory can only be accessed by GPU, CPU access is disabled. This memory type is suitable for resources that will be frequently accessed by GPU. upload - The memory can be written by CPU and read by GPU. This memory type is suitable for resources that should be updated by CPU frequently. Textures cannot be created in this heap. readback - The memory can be written by GPU and read by CPU. This memory type is suitable for transferring data from GPU to CPU. Textures cannot be created in this heap. Note that when retrieving window size for rendering, we need to call IWindow::get_framebuffer_size instead of IWindow::get_size , on some platforms the window size is not necessary measured in pixels, causing these two methods return different values. Since we are using the window size as the depth texture size, the depth texture should also be recreated when the window size is changed. This can be done by adding the following code to the DemoApp::resize method: luset(depth_tex, dev->new_texture(MemoryType::local, TextureDesc::tex2d(Format::d32_float, TextureUsageFlag::depth_stencil_attachment, width, height, 1, 1)));","title":"Creating depth textures"},{"location":"manual/introduction/getting_started/#creating-buffers-and-uploading-buffer-data","text":"The next step is to create buffers used in our DemoApp , including: The vertex buffer and index buffer for our box mesh. The uniform buffer for camera properties. Firstly we need to define the vertex structure of our box. Adding the following code after the declaration of DemoApp structure: struct Vertex { Float3U position; Float2U texcoord; }; Float2U and Float3U are vector types used in Luna SDK, which represent 2D and 3D vectors. In Luna SDK, we have 16-bytes aligned vector types Float2 , Float3 , Float4 , and unaligned vector types Float2U , Float3U and Float4U . The aligned vector types are used for calculations, SIMD functions like min , max , lerp , clamp only accepts aligned types, while unaligned vector types are used for storing and transferring data, just like this case. The size of aligned vector types are all 16 bytes, while the size of unaligned types are 8, 12 and 16 for Float2U , Float3U and Float4U . We need to add three new properties to DemoApp to hold the these three buffers: Ref<RHI::IBuffer> vb; Ref<RHI::IBuffer> ib; Ref<RHI::IBuffer> ub; As you can see, buffer objects are represented by IBuffer interface. Both IBuffer and ITexture interface inherits from IResource interface, which provides one method to fetch the underlying memory of the resource. Fetching the underlying memory enables the user to create aliasing resources that share the same memory, which is an advanced feature that will not be covered in this article. One buffer resource is described by BufferDesc structure, which is defined as follows: struct BufferDesc { u64 size; BufferUsageFlag usages; ResourceFlag flags; } BufferDesc is rather simple compared to TextureDesc . size specifies the size of the buffer, usages specifies all possible usages of the buffer when being bound to the pipeline, and flags specifies additional features of the buffer, like whether this buffer can share memory with other resources. Then, we need to create the vertex buffer and index buffer for our box using the following code: Vertex vertices[] = { {{+0.5, -0.5, -0.5}, {0.0, 1.0}}, {{+0.5, +0.5, -0.5}, {0.0, 0.0}}, {{+0.5, +0.5, +0.5}, {1.0, 0.0}}, {{+0.5, -0.5, +0.5}, {1.0, 1.0}}, {{+0.5, -0.5, +0.5}, {0.0, 1.0}}, {{+0.5, +0.5, +0.5}, {0.0, 0.0}}, {{-0.5, +0.5, +0.5}, {1.0, 0.0}}, {{-0.5, -0.5, +0.5}, {1.0, 1.0}}, {{-0.5, -0.5, +0.5}, {0.0, 1.0}}, {{-0.5, +0.5, +0.5}, {0.0, 0.0}}, {{-0.5, +0.5, -0.5}, {1.0, 0.0}}, {{-0.5, -0.5, -0.5}, {1.0, 1.0}}, {{-0.5, -0.5, -0.5}, {0.0, 1.0}}, {{-0.5, +0.5, -0.5}, {0.0, 0.0}}, {{+0.5, +0.5, -0.5}, {1.0, 0.0}}, {{+0.5, -0.5, -0.5}, {1.0, 1.0}}, {{-0.5, +0.5, -0.5}, {0.0, 1.0}}, {{-0.5, +0.5, +0.5}, {0.0, 0.0}}, {{+0.5, +0.5, +0.5}, {1.0, 0.0}}, {{+0.5, +0.5, -0.5}, {1.0, 1.0}}, {{+0.5, -0.5, -0.5}, {0.0, 1.0}}, {{+0.5, -0.5, +0.5}, {0.0, 0.0}}, {{-0.5, -0.5, +0.5}, {1.0, 0.0}}, {{-0.5, -0.5, -0.5}, {1.0, 1.0}} }; u32 indices[] = { 0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23 }; luset(vb, dev->new_buffer(MemoryType::local, BufferDesc(BufferUsageFlag::vertex_buffer | BufferUsageFlag::copy_dest, sizeof(vertices)))); luset(ib, dev->new_buffer(MemoryType::local, BufferDesc(BufferUsageFlag::index_buffer | BufferUsageFlag::copy_dest, sizeof(indices)))); We firstly define vertex and index data for our box, then we create two buffer resources to hold the vertex and index data. One buffer is created by calling IDevice::new_buffer , which is similar to IDevice::new_texture , but takes BufferDesc as the resource descriptor object. Since we only need to upload vertex and index buffer data once, these two buffers are created in local memory to achieve maximum GPU bandwidth. We can use similar code to create the constant buffer for uploading camera properties, but there are two differences. First, the graphic device has alignment requirements for constant buffers, which can be fetched from IDevice::check_feature(DeviceFeature::uniform_buffer_data_alignment) , so we use align_upper helper function to adjust the size of our uniform buffer resource to meet the alignment requirement. Second, since we need to update uniform buffer data once every frame, we should choose upload memory type instead of local to give host program direct access to that resource. In our DemoApp , the data of the uniform buffer is the 4x4 world-to-project matrix of the camera. We need to add a new include file to use matrix types: #include <Luna/Runtime/Math/Matrix.hpp> then we can use the following code to create constant buffer: auto ub_align = dev->check_feature(DeviceFeature::uniform_buffer_data_alignment).uniform_buffer_data_alignment; luset(ub, dev->new_buffer(MemoryType::upload, BufferDesc(BufferUsageFlag::uniform_buffer, align_upper(sizeof(Float4x4), ub_align)))); as you can see, Float4x4 is the matrix type used in Luna SDK. We also have Float3x3 for 2D affine transformations.","title":"Creating buffers and uploading buffer data"},{"location":"manual/introduction/getting_started/#uploading-vertex-and-index-data","text":"Now that we have created one vertex buffer and one index buffer, we need to upload vertex and index data to these buffers, so that they can be used by GPU correctly. As we have mentioned before, resources with local memory type can not be accessed by the host directly. To copy data between local memory and host memory, we can either use staging buffers to transfer the data manually, or we can use RHI::copy_resource_data to perform data copy automatically. We will show how to perform data copy in both approaches.","title":"Uploading vertex and index data"},{"location":"manual/introduction/getting_started/#uploading-data-manually","text":"In order to upload data to resources with local memory type, we need to create intermediate buffers with upload memory type, copy data to such buffers form the host, and use GPU to copy data from such buffers to resources with local memory type. Such intermediate buffers are usually called staging buffers , and are used frequently to copy data from host memory to device local memory. The following code shows how to upload data for our vertex and index buffer: lulet(vb_staging, dev->new_buffer(MemoryType::upload, BufferDesc(BufferUsageFlag::copy_source, sizeof(vertices)))); lulet(ib_staging, dev->new_buffer(MemoryType::upload, BufferDesc(BufferUsageFlag::copy_source, sizeof(indices)))); void* vb_mapped = nullptr; luexp(vb_staging->map(0, 0, &vb_mapped)); memcpy(vb_mapped, vertices, sizeof(vertices)); vb_staging->unmap(0, sizeof(vertices)); void* ib_mapped = nullptr; luexp(ib_staging->map(0, 0, &ib_mapped)); memcpy(ib_mapped, indices, sizeof(indices)); ib_staging->unmap(0, sizeof(indices)); cmdbuf->begin_copy_pass(); cmdbuf->resource_barrier({ BufferBarrier(vb, BufferStateFlag::automatic, BufferStateFlag::copy_dest), BufferBarrier(vb_staging, BufferStateFlag::automatic, BufferStateFlag::copy_source), BufferBarrier(ib, BufferStateFlag::automatic, BufferStateFlag::copy_dest), BufferBarrier(ib_staging, BufferStateFlag::automatic, BufferStateFlag::copy_source), }, {}); cmdbuf->copy_buffer(vb, 0, vb_staging, 0, sizeof(vertices)); cmdbuf->copy_buffer(ib, 0, ib_staging, 0, sizeof(indices)); cmdbuf->end_copy_pass(); cmdbuf->submit({}, {}, true); cmdbuf->wait(); cmdbuf->reset(); Firstly, we create two staging buffers vb_staging and ib_staging . These two buffers have the same size as vb and ib and use upload memory type, so they can be written by the host directly. Then, we use IBuffer::map to take pointers to the buffer memory, use memcpy to copy data to the memory, then use IBuffer::unmap to release the host access to the memory. map takes two integer parameters indicating the host reading range of the mapped memory, this should always be 0 if the memory type of the buffer is not readback , just like this case. unmap takes another two integer parameters indicating the host writing range of the mapped memory. in our case, we have written memory in [0, sizeof(data)) range, so we should specify the range correctly. There is a special range [0, USIZE_MAX) that indicates the whole buffer memory is read or written, so we don't need to specify the size explicitly. After we copy data to staging buffers, we need to tell GPU to copy data from staging buffers to GPU local resources. As we have mentioned before, to send commands to GPU, we need to record commands into command buffers, submit them to command queues, then waits for command buffers to be finished by GPU. The first command we need to record is ICommandBuffer::begin_copy_pass , which tells GPU to start a copy pass. This is required because all copy commands like copy_buffer , copy_texture etc. can only be recorded in a copy pass scope. Similarly, we have render passes for render commands, and compute passes for compute commands. After beginning the copy pass, we need to emit resource barriers to transfer resources used by GPU to compatible states. Resource barrier commands are recorded by ICommandBuffer::resource_barrier , and will be described later. After resources have been transferred into suitable states, we call ICommandBuffer::copy_buffer to record one buffer-to-buffer copy command. Finally, we call ICommandBuffer::end_copy_pass to end the copy pass we opened before. When we finish recording commands into the command buffer, we call ICommandBuffer::submit to submit the command buffer to the command queue, call ICommandBuffer::wait to wait for the command buffer to be finished, then call ICommandBuffer::reset to clear commands in the command buffer, and reset the command buffer state so that it can be used for a recording new commands.","title":"Uploading data manually"},{"location":"manual/introduction/getting_started/#uploading-data-using-rhicopy_resource_data","text":"In order to use RHI::copy_resource_data , we need to include one new header file: #include <Luna/RHI/Utility.hpp> RHI/Utility.hpp is an auxiliary library that defines high-level functionalities implemented using APIs provided by RHI , including RHI::copy_resource_data we use here. The following code shows how to upload data using RHI::copy_resource_data : luexp(copy_resource_data(cmdbuf, { CopyResourceData::write_buffer(vb, 0, vertices, sizeof(vertices)), CopyResourceData::write_buffer(ib, 0, indices, sizeof(indices)) })); You can see how RHI::copy_resource_data greatly simplifies the code we need to write in order to upload resource data.","title":"Uploading data using RHI::copy_resource_data"},{"location":"manual/introduction/getting_started/#loading-image-from-file","text":"The next step is to load our Luna LOGO image that will be drawn on the box surface: Save the image file in the same directory as main.cpp , and naming it luna.png . You should have one file structure similar to this: DemoApp |- xmake.lua |- main.cpp |- luna.png Then fills xmake.lua with the following code: target(\"DemoApp\") set_luna_sdk_program() add_files(\"**.cpp\") add_deps(\"Runtime\", \"Window\", \"RHI\", \"ShaderCompiler\", \"Image\") before_build(function(target) os.cp(\"$(scriptdir)/luna.png\", target:targetdir() .. \"/luna.png\") end) after_install(function (target) os.cp(target:targetdir() .. \"/luna.png\", target:installdir() .. \"/bin/luna.png\") end) target_end() This script triggers registers custom functions before building the program and after installing the program, the custom function copies the image file to same the directory of our program binary file, so that our program can correctly find the image file. Then, go back to main.cpp , and add one new property to DemoApp to represent the loaded image: Ref<RHI::ITexture> file_tex; To load the image in our program, we need to use one new module called Image , which parses image file data and gives row-majored image data in our desired format. We also need to use the file API provided by Runtime module, so we includes two new headers: #include <Luna/Runtime/File.hpp> #include <Luna/Image/Image.hpp> The first thing to do is to load image file data from our luna.png file. In order to load file data, we need to use the open_file function provided by the Runtime module. This function returns one file handle represented by IFile if the file is correctly opened. Then, we loads the file data into one Blob object by calling load_file_data , this function creates one properly-sized blob object, and calls IFile::read to read all data of the file to the blob, then returns the blob: lulet(image_file, open_file(\"Luna.png\", FileOpenFlag::read, FileCreationMode::open_existing)); lulet(image_file_data, load_file_data(image_file)); Now that the file data has been stored in image_file_data , we need to call Image::read_image_file function to parse the file data and gives the real image data: Image::ImageDesc image_desc; lulet(image_data, Image::read_image_file(image_file_data.data(), image_file_data.size(), Image::ImageFormat::rgba8_unorm, image_desc)); Image::read_image_file function outputs one Image::ImageDesc structure that describes the returned image data, including the width, height and pixel format of the image. The image data is arranged in a row-major manner and without and alignment padding. We can now creates the texture resource based on the image size: luset(file_tex, dev->new_texture(MemoryType::local, TextureDesc::tex2d(Format::rgba8_unorm, TextureUsageFlag::copy_dest | TextureUsageFlag::read_texture, image_desc.width, image_desc.height, 1, 1))); The following code shows how to upload data for our texture: u64 tex_size, tex_row_pitch, tex_slice_pitch; dev->get_texture_data_placement_info(image_desc.width, image_desc.height, 1, Format::rgba8_unorm, &tex_size, nullptr, &tex_row_pitch, &tex_slice_pitch); lulet(file_tex_staging, dev->new_buffer(MemoryType::upload, BufferDesc(BufferUsageFlag::copy_source, tex_size))); void* file_tex_mapped = nullptr; luexp(file_tex_staging->map(0, 0, &file_tex_mapped)); memcpy_bitmap(file_tex_mapped, image_data.data(), image_desc.width * 4, image_desc.height, tex_row_pitch, image_desc.width * 4); file_tex_staging->unmap(0, USIZE_MAX); cmdbuf->begin_copy_pass(); cmdbuf->resource_barrier({ BufferBarrier(file_tex_staging, BufferStateFlag::automatic, BufferStateFlag::copy_source) }, { TextureBarrier(file_tex, TEXTURE_BARRIER_ALL_SUBRESOURCES, TextureStateFlag::automatic, TextureStateFlag::copy_dest) }); cmdbuf->copy_buffer_to_texture(file_tex, SubresourceIndex(0, 0), 0, 0, 0, file_tex_staging, 0, tex_row_pitch, tex_slice_pitch, image_desc.width, image_desc.height, 1); cmdbuf->end_copy_pass(); cmdbuf->submit({}, {}, true); cmdbuf->wait(); cmdbuf->reset(); Uploading texture data is similar to uploading buffer data, we need to create one staging buffer to hold the texture data, then use ICommandBuffer::copy_buffer_to_texture to copy data from buffer to texture. Note that most systems have special alignment requirements for texture data in buffers when copying data between buffers and textures, the user should call IDevice::get_texture_data_placement_info to fetch the texture data placement information for one specific texture, and use that information to manipulate texture data in the buffer. Instead of memcpy , the user should call memcpy_bitmap to copy row-major bitmap data, which takes src_row_pitch and dst_row_pitch to correctly offsets every texture data row. We can also use RHI::copy_resource_data to upload data for textures like so: luexp(copy_resource_data(cmdbuf, { CopyResourceData::write_texture(file_tex, SubresourceIndex(0, 0), 0, 0, 0, image_data.data(), image_desc.width * 4, image_desc.width * image_desc.height * 4, image_desc.width, image_desc.height, 1) }));","title":"Loading image from file"},{"location":"manual/introduction/getting_started/#set-up-descriptor-set","text":"Once the uniform buffer and file texture is set up, we can bind these two resources to the descriptor set by calling IDescriptorSet::update_descriptors . We also need to set the sampler in the descriptor set to be used by the pixel shader. luexp(desc_set->update_descriptors({ WriteDescriptorSet::uniform_buffer_view(0, BufferViewDesc::uniform_buffer(ub)), WriteDescriptorSet::read_texture_view(1, TextureViewDesc::tex2d(file_tex)), WriteDescriptorSet::sampler(2, SamplerDesc(Filter::linear, Filter::linear, Filter::linear, TextureAddressMode::clamp, TextureAddressMode::clamp, TextureAddressMode::clamp)) })); This concludes the DemoApp::init function.","title":"Set up descriptor set"},{"location":"manual/introduction/getting_started/#camera-control","text":"Now that we have created all resources required to draw the box, we need to fill the actual drawing code in DemoApp::update . To make our program more interesting, we can apply one simple animation that rotates the camera around the box. We firstly adds one new property to DemoApp that stores the rotation angle of the camera: f32 camera_rotation = 0.0f; We can increase the rotation angle of the camera by one at every frame by adding the following line to the end of DemoApp:update : camera_rotation += 1.0f; Since we are going to use many functions that may throw errors, it is better to declare one lutry - lucatch scope that wraps all succeeding codes in DemoApp:update . Also, we don't want to render the image if the window is closed or minimized, so we add two early-out conditions after Window::poll_events() . Now DemoApp::update should look like this: RV DemoApp::update() { Window::poll_events(); if(window->is_closed()) return ok; if(window->is_minimized()) return ok; lutry { camera_rotation += 1.0f; // More codes goes here... } lucatchret; return ok; } After we updates the camera rotation, we need to calculate the view-projection matrix for the camera. Fortunately, the math library of the Runtime module already includes implementations for many commonly used vector and matrix calculations, and here we are going to use two of them: AffineMatrix::make_look_at and ProjectionMatrix::make_perspective_fov . To use these two functions, we firstly need to add one new header file: #include <Luna/Runtime/Math/Transform.hpp> Then the matrix can be computed using the following code: Float3 camera_pos(cosf(camera_rotation / 180.0f * PI) * 3.0f, 1.0f, sinf(camera_rotation / 180.0f * PI) * 3.0f); Float4x4 camera_mat = AffineMatrix::make_look_at(camera_pos, Float3(0, 0, 0), Float3(0, 1, 0)); auto window_sz = window->get_framebuffer_size(); camera_mat = mul(camera_mat, ProjectionMatrix::make_perspective_fov(PI / 3.0f, (f32)window_sz.x / (f32)window_sz.y, 0.001f, 100.0f)); AffineMatrix::make_look_at generates one camera view matrix from the position of the camera and the position of the point to look at. ProjectionMatrix::make_perspective_fov is another helper function that generates one projection matrix from the specified field-of-view and aspect ratio values. Those two matrices are multiplied by mul function to get the final view-projection matrix. Note that when performing matrix multiplications, use mul instead of operator * , the later one is used to multiply each element in the matrix separately. After we get the matrix, we need to copy the matrix data to the uniform buffer resource like so: void* camera_mapped; luexp(ub->map(0, 0, &camera_mapped)); memcpy(camera_mapped, &camera_mat, sizeof(Float4x4)); ub->unmap(0, sizeof(Float4x4));","title":"Camera control"},{"location":"manual/introduction/getting_started/#fetching-the-back-buffer","text":"In order to render contents to one window, we need to fetch back buffers managed by the window swap chain. The number of back buffers that are contained by a swap chain is determined by SwapChainDesc::buffer_count , which can be set when the swap chain is created or reset. At every frame, only one back buffer can be used for rendering, which can be fetched by calling ISwapChain::get_current_back_buffer : lulet(back_buffer, swap_chain->get_current_back_buffer()); ISwapChain::get_current_back_buffer can be called multiple times during the same frame, and will return the same back buffer. The current back buffer will be switched when ISwapChain::present is called, the user should not use the back buffer in the previous frame after ISwapChain::present is called.","title":"Fetching the back buffer"},{"location":"manual/introduction/getting_started/#resource-barriers","text":"In Luna SDK, every graphic resource has one state that describes the current memory layout and pipeline access polity of the resource. Before we can issue draw calls, we need to transfer every resource we use to their correct states. Luna SDK requires the user to transfer the state explicitly by calling ICommandBuffer::resource_barrier with transition-typed resource barriers. In our example, we need to perform the following transitions: cmdbuf->resource_barrier({ BufferBarrier(ub, BufferStateFlag::automatic, BufferStateFlag::uniform_buffer_vs), BufferBarrier(vb, BufferStateFlag::automatic, BufferStateFlag::vertex_buffer), BufferBarrier(ib, BufferStateFlag::automatic, BufferStateFlag::index_buffer) }, { TextureBarrier(file_tex, TEXTURE_BARRIER_ALL_SUBRESOURCES, TextureStateFlag::automatic, TextureStateFlag::shader_read_ps), TextureBarrier(back_buffer, SubresourceIndex(0, 0), TextureStateFlag::automatic, TextureStateFlag::color_attachment_write), TextureBarrier(depth_tex, SubresourceIndex(0, 0), TextureStateFlag::automatic, TextureStateFlag::depth_stencil_attachment_write) }); One resource can have multiple states, so long as such states are compatible to each other. For example, one texture can have TextureStateFlag::shader_read_vs and TextureStateFlag::shader_read_ps at the same time if it will be accessed by both vertex and pixel shader, or can have TextureStateFlag::shader_read_cs and TextureStateFlag::shader_write_cs at the same time if it will be read and write by compute shader. Luna SDK internally tracks the current states for all resources, so we can set before states of resources to automatic in most cases, which tells the system to load the previous states automatically. Luna SDK also omits unnecessary barriers automatically.","title":"Resource barriers"},{"location":"manual/introduction/getting_started/#drawing-the-box","text":"Finally, we can issue the draw call that draws our box: RenderPassDesc desc; desc.color_attachments[0] = ColorAttachment(back_buffer, LoadOp::clear, StoreOp::store, Float4U(0.0f)); desc.depth_stencil_attachment = DepthStencilAttachment(depth_tex, false, LoadOp::clear, StoreOp::store, 1.0f); cmdbuf->begin_render_pass(desc); cmdbuf->set_graphics_pipeline_layout(playout); cmdbuf->set_graphics_pipeline_state(pso); cmdbuf->set_graphics_descriptor_set(0, desc_set); auto sz = vb->get_desc().size; cmdbuf->set_vertex_buffers(0, {VertexBufferView(vb, 0, sz, sizeof(Vertex))}); sz = ib->get_desc().size; cmdbuf->set_index_buffer(IndexBufferView(ib, 0, sz, Format::r32_uint)); cmdbuf->set_scissor_rect(RectI(0, 0, (i32)window_sz.x, (i32)window_sz.y)); cmdbuf->set_viewport(Viewport(0.0f, 0.0f, (f32)window_sz.x, (f32)window_sz.y, 0.0f, 1.0f)); cmdbuf->draw_indexed(36, 0, 0); cmdbuf->end_render_pass(); The first thing to do is to begin a render pass that attaches one set of color attachments and/or the depth stencil attachment to the graphic pipeline, these textures are bound to the pipeline during the current render pass and cannot be changed, while all other settings (like shader input layout object, pipeline state object, descriptor sets, etc) can be changed within the same render pass. The render pass begins with ICommandBuffer::begin_render_pass . In the render pass, we set up all pipeline settings, and bind all resources required for the current draw call, then calls ICommandBuffer::draw_indexed to issue the draw call based on the current settings. Then we should close the render pass by calling ICommandBuffer::end_render_pass . We won't go detail about the pipeline setup for this draw call, they should be familiar to you if you have been using other graphics API before. For further explanations, please consult the documentations for the RHI module. Before we can submit our command buffer, we need to insert another resource barrier to transfer our back buffer into TextureStateFlag::present state. This is required for one back buffer to be successfully presented. cmdbuf->resource_barrier({}, { TextureBarrier(back_buffer, SubresourceIndex(0, 0), TextureStateFlag::automatic, TextureStateFlag::present) }); Finally, we submit our command buffer, waiting for its completion, and resets the command buffer for next frame: luexp(cmdbuf->submit({}, {}, true)); cmdbuf->wait(); luexp(cmdbuf->reset());","title":"Drawing the box"},{"location":"manual/introduction/getting_started/#presenting-the-render-result","text":"The last thing we need to do is to present our rendering result to the window. This is done by calling ISwapChain::present : luexp(swap_chain->present()); This concludes the DemoApp::update function. Build and run DemoApp , if everything goes correctly, you will see a textured rotating box in the screen: Congratulations! If you have followed every step of this article correctly, you should have a first impression of graphic programming using Luna SDK. If anything goes wrong, you can download the source code archive from the beginning of this article and compare it with your code.","title":"Presenting the render result"},{"location":"manual/rhi/","text":"RHI Overview RHI (rendering hardware interface) is a abstraction layer of the underlying graphics devices and graphics API. By using RHI, the user can write render codes in a platform-agnostic way. Interfaces of RHI are designed targeting modern graphics APIs, so the application can unleash the full perfomance of modern graphics hardwares by using asynchronous computing, manual synchronization, overlapped memory allocation and other features.","title":"RHI"},{"location":"manual/rhi/#rhi-overview","text":"RHI (rendering hardware interface) is a abstraction layer of the underlying graphics devices and graphics API. By using RHI, the user can write render codes in a platform-agnostic way. Interfaces of RHI are designed targeting modern graphics APIs, so the application can unleash the full perfomance of modern graphics hardwares by using asynchronous computing, manual synchronization, overlapped memory allocation and other features.","title":"RHI Overview"},{"location":"manual/rhi/command_queues_and_command_buffers/","text":"Command Queues and Command Buffers RHI employs a concurrent command recording and submission model, such model reduces CPU and GPU overhead by allowing multiple CPU threads and GPU engines work concurrently as much as possible, but such model also requires the user to pay more attention on how to record, submit and synchronize GPU commands. In paticular, by using the concurrent command recording and submission model, the user should pay attention to the following things: How to distribute command recording work to multiple CPU threads. How to submit commands recorded by multiple threads to GPU. How to determine whether commands submitted to GPU have been finished. How to synchronize commands submitted to different GPU queues, so they are executed in correct order. Command Queues Commands queues are FIFO (first-in-first-out) queues used by the application to submit commands to GPU. The appliaction can submit commands to one specific queue, which pushes such commands to the back of the queue; GPU engine will pop commands from the front of the queue, and executes such commands in the order they are submitted to the queue. One device may have one or multiple command queues. Command queues are initialized when creating the device, and can be used for submitting commands right after the device is created. Command queues have three types: graphics , compute and copy : Graphics command queues can accept graphics, compute and copy commands. Compute command queues can accept compute and copy commands. Copy command queues accepts only copy commands. Every device has at least one graphics command queue that accepts all kinds of commands, some GPUs may have additional compute and copy engine that can run compute and copy commands concurrently with graphics commands. On such devices, the user can submit compute and copy commands to dedicated compute and copy queues to reduce graphics command queue workload and improve perfomance. The user can call IDevice::get_num_command_queues to fetch the number of command queues present on the device, then call IDevice::get_command_queue_desc(command_queue_index) to fetch a description of each command queue. On other APIs of RHI, the user can use the same index passed to IDevice::get_command_queue_desc(command_queue_index) to identify the specific command queue. Command Buffers Command buffers are device-allocated memory that are used to store commands recorded by the application. The application does not push commands to the queue directly, instead, it records commands into command buffers, then submits command buffers to the command queue. By using command buffers, the application can use multiple threads to record multiple command buffers synchronously, then submits them in the main thread to improve performance. To create a command buffer, call IDevice::new_command_buffer(command_queue_index) . One command buffer is bound to one specific command queue, which shall be passed when the command buffer is created. This binding cannot be changed after the command buffer is created. One command queue can create multiple command buffers, each command buffer can only be accessed by one thread at one time, but different command buffers can be accessed by different threads concurrently. One command buffer have two states: recording state and execution state . When one command buffer is created, it is in recording state. When one command buffer is in recording state, it is accessible by the application, and the application can record commands to the command buffer. After the application finishes recording commands, it can call ICommandBuffer::submit(wait_fences, signal_fences, allow_host_waiting) to submit the command buffer to the command queue, and transfers the command buffer to execution state. When one command buffer is in execution state, it is accessible by GPU, but inaccessible by the application. The application can call ICommandBuffer::reset() to reset the command buffer back to recording state, this call will clear all commands and states recorded in the command buffer, so the application must ensure that GPU is not accessing the command buffer when ICommandBuffer::reset() is called. After the application submits the command buffer, GPU will pop the command buffer from the command queue and execute commands in the command buffer. As we said before, the user must wait for GPU to finish accessing commands in the command buffer before she can reset the command buffer. To wait for command buffers being completed by GPU, the user can set allow_host_waiting to true when submitting the command buffer, then call ICommandBuffer::wait() to block the current thread until the command buffer exectuion is completed, or call ICommandBuffer::try_wait() to check whether the command buffer exectuion is completed in a non-blocking way. Command buffers pushed to the same queue are guaranteed to be executed in their submission order, so if the user needs to submit multiple command buffers to the same queue, she only needs to wait for the last command buffer to be finished, and can then safely reset all command buffers submitted. The following diagram shows the state transition of one command buffer. Multi-queues Synchronization Command buffers pushed to the same queue are guaranteed to be executed in their submission order. However, command buffers pushed to different queues are executed out of order, since they can run concurrently on multiple GPU engines. If such command buffers have execution dependencies, the user must synchronize these command buffers' execution explicitly. The command buffer execution synchronization is achieved using fence objects, represented by IFence . Fence objects are created using IDevice::new_fence() . One fence have two states: signaled and unsignaled. One fence is unsignaled when it is created. When the user submits one command buffer by calling ICommandBuffer::submit(wait_fences, signal_fences, allow_host_waiting) , she can specify one set of wait fences and another set of signal fences. Before one command buffer gets executed, the device will wait for all fences in wait_fences to be in signaled state, then the device will reset all fences in wait_fences to unsignaled state and starts executing the command buffer. After one command buffer is finished, the device will set all fences in signal_fences to signaled state, so that other command buffers waiting for the fences can start executing. One signal operation can happen before or after one wait operation, but waits and signals to one fence object must occur in one-by-one pair, that is to say, every two wait operations must have one signal operation in between, and every two signal operations must have one wait operation in between.","title":"Command Queues and Command Buffers"},{"location":"manual/rhi/command_queues_and_command_buffers/#command-queues-and-command-buffers","text":"RHI employs a concurrent command recording and submission model, such model reduces CPU and GPU overhead by allowing multiple CPU threads and GPU engines work concurrently as much as possible, but such model also requires the user to pay more attention on how to record, submit and synchronize GPU commands. In paticular, by using the concurrent command recording and submission model, the user should pay attention to the following things: How to distribute command recording work to multiple CPU threads. How to submit commands recorded by multiple threads to GPU. How to determine whether commands submitted to GPU have been finished. How to synchronize commands submitted to different GPU queues, so they are executed in correct order.","title":"Command Queues and Command Buffers"},{"location":"manual/rhi/command_queues_and_command_buffers/#command-queues","text":"Commands queues are FIFO (first-in-first-out) queues used by the application to submit commands to GPU. The appliaction can submit commands to one specific queue, which pushes such commands to the back of the queue; GPU engine will pop commands from the front of the queue, and executes such commands in the order they are submitted to the queue. One device may have one or multiple command queues. Command queues are initialized when creating the device, and can be used for submitting commands right after the device is created. Command queues have three types: graphics , compute and copy : Graphics command queues can accept graphics, compute and copy commands. Compute command queues can accept compute and copy commands. Copy command queues accepts only copy commands. Every device has at least one graphics command queue that accepts all kinds of commands, some GPUs may have additional compute and copy engine that can run compute and copy commands concurrently with graphics commands. On such devices, the user can submit compute and copy commands to dedicated compute and copy queues to reduce graphics command queue workload and improve perfomance. The user can call IDevice::get_num_command_queues to fetch the number of command queues present on the device, then call IDevice::get_command_queue_desc(command_queue_index) to fetch a description of each command queue. On other APIs of RHI, the user can use the same index passed to IDevice::get_command_queue_desc(command_queue_index) to identify the specific command queue.","title":"Command Queues"},{"location":"manual/rhi/command_queues_and_command_buffers/#command-buffers","text":"Command buffers are device-allocated memory that are used to store commands recorded by the application. The application does not push commands to the queue directly, instead, it records commands into command buffers, then submits command buffers to the command queue. By using command buffers, the application can use multiple threads to record multiple command buffers synchronously, then submits them in the main thread to improve performance. To create a command buffer, call IDevice::new_command_buffer(command_queue_index) . One command buffer is bound to one specific command queue, which shall be passed when the command buffer is created. This binding cannot be changed after the command buffer is created. One command queue can create multiple command buffers, each command buffer can only be accessed by one thread at one time, but different command buffers can be accessed by different threads concurrently. One command buffer have two states: recording state and execution state . When one command buffer is created, it is in recording state. When one command buffer is in recording state, it is accessible by the application, and the application can record commands to the command buffer. After the application finishes recording commands, it can call ICommandBuffer::submit(wait_fences, signal_fences, allow_host_waiting) to submit the command buffer to the command queue, and transfers the command buffer to execution state. When one command buffer is in execution state, it is accessible by GPU, but inaccessible by the application. The application can call ICommandBuffer::reset() to reset the command buffer back to recording state, this call will clear all commands and states recorded in the command buffer, so the application must ensure that GPU is not accessing the command buffer when ICommandBuffer::reset() is called. After the application submits the command buffer, GPU will pop the command buffer from the command queue and execute commands in the command buffer. As we said before, the user must wait for GPU to finish accessing commands in the command buffer before she can reset the command buffer. To wait for command buffers being completed by GPU, the user can set allow_host_waiting to true when submitting the command buffer, then call ICommandBuffer::wait() to block the current thread until the command buffer exectuion is completed, or call ICommandBuffer::try_wait() to check whether the command buffer exectuion is completed in a non-blocking way. Command buffers pushed to the same queue are guaranteed to be executed in their submission order, so if the user needs to submit multiple command buffers to the same queue, she only needs to wait for the last command buffer to be finished, and can then safely reset all command buffers submitted. The following diagram shows the state transition of one command buffer.","title":"Command Buffers"},{"location":"manual/rhi/command_queues_and_command_buffers/#multi-queues-synchronization","text":"Command buffers pushed to the same queue are guaranteed to be executed in their submission order. However, command buffers pushed to different queues are executed out of order, since they can run concurrently on multiple GPU engines. If such command buffers have execution dependencies, the user must synchronize these command buffers' execution explicitly. The command buffer execution synchronization is achieved using fence objects, represented by IFence . Fence objects are created using IDevice::new_fence() . One fence have two states: signaled and unsignaled. One fence is unsignaled when it is created. When the user submits one command buffer by calling ICommandBuffer::submit(wait_fences, signal_fences, allow_host_waiting) , she can specify one set of wait fences and another set of signal fences. Before one command buffer gets executed, the device will wait for all fences in wait_fences to be in signaled state, then the device will reset all fences in wait_fences to unsignaled state and starts executing the command buffer. After one command buffer is finished, the device will set all fences in signal_fences to signaled state, so that other command buffers waiting for the fences can start executing. One signal operation can happen before or after one wait operation, but waits and signals to one fence object must occur in one-by-one pair, that is to say, every two wait operations must have one signal operation in between, and every two signal operations must have one wait operation in between.","title":"Multi-queues Synchronization"},{"location":"manual/rhi/devices/","text":"Devices A graphics device ( IDevice ) is an virtual representation of one graphics subsystem on the platform. Some platforms have only one graphics subsystem, while others have more. For example: Desktop and laptop PCs usually have both integrated GPUs and dedicated graphics cards, so they will have two graphics subsystem listed. But this is not always the case, for example, Apple computers with Apple Silicon processors can only have one graphics subsystem. Mobile devices (iOS, Andorid) has only one graphics subsystem that represents the GPU integrated in their processor. We use the term adapter ( IAdapter ) to refer one graphics subsystem on the platform. The user can choose which adapter to use for the application, and creates one IDevice for that adapter. To determine which adapter to use for creating devices, the user can call get_adapters to get a list of adapters present on the current platform. After the user have decided which adapter to use, she can call new_device to create a new device from that adapter. Fetching the main device The main device is the system-preferred device that is created during module initialization, and can be fetched by calling get_main_device . The module stores the reference to the main device so that every time get_main_device is called, the same device reference will be returned. If the user needs only one device (which is true for most applications), she can call get_main_device to fetch the main device directly rather than creating devices manually. Calls to get_main_device are efficient and can be used wherever you want to fetch the main device. Device objects Most objects of RHI is device objects , such objects are attached to one specific device and cannot be used by other devices. Device objects inherit from IDeviceChild , which provides get_device function that can fetch the owner device of the object.","title":"Devices"},{"location":"manual/rhi/devices/#devices","text":"A graphics device ( IDevice ) is an virtual representation of one graphics subsystem on the platform. Some platforms have only one graphics subsystem, while others have more. For example: Desktop and laptop PCs usually have both integrated GPUs and dedicated graphics cards, so they will have two graphics subsystem listed. But this is not always the case, for example, Apple computers with Apple Silicon processors can only have one graphics subsystem. Mobile devices (iOS, Andorid) has only one graphics subsystem that represents the GPU integrated in their processor. We use the term adapter ( IAdapter ) to refer one graphics subsystem on the platform. The user can choose which adapter to use for the application, and creates one IDevice for that adapter. To determine which adapter to use for creating devices, the user can call get_adapters to get a list of adapters present on the current platform. After the user have decided which adapter to use, she can call new_device to create a new device from that adapter.","title":"Devices"},{"location":"manual/rhi/devices/#fetching-the-main-device","text":"The main device is the system-preferred device that is created during module initialization, and can be fetched by calling get_main_device . The module stores the reference to the main device so that every time get_main_device is called, the same device reference will be returned. If the user needs only one device (which is true for most applications), she can call get_main_device to fetch the main device directly rather than creating devices manually. Calls to get_main_device are efficient and can be used wherever you want to fetch the main device.","title":"Fetching the main device"},{"location":"manual/rhi/devices/#device-objects","text":"Most objects of RHI is device objects , such objects are attached to one specific device and cannot be used by other devices. Device objects inherit from IDeviceChild , which provides get_device function that can fetch the owner device of the object.","title":"Device objects"},{"location":"manual/rhi/pipeline_configuration/","text":"Pipeline Configuration Pipelines are sequences of stages that are performed on graphics hardware to perform a certain task, like rendering or computing. In RHI, we have two kinds of pipeline: graphics pipeline and compute pipeline . The following diagram shows these two kinds of pipelines: Most pipeline configurations are stored in pipeline state objects (PSO) , represented by IPipelineState . The graphics and compute pipeline state objects share the same interface type, but are created using different functions: IDevice::new_graphics_pipeline_state(desc) and IDevice::new_compute_pipeline_state(desc) . Besides pipeline state objects, some pipeline configurations are encoded in command buffers directly (like viewport sizes, scissor rect sizes, blend factors, etc.) and can be set by corresponding command buffer functions. Graphics pipeline Graphics pipeline are used to perform render tasks, with draws primitives (points, lines, triangles) to texture attachments. One graphics pipeline has the following stages: Input Assmbler , which reads data form vertex buffers and optionally index buffer to build a list of vertices to be processed. Vertex Shader , which is a programmable function that will be called on every vertex to process the vertex data. Rasterizer , which performs primitive rasterizing to generate pixels from geometries. The vertex shader outputs will be rasterized to every pixel as pixel shader inputs using linear interpolation. Pixel Shader , which is a programmable function that will be called on every generated pixel to compute the final color that will be drawn to destination attachments. Depth Stencil Testing , which performs depth tests and stencil tests to discard pixels if they do not pass such tests. This stage also updates the depth stencil attachment value if depth and/or stencil write is enabled. Color Blending , which performs blending between the existing data on color attachments and the new color outputted by pixel shader, then writes the blend result to color attachments. Most configurations are done by filling GraphicsPipelineStateDesc descriptor, then call IDevice::new_graphics_pipeline_state(desc) with the descriptor to create a graphics pipeline state object. When recording render commands, call ICommandBuffer::set_graphics_pipeline_state(pso) to bind the pipeline state object to the pipeline, then all configurations in the pipeline state object will apply to succeeding draw commands until another PSO is bind, or until the render pass is ended. Input assembler Input assembler reads the vertex buffers and index buffer to generate vertices that will be processed on succeeding stages. Input assembers are configured by the input_layout property of GraphicsPipelineStateDesc , which includes input bindings configuration ( InputBindingDesc ) and input attributes configuration ( InputAttributeDesc ). Input bindings describe vertex buffers that are attached to the pipeline, including the binding slot of the vertex buffer, the size of elements in the vertex buffer, and the input rate of the vertex buffer (per vertex or per instance). The user should specify one input binding for every vertex buffer bound to the pipeline. Input attributes describe vertex attributes, including the format of the attribute, the semantic name and semantic index of the attribute, the location of the attribute, the binding slot of the vertex buffer that provides the attribute, and the byte offset of the attribute from the beginning of the element. The following diagram shows one comprehensive input assembler setup, where we provide vertices data using one vertex buffer, and provide instance data using two vertex buffers to draw the geometry multiple times using different color and transform information: Vertex shader Vertex shaders are user-defined functions that are called on every vertex outputted from input assembler. One vertex shader must have a four-component vector output attribute with SV_POSITION semantics that will be used as the vertex position for succeeding stages. The outputted vertex position is interpreted in normalized device coordinates (NDC), as shown below. If the fourth component ( w ) of the outputted vertex position is not 1.0 , the system divides each component of the vertex position with w to normalize it internally. Note that the depth value starts from 0.0 , not -1.0. Rasterizer Rasterizer generates pixels that will be used by pixel shaders from vertices outputted from vertex shaders. A traditional implementation of rasterizer performs the following tasks in order: Primitive generation: Generates primitives (points, lines or triangles that will be drawn) from vertices stream based on the primitive topology settings of the pipeline state (configured by GraphicsPipelineStateDesc::primitive_topology ). Covering test: Performs covering test for every pixel position against every primitive to see if the pixel is covered by the primitive. If MSAA is enabled, the covering test will be performed on every sub-pixel instead of every pixel. Pixel list generation: For every primitive, generate a list of pixels that are covered by the primitive. If MSAA is enabled, one pixel will be included in the list if any of its sub-pixels is covered by the primitive. Depth bias: If depth bias is used, offsetting depth values for primitives. Attribute interpolation: For every primitive, fill pixel shader input data for every pixel in the list by linear interpolating attributes outputted from the vertex shader. Rasterizers are configured by the rasterizer_state property of GraphicsPipelineStateDesc , which has the following properties: fill_mode : if the primitive type is triangle, controls the full mode of the rasterizer. Possible options include: wireframe : only pixels close to the border of the triangle will pass covering test. solid : all pixels in the triangle will pass covering test. cull_mode : if the primitive type is triangle, controls the cull mode of the rasterizer. Possible options include: front : cull out pixels in the front face of the triangle. back : cull out pixels in the back face of the triangle. none : do nothing. The front face and back face of one triangle is determined by the winding order of three triangle vertices in NDC (looking from -Z to +Z) and front_counter_clockwise property of RasterizerDesc . 1. front_counter_clockwise : If this is true , the rasterizer will regard one triangle as front-facing if its three vertices are wound in counter clockwise order; if this is false , the rasterizer will regard one triangle as front-facing if its three vertices are wound in clockwise order. 1. depth_clip_enable : If this is true , the rasterizer will discard pixels whose depth value ( z component of position after divided by w ) goes beyond ; if this is false , the rasterizer will clamp the depth value of pixel to 1.0 if it is greater than 1.0 , and retain the coverage value, which may cause depth test produce incorrect results. 1. depth_bias , slope_scaled_depth_bias and depth_bias_clamp are used to compute one depth bias value that will be added to the original depth value in depth bias step. The depth bias value is computed as: bias(depth) = clamp(C_{b} * E + C_{s} * slope(depth), -C_{clamp}, C_{clamp}) where: depth is the original depth of the pixel. C_{b} is depth_bias converted to f32 . E is a small number that represents the minimum representable value > 0 in the depth stencil attachment format converted to f32 : If the depth stencil attachment is in a normalized format ( unorm ), E = 2^{-n} , where n is the number of precision bits of the attachment format, for example, 16 for d16_unorm . If the depth stencil attachment is in a floating-point format ( float ), E = 2^{e-n} , where e=log_2(max(depth)) is the exponent of the maximum original depth value of the input primitive, and n is the number of bits in the floating-point mantissa, for example, 23 for d32_float . C_{s} is slope_scaled_depth_bias . slope(depth) is the slope of the depth value at pixel position, usually computed as max(ddx(depth), ddy(depth)) . ddx(depth) and ddy(depth) is the horizontal and vertical slopes of the depth value at the pixel position. C_{clamp} is depth_bias_clamp . Note that different platforms may implement depth bias using slightly different formula and precision, so the user should not expect a exact bias number between different platforms and graphics API. Viewports and scissor rects Viewports defines viewport transformation , which transforms positions in NDC to screen coordinates. Every viewport defines six properties: top_left_x , top_left_y , width , height , min_depth and max_depth . top_left_x and top_left_y defines the position, in pixels, of the top-left point of the viewport relative to the top-left corner of the frame buffer. width and height defines the size, in pixels, of the viewport. min_depth and max_depth defines the valid depth value of outputted vertex position in NDC. Both value must in range [ 0.0 , 1.0 ], but min_depth can be equal to or greater than max_depth . Any pixel whose depth value go beyond this range will be clamped to the range. The viewport transformation is performed using the following formulas: X_{screen} = X_{top\\_left} + (P_x + 1.0) / 2.0 * width Y_{screen} = Y_{top\\_left} + (-P_y + 1.0) / 2.0 * height Z_{screen} = min_depth + P_z * (max_depth - min_depth) where: P is the vertex position in NDC. X_{screen} and $Y_{screen}& are the screen-space position of the vertex in pixels, relative to the top-left corder of the frame buffer. Z_{screen} is the depth value written to the depth buffer. After viewport transformation, scissor culling will be performed to discard pixels that go outside of the scissor rect. The scissor rect is defined by one RectI structure, while has the following components: offset_x : The X offset, in pixels, of the scissor rect relative to the top-left corner of the frame buffer. offset_y : The Y offset, in pixels, of the scissor rect relative to the top-left corner of the frame buffer. width : The width, in pixels, of the scissor rect. height : The height, in pixels, of the scissor rect. Viewports and scissor rects are set dynamically in command recording by ICommandBuffer::set_viewport(viewport) and ICommandBuffer::set_scissor_rect(rect) . The user may also set multiple viewports and scissor rects for one draw call by calling ICommandBuffer::set_viewports(viewports) and ICommandBuffer::set_scissor_rects(rects) , in such case, the viewport array and scissor rect array must have the same size so that every viewport will have one corresponding scissor rect. Every primitive generated by the rasterizer can only be sent to one viewport, the user can use SV_ViewportArrayIndex ( uint ) vertex shader output semantics to select which viewport to use. All vertices in the same primitive should choose the same viewport, or the behavior is not defined. If SV_ViewportArrayIndex is not specified, the first viewport and scissor rect will be used. Pixel shader Pixel shaders (or fragment shaders in some graphic APIs) are user-defined functions that are called on every pixel outputted from rasterizer whose coverage value is greater than zero. One pixel shader must have one output attribute with SV_COLOR{N} semantic for every color attachment of the render pass with correct type regarding to the format of the corresponding color attachment. Attribute values outputted from the vertex shader will be interpolated into every pixel and used as input attribute value of pixel shaders. Depth stencil testing Depth stencil testing stage performs depth and stencil tests on pixels outputted from the pixel shader and discards pixels that do not pass such tests, one pixel will be written to the attachment only if it passes both depth and stencil test. The depth test is usually used to ensure that pixels near the camera will not be covered by pixels far from the camera if they are rastered to the same screen position, even if the closer pixel is drawn first. Depth stencil testing stage is configured by depth_stencil_state property of GraphicsPipelineStateDesc , which has the following properties: depth_test_enable : Whether to enable the depth test. If depth test is disabled, all pixels will pass the depth test. This must be set to false if depth stencil attachment is not specified. depth_write_enable : Whether to write pixel depth value to the depth buffer if the pixel passes both depth and stencil test. This must be set to false if depth stencil attachment is not specified. depth_func : The depth test function. stencil_enable : Whether to enable the stencil test. If stencil test is disabled, all pixels will pass the stencil test. stencil_read_mask : The read mask that will be bitwise-AND combined with the value read from stencil buffer and the value of the pixel before they are used for stencil test. stencil_write_mask : The write mask specifying which bits of the value in the stencil buffer will be overwritten by the new pixel's stencil value. front_face and back_face are two stencil operation descriptors that allows the user to specify the stencil operation for front face and back face independently. The stencil operation descriptor has the following properties: stencil_func : The stencil test function. stencil_fail_op : The operation to perform on stencil buffer if the pixel fails to pass the stencil test. stencil_pass_op : The operation to perform on stencil buffer if the pixel passes the stencil test. stencil_depth_fail_op : The operation to perform on stencil buffer if the pixel passes the stencil test, but fails to pass the depth test. The depth stencil test can be represented by the following presudo C++ code: bool depth_test_pass = true; auto pixel = read_pixel_shader_pixel_data(); // depth test if (depth_test_enable) { f32 exist_depth = read_depth_from_depth_buffer(); depth_test_pass = depth_func(pixel.depth, exist_depth); } // stencil test bool stencil_test_pass = true; u8 stencil_value; u8 stencil_write_value; if (stencil_enable) { stencil_value = read_stencil_from_stencil_buffer(); u8 stencil_ref = get_stencil_ref(); // Set by ICommandBuffer::set_stencil_ref. bool is_front_face = is_pixel_front_face(pixel); if(is_front_face) { stencil_test_pass = front_face.stencil_func(stencil_ref & stencil_read_mask, stencil_value & stencil_read_mask); if(stencil_test_pass == true) { if(depth_test_pass == true) { stencil_write_value = front_face.stencil_pass_op(stencil_value, stencil_ref); } else { stencil_write_value = front_face.stencil_depth_fail_op(stencil_value, stencil_ref); } } else { stencil_write_value = front_face.stencil_fail_op(stencil_value, stencil_ref); } } else { stencil_test_pass = back_face.stencil_func(stencil_ref & stencil_read_mask, stencil_value & stencil_read_mask); if(stencil_test_pass == true) { if(depth_test_pass == true) { stencil_write_value = back_face.stencil_pass_op(stencil_value, stencil_ref); } else { stencil_write_value = back_face.stencil_depth_fail_op(stencil_value, stencil_ref); } } else { stencil_write_value = back_face.stencil_fail_op(stencil_value, stencil_ref); } } } // discard pixel if failed to pass the depth stencil test. if(depth_test_pass == false || stencil_test_pass == false) { discard(pixel); } else { if(depth_write_enable) { write_depth_to_depth_buffer(pixel.depth); } } // update stencil buffer. This will be performed even if the pixel is discarded. if(stencil_enable) { // only modify bits specified by the write mask. write_stencil_to_stencil_buffer((stencil_write_value & stencil_write_mask) | (stencil_value & ~stencil_write_mask)); } Color blending Color blending stage performs color blending between pixel colors outputted from pixel shader and pixel colors on the color attachment, and writes the blending result to the color attachment. Color blending stage is configured by blend_state for GraphicsPipelineStateDesc , which has the following properties: attachments : Specify the color blending settings for every color attachment. Every attachment blend setting is described by AttachmentBlendDesc , which has the following properties: blend_enable : Whether to enable blending for this attachment. Disabling blending behaves the same as setting blend_op_color to add and setting the source and destination blending factor for both color and alpha components to 1.0 and 0.0. src_blend_color : The blend factor for source color components (RGB). dst_blend_color : The blend factor for destination color components (RGB). blend_op_color : The blend operation for color components (RGB). src_blend_alpha : The blend factor for the source alpha component (A). dst_blend_alpha : The blend factor for the destination alpha component (A). blend_op_alpha : The blend operation for the alpha component (A). render_target_write_mask : Specify which color channels (RGBA) are written to the color attachment texture. independent_blend_enable : If this is false , then all color attachments should use the same color blending settings specified by the first element of attachments array. If this is true , then each color attachment uses dedicated color blending setting specified by the corresponding elements of attachments array. Set this to false may improve performance on some platforms. alpha_to_coverage_enable : On MSAA pipelines, if this is true , alpha to coverage feature is enabled. See \"Multisample anti-aliasing\" section for details about coverage mask. This must be false on non-MSAA pipelines. The final written color for every color attachment is computed using the following equation: C_{final} = (C_{src})\\Delta_{color}(C_{dst}) A_{final} = (A_{src})\\Delta_{alpha}(A_{dst}) where: C_{src} is the blend factor specified by src_blend_color . C_{dst} is the blend factor specified by dst_blend_color . \\Delta_{color} is the blend operation specified by blend_op_color . A_{src} is the blend factor specified by src_blend_alpha . A_{dst} is the blend factor specified by dst_blend_alpha . \\Delta_{alpha} is the blend operation specified by blend_op_alpha . Multisample anti-aliasing Multisample anti-aliasing (MSAA) is a hardware-accelerated anti-aliasing technique that relieve geometry aliasing artifacts. When MSAA is enabled, the render pipeline generates sample_count sub-pixels for every pixel, and performs rasterization, depth stencil test and color blending on every sub-pixel instead of every pixel. The pixel shader, however, is invoked only once for every pixel, and all sub-pixels in that pixel get the same output value from pixel shader. To enable MSAA for one render pipeline, performs the following steps: Use color and depth attachments with sample_count of TextureDesc greater than 1 . Set sample_count of GraphicsPipelineStateDesc to a value greater than 1 . Set sample_count of RenderPassDesc to a value greater than 1 . The sample count number must be equal for TextureDesc , GraphicsPipelineStateDesc and RenderPassDesc used in one MSAA draw. Coverage mask For every pixel in every primitive pixel list, the render pipeline generates a coverage mask thatrecords the coverage result of every sub-pixel of that pixel. Every sub-pixel in one pixel takes one bitof the coverage mask, and that bit will be set to 1 if the sub-pixel passes coverage test and depthstencil test, and 0 otherwise. If alpha to coverage is enabled, the render pipeline will generateanother coverage mask based on the alpha value of the first shader output color. The coverage maskgeneration algorithm is platform-specific, but should unset all bit if alpha is 0.0, set all bits ifalpha is 1.0, and set a number of bits proportionally to the value of the floating-point input. Thatcoverage mask will be bitwise-AND combined with the original coverage mask to compute the final coveragemask. The final coverage mask is used in color blending to determine which sub-pixels should be writtenback to the color and depth stencil buffer. Compute pipeline Compute pipelines are used to perform arbitrary compute tasks, which is somethings referred asgeneral-purpose GPU (GPGPU) programming. The compute pipeline only includes one stage: the computeshader stage, which runs user-defined compute tasks. Compute pipelines configurations are done byfilling ComputePipelineStateDesc descriptor, then call IDevice::new_compute_pipeline_state(desc) with the descriptor to create a compute pipeline state object. When recording compute commands, call ICommandBuffer::set_compute_pipeline_state(pso) to bind the pipeline state object to the pipeline,then all configurations in the pipeline state object will apply to succeeding dispatch commands untilanother PSO is bind, or until the render pass is ended. Shaders Shaders are user-defined functions that can be invoked by GPU to perform certain tasks. In LunaSDK, wehave the following shaders: Vertex shader, set by GraphicsPipelineStateDesc::vs . Pixel shader, set by GraphicsPipelineStateDesc::ps . Compute shader, set by ComputePipelineStateDesc::cs . All shaders are specified by providing shader binary data to the pipeline state descriptor when creatingthe pipeline state. The shader binary data has different formats in different backends: Direct3D 12 accepts DXBC (produced by D3DCompile or fxc ) or DXIL (produced by dxc ) shader binarycode. Vulkan accepts SPIR-V shader binary code produced by glslc or dxc . Metal is a little bit complicated. Since some settings (like the entry point of the shader) are notrecorded in the shader code, but in application side, we need to append additional parameters to theshader data. Metal accepts a JSON string that indicates one object with the following properties: source (String): The MSL shader source code. entry_point (String): The name of the entry point function of the shader. numthreads (Array of integer): For compute shaders, specify the number of threads per thread group. Currently, Metal shaders are compiled during the pipeline object creation process.","title":"Pipeline Configuration"},{"location":"manual/rhi/pipeline_configuration/#pipeline-configuration","text":"Pipelines are sequences of stages that are performed on graphics hardware to perform a certain task, like rendering or computing. In RHI, we have two kinds of pipeline: graphics pipeline and compute pipeline . The following diagram shows these two kinds of pipelines: Most pipeline configurations are stored in pipeline state objects (PSO) , represented by IPipelineState . The graphics and compute pipeline state objects share the same interface type, but are created using different functions: IDevice::new_graphics_pipeline_state(desc) and IDevice::new_compute_pipeline_state(desc) . Besides pipeline state objects, some pipeline configurations are encoded in command buffers directly (like viewport sizes, scissor rect sizes, blend factors, etc.) and can be set by corresponding command buffer functions.","title":"Pipeline Configuration"},{"location":"manual/rhi/pipeline_configuration/#graphics-pipeline","text":"Graphics pipeline are used to perform render tasks, with draws primitives (points, lines, triangles) to texture attachments. One graphics pipeline has the following stages: Input Assmbler , which reads data form vertex buffers and optionally index buffer to build a list of vertices to be processed. Vertex Shader , which is a programmable function that will be called on every vertex to process the vertex data. Rasterizer , which performs primitive rasterizing to generate pixels from geometries. The vertex shader outputs will be rasterized to every pixel as pixel shader inputs using linear interpolation. Pixel Shader , which is a programmable function that will be called on every generated pixel to compute the final color that will be drawn to destination attachments. Depth Stencil Testing , which performs depth tests and stencil tests to discard pixels if they do not pass such tests. This stage also updates the depth stencil attachment value if depth and/or stencil write is enabled. Color Blending , which performs blending between the existing data on color attachments and the new color outputted by pixel shader, then writes the blend result to color attachments. Most configurations are done by filling GraphicsPipelineStateDesc descriptor, then call IDevice::new_graphics_pipeline_state(desc) with the descriptor to create a graphics pipeline state object. When recording render commands, call ICommandBuffer::set_graphics_pipeline_state(pso) to bind the pipeline state object to the pipeline, then all configurations in the pipeline state object will apply to succeeding draw commands until another PSO is bind, or until the render pass is ended.","title":"Graphics pipeline"},{"location":"manual/rhi/pipeline_configuration/#input-assembler","text":"Input assembler reads the vertex buffers and index buffer to generate vertices that will be processed on succeeding stages. Input assembers are configured by the input_layout property of GraphicsPipelineStateDesc , which includes input bindings configuration ( InputBindingDesc ) and input attributes configuration ( InputAttributeDesc ). Input bindings describe vertex buffers that are attached to the pipeline, including the binding slot of the vertex buffer, the size of elements in the vertex buffer, and the input rate of the vertex buffer (per vertex or per instance). The user should specify one input binding for every vertex buffer bound to the pipeline. Input attributes describe vertex attributes, including the format of the attribute, the semantic name and semantic index of the attribute, the location of the attribute, the binding slot of the vertex buffer that provides the attribute, and the byte offset of the attribute from the beginning of the element. The following diagram shows one comprehensive input assembler setup, where we provide vertices data using one vertex buffer, and provide instance data using two vertex buffers to draw the geometry multiple times using different color and transform information:","title":"Input assembler"},{"location":"manual/rhi/pipeline_configuration/#vertex-shader","text":"Vertex shaders are user-defined functions that are called on every vertex outputted from input assembler. One vertex shader must have a four-component vector output attribute with SV_POSITION semantics that will be used as the vertex position for succeeding stages. The outputted vertex position is interpreted in normalized device coordinates (NDC), as shown below. If the fourth component ( w ) of the outputted vertex position is not 1.0 , the system divides each component of the vertex position with w to normalize it internally. Note that the depth value starts from 0.0 , not -1.0.","title":"Vertex shader"},{"location":"manual/rhi/pipeline_configuration/#rasterizer","text":"Rasterizer generates pixels that will be used by pixel shaders from vertices outputted from vertex shaders. A traditional implementation of rasterizer performs the following tasks in order: Primitive generation: Generates primitives (points, lines or triangles that will be drawn) from vertices stream based on the primitive topology settings of the pipeline state (configured by GraphicsPipelineStateDesc::primitive_topology ). Covering test: Performs covering test for every pixel position against every primitive to see if the pixel is covered by the primitive. If MSAA is enabled, the covering test will be performed on every sub-pixel instead of every pixel. Pixel list generation: For every primitive, generate a list of pixels that are covered by the primitive. If MSAA is enabled, one pixel will be included in the list if any of its sub-pixels is covered by the primitive. Depth bias: If depth bias is used, offsetting depth values for primitives. Attribute interpolation: For every primitive, fill pixel shader input data for every pixel in the list by linear interpolating attributes outputted from the vertex shader. Rasterizers are configured by the rasterizer_state property of GraphicsPipelineStateDesc , which has the following properties: fill_mode : if the primitive type is triangle, controls the full mode of the rasterizer. Possible options include: wireframe : only pixels close to the border of the triangle will pass covering test. solid : all pixels in the triangle will pass covering test. cull_mode : if the primitive type is triangle, controls the cull mode of the rasterizer. Possible options include: front : cull out pixels in the front face of the triangle. back : cull out pixels in the back face of the triangle. none : do nothing. The front face and back face of one triangle is determined by the winding order of three triangle vertices in NDC (looking from -Z to +Z) and front_counter_clockwise property of RasterizerDesc . 1. front_counter_clockwise : If this is true , the rasterizer will regard one triangle as front-facing if its three vertices are wound in counter clockwise order; if this is false , the rasterizer will regard one triangle as front-facing if its three vertices are wound in clockwise order. 1. depth_clip_enable : If this is true , the rasterizer will discard pixels whose depth value ( z component of position after divided by w ) goes beyond ; if this is false , the rasterizer will clamp the depth value of pixel to 1.0 if it is greater than 1.0 , and retain the coverage value, which may cause depth test produce incorrect results. 1. depth_bias , slope_scaled_depth_bias and depth_bias_clamp are used to compute one depth bias value that will be added to the original depth value in depth bias step. The depth bias value is computed as: bias(depth) = clamp(C_{b} * E + C_{s} * slope(depth), -C_{clamp}, C_{clamp}) where: depth is the original depth of the pixel. C_{b} is depth_bias converted to f32 . E is a small number that represents the minimum representable value > 0 in the depth stencil attachment format converted to f32 : If the depth stencil attachment is in a normalized format ( unorm ), E = 2^{-n} , where n is the number of precision bits of the attachment format, for example, 16 for d16_unorm . If the depth stencil attachment is in a floating-point format ( float ), E = 2^{e-n} , where e=log_2(max(depth)) is the exponent of the maximum original depth value of the input primitive, and n is the number of bits in the floating-point mantissa, for example, 23 for d32_float . C_{s} is slope_scaled_depth_bias . slope(depth) is the slope of the depth value at pixel position, usually computed as max(ddx(depth), ddy(depth)) . ddx(depth) and ddy(depth) is the horizontal and vertical slopes of the depth value at the pixel position. C_{clamp} is depth_bias_clamp . Note that different platforms may implement depth bias using slightly different formula and precision, so the user should not expect a exact bias number between different platforms and graphics API.","title":"Rasterizer"},{"location":"manual/rhi/pipeline_configuration/#viewports-and-scissor-rects","text":"Viewports defines viewport transformation , which transforms positions in NDC to screen coordinates. Every viewport defines six properties: top_left_x , top_left_y , width , height , min_depth and max_depth . top_left_x and top_left_y defines the position, in pixels, of the top-left point of the viewport relative to the top-left corner of the frame buffer. width and height defines the size, in pixels, of the viewport. min_depth and max_depth defines the valid depth value of outputted vertex position in NDC. Both value must in range [ 0.0 , 1.0 ], but min_depth can be equal to or greater than max_depth . Any pixel whose depth value go beyond this range will be clamped to the range. The viewport transformation is performed using the following formulas: X_{screen} = X_{top\\_left} + (P_x + 1.0) / 2.0 * width Y_{screen} = Y_{top\\_left} + (-P_y + 1.0) / 2.0 * height Z_{screen} = min_depth + P_z * (max_depth - min_depth) where: P is the vertex position in NDC. X_{screen} and $Y_{screen}& are the screen-space position of the vertex in pixels, relative to the top-left corder of the frame buffer. Z_{screen} is the depth value written to the depth buffer. After viewport transformation, scissor culling will be performed to discard pixels that go outside of the scissor rect. The scissor rect is defined by one RectI structure, while has the following components: offset_x : The X offset, in pixels, of the scissor rect relative to the top-left corner of the frame buffer. offset_y : The Y offset, in pixels, of the scissor rect relative to the top-left corner of the frame buffer. width : The width, in pixels, of the scissor rect. height : The height, in pixels, of the scissor rect. Viewports and scissor rects are set dynamically in command recording by ICommandBuffer::set_viewport(viewport) and ICommandBuffer::set_scissor_rect(rect) . The user may also set multiple viewports and scissor rects for one draw call by calling ICommandBuffer::set_viewports(viewports) and ICommandBuffer::set_scissor_rects(rects) , in such case, the viewport array and scissor rect array must have the same size so that every viewport will have one corresponding scissor rect. Every primitive generated by the rasterizer can only be sent to one viewport, the user can use SV_ViewportArrayIndex ( uint ) vertex shader output semantics to select which viewport to use. All vertices in the same primitive should choose the same viewport, or the behavior is not defined. If SV_ViewportArrayIndex is not specified, the first viewport and scissor rect will be used.","title":"Viewports and scissor rects"},{"location":"manual/rhi/pipeline_configuration/#pixel-shader","text":"Pixel shaders (or fragment shaders in some graphic APIs) are user-defined functions that are called on every pixel outputted from rasterizer whose coverage value is greater than zero. One pixel shader must have one output attribute with SV_COLOR{N} semantic for every color attachment of the render pass with correct type regarding to the format of the corresponding color attachment. Attribute values outputted from the vertex shader will be interpolated into every pixel and used as input attribute value of pixel shaders.","title":"Pixel shader"},{"location":"manual/rhi/pipeline_configuration/#depth-stencil-testing","text":"Depth stencil testing stage performs depth and stencil tests on pixels outputted from the pixel shader and discards pixels that do not pass such tests, one pixel will be written to the attachment only if it passes both depth and stencil test. The depth test is usually used to ensure that pixels near the camera will not be covered by pixels far from the camera if they are rastered to the same screen position, even if the closer pixel is drawn first. Depth stencil testing stage is configured by depth_stencil_state property of GraphicsPipelineStateDesc , which has the following properties: depth_test_enable : Whether to enable the depth test. If depth test is disabled, all pixels will pass the depth test. This must be set to false if depth stencil attachment is not specified. depth_write_enable : Whether to write pixel depth value to the depth buffer if the pixel passes both depth and stencil test. This must be set to false if depth stencil attachment is not specified. depth_func : The depth test function. stencil_enable : Whether to enable the stencil test. If stencil test is disabled, all pixels will pass the stencil test. stencil_read_mask : The read mask that will be bitwise-AND combined with the value read from stencil buffer and the value of the pixel before they are used for stencil test. stencil_write_mask : The write mask specifying which bits of the value in the stencil buffer will be overwritten by the new pixel's stencil value. front_face and back_face are two stencil operation descriptors that allows the user to specify the stencil operation for front face and back face independently. The stencil operation descriptor has the following properties: stencil_func : The stencil test function. stencil_fail_op : The operation to perform on stencil buffer if the pixel fails to pass the stencil test. stencil_pass_op : The operation to perform on stencil buffer if the pixel passes the stencil test. stencil_depth_fail_op : The operation to perform on stencil buffer if the pixel passes the stencil test, but fails to pass the depth test. The depth stencil test can be represented by the following presudo C++ code: bool depth_test_pass = true; auto pixel = read_pixel_shader_pixel_data(); // depth test if (depth_test_enable) { f32 exist_depth = read_depth_from_depth_buffer(); depth_test_pass = depth_func(pixel.depth, exist_depth); } // stencil test bool stencil_test_pass = true; u8 stencil_value; u8 stencil_write_value; if (stencil_enable) { stencil_value = read_stencil_from_stencil_buffer(); u8 stencil_ref = get_stencil_ref(); // Set by ICommandBuffer::set_stencil_ref. bool is_front_face = is_pixel_front_face(pixel); if(is_front_face) { stencil_test_pass = front_face.stencil_func(stencil_ref & stencil_read_mask, stencil_value & stencil_read_mask); if(stencil_test_pass == true) { if(depth_test_pass == true) { stencil_write_value = front_face.stencil_pass_op(stencil_value, stencil_ref); } else { stencil_write_value = front_face.stencil_depth_fail_op(stencil_value, stencil_ref); } } else { stencil_write_value = front_face.stencil_fail_op(stencil_value, stencil_ref); } } else { stencil_test_pass = back_face.stencil_func(stencil_ref & stencil_read_mask, stencil_value & stencil_read_mask); if(stencil_test_pass == true) { if(depth_test_pass == true) { stencil_write_value = back_face.stencil_pass_op(stencil_value, stencil_ref); } else { stencil_write_value = back_face.stencil_depth_fail_op(stencil_value, stencil_ref); } } else { stencil_write_value = back_face.stencil_fail_op(stencil_value, stencil_ref); } } } // discard pixel if failed to pass the depth stencil test. if(depth_test_pass == false || stencil_test_pass == false) { discard(pixel); } else { if(depth_write_enable) { write_depth_to_depth_buffer(pixel.depth); } } // update stencil buffer. This will be performed even if the pixel is discarded. if(stencil_enable) { // only modify bits specified by the write mask. write_stencil_to_stencil_buffer((stencil_write_value & stencil_write_mask) | (stencil_value & ~stencil_write_mask)); }","title":"Depth stencil testing"},{"location":"manual/rhi/pipeline_configuration/#color-blending","text":"Color blending stage performs color blending between pixel colors outputted from pixel shader and pixel colors on the color attachment, and writes the blending result to the color attachment. Color blending stage is configured by blend_state for GraphicsPipelineStateDesc , which has the following properties: attachments : Specify the color blending settings for every color attachment. Every attachment blend setting is described by AttachmentBlendDesc , which has the following properties: blend_enable : Whether to enable blending for this attachment. Disabling blending behaves the same as setting blend_op_color to add and setting the source and destination blending factor for both color and alpha components to 1.0 and 0.0. src_blend_color : The blend factor for source color components (RGB). dst_blend_color : The blend factor for destination color components (RGB). blend_op_color : The blend operation for color components (RGB). src_blend_alpha : The blend factor for the source alpha component (A). dst_blend_alpha : The blend factor for the destination alpha component (A). blend_op_alpha : The blend operation for the alpha component (A). render_target_write_mask : Specify which color channels (RGBA) are written to the color attachment texture. independent_blend_enable : If this is false , then all color attachments should use the same color blending settings specified by the first element of attachments array. If this is true , then each color attachment uses dedicated color blending setting specified by the corresponding elements of attachments array. Set this to false may improve performance on some platforms. alpha_to_coverage_enable : On MSAA pipelines, if this is true , alpha to coverage feature is enabled. See \"Multisample anti-aliasing\" section for details about coverage mask. This must be false on non-MSAA pipelines. The final written color for every color attachment is computed using the following equation: C_{final} = (C_{src})\\Delta_{color}(C_{dst}) A_{final} = (A_{src})\\Delta_{alpha}(A_{dst}) where: C_{src} is the blend factor specified by src_blend_color . C_{dst} is the blend factor specified by dst_blend_color . \\Delta_{color} is the blend operation specified by blend_op_color . A_{src} is the blend factor specified by src_blend_alpha . A_{dst} is the blend factor specified by dst_blend_alpha . \\Delta_{alpha} is the blend operation specified by blend_op_alpha .","title":"Color blending"},{"location":"manual/rhi/pipeline_configuration/#multisample-anti-aliasing","text":"Multisample anti-aliasing (MSAA) is a hardware-accelerated anti-aliasing technique that relieve geometry aliasing artifacts. When MSAA is enabled, the render pipeline generates sample_count sub-pixels for every pixel, and performs rasterization, depth stencil test and color blending on every sub-pixel instead of every pixel. The pixel shader, however, is invoked only once for every pixel, and all sub-pixels in that pixel get the same output value from pixel shader. To enable MSAA for one render pipeline, performs the following steps: Use color and depth attachments with sample_count of TextureDesc greater than 1 . Set sample_count of GraphicsPipelineStateDesc to a value greater than 1 . Set sample_count of RenderPassDesc to a value greater than 1 . The sample count number must be equal for TextureDesc , GraphicsPipelineStateDesc and RenderPassDesc used in one MSAA draw.","title":"Multisample anti-aliasing"},{"location":"manual/rhi/pipeline_configuration/#coverage-mask","text":"For every pixel in every primitive pixel list, the render pipeline generates a coverage mask thatrecords the coverage result of every sub-pixel of that pixel. Every sub-pixel in one pixel takes one bitof the coverage mask, and that bit will be set to 1 if the sub-pixel passes coverage test and depthstencil test, and 0 otherwise. If alpha to coverage is enabled, the render pipeline will generateanother coverage mask based on the alpha value of the first shader output color. The coverage maskgeneration algorithm is platform-specific, but should unset all bit if alpha is 0.0, set all bits ifalpha is 1.0, and set a number of bits proportionally to the value of the floating-point input. Thatcoverage mask will be bitwise-AND combined with the original coverage mask to compute the final coveragemask. The final coverage mask is used in color blending to determine which sub-pixels should be writtenback to the color and depth stencil buffer.","title":"Coverage mask"},{"location":"manual/rhi/pipeline_configuration/#compute-pipeline","text":"Compute pipelines are used to perform arbitrary compute tasks, which is somethings referred asgeneral-purpose GPU (GPGPU) programming. The compute pipeline only includes one stage: the computeshader stage, which runs user-defined compute tasks. Compute pipelines configurations are done byfilling ComputePipelineStateDesc descriptor, then call IDevice::new_compute_pipeline_state(desc) with the descriptor to create a compute pipeline state object. When recording compute commands, call ICommandBuffer::set_compute_pipeline_state(pso) to bind the pipeline state object to the pipeline,then all configurations in the pipeline state object will apply to succeeding dispatch commands untilanother PSO is bind, or until the render pass is ended.","title":"Compute pipeline"},{"location":"manual/rhi/pipeline_configuration/#shaders","text":"Shaders are user-defined functions that can be invoked by GPU to perform certain tasks. In LunaSDK, wehave the following shaders: Vertex shader, set by GraphicsPipelineStateDesc::vs . Pixel shader, set by GraphicsPipelineStateDesc::ps . Compute shader, set by ComputePipelineStateDesc::cs . All shaders are specified by providing shader binary data to the pipeline state descriptor when creatingthe pipeline state. The shader binary data has different formats in different backends: Direct3D 12 accepts DXBC (produced by D3DCompile or fxc ) or DXIL (produced by dxc ) shader binarycode. Vulkan accepts SPIR-V shader binary code produced by glslc or dxc . Metal is a little bit complicated. Since some settings (like the entry point of the shader) are notrecorded in the shader code, but in application side, we need to append additional parameters to theshader data. Metal accepts a JSON string that indicates one object with the following properties: source (String): The MSL shader source code. entry_point (String): The name of the entry point function of the shader. numthreads (Array of integer): For compute shaders, specify the number of threads per thread group. Currently, Metal shaders are compiled during the pipeline object creation process.","title":"Shaders"},{"location":"manual/rhi/recording_commands/","text":"Recording Commands This section describes commands that can be added to one command buffer. In RHI, we have four kinds of commands: Pass begin/end commands. Render commands, which can only be added in render passes. Compute commands, which can only be added in compute passes. Copy command, which can only be added in copy passes. The barrier command. Profile commands. Pass begin/end commands Passes are device-specific states (contexts) that is set up in order to perform a certain kind of tasks. For example, in order to draw primitives, the device need a render pass setup, so that it can prepare framebuffers, pipeline states and other states for the draw call. In RHI, we have three kinds of passes: render pass , compute pass and copy pass . All passes are opened by begin_xxx_pass , and are closed by end_xxx_pass , one command buffer can only have one open pass at one time, the user should close the last pass begin opening a new pass. Render passes are opened by ICommandBuffer::begin_render_pass(desc) , and are closed by ICommandBuffer::end_render_pass() . When beginning a new render pass, the user should provide a render pass descriptor ( RenderPassDesc ) which specifies a set of attachments and query heaps used for the render pass. Attachments are textures that are used to store the render result of the render pass, including: Color attachments: One render pass can specify up to 8 color attachments used for storing render results. Depth stencil attachments: Stores the depth stencil information of the render result and used for depth stencil testing during the draw process. Resolve attachments: If MSAA is enabled, the user can specify resolve attachments that stores the resolve result of color attachments automatically when the render pass ends. Currently, this is the only way to resolve MSAA textures. Query heaps can be used to query statistics during a render pass, including: Timestamp: Queries the GPU timestamp at the beginning and end of the render pass to measure the GPU time cost for the pass. Pipeline statistics: Queries the pipeline statistics information during the render pass, like how many time vertex shaders and pixel shaders are invoked, how many primitives are drawn, etc. Occlusion: Queries the number of pixels that pass depth/stencil test. All attachments and query heaps are bound to the render pass until ICommandBuffer::end_render_pass() is called. The user cannot change such bindings during a render pass. Compute passes are opened by ICommandBuffer::begin_compute_pass(desc) , and are closed by ICommandBuffer::end_compute_pass() . When beginning a new compute pass, the user can provide a compute pass descriptor ( ComputePassDesc ) which specifies query heaps used for the compute pass, including: Timestamp: Queries the GPU timestamp at the beginning and end of the compute pass to measure the GPU time cost for the pass. Pipeline statistics: Queries the number of compute shader invocations during the compute pass. Copy passes are opened by ICommandBuffer::begin_copy_pass(desc) , and and are closed by ICommandBuffer::end_copy_pass() . When beginning a new copy pass, the user can provide a copy pass descriptor ( CopyPassDesc ) which specifies query heaps used for the copy pass, which can query for GPU timestamps and beginning and end of the copy pass. All pipeline states must be valid only in a pass scope, when one pass is closed, all pipeline states will be invalidated and must be set again in the next pass. Such state includes: Pipeline layout objectss. Pipeline state objects. Descriptor sets. Vertex buffers and index buffers. Viewports and scissor rects. Blend factors. Stencil reference values. Render commands Render commands are commands used for rendering tasks, they can only be recorded between ICommandBuffer::begin_render_pass(desc) and ICommandBuffer::end_render_pass() . Render commands have three types: graphics pipeline setup commands, draw commands and occlusion query commands. The following commands are graphics pipeline setup commands: ICommandBuffer::set_graphics_pipeline_layout(pipeline_layout) ICommandBuffer::set_graphics_pipeline_state(pso) ICommandBuffer::set_vertex_buffers(start_slot, views) ICommandBuffer::set_index_buffer(view) ICommandBuffer::set_graphics_descriptor_set(index, descriptor_set) ICommandBuffer::set_graphics_descriptor_sets(start_index, descriptor_sets) ICommandBuffer::set_viewport(viewport) ICommandBuffer::set_viewports(viewports) ICommandBuffer::set_scissor_rect(rect) ICommandBuffer::set_scissor_rects(rects) ICommandBuffer::set_blend_factor(blend_factor) ICommandBuffer::set_stencil_ref(stencil_ref) The following commands are draw commands: ICommandBuffer::draw(vertex_count, start_vertex_location) ICommandBuffer::draw_indexed(index_count, start_index_location, base_vertex_location) ICommandBuffer::draw_instanced(vertex_count_per_instance, instance_count, start_vertex_location, start_instance_location) ICommandBuffer::draw_indexed_instanced(index_count_per_instance, instance_count, start_index_location, base_vertex_location, start_instance_location) The following commands are occlusion query commands: ICommandBuffer::begin_occlusion_query(mode, index) ICommandBuffer::end_occlusion_query(index) The graphics pipeline behaves like a state machine: states set by ICommandBuffer::set_xxx stays in the state until changed by another set state call. All graphics pipeline states are undefined at the beginning of one render pass, the user should set all necessary states explicitly before she issues the draw call. All states will be lost at the end of the render pass, the user should set such states again for one new render pass. When setting pipeline states, the user should following the following rules: ICommandBuffer::set_graphics_descriptor_set(index, descriptor_set) and ICommandBuffer::set_graphics_descriptor_sets(start_index, descriptor_sets) must be called after a valid graphics pipeline layout is set by ICommandBuffer::set_graphics_pipeline_layout(pipeline_layout) . The following graphics pipeline setup order is suggested: ICommandBuffer::set_graphics_pipeline_layout(pipeline_layout) ICommandBuffer::set_graphics_pipeline_state(pso) ICommandBuffer::set_vertex_buffers(start_slot, views) / ICommandBuffer::set_index_buffer(view) / ICommandBuffer::set_graphics_descriptor_set(index, descriptor_set) / ICommandBuffer::set_graphics_descriptor_sets(start_index, descriptor_sets) ICommandBuffer::set_viewport(viewport) / ICommandBuffer::set_viewports(viewports) / ICommandBuffer::set_scissor_rect(rect) / ICommandBuffer::set_scissor_rects(rects) / ICommandBuffer::set_blend_factor(blend_factor) / ICommandBuffer::set_stencil_ref(stencil_ref) Compute commands Compute commands are commands used for computing tasks, they can only be recorded between ICommandBuffer::begin_compute_pass(desc) and ICommandBuffer::end_compute_pass() . Compute commands have two types: compute pipeline setup commands and the dispatch command. The following commands are compute pipeline setup commands: ICommandBuffer::set_compute_pipeline_layout(pipeline_layout) ICommandBuffer::set_compute_pipeline_state(pso) ICommandBuffer::set_compute_descriptor_set(index, descriptor_set) ICommandBuffer::set_compute_descriptor_sets(start_index, descriptor_sets) The dispath command is: 1. ICommandBuffer::dispatch(thread_group_count_x, thread_group_count_y, thread_group_count_z) The compute pipeline behaves like a state machine: states set by ICommandBuffer::set_xxx stays in the state until changed by another set state call. All compute pipeline states are undefined at the beginning of one compute pass, the user should set all necessary states explicitly before she dispatches the compute task. All states will be lost at the end of the compute pass, the user should set such states again for one new compute pass. When setting compute pipeline states, the user should following the following rules: ICommandBuffer::set_compute_descriptor_set(index, descriptor_set) and ICommandBuffer::set_compute_descriptor_sets(start_index, descriptor_sets) must be called after a valid compute pipeline layout is set by ICommandBuffer::set_compute_pipeline_layout(pipeline_layout) . The following compute pipeline setup order is suggested: ICommandBuffer::set_compute_pipeline_layout(pipeline_layout) ICommandBuffer::set_compute_pipeline_state(pso) ICommandBuffer::set_compute_descriptor_set(index, descriptor_set) / ICommandBuffer::set_compute_descriptor_sets(start_index, descriptor_sets) Copy commands Copy commands are commands used for coping data between resources, they can only be recorded between ICommandBuffer::begin_compute_pass(desc) and ICommandBuffer::end_compute_pass() . The following commands are copy commands: copy_resource(dst, src) copy_buffer(dst, dst_offset, src, src_offset, copy_bytes) copy_texture(dst, dst_subresource, dst_x, dst_y, dst_z, src, src_subresource, src_x, src_y, src_z, copy_width, copy_height, copy_depth) copy_buffer_to_texture(dst, dst_subresource, dst_x, dst_y, dst_z, src, src_offset, src_row_pitch, src_slice_pitch, copy_width, copy_height, copy_depth) copy_texture_to_buffer(dst, dst_offset, dst_row_pitch, dst_slice_pitch, src, src_subresource, src_x, src_y, src_z, copy_width, copy_height, copy_depth) Copy passes do not have any state. The barrier command GPU engines are a highly pipelined architecture. When executing commands in command queues, the GPU engine will run multiple commands simultaneously to ensure every pieline stage of the GPU engine is fully occupied to improve performance. The driver only guarantees that commands submitted earier will start executing earier, but there is no guarantee of the finish order of such commands. This can cause problems if commands in the same command queue have dependencies that the later command must be executed after the previous command is fully finished. In modern graphics APIs, the user must emit barrier commands explicitly to synchronize such dependencies, so that the driver will block succeeding commands from executing until the specified previous pipeline stage is finished. In LunaSDK, barriers are specified by declaring resource barriers, and are submitted by ICommandBuffer::resource_barrier(buffer_barriers, texture_barriers) . One resource barrier declares one resource, and the state of resource before and after the barrier. The resource state describes the role the resource plays when being used by one GPU engine, possible resource states for buffers and textures are described by BufferStateFlag and TextureStateFlag , including: BufferStateFlag::indirect_argument BufferStateFlag::vertex_buffer BufferStateFlag::index_buffer BufferStateFlag::uniform_buffer_vs BufferStateFlag::shader_read_vs BufferStateFlag::uniform_buffer_ps BufferStateFlag::shader_read_ps BufferStateFlag::shader_write_ps BufferStateFlag::uniform_buffer_cs BufferStateFlag::shader_read_cs BufferStateFlag::shader_write_cs BufferStateFlag::copy_dest BufferStateFlag::copy_source TextureStateFlag::shader_read_vs TextureStateFlag::shader_read_ps TextureStateFlag::shader_write_ps TextureStateFlag::color_attachment_read TextureStateFlag::color_attachment_write TextureStateFlag::depth_stencil_attachment_read TextureStateFlag::depth_stencil_attachment_write TextureStateFlag::resolve_attachment TextureStateFlag::shader_read_cs TextureStateFlag::shader_write_cs TextureStateFlag::copy_dest TextureStateFlag::copy_source TextureStateFlag::present Multiple states can be bit-OR combined so long as they are compatible to each other, for example, the resource state can be TextureStateFlag::shader_read_vs | TextureStateFlag::shader_read_ps if the texture will be read by both vertex shader and pixel shader. A resource barrier tells the driver to wait for the before pipeline stage that uses the resource to finish before allowing the after pipeline state to access the resource, this barrier also deals the cache visibility so that the after pipeline state always have the latest resource data. Multiple resource barriers can be batched and submitted in one call, which is suggested so that the driver can handle all resource barriers in one physical barrier command. When specifying resource barriers, the before state of one resource barrier for one resource must match the after state of the last resource barrier for the same resource. RHI also tracks the resource state internally, so that in most cases the user can simple specify BufferStateFlag::automatic or TextureStateFlag::automatic as the before state of one resource, which tells RHI to read the internal state recorded for the resource on the last source barrier. The resource state tracking is valid even between multiple command buffers and multiple command queues. There are some rules that must comply when using barriers: One resource can only be used by one command queue at one time. If multiple command queues need to access the same resource, they must be synchronized using fences. See \"Multi-queues Synchronization\" section of \"Command Recording and Submission\" for the usage of fences. When using one resource that is previously used by another command queue, always submit a barrier before using the resource, even if the resource state is not changed. This is because different command queues may use different internal texture layouts and may have different cache visibility for the same resource state. Command buffers submitted earier to the command queue must be executed earier than command buffers submitted later if they access the same resource because the resource state tracking system updates resources' global states when submitting command buffers, so that different submission order will cause the track system's recorded state being inconsistent with the resource's real state. For barriers submitted within a render pass, the following additional rules must be complied, according to Vulkan specifications : Buffer barriers cannot be submitted. Texture barriers can only including textures used as attachments for the render pass.","title":"Recording Commands"},{"location":"manual/rhi/recording_commands/#recording-commands","text":"This section describes commands that can be added to one command buffer. In RHI, we have four kinds of commands: Pass begin/end commands. Render commands, which can only be added in render passes. Compute commands, which can only be added in compute passes. Copy command, which can only be added in copy passes. The barrier command. Profile commands.","title":"Recording Commands"},{"location":"manual/rhi/recording_commands/#pass-beginend-commands","text":"Passes are device-specific states (contexts) that is set up in order to perform a certain kind of tasks. For example, in order to draw primitives, the device need a render pass setup, so that it can prepare framebuffers, pipeline states and other states for the draw call. In RHI, we have three kinds of passes: render pass , compute pass and copy pass . All passes are opened by begin_xxx_pass , and are closed by end_xxx_pass , one command buffer can only have one open pass at one time, the user should close the last pass begin opening a new pass. Render passes are opened by ICommandBuffer::begin_render_pass(desc) , and are closed by ICommandBuffer::end_render_pass() . When beginning a new render pass, the user should provide a render pass descriptor ( RenderPassDesc ) which specifies a set of attachments and query heaps used for the render pass. Attachments are textures that are used to store the render result of the render pass, including: Color attachments: One render pass can specify up to 8 color attachments used for storing render results. Depth stencil attachments: Stores the depth stencil information of the render result and used for depth stencil testing during the draw process. Resolve attachments: If MSAA is enabled, the user can specify resolve attachments that stores the resolve result of color attachments automatically when the render pass ends. Currently, this is the only way to resolve MSAA textures. Query heaps can be used to query statistics during a render pass, including: Timestamp: Queries the GPU timestamp at the beginning and end of the render pass to measure the GPU time cost for the pass. Pipeline statistics: Queries the pipeline statistics information during the render pass, like how many time vertex shaders and pixel shaders are invoked, how many primitives are drawn, etc. Occlusion: Queries the number of pixels that pass depth/stencil test. All attachments and query heaps are bound to the render pass until ICommandBuffer::end_render_pass() is called. The user cannot change such bindings during a render pass. Compute passes are opened by ICommandBuffer::begin_compute_pass(desc) , and are closed by ICommandBuffer::end_compute_pass() . When beginning a new compute pass, the user can provide a compute pass descriptor ( ComputePassDesc ) which specifies query heaps used for the compute pass, including: Timestamp: Queries the GPU timestamp at the beginning and end of the compute pass to measure the GPU time cost for the pass. Pipeline statistics: Queries the number of compute shader invocations during the compute pass. Copy passes are opened by ICommandBuffer::begin_copy_pass(desc) , and and are closed by ICommandBuffer::end_copy_pass() . When beginning a new copy pass, the user can provide a copy pass descriptor ( CopyPassDesc ) which specifies query heaps used for the copy pass, which can query for GPU timestamps and beginning and end of the copy pass. All pipeline states must be valid only in a pass scope, when one pass is closed, all pipeline states will be invalidated and must be set again in the next pass. Such state includes: Pipeline layout objectss. Pipeline state objects. Descriptor sets. Vertex buffers and index buffers. Viewports and scissor rects. Blend factors. Stencil reference values.","title":"Pass begin/end commands"},{"location":"manual/rhi/recording_commands/#render-commands","text":"Render commands are commands used for rendering tasks, they can only be recorded between ICommandBuffer::begin_render_pass(desc) and ICommandBuffer::end_render_pass() . Render commands have three types: graphics pipeline setup commands, draw commands and occlusion query commands. The following commands are graphics pipeline setup commands: ICommandBuffer::set_graphics_pipeline_layout(pipeline_layout) ICommandBuffer::set_graphics_pipeline_state(pso) ICommandBuffer::set_vertex_buffers(start_slot, views) ICommandBuffer::set_index_buffer(view) ICommandBuffer::set_graphics_descriptor_set(index, descriptor_set) ICommandBuffer::set_graphics_descriptor_sets(start_index, descriptor_sets) ICommandBuffer::set_viewport(viewport) ICommandBuffer::set_viewports(viewports) ICommandBuffer::set_scissor_rect(rect) ICommandBuffer::set_scissor_rects(rects) ICommandBuffer::set_blend_factor(blend_factor) ICommandBuffer::set_stencil_ref(stencil_ref) The following commands are draw commands: ICommandBuffer::draw(vertex_count, start_vertex_location) ICommandBuffer::draw_indexed(index_count, start_index_location, base_vertex_location) ICommandBuffer::draw_instanced(vertex_count_per_instance, instance_count, start_vertex_location, start_instance_location) ICommandBuffer::draw_indexed_instanced(index_count_per_instance, instance_count, start_index_location, base_vertex_location, start_instance_location) The following commands are occlusion query commands: ICommandBuffer::begin_occlusion_query(mode, index) ICommandBuffer::end_occlusion_query(index) The graphics pipeline behaves like a state machine: states set by ICommandBuffer::set_xxx stays in the state until changed by another set state call. All graphics pipeline states are undefined at the beginning of one render pass, the user should set all necessary states explicitly before she issues the draw call. All states will be lost at the end of the render pass, the user should set such states again for one new render pass. When setting pipeline states, the user should following the following rules: ICommandBuffer::set_graphics_descriptor_set(index, descriptor_set) and ICommandBuffer::set_graphics_descriptor_sets(start_index, descriptor_sets) must be called after a valid graphics pipeline layout is set by ICommandBuffer::set_graphics_pipeline_layout(pipeline_layout) . The following graphics pipeline setup order is suggested: ICommandBuffer::set_graphics_pipeline_layout(pipeline_layout) ICommandBuffer::set_graphics_pipeline_state(pso) ICommandBuffer::set_vertex_buffers(start_slot, views) / ICommandBuffer::set_index_buffer(view) / ICommandBuffer::set_graphics_descriptor_set(index, descriptor_set) / ICommandBuffer::set_graphics_descriptor_sets(start_index, descriptor_sets) ICommandBuffer::set_viewport(viewport) / ICommandBuffer::set_viewports(viewports) / ICommandBuffer::set_scissor_rect(rect) / ICommandBuffer::set_scissor_rects(rects) / ICommandBuffer::set_blend_factor(blend_factor) / ICommandBuffer::set_stencil_ref(stencil_ref)","title":"Render commands"},{"location":"manual/rhi/recording_commands/#compute-commands","text":"Compute commands are commands used for computing tasks, they can only be recorded between ICommandBuffer::begin_compute_pass(desc) and ICommandBuffer::end_compute_pass() . Compute commands have two types: compute pipeline setup commands and the dispatch command. The following commands are compute pipeline setup commands: ICommandBuffer::set_compute_pipeline_layout(pipeline_layout) ICommandBuffer::set_compute_pipeline_state(pso) ICommandBuffer::set_compute_descriptor_set(index, descriptor_set) ICommandBuffer::set_compute_descriptor_sets(start_index, descriptor_sets) The dispath command is: 1. ICommandBuffer::dispatch(thread_group_count_x, thread_group_count_y, thread_group_count_z) The compute pipeline behaves like a state machine: states set by ICommandBuffer::set_xxx stays in the state until changed by another set state call. All compute pipeline states are undefined at the beginning of one compute pass, the user should set all necessary states explicitly before she dispatches the compute task. All states will be lost at the end of the compute pass, the user should set such states again for one new compute pass. When setting compute pipeline states, the user should following the following rules: ICommandBuffer::set_compute_descriptor_set(index, descriptor_set) and ICommandBuffer::set_compute_descriptor_sets(start_index, descriptor_sets) must be called after a valid compute pipeline layout is set by ICommandBuffer::set_compute_pipeline_layout(pipeline_layout) . The following compute pipeline setup order is suggested: ICommandBuffer::set_compute_pipeline_layout(pipeline_layout) ICommandBuffer::set_compute_pipeline_state(pso) ICommandBuffer::set_compute_descriptor_set(index, descriptor_set) / ICommandBuffer::set_compute_descriptor_sets(start_index, descriptor_sets)","title":"Compute commands"},{"location":"manual/rhi/recording_commands/#copy-commands","text":"Copy commands are commands used for coping data between resources, they can only be recorded between ICommandBuffer::begin_compute_pass(desc) and ICommandBuffer::end_compute_pass() . The following commands are copy commands: copy_resource(dst, src) copy_buffer(dst, dst_offset, src, src_offset, copy_bytes) copy_texture(dst, dst_subresource, dst_x, dst_y, dst_z, src, src_subresource, src_x, src_y, src_z, copy_width, copy_height, copy_depth) copy_buffer_to_texture(dst, dst_subresource, dst_x, dst_y, dst_z, src, src_offset, src_row_pitch, src_slice_pitch, copy_width, copy_height, copy_depth) copy_texture_to_buffer(dst, dst_offset, dst_row_pitch, dst_slice_pitch, src, src_subresource, src_x, src_y, src_z, copy_width, copy_height, copy_depth) Copy passes do not have any state.","title":"Copy commands"},{"location":"manual/rhi/recording_commands/#the-barrier-command","text":"GPU engines are a highly pipelined architecture. When executing commands in command queues, the GPU engine will run multiple commands simultaneously to ensure every pieline stage of the GPU engine is fully occupied to improve performance. The driver only guarantees that commands submitted earier will start executing earier, but there is no guarantee of the finish order of such commands. This can cause problems if commands in the same command queue have dependencies that the later command must be executed after the previous command is fully finished. In modern graphics APIs, the user must emit barrier commands explicitly to synchronize such dependencies, so that the driver will block succeeding commands from executing until the specified previous pipeline stage is finished. In LunaSDK, barriers are specified by declaring resource barriers, and are submitted by ICommandBuffer::resource_barrier(buffer_barriers, texture_barriers) . One resource barrier declares one resource, and the state of resource before and after the barrier. The resource state describes the role the resource plays when being used by one GPU engine, possible resource states for buffers and textures are described by BufferStateFlag and TextureStateFlag , including: BufferStateFlag::indirect_argument BufferStateFlag::vertex_buffer BufferStateFlag::index_buffer BufferStateFlag::uniform_buffer_vs BufferStateFlag::shader_read_vs BufferStateFlag::uniform_buffer_ps BufferStateFlag::shader_read_ps BufferStateFlag::shader_write_ps BufferStateFlag::uniform_buffer_cs BufferStateFlag::shader_read_cs BufferStateFlag::shader_write_cs BufferStateFlag::copy_dest BufferStateFlag::copy_source TextureStateFlag::shader_read_vs TextureStateFlag::shader_read_ps TextureStateFlag::shader_write_ps TextureStateFlag::color_attachment_read TextureStateFlag::color_attachment_write TextureStateFlag::depth_stencil_attachment_read TextureStateFlag::depth_stencil_attachment_write TextureStateFlag::resolve_attachment TextureStateFlag::shader_read_cs TextureStateFlag::shader_write_cs TextureStateFlag::copy_dest TextureStateFlag::copy_source TextureStateFlag::present Multiple states can be bit-OR combined so long as they are compatible to each other, for example, the resource state can be TextureStateFlag::shader_read_vs | TextureStateFlag::shader_read_ps if the texture will be read by both vertex shader and pixel shader. A resource barrier tells the driver to wait for the before pipeline stage that uses the resource to finish before allowing the after pipeline state to access the resource, this barrier also deals the cache visibility so that the after pipeline state always have the latest resource data. Multiple resource barriers can be batched and submitted in one call, which is suggested so that the driver can handle all resource barriers in one physical barrier command. When specifying resource barriers, the before state of one resource barrier for one resource must match the after state of the last resource barrier for the same resource. RHI also tracks the resource state internally, so that in most cases the user can simple specify BufferStateFlag::automatic or TextureStateFlag::automatic as the before state of one resource, which tells RHI to read the internal state recorded for the resource on the last source barrier. The resource state tracking is valid even between multiple command buffers and multiple command queues. There are some rules that must comply when using barriers: One resource can only be used by one command queue at one time. If multiple command queues need to access the same resource, they must be synchronized using fences. See \"Multi-queues Synchronization\" section of \"Command Recording and Submission\" for the usage of fences. When using one resource that is previously used by another command queue, always submit a barrier before using the resource, even if the resource state is not changed. This is because different command queues may use different internal texture layouts and may have different cache visibility for the same resource state. Command buffers submitted earier to the command queue must be executed earier than command buffers submitted later if they access the same resource because the resource state tracking system updates resources' global states when submitting command buffers, so that different submission order will cause the track system's recorded state being inconsistent with the resource's real state. For barriers submitted within a render pass, the following additional rules must be complied, according to Vulkan specifications : Buffer barriers cannot be submitted. Texture barriers can only including textures used as attachments for the render pass.","title":"The barrier command"},{"location":"manual/rhi/resources/","text":"Resources Resources ( IResource ) are GPU-accessible memories that stores certain data that can be used for reading, writing and sampling by GPU. Resources have two types: buffers and textures . Buffer resources can contain arbitrary binary data, and is usually used for storing parameters, geometry data, material data and so on. Texture resrouces can only contain image data of certain formats, and support hardware data sampling using samplers. Memory types Memory type defines the memory properties of the resource, like which heap to allocate the memory for the resource, and the CPU access policy of the allocated memory. In RHI, we have three memory types: local , upload and readback . The local memory type is allocated on memory that is visible only to GPU. Such memory gains maximum GPU bandwidth, but cannot be accessed by CPU. On platforms with non-uniform memory architecture (NUMA), the local memory will be allocated on video memory, which cannot be accessed by CPU; in a platform with uniform memory architecture (UMA), the local memory will be allocated on system memory. While it is technically possible for CPU to access local memory on UMA, preventing such access gives the hardware and driver more rooms for optimizing GPU access efficiency. The upload memory type is allocated on system memory that is optimized for CPU writing. GPU cannot write to this memory and GPU reading from upload memory is slow. On NUMA platfroms, reading data from upload memory from GPU requires data transmission through PCI-Express bus, which is much slower than reading data in local memory from GPU. We recommend using upload memory only for uploading data to local memory or reading the data only once per CPU write. The readback memory type is allocated on system memory that is optimized for CPU reading. GPU writing to read back memory is slow, and the only operation allowed for GPU is to copy data to the memory. On NUMA platfroms, writing data to readback memory from GPU requires data transmission through PCI-Express bus, which is a slow operation. The user should choose the suitable memory type based on the use situation. Here are some basic principles: If you need to create texture resources, use local memory. If you need to upload texture data from CPU side, use upload memory to copy data to the local memory. If you don't need to access resource data from CPU, use local memory. If you only need to upload data from CPU side once, like setting the initial data for static vertex and index buffers, use one local memory to store the data, then use one temporary upload memory to copy data to the local memory. If you need to upload data from CPU side multiple times, but the data is read by GPU only once per CPU update, use upload memory. If you need to upload data from CPU side multiple times, and the data will be read by GPU multiple times per CPU update, use one local memory resource for GPU access and one upload memory resource for CPU access, and copy data between two resources when needed. If you need to read resource data from CPU side, use readback memory. Buffers Buffers are memory blocks that can store arbitrary binary data. Typically, you use buffers to: Set uniform parameters that can be read by shaders using uniform buffers . Store mesh geometries for rendering using vertex buffers and index buffers . Pass array of structures (like model transform matrices, material parameters, etc.) using structured buffers . Copy data between host memory and device-local memory using upload buffers and readback buffers . Record GPU-generated draw and compute commands using indirect buffers . Buffers are described by BufferDesc , and are created by IDevice::new_buffer(memory_type, desc) . When creating buffers, the user must specify the memory type of the buffer, and one BufferDesc descriptor for the buffer. Properties for one buffer includes the size of the buffer and possible usages of the buffer. If one buffer is created using upload or readback memory type, the application can fetch one pointer to the buffer memory by calling IBuffer::map , and must release the pointer when the application no longer needs access to the buffer memory by calling IBuffer::unmap . Buffer usages Buffer usages specify the possible usages of one buffer. One buffer can have multiple usages, which can be specified using a bitwise OR combination of multiple BufferUsageFlag flags. The buffer usages include: copy_source : Allows this buffer to be bound as copy source. copy_dest : Allows this buffer to be bound as copy destination. uniform_buffer : Allows this buffer to be bound to a uniform buffer view. read_buffer : Allows this buffer to be bound to a read buffer view. read_write_buffer : Allows this buffer to be bound to a read-write buffer view. vertex_buffer : Allows this buffer to be bound as a vertex buffer. index_buffer : Allows this buffer to be bound as a index buffer. indirect_buffer : Allows this buffer to be bound as a buffer providing indirect draw arguments. All possible usages for one buffer must be specified when the buffer is created, one buffer cannot be Usage patterns Buffers themselves are scheme-less (or typeless), they can store arbitrary binary data, and it is up to the user how to interpret buffer data. Here we list some typeical usage patterns for buffers. Uniform buffer Uniform buffers are used to store uniform parameters that will be passed to all shader threads, they are set by the application and is read-only in shader code. To create a uniform buffer, call IDevice::new_buffer(memory_type, desc) with MemoryType::upload and BufferUsageFlag::uniform_buffer . The device has memory alignment requires for uniform buffers, which can be fetched by IDevice::get_uniform_buffer_data_alignment() . The buffer size for one uniform buffer must satisfy the alignment requires: #include <Luna/RHI/Device.hpp> #include <Luna/RHI/Buffer.hpp> usize alignment = device->get_uniform_buffer_data_alignment(); BufferDesc desc; desc.size = align_upper(sizeof(MyUniformBuffer), alignment); desc.usages = BufferUsageFlag::uniform_buffer; desc.flags = ResourceFlag::none; luexp(buffer, device->new_buffer(MemoryType::upload, desc)); You can also pack multiple uniform buffers into one big buffer. In such case, the offset and size of each uniform buffer must also satisfy alignment requirements for uniform buffers: #include <Luna/RHI/Device.hpp> #include <Luna/RHI/Buffer.hpp> usize alignment = device->get_uniform_buffer_data_alignment(); usize size = 0; for(auto& my_buffer : my_buffers) { my_buffer.uniform_buffer_offset = size; my_buffer.uniform_buffer_size = align_upper(my_buffer.data_size, alignment); size += my_buffer.uniform_buffer_size; } BufferDesc desc; desc.size = size; desc.usages = BufferUsageFlag::uniform_buffer; desc.flags = ResourceFlag::none; lulet(buffer, device->new_buffer(MemoryType::upload, desc)); When binding multiple uniform buffers in one IBuffer to descriptor sets, use BufferViewDesc::uniform_buffer(buffer, offset, size) to create proper buffer views for uniform buffers: #include <Luna/RHI/Device.hpp> #include <Luna/RHI/Buffer.hpp> #include <Luna/RHI/DescriptorSet.hpp> Ref<IDescriptorSet> ds = get_my_descriptor_set(); Ref<IBuffer> ub = get_my_uniform_buffer(); Vector<BufferViewDesc> buffer_views; for(auto& my_buffer : my_buffers) { BufferViewDesc view = BufferViewDesc::uniform_buffer(ub, my_buffer.uniform_buffer_offset, my_buffer.uniform_buffer_size); buffer_views.push_back(view); } WriteDescriptorSet write = WriteDescriptorSet::uniform_buffer_view_array(MY_UNIFORM_BUFFER_BINDING_SLOT, 0, {buffer_views.data(), buffer_views.size()}); luexp(ds->update_descriptors({&write, 1})); Vertex buffer and index buffer Vertex buffers and index buffers store vertex data of one geometry. To create a vertex buffer, call IDevice::new_buffer(memory_type, desc) with MemoryType::local and BufferUsageFlag::vertex_buffer | BufferUsageFlag::copy_dest . To create a index buffer, call IDevice::new_buffer(memory_type, desc) with MemoryType::local and BufferUsageFlag::index_buffer | BufferUsageFlag::copy_dest . The data of vertex buffers and index buffers can be uploaded using copy_resource_data(command_buffer, copies) : #include <Luna/RHI/Device.hpp> #include <Luna/RHI/Buffer.hpp> #include <Luna/RHI/Utility.hpp> u64 vb_size = sizeof(MyVertex) * num_vertices; u64 ib_size = sizeof(u32) * num_indices; BufferDesc desc; desc.size = vb_size; desc.usages = BufferUsageFlag::vertex_buffer | BufferUsageFlag::copy_dest; desc.flags = ResourceFlag::none; lulet(vb, device->new_buffer(MemoryType::local, desc)); desc.size = ib_size; desc.usages = BufferUsageFlag::index_buffer | BufferUsageFlag::copy_dest; lulet(ib, device->new_buffer(MemoryType::local, desc)); CopyResourceData copies[2] = { CopyResourceData::write_buffer(vb, 0, my_vertex_data, vb_size), CopyResourceData::write_buffer(ib, 0, my_index_data, ib_size) }; luexp(copy_resource_data(get_copy_command_buffer(), {copies, 2})); Vertex buffers and index buffers are described by VertexBufferView and IndexBufferView , and are bound to the pipeline directly by calling ICommandBuffer::set_vertex_buffers(start_slot, views) and ICommandBuffer::set_index_buffer(view) : #include <Luna/RHI/CommandBuffer.hpp> ICommandBuffer* cmdbuf = get_render_command_buffer(); VertexBufferView vb_view = VertexBufferView(vb, 0, sizeof(MyVertex) * num_vertices, sizeof(MyVertex)); cmdbuf->set_vertex_buffers(0, {&vb_view, 1}); IndexBufferView ib_view = IndexBufferView(ib, 0, sizeof(u32) * num_indices, Format::r32_uint); cmdbuf->set_index_buffer(ib_view); Structured buffers Structured buffers can be used to store one array of structures, enabling shader code to index (read and write) any element in the buffer. Such buffers can be useful to store large-sized array like the model-to-world matrices for all meshes, the material parameters for all materials of the same type, etc. To create a structured buffer, call IDevice::new_buffer(memory_type, desc) with MemoryType::local or MemoryType::upload , depends on your update frequency, and BufferUsageFlag::read_buffer if you only need to read the buffer data from shader code, or BufferUsageFlag::read_write_buffer if you need to read and write buffer data from shader code. #include <Luna/RHI/Device.hpp> #include <Luna/RHI/Buffer.hpp> BufferDesc desc; desc.size = sizeof(MyBufferElement) * num_elements; desc.usages = BufferUsageFlag::read_buffer; desc.flags = ResourceFlag::none; luexp(buffer, device->new_buffer(MemoryType::upload, desc)); To bind one structured buffer to the descriptor set, use BufferViewDesc::structured_buffer(buffer, first_element, element_count, element_size) to create a view for the buffer: #include <Luna/RHI/Device.hpp> #include <Luna/RHI/Buffer.hpp> #include <Luna/RHI/DescriptorSet.hpp> Ref<IDescriptorSet> ds = get_my_descriptor_set(); Ref<IBuffer> buffer = get_my_buffer(); BufferViewDesc buffer_view = BufferViewDesc::structured_buffer(buffer, 0, num_elements, sizeof(MyBufferElement)); WriteDescriptorSet write = WriteDescriptorSet::read_buffer_view(MY_STRUCTURED_BUFFER_BINDING_SLOT, buffer_view); luexp(ds->update_descriptors({&write, 1})); Textures Textures are memory blocks that store 1D, 2D or 3D image data, and support hardware data sampling using samplers. Typically, you use textures to: Store images loaded from files to use them in rendering or computing. Store the render result of one render pass. Store the depth information of the scene, which will be used in depth and stencil testing. Store the intermediate render result in a multi-pass render pipeline. Textures are described by TextureDesc , and are created by IDevice::new_texture(memory_type, desc, optimized_clear_value) . When creating textures, the user must specify one TextureDesc descriptor for the texture. Currently, textures can only be created in local memory, so memory_type should always by MemoryType::local when creating textures. The user can also specify one optional optimized clear value for one texture, which may improve performance on some hardware when the texture is cleared using the same clear value as the specified. Texture usages Texture usages specify the possible usages of one texture. One texture can have multiple usages, which can be specified using a bitwise OR combination of multiple TextureUsageFlag flags. The texture usages include: copy_source : Allows this texture to be bound as copy source. copy_dest : Allows this texture to be bound as copy destination. read_texture : Allows this texture to be bound to a read texture view. read_write_texture : Allows this texture to be bound to a read-write texture view. color_attachment : Allows this texture to be bound as color attachment. depth_stencil_attachment : Allows this texture to be bound as depth stencil attachment. resolve_attachment : Allows this texture to be bound to a resolve attachment. cube : Allows this texture to be bound to a texture cube view. Texture types and dimensions Texture types identify the type of the texture, including: TextureType::tex1d : 1-dimensional texture, which represents a vector of pixels. TextureType::tex2d : 2-dimensional texture, which represents a 2D matrix of pixels. TextureType::tex3d : 3-dimensional texture, which represents a 3D matrix of pixels. Textures have three dimensions of sizes: width , height and depth : For 1D textures, only width is available, height and depth must always be 1. For 2D textures, both width and height are available, depth must always be 1. For 3D textures, width, height and depth are available. Pixel format One texture also have a particular pixel format, which is identified by Format enumeration. Most formats are formed by a combination of the following three parts: Number of color channels. One pixel may have one to four color channels, identified as r , g , b and a . The bit width of every color channel. One pixel may have 8 to 64 bits per channel. The number format of every color channel. One pixel may have the following number formats: uint : unsigned integer. sing : signed integer. unorm : unsigned normalized integer that maps the unsigned integer to [0.0, 1.0]. For example, if every channel have 8 bits, then the value range [0, 255] is mapped to [0.0, 1.0] in shader automatically. snorm : signed normalized integer that maps the signed integer to [-1.0, 1.0]. For example, if every channel have 8 bits, then the value range [-128, 127] is mapped to [-1.0, 1.0] in shader automatically. float : floating-point number. For exmaple: Format::rgba8_unorm represents a 4-channels pixel format, where every channel stores one 8-bit unsigned integer that will be mapped to [0.0, 1.0] in shader. Format::rgba16_float represents a 4-channels pixel format, where every channel stores one 16-bit floating-point number (half-precision). Format::rg32_float represents a 2-channels pixel format, where every channel stores one 32-bit floating-point number (single-precision). There are also some special formats: Formats begin with d like Format::d16_unorm , Format::d32_float , etc. are special formats used for depth stencil textures. Formats ends with _srgb are sRGB formats, the hardware will perform sRGB to linear color conversion when reading data from such formats. Some formats may reorder color channels, like Format::bgra8_unorm . Such formats are usually used for special cases like back buffers, where hardware has special requirements for the format that can be used for presenting the render results. The color channels will always be reordered to rgba implicitly when used in shaders. Some formats are compressed formats like BC, ASTC, etc. They uses pixel compression techniques to reduce texture file size and the memory consumption when being loaded. Compressed formats often has special requirements for texture dimensions sizes. For example, block compression (BC) format series only works on 2D textures, and requires the width and height of the texture being multiple of 4. Such formats will be hardware-uncompressed automatically when being sampled in shader. Mipmap Mipmapping is a computer graphics technology that reduces aliasing artifacts when the texture is sampled in a lower resolution than the texture's original resolution. Such artifacts is usually called Moir\u00e9 pattern . When mipmapping is used, textures will be stored as as a sequence of sub-textures. The original texture is the first sub-texture in the sequence (called mip level 0 ), and every succeeding sub-texture in the sequence is a coarse representation of the previous sub-texture. In particular, for the mip level N sub-texture in the sequence, we have: tex[N].width = ceil(tex[N-1].width / 2.0) tex[N].height = ceil(tex[N-1].height / 2.0) tex[N].depth = ceil(tex[N-1].depth / 2.0) The user may control the number of sub-textures in the mipmap sequence by setting mip_levels . If this is 0 , the system will generate a full mipmap chain for the texture, which repeats the half-divide process until the last sub-texture in the mipmap sequence has width, height and depth all equal to 1 . Texture array One 1D and 2D texture resource may contain multiple textures, which forms a texture array. The texture size, pixel format, usages and other properties apply to all textures in the texture array. If mipmaping is used, each texture in the texture array will have its independent mipmap chain. One texture array is bound to the pipeline as a single resource, and the user can access each texture of the texture array independently in shader code. Subresources Subresources are sub-textures that belongs to one texture resource. One texture resource may have mipmap subresources and/or array subresources, the total number of subresources one texture resource have are mip_levels * array_size . The following figure shows one 8x8 texture resource with 4 mip levels and 3 array elements, which counts to 12 subresources in total. To index one subresource, the user should pass the mip index and array index of the subresource. Every subresource in one texture can be indexed and manipulated independently. Usage patterns Here we list some typeical usage patterns for textures. Color attachments and depth stencil attachments Textures can be used as color attachments and depth stencil attachments for render passes. To create one texture used as color attachment, add TextureUsageFlag::color_attachment usage flag to texture usages. To create one texture used as depth stencil attachment, choose one depth format for the texture and add TextureUsageFlag::depth_stencil_attachment usage flag to the texture usages. Attachments usually have both mip_levels and array_size set to 1 . To bind attachments to render passes, firstly set textures in RenderPassDesc , then call ICommandBuffer::begin_render_pass(desc) with the render pass descriptor. Attachments will be bound to the render pass until ICommandBuffer::end_render_pass() is called. Static textures Static textures store data loaded from image files, such texture is usually used for texturing models in the scene. To create one static texture, firstly add TextureUsageFlag::read_texture and TextureUsageFlag::copy_dest usage flags to texture usages. mip_levels is usually set to 0 to generate a full mipmap chain for such texture. After the texture is created, use copy_resource_data(command_buffer, copies) or upload buffers to upload texture data to the mip 0 of the texture. After the texture is created, we need to generate mipmaps for the texture. This can be done by using a compute shader to downsample from a detailed mip to a coarse mip.","title":"Resources"},{"location":"manual/rhi/resources/#resources","text":"Resources ( IResource ) are GPU-accessible memories that stores certain data that can be used for reading, writing and sampling by GPU. Resources have two types: buffers and textures . Buffer resources can contain arbitrary binary data, and is usually used for storing parameters, geometry data, material data and so on. Texture resrouces can only contain image data of certain formats, and support hardware data sampling using samplers.","title":"Resources"},{"location":"manual/rhi/resources/#memory-types","text":"Memory type defines the memory properties of the resource, like which heap to allocate the memory for the resource, and the CPU access policy of the allocated memory. In RHI, we have three memory types: local , upload and readback . The local memory type is allocated on memory that is visible only to GPU. Such memory gains maximum GPU bandwidth, but cannot be accessed by CPU. On platforms with non-uniform memory architecture (NUMA), the local memory will be allocated on video memory, which cannot be accessed by CPU; in a platform with uniform memory architecture (UMA), the local memory will be allocated on system memory. While it is technically possible for CPU to access local memory on UMA, preventing such access gives the hardware and driver more rooms for optimizing GPU access efficiency. The upload memory type is allocated on system memory that is optimized for CPU writing. GPU cannot write to this memory and GPU reading from upload memory is slow. On NUMA platfroms, reading data from upload memory from GPU requires data transmission through PCI-Express bus, which is much slower than reading data in local memory from GPU. We recommend using upload memory only for uploading data to local memory or reading the data only once per CPU write. The readback memory type is allocated on system memory that is optimized for CPU reading. GPU writing to read back memory is slow, and the only operation allowed for GPU is to copy data to the memory. On NUMA platfroms, writing data to readback memory from GPU requires data transmission through PCI-Express bus, which is a slow operation. The user should choose the suitable memory type based on the use situation. Here are some basic principles: If you need to create texture resources, use local memory. If you need to upload texture data from CPU side, use upload memory to copy data to the local memory. If you don't need to access resource data from CPU, use local memory. If you only need to upload data from CPU side once, like setting the initial data for static vertex and index buffers, use one local memory to store the data, then use one temporary upload memory to copy data to the local memory. If you need to upload data from CPU side multiple times, but the data is read by GPU only once per CPU update, use upload memory. If you need to upload data from CPU side multiple times, and the data will be read by GPU multiple times per CPU update, use one local memory resource for GPU access and one upload memory resource for CPU access, and copy data between two resources when needed. If you need to read resource data from CPU side, use readback memory.","title":"Memory types"},{"location":"manual/rhi/resources/#buffers","text":"Buffers are memory blocks that can store arbitrary binary data. Typically, you use buffers to: Set uniform parameters that can be read by shaders using uniform buffers . Store mesh geometries for rendering using vertex buffers and index buffers . Pass array of structures (like model transform matrices, material parameters, etc.) using structured buffers . Copy data between host memory and device-local memory using upload buffers and readback buffers . Record GPU-generated draw and compute commands using indirect buffers . Buffers are described by BufferDesc , and are created by IDevice::new_buffer(memory_type, desc) . When creating buffers, the user must specify the memory type of the buffer, and one BufferDesc descriptor for the buffer. Properties for one buffer includes the size of the buffer and possible usages of the buffer. If one buffer is created using upload or readback memory type, the application can fetch one pointer to the buffer memory by calling IBuffer::map , and must release the pointer when the application no longer needs access to the buffer memory by calling IBuffer::unmap .","title":"Buffers"},{"location":"manual/rhi/resources/#buffer-usages","text":"Buffer usages specify the possible usages of one buffer. One buffer can have multiple usages, which can be specified using a bitwise OR combination of multiple BufferUsageFlag flags. The buffer usages include: copy_source : Allows this buffer to be bound as copy source. copy_dest : Allows this buffer to be bound as copy destination. uniform_buffer : Allows this buffer to be bound to a uniform buffer view. read_buffer : Allows this buffer to be bound to a read buffer view. read_write_buffer : Allows this buffer to be bound to a read-write buffer view. vertex_buffer : Allows this buffer to be bound as a vertex buffer. index_buffer : Allows this buffer to be bound as a index buffer. indirect_buffer : Allows this buffer to be bound as a buffer providing indirect draw arguments. All possible usages for one buffer must be specified when the buffer is created, one buffer cannot be","title":"Buffer usages"},{"location":"manual/rhi/resources/#usage-patterns","text":"Buffers themselves are scheme-less (or typeless), they can store arbitrary binary data, and it is up to the user how to interpret buffer data. Here we list some typeical usage patterns for buffers.","title":"Usage patterns"},{"location":"manual/rhi/resources/#uniform-buffer","text":"Uniform buffers are used to store uniform parameters that will be passed to all shader threads, they are set by the application and is read-only in shader code. To create a uniform buffer, call IDevice::new_buffer(memory_type, desc) with MemoryType::upload and BufferUsageFlag::uniform_buffer . The device has memory alignment requires for uniform buffers, which can be fetched by IDevice::get_uniform_buffer_data_alignment() . The buffer size for one uniform buffer must satisfy the alignment requires: #include <Luna/RHI/Device.hpp> #include <Luna/RHI/Buffer.hpp> usize alignment = device->get_uniform_buffer_data_alignment(); BufferDesc desc; desc.size = align_upper(sizeof(MyUniformBuffer), alignment); desc.usages = BufferUsageFlag::uniform_buffer; desc.flags = ResourceFlag::none; luexp(buffer, device->new_buffer(MemoryType::upload, desc)); You can also pack multiple uniform buffers into one big buffer. In such case, the offset and size of each uniform buffer must also satisfy alignment requirements for uniform buffers: #include <Luna/RHI/Device.hpp> #include <Luna/RHI/Buffer.hpp> usize alignment = device->get_uniform_buffer_data_alignment(); usize size = 0; for(auto& my_buffer : my_buffers) { my_buffer.uniform_buffer_offset = size; my_buffer.uniform_buffer_size = align_upper(my_buffer.data_size, alignment); size += my_buffer.uniform_buffer_size; } BufferDesc desc; desc.size = size; desc.usages = BufferUsageFlag::uniform_buffer; desc.flags = ResourceFlag::none; lulet(buffer, device->new_buffer(MemoryType::upload, desc)); When binding multiple uniform buffers in one IBuffer to descriptor sets, use BufferViewDesc::uniform_buffer(buffer, offset, size) to create proper buffer views for uniform buffers: #include <Luna/RHI/Device.hpp> #include <Luna/RHI/Buffer.hpp> #include <Luna/RHI/DescriptorSet.hpp> Ref<IDescriptorSet> ds = get_my_descriptor_set(); Ref<IBuffer> ub = get_my_uniform_buffer(); Vector<BufferViewDesc> buffer_views; for(auto& my_buffer : my_buffers) { BufferViewDesc view = BufferViewDesc::uniform_buffer(ub, my_buffer.uniform_buffer_offset, my_buffer.uniform_buffer_size); buffer_views.push_back(view); } WriteDescriptorSet write = WriteDescriptorSet::uniform_buffer_view_array(MY_UNIFORM_BUFFER_BINDING_SLOT, 0, {buffer_views.data(), buffer_views.size()}); luexp(ds->update_descriptors({&write, 1}));","title":"Uniform buffer"},{"location":"manual/rhi/resources/#vertex-buffer-and-index-buffer","text":"Vertex buffers and index buffers store vertex data of one geometry. To create a vertex buffer, call IDevice::new_buffer(memory_type, desc) with MemoryType::local and BufferUsageFlag::vertex_buffer | BufferUsageFlag::copy_dest . To create a index buffer, call IDevice::new_buffer(memory_type, desc) with MemoryType::local and BufferUsageFlag::index_buffer | BufferUsageFlag::copy_dest . The data of vertex buffers and index buffers can be uploaded using copy_resource_data(command_buffer, copies) : #include <Luna/RHI/Device.hpp> #include <Luna/RHI/Buffer.hpp> #include <Luna/RHI/Utility.hpp> u64 vb_size = sizeof(MyVertex) * num_vertices; u64 ib_size = sizeof(u32) * num_indices; BufferDesc desc; desc.size = vb_size; desc.usages = BufferUsageFlag::vertex_buffer | BufferUsageFlag::copy_dest; desc.flags = ResourceFlag::none; lulet(vb, device->new_buffer(MemoryType::local, desc)); desc.size = ib_size; desc.usages = BufferUsageFlag::index_buffer | BufferUsageFlag::copy_dest; lulet(ib, device->new_buffer(MemoryType::local, desc)); CopyResourceData copies[2] = { CopyResourceData::write_buffer(vb, 0, my_vertex_data, vb_size), CopyResourceData::write_buffer(ib, 0, my_index_data, ib_size) }; luexp(copy_resource_data(get_copy_command_buffer(), {copies, 2})); Vertex buffers and index buffers are described by VertexBufferView and IndexBufferView , and are bound to the pipeline directly by calling ICommandBuffer::set_vertex_buffers(start_slot, views) and ICommandBuffer::set_index_buffer(view) : #include <Luna/RHI/CommandBuffer.hpp> ICommandBuffer* cmdbuf = get_render_command_buffer(); VertexBufferView vb_view = VertexBufferView(vb, 0, sizeof(MyVertex) * num_vertices, sizeof(MyVertex)); cmdbuf->set_vertex_buffers(0, {&vb_view, 1}); IndexBufferView ib_view = IndexBufferView(ib, 0, sizeof(u32) * num_indices, Format::r32_uint); cmdbuf->set_index_buffer(ib_view);","title":"Vertex buffer and index buffer"},{"location":"manual/rhi/resources/#structured-buffers","text":"Structured buffers can be used to store one array of structures, enabling shader code to index (read and write) any element in the buffer. Such buffers can be useful to store large-sized array like the model-to-world matrices for all meshes, the material parameters for all materials of the same type, etc. To create a structured buffer, call IDevice::new_buffer(memory_type, desc) with MemoryType::local or MemoryType::upload , depends on your update frequency, and BufferUsageFlag::read_buffer if you only need to read the buffer data from shader code, or BufferUsageFlag::read_write_buffer if you need to read and write buffer data from shader code. #include <Luna/RHI/Device.hpp> #include <Luna/RHI/Buffer.hpp> BufferDesc desc; desc.size = sizeof(MyBufferElement) * num_elements; desc.usages = BufferUsageFlag::read_buffer; desc.flags = ResourceFlag::none; luexp(buffer, device->new_buffer(MemoryType::upload, desc)); To bind one structured buffer to the descriptor set, use BufferViewDesc::structured_buffer(buffer, first_element, element_count, element_size) to create a view for the buffer: #include <Luna/RHI/Device.hpp> #include <Luna/RHI/Buffer.hpp> #include <Luna/RHI/DescriptorSet.hpp> Ref<IDescriptorSet> ds = get_my_descriptor_set(); Ref<IBuffer> buffer = get_my_buffer(); BufferViewDesc buffer_view = BufferViewDesc::structured_buffer(buffer, 0, num_elements, sizeof(MyBufferElement)); WriteDescriptorSet write = WriteDescriptorSet::read_buffer_view(MY_STRUCTURED_BUFFER_BINDING_SLOT, buffer_view); luexp(ds->update_descriptors({&write, 1}));","title":"Structured buffers"},{"location":"manual/rhi/resources/#textures","text":"Textures are memory blocks that store 1D, 2D or 3D image data, and support hardware data sampling using samplers. Typically, you use textures to: Store images loaded from files to use them in rendering or computing. Store the render result of one render pass. Store the depth information of the scene, which will be used in depth and stencil testing. Store the intermediate render result in a multi-pass render pipeline. Textures are described by TextureDesc , and are created by IDevice::new_texture(memory_type, desc, optimized_clear_value) . When creating textures, the user must specify one TextureDesc descriptor for the texture. Currently, textures can only be created in local memory, so memory_type should always by MemoryType::local when creating textures. The user can also specify one optional optimized clear value for one texture, which may improve performance on some hardware when the texture is cleared using the same clear value as the specified.","title":"Textures"},{"location":"manual/rhi/resources/#texture-usages","text":"Texture usages specify the possible usages of one texture. One texture can have multiple usages, which can be specified using a bitwise OR combination of multiple TextureUsageFlag flags. The texture usages include: copy_source : Allows this texture to be bound as copy source. copy_dest : Allows this texture to be bound as copy destination. read_texture : Allows this texture to be bound to a read texture view. read_write_texture : Allows this texture to be bound to a read-write texture view. color_attachment : Allows this texture to be bound as color attachment. depth_stencil_attachment : Allows this texture to be bound as depth stencil attachment. resolve_attachment : Allows this texture to be bound to a resolve attachment. cube : Allows this texture to be bound to a texture cube view.","title":"Texture usages"},{"location":"manual/rhi/resources/#texture-types-and-dimensions","text":"Texture types identify the type of the texture, including: TextureType::tex1d : 1-dimensional texture, which represents a vector of pixels. TextureType::tex2d : 2-dimensional texture, which represents a 2D matrix of pixels. TextureType::tex3d : 3-dimensional texture, which represents a 3D matrix of pixels. Textures have three dimensions of sizes: width , height and depth : For 1D textures, only width is available, height and depth must always be 1. For 2D textures, both width and height are available, depth must always be 1. For 3D textures, width, height and depth are available.","title":"Texture types and dimensions"},{"location":"manual/rhi/resources/#pixel-format","text":"One texture also have a particular pixel format, which is identified by Format enumeration. Most formats are formed by a combination of the following three parts: Number of color channels. One pixel may have one to four color channels, identified as r , g , b and a . The bit width of every color channel. One pixel may have 8 to 64 bits per channel. The number format of every color channel. One pixel may have the following number formats: uint : unsigned integer. sing : signed integer. unorm : unsigned normalized integer that maps the unsigned integer to [0.0, 1.0]. For example, if every channel have 8 bits, then the value range [0, 255] is mapped to [0.0, 1.0] in shader automatically. snorm : signed normalized integer that maps the signed integer to [-1.0, 1.0]. For example, if every channel have 8 bits, then the value range [-128, 127] is mapped to [-1.0, 1.0] in shader automatically. float : floating-point number. For exmaple: Format::rgba8_unorm represents a 4-channels pixel format, where every channel stores one 8-bit unsigned integer that will be mapped to [0.0, 1.0] in shader. Format::rgba16_float represents a 4-channels pixel format, where every channel stores one 16-bit floating-point number (half-precision). Format::rg32_float represents a 2-channels pixel format, where every channel stores one 32-bit floating-point number (single-precision). There are also some special formats: Formats begin with d like Format::d16_unorm , Format::d32_float , etc. are special formats used for depth stencil textures. Formats ends with _srgb are sRGB formats, the hardware will perform sRGB to linear color conversion when reading data from such formats. Some formats may reorder color channels, like Format::bgra8_unorm . Such formats are usually used for special cases like back buffers, where hardware has special requirements for the format that can be used for presenting the render results. The color channels will always be reordered to rgba implicitly when used in shaders. Some formats are compressed formats like BC, ASTC, etc. They uses pixel compression techniques to reduce texture file size and the memory consumption when being loaded. Compressed formats often has special requirements for texture dimensions sizes. For example, block compression (BC) format series only works on 2D textures, and requires the width and height of the texture being multiple of 4. Such formats will be hardware-uncompressed automatically when being sampled in shader.","title":"Pixel format"},{"location":"manual/rhi/resources/#mipmap","text":"Mipmapping is a computer graphics technology that reduces aliasing artifacts when the texture is sampled in a lower resolution than the texture's original resolution. Such artifacts is usually called Moir\u00e9 pattern . When mipmapping is used, textures will be stored as as a sequence of sub-textures. The original texture is the first sub-texture in the sequence (called mip level 0 ), and every succeeding sub-texture in the sequence is a coarse representation of the previous sub-texture. In particular, for the mip level N sub-texture in the sequence, we have: tex[N].width = ceil(tex[N-1].width / 2.0) tex[N].height = ceil(tex[N-1].height / 2.0) tex[N].depth = ceil(tex[N-1].depth / 2.0) The user may control the number of sub-textures in the mipmap sequence by setting mip_levels . If this is 0 , the system will generate a full mipmap chain for the texture, which repeats the half-divide process until the last sub-texture in the mipmap sequence has width, height and depth all equal to 1 .","title":"Mipmap"},{"location":"manual/rhi/resources/#texture-array","text":"One 1D and 2D texture resource may contain multiple textures, which forms a texture array. The texture size, pixel format, usages and other properties apply to all textures in the texture array. If mipmaping is used, each texture in the texture array will have its independent mipmap chain. One texture array is bound to the pipeline as a single resource, and the user can access each texture of the texture array independently in shader code.","title":"Texture array"},{"location":"manual/rhi/resources/#subresources","text":"Subresources are sub-textures that belongs to one texture resource. One texture resource may have mipmap subresources and/or array subresources, the total number of subresources one texture resource have are mip_levels * array_size . The following figure shows one 8x8 texture resource with 4 mip levels and 3 array elements, which counts to 12 subresources in total. To index one subresource, the user should pass the mip index and array index of the subresource. Every subresource in one texture can be indexed and manipulated independently.","title":"Subresources"},{"location":"manual/rhi/resources/#usage-patterns_1","text":"Here we list some typeical usage patterns for textures.","title":"Usage patterns"},{"location":"manual/rhi/resources/#color-attachments-and-depth-stencil-attachments","text":"Textures can be used as color attachments and depth stencil attachments for render passes. To create one texture used as color attachment, add TextureUsageFlag::color_attachment usage flag to texture usages. To create one texture used as depth stencil attachment, choose one depth format for the texture and add TextureUsageFlag::depth_stencil_attachment usage flag to the texture usages. Attachments usually have both mip_levels and array_size set to 1 . To bind attachments to render passes, firstly set textures in RenderPassDesc , then call ICommandBuffer::begin_render_pass(desc) with the render pass descriptor. Attachments will be bound to the render pass until ICommandBuffer::end_render_pass() is called.","title":"Color attachments and depth stencil attachments"},{"location":"manual/rhi/resources/#static-textures","text":"Static textures store data loaded from image files, such texture is usually used for texturing models in the scene. To create one static texture, firstly add TextureUsageFlag::read_texture and TextureUsageFlag::copy_dest usage flags to texture usages. mip_levels is usually set to 0 to generate a full mipmap chain for such texture. After the texture is created, use copy_resource_data(command_buffer, copies) or upload buffers to upload texture data to the mip 0 of the texture. After the texture is created, we need to generate mipmaps for the texture. This can be done by using a compute shader to downsample from a detailed mip to a coarse mip.","title":"Static textures"},{"location":"manual/rhi/shader_resource_binding/","text":"Shader Resource Binding Shader resources are resources that can be read/written by shader codes. Shader resources have the following types: Uniform buffer, which is a IBuffer that stores constants that can be read by shaders. Read buffer, which is a IBuffer that stores array of structures that can be read by shaders. Read write buffer, which is a IBuffer that stores array of structures that can be read and written by shaders. Read texture, which is a ITexture that can be sampled or read by shaders. Read write texture, which is a ITexture that can be sampled, read and written by shaders. Descriptor sets and descriptor set layouts Shader resources are not bound to the pipeline directly, instead, they should be bound to a descriptor set ( IDescriptorSet ) firstly, then all resources referred by one descriptor set is bound to the pipeline in one call by ICommandBuffer::set_graphics_descriptor_set(index, descriptor_set) or ICommandBuffer::set_compute_descriptor_set(index, descriptor_set) . To create a descriptor set, the user should firstly create one descriptor set layout object ( IDescriptorSetLayout ). The descriptor set layout object describes the type and format of each descriptors in the descriptor set. In order to create one descriptor set layout object, the user should fill DescriptorSetLayoutDesc descriptor first, then call IDevice::new_descriptor_set_layout(desc) , passing the descriptor object. One DescriptorSetLayoutDesc describes several bindings, every binding describes one or an array of resources of the same type that can be accessed by shaders as one parameter entry. One binding is represented by DescriptorSetLayoutBinding , and contains the following properties: binding_slot : The binding number of this binding. Every binding should have one unique binding number. Binding numbers for bindings in the same descriptor set do not need to be continuous, but must be incremental. num_descs : The number of descriptors of this binding. The binding number range [binding_slot, binding_slot + num_descs) is occupied by this binding and cannot overlap with the binding number ranges of other bindings. type : The type of descriptors of this binding. All descriptors in the same binding must have the same type. texture_view_type : The texture view type of descriptors of this binding if type is read_texture_view or read_write_texture_view . All descriptors in the same binding must have the same texture view type. shader_visibility_flags : Specify shaders that have access to resources of this binding. After one descriptor set layout object is created, the user can use this object to create descriptor set objects by calling IDevice::new_descriptor_set(desc) . When creating descriptor set objects, the user should fill one DescriptorSetDesc descriptor object, which is basically only stores one pointer to the descriptor set layout object being used. Unbound descriptor sets In normal cases, the number of descriptors for each binding must be determined when creating descriptor set layout objects. However, if DeviceFeature::unbound_descriptor_array is supported, the number of descriptors of the last binding can be uncertain when creating the descriptor set layout. This allows the user to perform some advanced resource binding techniques, for example, allocate one big descriptor set to bind all resources that might be used in rendering, and select resources in shader code so that meshes using different materials can be rendered without switching descriptor sets, such feature is usually called bindless rendering and is crucial for implemeting GPU-driven rendering. To create one variable descriptor set layout, specify DescriptorSetLayoutFlag::variable_descriptors when creating the descriptor set layout. In such case, num_descs of the last binding specifies the maximum number of descriptors that can be allocated. When creating descriptor sets from one variable descriptor set layout, the user should set DescriptorSetDesc::num_variable_descriptors to a non-zero value, which is the real number of descriptors allocated for the last binding. When using unbound descriptor sets, the shader code does not know the real number of descriptors of the last binding, the user should ensure that the shader code does not index one descriptor that is out of real descriptor array range. Updating descriptor sets After creating descriptor sets, the user can write data to descriptors in descriptor sets. Updating descriptors in descriptor sets are done by IDescriptorSet::update_descriptors(writes) . The user may update multiple descriptors in multiple bindings in one update call, which is described by an array of WriteDescriptorSet structures passed to the update call. Every WriteDescriptorSet structure describes one continuous range of descriptors in the same DescriptorSetLayoutBinding . Based on the type of descriptors to be updated, the user should attach the descriptor array pointer to buffer_views , texture_views or samplers , and set the array size to num_descs . Buffer view descriptor For descriptors with DescriptorType::uniform_buffer_view , DescriptorType::read_buffer_view and DescriptorType::read_write_buffer_view types, buffer view descriptors ( BufferViewDesc ) are used to update descriptors' data. One buffer view descriptor can restrain shader to access only one portion of the buffer, so that multiple data sections can be packed into one buffer and viewed by different view descriptors. Uniform buffer For uniform buffers, the user should use BufferViewDesc::first_element to specify the byte offset from the beginning of the buffer data to the first byte to be used, and BufferViewDesc::element_size to specify the size of the uniform buffer data to be used. The offset and size of one uniform data must satisfy hardware alignment requirements, which can be fetched by IDevice::get_uniform_buffer_data_alignment() . The user may use BufferViewDesc::uniform_buffer(buffer, offset, size) static constructor to create one BufferViewDesc for one uniform buffer descriptor quickly. Structured buffer For read buffers and read-write buffers, the user should use BufferViewDesc::element_size to specify the size of each element in the buffer, BufferViewDesc::first_element to specify the index of the first element to be used, and BufferViewDesc::element_count to specify the number of elements to be used. The user may use BufferViewDesc::structured_buffer(buffer, first_element, element_count, element_size) static constructor to create one BufferViewDesc for one read buffer/read-write buffer descriptor quickly. Texture view descriptor For descriptors with DescriptorType::read_texture_view and DescriptorType::read_write_texture_view types, texture view descriptors ( TextureViewDesc ) are used to update descriptors' data. One texture view descriptor can restrain shader to access only a certain range of subresources of the texture, so that different subresources of one texture may be bound to the same or different pipeline using different texture views. Texture view type TextureViewDesc::type specifies the texture view type, which has the following options: Option Texture type Array Multisample Cube tex1d 1D texture No No No tex2d 2D texture No No No tex2dms 2D texture No Yes No tex3d 3D texture No No No texcube 2D texture No No Yes tex1darray 1D texture Yes No No tex2darray 2D texture Yes No No tex2dmsarray 2D texture Yes Yes No texcubearray 2D texture Yes No Yes The texture view type of one texture view must be compatible with the viewing texture. For example, you cannot bind one 2D texture with TextureViewType::tex1d texture view. If you don't know the exact texture view type to use, you can specify TextureViewType::unspecified to let the system to choose one shitable texture view type based on the binding texture and view settings. Texture view format TextureViewDesc::format tells the pipeline how to interpret data for one texture. When supported by the backend, one texture view may specify one format that is different than the native format of the binding texture, which will let the driver to reinterpret texture data when accessing textures. If format reinterpreting is not supported by the driver, the user must specify the same format for both texture and texture view. The texture view format can be Format::unknown , which tells the system to use the binding texture's native format as the texture view format. Mip and array slice TextureViewDesc::mip_slice and TextureViewDesc::mip_size specifies the mip range [mip\\_slice, mip\\_slice + mip\\_size) that will be bind to the pipeline. After specified, TextureViewDesc::mip_slice becomes the mip level 0 in shader code. TextureViewDesc::mip_size must be 1 for tex2dms and tex2dmsarray views, and views used for read-write texture descriptors. TextureViewDesc::mip_size may be U32_MAX , which tells the system to use all available mips since TextureViewDesc::mip_slice . TextureViewDesc::array_slice and TextureViewDesc::array_size specifies the array range [array\\_slice, array\\_slice + array\\_size) that will be bind to the pipeline. After specified, TextureViewDesc::array_slice becomes the first array element in shader code. TextureViewDesc::array_slice must be 0 for non-array texture views, TextureViewDesc::array_size must be: 1 for tex1d , tex2d , tex2dms and tex3d views. 6 for texcube views. times of 6 for texcubearray views. TextureViewDesc::array_size may be U32_MAX , which tells the system to use all available array elements since TextureViewDesc::array_slice . Static constructors The user may use the following static constructors to declare texture views of different types quickly: TextureViewDesc::tex1d(texture, format, mip_slice, mip_size) TextureViewDesc::tex1darray(texture, format, mip_slice, mip_size, array_slice, array_size) TextureViewDesc::tex2d(texture, format, mip_slice, mip_size) TextureViewDesc::tex2darray(texture, format, mip_slice, mip_size, array_slice, array_size) TextureViewDesc::tex2dms(texture, format) TextureViewDesc::tex2dmsarray(texture, format, array_slice, array_size) TextureViewDesc::tex3d(texture, format, mip_slice, mip_size) TextureViewDesc::texcube(texture, format, mip_slice, mip_size) TextureViewDesc::texcubearray(texture, format, mip_slice, mip_size, array_slice, array_size) Sampler descriptor For descriptors with DescriptorType::sampler type, sampler descriptors ( SamplerDesc ) are used to update descriptors' data. One sampler descriptor describes sampling configurations that shaders can use to sample textures. Pipeline layouts Pipeline layouts ( IPipelineLayout ) describes the descriptor sets binding layout for one graphics or compute pipeline. Before descriptor sets are attached to one pipeline, its pipeline layout must be set firstly by ICommandBuffer::set_graphics_pipeline_layout(pipeline_layout) or ICommandBuffer::set_compute_pipeline_layout(pipeline_layout) . To create one pipeline layout, the user should fill one pipeline layout descriptor object ( PipelineLayoutDesc ), and pass the object to IDevice::new_pipeline_layout(desc) . When configuring PipelineLayoutDesc , the user should specify the number of descriptor sets that will be attached to the pipeline, and the descriptor set layout of every descriptor set. The user can also use PipelineLayoutFlag to control shaders and stages that can access bound resources, dening shaders and stages access to resources may improve performance on some hardwares. Binding descriptor sets Once descriptors in descriptor sets are updated, the user can bind descriptor sets to pipelines so that all resources and configurations stored in descriptor sets are used in succeeding draw or dispatch calls. Binding descriptor sets to pipelines are achieved via ICommandBuffer::set_graphics_descriptor_set(index, descriptor_set) or ICommandBuffer::set_graphics_descriptor_sets(start_index, descriptor_sets) for graphics pipelines, and ICommandBuffer::set_compute_descriptor_set(index, descriptor_set) or ICommandBuffer::set_compute_descriptor_sets(start_index, descriptor_sets) for compute pipelines. Compatible pipeline layout must be set to the pipelines before binding descriptor sets. After one descriptor set is bound to one pipeline, the user cannot update descriptors in the descriptor set or bind the same descriptor set to another pipeline until the command buffer is finished executing or reset. If one pipeline have multiple descriptor sets, every descriptor set can be bound independently using dedicated binding calls, and descriptor sets bound to the pipeline stays bound until changed by another binding call, or the render or compute pass is closed.","title":"Shader Resource Binding"},{"location":"manual/rhi/shader_resource_binding/#shader-resource-binding","text":"Shader resources are resources that can be read/written by shader codes. Shader resources have the following types: Uniform buffer, which is a IBuffer that stores constants that can be read by shaders. Read buffer, which is a IBuffer that stores array of structures that can be read by shaders. Read write buffer, which is a IBuffer that stores array of structures that can be read and written by shaders. Read texture, which is a ITexture that can be sampled or read by shaders. Read write texture, which is a ITexture that can be sampled, read and written by shaders.","title":"Shader Resource Binding"},{"location":"manual/rhi/shader_resource_binding/#descriptor-sets-and-descriptor-set-layouts","text":"Shader resources are not bound to the pipeline directly, instead, they should be bound to a descriptor set ( IDescriptorSet ) firstly, then all resources referred by one descriptor set is bound to the pipeline in one call by ICommandBuffer::set_graphics_descriptor_set(index, descriptor_set) or ICommandBuffer::set_compute_descriptor_set(index, descriptor_set) . To create a descriptor set, the user should firstly create one descriptor set layout object ( IDescriptorSetLayout ). The descriptor set layout object describes the type and format of each descriptors in the descriptor set. In order to create one descriptor set layout object, the user should fill DescriptorSetLayoutDesc descriptor first, then call IDevice::new_descriptor_set_layout(desc) , passing the descriptor object. One DescriptorSetLayoutDesc describes several bindings, every binding describes one or an array of resources of the same type that can be accessed by shaders as one parameter entry. One binding is represented by DescriptorSetLayoutBinding , and contains the following properties: binding_slot : The binding number of this binding. Every binding should have one unique binding number. Binding numbers for bindings in the same descriptor set do not need to be continuous, but must be incremental. num_descs : The number of descriptors of this binding. The binding number range [binding_slot, binding_slot + num_descs) is occupied by this binding and cannot overlap with the binding number ranges of other bindings. type : The type of descriptors of this binding. All descriptors in the same binding must have the same type. texture_view_type : The texture view type of descriptors of this binding if type is read_texture_view or read_write_texture_view . All descriptors in the same binding must have the same texture view type. shader_visibility_flags : Specify shaders that have access to resources of this binding. After one descriptor set layout object is created, the user can use this object to create descriptor set objects by calling IDevice::new_descriptor_set(desc) . When creating descriptor set objects, the user should fill one DescriptorSetDesc descriptor object, which is basically only stores one pointer to the descriptor set layout object being used.","title":"Descriptor sets and descriptor set layouts"},{"location":"manual/rhi/shader_resource_binding/#unbound-descriptor-sets","text":"In normal cases, the number of descriptors for each binding must be determined when creating descriptor set layout objects. However, if DeviceFeature::unbound_descriptor_array is supported, the number of descriptors of the last binding can be uncertain when creating the descriptor set layout. This allows the user to perform some advanced resource binding techniques, for example, allocate one big descriptor set to bind all resources that might be used in rendering, and select resources in shader code so that meshes using different materials can be rendered without switching descriptor sets, such feature is usually called bindless rendering and is crucial for implemeting GPU-driven rendering. To create one variable descriptor set layout, specify DescriptorSetLayoutFlag::variable_descriptors when creating the descriptor set layout. In such case, num_descs of the last binding specifies the maximum number of descriptors that can be allocated. When creating descriptor sets from one variable descriptor set layout, the user should set DescriptorSetDesc::num_variable_descriptors to a non-zero value, which is the real number of descriptors allocated for the last binding. When using unbound descriptor sets, the shader code does not know the real number of descriptors of the last binding, the user should ensure that the shader code does not index one descriptor that is out of real descriptor array range.","title":"Unbound descriptor sets"},{"location":"manual/rhi/shader_resource_binding/#updating-descriptor-sets","text":"After creating descriptor sets, the user can write data to descriptors in descriptor sets. Updating descriptors in descriptor sets are done by IDescriptorSet::update_descriptors(writes) . The user may update multiple descriptors in multiple bindings in one update call, which is described by an array of WriteDescriptorSet structures passed to the update call. Every WriteDescriptorSet structure describes one continuous range of descriptors in the same DescriptorSetLayoutBinding . Based on the type of descriptors to be updated, the user should attach the descriptor array pointer to buffer_views , texture_views or samplers , and set the array size to num_descs .","title":"Updating descriptor sets"},{"location":"manual/rhi/shader_resource_binding/#buffer-view-descriptor","text":"For descriptors with DescriptorType::uniform_buffer_view , DescriptorType::read_buffer_view and DescriptorType::read_write_buffer_view types, buffer view descriptors ( BufferViewDesc ) are used to update descriptors' data. One buffer view descriptor can restrain shader to access only one portion of the buffer, so that multiple data sections can be packed into one buffer and viewed by different view descriptors.","title":"Buffer view descriptor"},{"location":"manual/rhi/shader_resource_binding/#uniform-buffer","text":"For uniform buffers, the user should use BufferViewDesc::first_element to specify the byte offset from the beginning of the buffer data to the first byte to be used, and BufferViewDesc::element_size to specify the size of the uniform buffer data to be used. The offset and size of one uniform data must satisfy hardware alignment requirements, which can be fetched by IDevice::get_uniform_buffer_data_alignment() . The user may use BufferViewDesc::uniform_buffer(buffer, offset, size) static constructor to create one BufferViewDesc for one uniform buffer descriptor quickly.","title":"Uniform buffer"},{"location":"manual/rhi/shader_resource_binding/#structured-buffer","text":"For read buffers and read-write buffers, the user should use BufferViewDesc::element_size to specify the size of each element in the buffer, BufferViewDesc::first_element to specify the index of the first element to be used, and BufferViewDesc::element_count to specify the number of elements to be used. The user may use BufferViewDesc::structured_buffer(buffer, first_element, element_count, element_size) static constructor to create one BufferViewDesc for one read buffer/read-write buffer descriptor quickly.","title":"Structured buffer"},{"location":"manual/rhi/shader_resource_binding/#texture-view-descriptor","text":"For descriptors with DescriptorType::read_texture_view and DescriptorType::read_write_texture_view types, texture view descriptors ( TextureViewDesc ) are used to update descriptors' data. One texture view descriptor can restrain shader to access only a certain range of subresources of the texture, so that different subresources of one texture may be bound to the same or different pipeline using different texture views.","title":"Texture view descriptor"},{"location":"manual/rhi/shader_resource_binding/#texture-view-type","text":"TextureViewDesc::type specifies the texture view type, which has the following options: Option Texture type Array Multisample Cube tex1d 1D texture No No No tex2d 2D texture No No No tex2dms 2D texture No Yes No tex3d 3D texture No No No texcube 2D texture No No Yes tex1darray 1D texture Yes No No tex2darray 2D texture Yes No No tex2dmsarray 2D texture Yes Yes No texcubearray 2D texture Yes No Yes The texture view type of one texture view must be compatible with the viewing texture. For example, you cannot bind one 2D texture with TextureViewType::tex1d texture view. If you don't know the exact texture view type to use, you can specify TextureViewType::unspecified to let the system to choose one shitable texture view type based on the binding texture and view settings.","title":"Texture view type"},{"location":"manual/rhi/shader_resource_binding/#texture-view-format","text":"TextureViewDesc::format tells the pipeline how to interpret data for one texture. When supported by the backend, one texture view may specify one format that is different than the native format of the binding texture, which will let the driver to reinterpret texture data when accessing textures. If format reinterpreting is not supported by the driver, the user must specify the same format for both texture and texture view. The texture view format can be Format::unknown , which tells the system to use the binding texture's native format as the texture view format.","title":"Texture view format"},{"location":"manual/rhi/shader_resource_binding/#mip-and-array-slice","text":"TextureViewDesc::mip_slice and TextureViewDesc::mip_size specifies the mip range [mip\\_slice, mip\\_slice + mip\\_size) that will be bind to the pipeline. After specified, TextureViewDesc::mip_slice becomes the mip level 0 in shader code. TextureViewDesc::mip_size must be 1 for tex2dms and tex2dmsarray views, and views used for read-write texture descriptors. TextureViewDesc::mip_size may be U32_MAX , which tells the system to use all available mips since TextureViewDesc::mip_slice . TextureViewDesc::array_slice and TextureViewDesc::array_size specifies the array range [array\\_slice, array\\_slice + array\\_size) that will be bind to the pipeline. After specified, TextureViewDesc::array_slice becomes the first array element in shader code. TextureViewDesc::array_slice must be 0 for non-array texture views, TextureViewDesc::array_size must be: 1 for tex1d , tex2d , tex2dms and tex3d views. 6 for texcube views. times of 6 for texcubearray views. TextureViewDesc::array_size may be U32_MAX , which tells the system to use all available array elements since TextureViewDesc::array_slice .","title":"Mip and array slice"},{"location":"manual/rhi/shader_resource_binding/#static-constructors","text":"The user may use the following static constructors to declare texture views of different types quickly: TextureViewDesc::tex1d(texture, format, mip_slice, mip_size) TextureViewDesc::tex1darray(texture, format, mip_slice, mip_size, array_slice, array_size) TextureViewDesc::tex2d(texture, format, mip_slice, mip_size) TextureViewDesc::tex2darray(texture, format, mip_slice, mip_size, array_slice, array_size) TextureViewDesc::tex2dms(texture, format) TextureViewDesc::tex2dmsarray(texture, format, array_slice, array_size) TextureViewDesc::tex3d(texture, format, mip_slice, mip_size) TextureViewDesc::texcube(texture, format, mip_slice, mip_size) TextureViewDesc::texcubearray(texture, format, mip_slice, mip_size, array_slice, array_size)","title":"Static constructors"},{"location":"manual/rhi/shader_resource_binding/#sampler-descriptor","text":"For descriptors with DescriptorType::sampler type, sampler descriptors ( SamplerDesc ) are used to update descriptors' data. One sampler descriptor describes sampling configurations that shaders can use to sample textures.","title":"Sampler descriptor"},{"location":"manual/rhi/shader_resource_binding/#pipeline-layouts","text":"Pipeline layouts ( IPipelineLayout ) describes the descriptor sets binding layout for one graphics or compute pipeline. Before descriptor sets are attached to one pipeline, its pipeline layout must be set firstly by ICommandBuffer::set_graphics_pipeline_layout(pipeline_layout) or ICommandBuffer::set_compute_pipeline_layout(pipeline_layout) . To create one pipeline layout, the user should fill one pipeline layout descriptor object ( PipelineLayoutDesc ), and pass the object to IDevice::new_pipeline_layout(desc) . When configuring PipelineLayoutDesc , the user should specify the number of descriptor sets that will be attached to the pipeline, and the descriptor set layout of every descriptor set. The user can also use PipelineLayoutFlag to control shaders and stages that can access bound resources, dening shaders and stages access to resources may improve performance on some hardwares.","title":"Pipeline layouts"},{"location":"manual/rhi/shader_resource_binding/#binding-descriptor-sets","text":"Once descriptors in descriptor sets are updated, the user can bind descriptor sets to pipelines so that all resources and configurations stored in descriptor sets are used in succeeding draw or dispatch calls. Binding descriptor sets to pipelines are achieved via ICommandBuffer::set_graphics_descriptor_set(index, descriptor_set) or ICommandBuffer::set_graphics_descriptor_sets(start_index, descriptor_sets) for graphics pipelines, and ICommandBuffer::set_compute_descriptor_set(index, descriptor_set) or ICommandBuffer::set_compute_descriptor_sets(start_index, descriptor_sets) for compute pipelines. Compatible pipeline layout must be set to the pipelines before binding descriptor sets. After one descriptor set is bound to one pipeline, the user cannot update descriptors in the descriptor set or bind the same descriptor set to another pipeline until the command buffer is finished executing or reset. If one pipeline have multiple descriptor sets, every descriptor set can be bound independently using dedicated binding calls, and descriptor sets bound to the pipeline stays bound until changed by another binding call, or the render or compute pass is closed.","title":"Binding descriptor sets"}]}